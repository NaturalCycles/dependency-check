{"NPM":{"packages":[],"licenses":[]},"POM":{"packages":[{"id":"annotations-java5@20.1.0","groupId":"org.jetbrains","artifactId":"annotations-java5","version":"20.1.0","name":"JetBrains Java Annotations","description":"Annotations for JVM-based languages.","licenses":{"license":{"name":"The Apache Software License, Version 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.txt","distribution":"repo"}},"github":"https://github.com/JetBrains/java-annotations","latestVersion":"22.0.0","issues":[{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/62","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/62/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/62/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/62/events","html_url":"https://github.com/JetBrains/java-annotations/issues/62","id":1026982470,"node_id":"I_kwDOB0FUWc49NoJG","number":62,"title":"Add key to PGP keys map","user":{"login":"silnith","id":16807906,"node_id":"MDQ6VXNlcjE2ODA3OTA2","avatar_url":"https://avatars.githubusercontent.com/u/16807906?v=4","gravatar_id":"","url":"https://api.github.com/users/silnith","html_url":"https://github.com/silnith","followers_url":"https://api.github.com/users/silnith/followers","following_url":"https://api.github.com/users/silnith/following{/other_user}","gists_url":"https://api.github.com/users/silnith/gists{/gist_id}","starred_url":"https://api.github.com/users/silnith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/silnith/subscriptions","organizations_url":"https://api.github.com/users/silnith/orgs","repos_url":"https://api.github.com/users/silnith/repos","events_url":"https://api.github.com/users/silnith/events{/privacy}","received_events_url":"https://api.github.com/users/silnith/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-15T01:28:31Z","updated_at":"2021-10-15T01:28:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Maven Central requires all published artifacts to be [signed using PGP](https://maven.apache.org/repository/guide-central-repository-upload.html#pgp-signature). If a publisher provides their key ID to [PGP keys map](https://github.com/s4u/pgp-keys-map) then end users can use the [Verify PGP signatures plugin](https://github.com/s4u/pgpverify-maven-plugin) to validate that the artifact has not been altered or replaced as part of a supply-chain attack.\r\n","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/62/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/62/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/59","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/59/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/59/events","html_url":"https://github.com/JetBrains/java-annotations/issues/59","id":978977228,"node_id":"MDU6SXNzdWU5Nzg5NzcyMjg=","number":59,"title":"Alternative for Kotlin's `replaceWith`","user":{"login":"kezz","id":1526243,"node_id":"MDQ6VXNlcjE1MjYyNDM=","avatar_url":"https://avatars.githubusercontent.com/u/1526243?v=4","gravatar_id":"","url":"https://api.github.com/users/kezz","html_url":"https://github.com/kezz","followers_url":"https://api.github.com/users/kezz/followers","following_url":"https://api.github.com/users/kezz/following{/other_user}","gists_url":"https://api.github.com/users/kezz/gists{/gist_id}","starred_url":"https://api.github.com/users/kezz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kezz/subscriptions","organizations_url":"https://api.github.com/users/kezz/orgs","repos_url":"https://api.github.com/users/kezz/repos","events_url":"https://api.github.com/users/kezz/events{/privacy}","received_events_url":"https://api.github.com/users/kezz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-25T10:25:21Z","updated_at":"2021-08-25T10:25:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It would be really nice to have an annotation, perhaps `@ApiStatus.SuggestedAlternative`, `@ApiStatus.UseInstead` or `@ApiStatus.ReplaceWith` that used the same internal logic as Kotlin's deprecation system to allow Java developers to provide alternatives to deprecated elements that can be picked up by an IDE.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/59/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/59/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/54","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/54/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/54/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/54/events","html_url":"https://github.com/JetBrains/java-annotations/issues/54","id":941244440,"node_id":"MDU6SXNzdWU5NDEyNDQ0NDA=","number":54,"title":"Ability to hint proper parameter names for functional interfaces","user":{"login":"TheMode","id":8581638,"node_id":"MDQ6VXNlcjg1ODE2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/8581638?v=4","gravatar_id":"","url":"https://api.github.com/users/TheMode","html_url":"https://github.com/TheMode","followers_url":"https://api.github.com/users/TheMode/followers","following_url":"https://api.github.com/users/TheMode/following{/other_user}","gists_url":"https://api.github.com/users/TheMode/gists{/gist_id}","starred_url":"https://api.github.com/users/TheMode/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TheMode/subscriptions","organizations_url":"https://api.github.com/users/TheMode/orgs","repos_url":"https://api.github.com/users/TheMode/repos","events_url":"https://api.github.com/users/TheMode/events{/privacy}","received_events_url":"https://api.github.com/users/TheMode/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-10T12:51:49Z","updated_at":"2021-07-10T12:56:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am (re)-using multiple common functional interfaces in my code, and the parameter names sometimes do not properly match the intent. For example `DoubleUnaryOperator` taking a double generically named `operand`.\r\n\r\nI believe there could be an annotation hinting the IDE into using our own name\r\n```java\r\n// What is currently suggested\r\nVec.ZERO.withX(operand -> operand * 5);\r\n// With hint\r\nVec.ZERO.withX(x -> x * 5);\r\n\r\n// Similar example using UnaryOperator\r\n// What is currently suggested\r\nitemBuilder.meta(itemMetaBuilder -> itemMetaBuilder);\r\n// With hint\r\nitemBuilder.meta(metaBuilder -> metaBuilder);\r\n```\r\n\r\nThe alternative would be creating my own interfaces, which feels a bit unnecessary.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/54/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/54/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/53","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/53/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/53/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/53/events","html_url":"https://github.com/JetBrains/java-annotations/issues/53","id":935645775,"node_id":"MDU6SXNzdWU5MzU2NDU3NzU=","number":53,"title":"Add @NotNullByDefault annotation","user":{"login":"Abnaxos","id":659778,"node_id":"MDQ6VXNlcjY1OTc3OA==","avatar_url":"https://avatars.githubusercontent.com/u/659778?v=4","gravatar_id":"","url":"https://api.github.com/users/Abnaxos","html_url":"https://github.com/Abnaxos","followers_url":"https://api.github.com/users/Abnaxos/followers","following_url":"https://api.github.com/users/Abnaxos/following{/other_user}","gists_url":"https://api.github.com/users/Abnaxos/gists{/gist_id}","starred_url":"https://api.github.com/users/Abnaxos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Abnaxos/subscriptions","organizations_url":"https://api.github.com/users/Abnaxos/orgs","repos_url":"https://api.github.com/users/Abnaxos/repos","events_url":"https://api.github.com/users/Abnaxos/events{/privacy}","received_events_url":"https://api.github.com/users/Abnaxos/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-02T10:37:30Z","updated_at":"2021-07-02T10:37:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It's badly needed. Since years, I have a strict NotNull policy in all of my code, so I simply annotate the whole package. Everyone knows this policy is intact, it's just about telling the IDE as well. If I annotate my `NotNull` code with `NotNull`, whenever `NotNull` is appropriate, my `NotNull` code basically consists of only `NotNull` with some occasional actual `NotNull` code between all the `NotNull` annotations from time to time. :)\r\n\r\nCurrently, I fix this by mixing with Eclipse's `NonNullByDefault` (unfortunately, Eclipse's `NonNull` and `Nullable` aren't applicable to methods, fields and parameters (`Target({ElementType.TYPE_USE})`), so I have to use JetBrains annotations for this).\r\n\r\nThe new annotation should be applicable to packages and classes, maybe also methods. I personally don't care about using it in types, but other people's mileage may vary. Specifying to what elements exactly it applies (methods, fields and/or parameters, maybe also type use) isn't strictly necessary for me, but probably makes sense. I'd suggest to default to all of them or no default at all.\r\n\r\nThis would also cover #18.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/53/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/53/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/52","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/52/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/52/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/52/events","html_url":"https://github.com/JetBrains/java-annotations/issues/52","id":911424409,"node_id":"MDU6SXNzdWU5MTE0MjQ0MDk=","number":52,"title":"Consider removal of JdkConstants","user":{"login":"kashike","id":5474071,"node_id":"MDQ6VXNlcjU0NzQwNzE=","avatar_url":"https://avatars.githubusercontent.com/u/5474071?v=4","gravatar_id":"","url":"https://api.github.com/users/kashike","html_url":"https://github.com/kashike","followers_url":"https://api.github.com/users/kashike/followers","following_url":"https://api.github.com/users/kashike/following{/other_user}","gists_url":"https://api.github.com/users/kashike/gists{/gist_id}","starred_url":"https://api.github.com/users/kashike/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kashike/subscriptions","organizations_url":"https://api.github.com/users/kashike/orgs","repos_url":"https://api.github.com/users/kashike/repos","events_url":"https://api.github.com/users/kashike/events{/privacy}","received_events_url":"https://api.github.com/users/kashike/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-04T11:53:33Z","updated_at":"2021-06-04T11:53:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The project currently has a `requires` directive for `java.desktop` in module-info due to the usage of AWT/Swing classes: \r\nhttps://github.com/JetBrains/java-annotations/blob/4f3de31e8fe2764dcd137a64ffcafa49db2e541c/common/src/main/java/org/intellij/lang/annotations/JdkConstants.java#L26-L32","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/52/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/52/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/51","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/51/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/51/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/51/events","html_url":"https://github.com/JetBrains/java-annotations/issues/51","id":910902237,"node_id":"MDU6SXNzdWU5MTA5MDIyMzc=","number":51,"title":"Docs: @Nullable/@NotNull on a type declaration?","user":{"login":"CasualSuperman","id":516927,"node_id":"MDQ6VXNlcjUxNjkyNw==","avatar_url":"https://avatars.githubusercontent.com/u/516927?v=4","gravatar_id":"","url":"https://api.github.com/users/CasualSuperman","html_url":"https://github.com/CasualSuperman","followers_url":"https://api.github.com/users/CasualSuperman/followers","following_url":"https://api.github.com/users/CasualSuperman/following{/other_user}","gists_url":"https://api.github.com/users/CasualSuperman/gists{/gist_id}","starred_url":"https://api.github.com/users/CasualSuperman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/CasualSuperman/subscriptions","organizations_url":"https://api.github.com/users/CasualSuperman/orgs","repos_url":"https://api.github.com/users/CasualSuperman/repos","events_url":"https://api.github.com/users/CasualSuperman/events{/privacy}","received_events_url":"https://api.github.com/users/CasualSuperman/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-03T22:15:24Z","updated_at":"2021-06-04T02:37:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The documentation for `@Nullable` and `@NotNull` explicitly state the actions that these annotations apply to when used with methods, parameters, and variables/fields, but don't mention what it means when these annotations are used on a class. \r\n> An element annotated with Nullable claims null value is perfectly valid to return (for methods), pass to (parameters) or hold in (local variables and fields). \r\n\r\nI tried annotating a class with `@NotNull` and `@Nullable` to see if IntelliJ's static analysis could provide hints about what's expected, but no warnings were generated for anything I did with it (beyond some \"always-true\" warnings for various combinations, but these were also generated without the class-level annotation). I've included the class below and documented my assumptions as a sanity-check.\r\n\r\nI can think of two possible (likely) meanings:\r\n1. Variables, fields, parameters. and returns declared as the annotated type should default to the annotated nullability\r\n2. The fields, parameters, and/or return types _within_ the annotated type should default to the annotated nullability\r\n\r\nFor the first option, I'm unsure what it would mean to apply `@NotNull` to a class given the strict constraints on using it with, for example, `Map::get`. There's no way a class can ever _guarantee_ that it can or cannot be null everywhere it's used[*], since anyone can write `MyClass myClass = null;` (although that could generate a warning). However, if the strictness for using these annotations is more relaxed than with fields/methods/etc. and is more of a suggestion, then perhaps `java.util.Optional` should be annotated with `@NotNull`?\r\n\r\nThe second option also seems _possible_ given my experience with other projects, but unlikely. Some class-level annotations are \"distributed\" into the class, such as Lombok's `@Getter`). However, I don't know of any annotation libraries that treat `@Nullable`/`@NotNull` this way, so I wouldn't assume that's how this annotation behaves. Plus, given the stance in #18, it seems this kind of functionality isn't desired (at least by JetBrains).\r\n\r\nThe [official Javadoc](https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/ElementType.html) for `ElementType` specifically mentions a hypothetical `@NonNull` annotation applied to a class via `TYPE_USE`, but I'm not clear on what it's trying to say.\r\n> The `TYPE_USE` constant includes class and interface declarations and type parameter declarations as a convenience for designers of type checkers which give semantics to annotation interfaces. For example, if the annotation interface `NonNull` is meta-annotated with `@Target(ElementType.TYPE_USE)`, then `@NonNull class C {...}` could be treated by a type checker as indicating that all variables of class `C` are non-null, while still allowing variables of other classes to be non-null or not non-null based on whether `@NonNull` appears at the variable's declaration.\r\n\r\nDoes \"variables of class C\" refer to variables declared _within_ class C, or variables with a _type_ of C? I believe it's the latter, but IntelliJ's code analysis doesn't appear to use this information in this way (or at all).\r\n\r\nIn summary, what I'm requesting is:\r\n\r\n1. Clarification of which of the scenarios in the example should be influenced by a type-level nullity annotation (plus any obvious ones I missed)\r\n2. Updates to the documentation for `@NotNull`/`@Nullable` with the expected semantics (or lack thereof?) of annotating a type declaration with these annotations\r\n3. If any of the scenarios _should_ be influenced, I'd like IntelliJ's static analysis updated to report them.\r\n\r\n[*] Ignoring Project Valalla, but from my understanding we would already be able to detect that a class is `inline` without an annotation\r\n\r\nTested using Java 8 & 11 with IntelliJ Ultimate 2021.1.2:\r\n```java\r\nimport java.util.concurrent.ThreadLocalRandom;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\n@NotNull\r\npublic class Example {\r\n\tprivate Integer field1;\r\n\tprivate int     field2;\r\n\r\n\t// Class-level @NotNull doesn't seem to influence fields, since this assignment doesn't produce a warning\r\n\tpublic void setField1(@Nullable Integer value) {\r\n\t\tthis.field1 = value;\r\n\t}\r\n\r\n\t// Class-level @NotNull/@Nullable don't seem to influence method parameters, since this (questionably) doesn't\r\n\t// produce a warning with either class annotation, nor with an absent class-level annotation.\r\n\tpublic void setField2(Integer value) {\r\n\t\tthis.field2 = value;\r\n\t}\r\n\r\n\tprotected Boolean validate() {\r\n\t\tInteger value1 = this.field1;\r\n\t\tInteger value2 = this.field2;\r\n\t\t// This is included solely to prevent an unavoidable constant conditions warning on the return, since\r\n\t\t// field2 is a primitive. I'm avoiding a suppression comment so that other warnings can still appear.\r\n\t\tif (ThreadLocalRandom.current().nextBoolean()) {\r\n\t\t\tvalue2 = this.field1;\r\n\t\t}\r\n\t\t// Class-level @NotNull doesn't seem to influence method return types, since possibly returning null\r\n\t\t// here doesn't produce a warning when the class is annotated with @NotNull.\r\n\t\treturn (value2 != null && value1 == null) ? null : true;\r\n\t}\r\n\r\n\t// Annotating the following method's parameter with @NotNull/@Nullable does not produce any warnings beyond\r\n\t// the null-check when the parameter is @NotNull, so a parameter of the annotated class's type doesn't appear\r\n\t// to default to the type's annotation, nor is a conflicting declaration considered invalid.\r\n\r\n\t// If nullity was expected to match the type's annotation, this would produce a warning if the parameter was\r\n\t// annotated with the opposite annotation.\r\n\tpublic static boolean validate(Example example) {\r\n\t\t// If parameter nullity was inherited from the parameter's type in the absence of an explicit\r\n\t\t// annotation this would produce a warning when the type was annotated @NotNull, even when\r\n\t\t// the parameter doesn't have an annotation\r\n\t\tif (example == null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Likewise, if the previous null check is removed and the class is annotated @Nullable, this would\r\n\t\t// produce a warning if nullity is inherited, but it does not, so @Nullable is also not inherited.\r\n\t\tBoolean value = example.validate();\r\n\t\tif (value == null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t// Annotating the following method's return type with @NotNull/@Nullable does not produce warnings beyond\r\n\t// returning null when the method is @NotNull, so a return type's nullity doesn't appear to default to the\r\n\t// type's annotation, nor is a conflicting declaration considered invalid.\r\n\r\n\t// If nullity was expected to match the class's annotation, this would produce a warning when the return\r\n\t// type was annotated the opposite annotation.\r\n\tpublic static Example create() {\r\n\t\tExample ex = new Example();\r\n\t\tif (ex.validate() == Boolean.TRUE) {\r\n\t\t\treturn ex;\r\n\t\t}\r\n\t\t// If nullity for return types defaulted to the type's nullity, this would produce a warning when the\r\n\t\t// type was annotated @NotNull.\r\n\t\treturn null;\r\n\t}\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/51/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/51/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/45","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/45/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/45/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/45/events","html_url":"https://github.com/JetBrains/java-annotations/issues/45","id":865741719,"node_id":"MDU6SXNzdWU4NjU3NDE3MTk=","number":45,"title":"@CalledFromNative annotation","user":{"login":"amaembo","id":5114450,"node_id":"MDQ6VXNlcjUxMTQ0NTA=","avatar_url":"https://avatars.githubusercontent.com/u/5114450?v=4","gravatar_id":"","url":"https://api.github.com/users/amaembo","html_url":"https://github.com/amaembo","followers_url":"https://api.github.com/users/amaembo/followers","following_url":"https://api.github.com/users/amaembo/following{/other_user}","gists_url":"https://api.github.com/users/amaembo/gists{/gist_id}","starred_url":"https://api.github.com/users/amaembo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amaembo/subscriptions","organizations_url":"https://api.github.com/users/amaembo/orgs","repos_url":"https://api.github.com/users/amaembo/repos","events_url":"https://api.github.com/users/amaembo/events{/privacy}","received_events_url":"https://api.github.com/users/amaembo/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-04-23T04:55:43Z","updated_at":"2021-08-12T21:13:43Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"From https://youtrack.jetbrains.com/issue/IDEA-163737:\r\n\r\nA very usefull annotation would be a `@CalledFromNative` that would be used to mark class methods that are meant to be called from native code. This annotation would allow for suppressing of the \"method is never used\" inspection and would in general help in clarifying the code. This would especially be useful in Android (Studio) projects that mix java and native code.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/45/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/45/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/43","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/43/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/43/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/43/events","html_url":"https://github.com/JetBrains/java-annotations/issues/43","id":812889440,"node_id":"MDU6SXNzdWU4MTI4ODk0NDA=","number":43,"title":"@Language should be applicable as a type-annotation.","user":{"login":"JarvisCraft","id":7693005,"node_id":"MDQ6VXNlcjc2OTMwMDU=","avatar_url":"https://avatars.githubusercontent.com/u/7693005?v=4","gravatar_id":"","url":"https://api.github.com/users/JarvisCraft","html_url":"https://github.com/JarvisCraft","followers_url":"https://api.github.com/users/JarvisCraft/followers","following_url":"https://api.github.com/users/JarvisCraft/following{/other_user}","gists_url":"https://api.github.com/users/JarvisCraft/gists{/gist_id}","starred_url":"https://api.github.com/users/JarvisCraft/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JarvisCraft/subscriptions","organizations_url":"https://api.github.com/users/JarvisCraft/orgs","repos_url":"https://api.github.com/users/JarvisCraft/repos","events_url":"https://api.github.com/users/JarvisCraft/events{/privacy}","received_events_url":"https://api.github.com/users/JarvisCraft/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-21T16:10:25Z","updated_at":"2021-06-14T17:36:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"# Description\r\n\r\n`@Target` `ElementType.TYPE_USE` may be added to `@Language` annotation to allow its usage in applicablecontexts.\r\n\r\n# Example\r\n\r\nCurrently the following example won't compile although it is logical:\r\n```java\r\nprivate final @NotNull Map<@NotNull NamespacedKey, @Language(\"json\") @NotNull String> addedAdvancements;\r\n```\r\n\r\nAnother positive side is that while currently IntelliJ warns on incorrect order in the following case:\r\n```java\r\npublic void addAdvancement(final @NotNull NamespacedKey key,\r\n                           final @Language(\"json\") @NotNull String advancementJson) { /* ... */ }\r\n```\r\nsuggesting swapping of `final` and `@Language(\"json\")`, this wouldn't be true if `TYPE_USE` was present on the annotation.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/43/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/43/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/37","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/37/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/37/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/37/events","html_url":"https://github.com/JetBrains/java-annotations/issues/37","id":756412250,"node_id":"MDU6SXNzdWU3NTY0MTIyNTA=","number":37,"title":"Remove redundant targets from Nullability-annotations","user":{"login":"JarvisCraft","id":7693005,"node_id":"MDQ6VXNlcjc2OTMwMDU=","avatar_url":"https://avatars.githubusercontent.com/u/7693005?v=4","gravatar_id":"","url":"https://api.github.com/users/JarvisCraft","html_url":"https://github.com/JarvisCraft","followers_url":"https://api.github.com/users/JarvisCraft/followers","following_url":"https://api.github.com/users/JarvisCraft/following{/other_user}","gists_url":"https://api.github.com/users/JarvisCraft/gists{/gist_id}","starred_url":"https://api.github.com/users/JarvisCraft/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JarvisCraft/subscriptions","organizations_url":"https://api.github.com/users/JarvisCraft/orgs","repos_url":"https://api.github.com/users/JarvisCraft/repos","events_url":"https://api.github.com/users/JarvisCraft/events{/privacy}","received_events_url":"https://api.github.com/users/JarvisCraft/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-12-03T17:47:06Z","updated_at":"2020-12-04T14:45:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"At current both `@NotNull` and `@Nullable` have quite broad scopes which commonly overlap:\r\nhttps://github.com/JetBrains/java-annotations/blob/d7c469b3b53c2135ba1c8863fc5eb2f5d5ccb36c/common/src/main/java/org/jetbrains/annotations/Nullable.java#L39\r\nhttps://github.com/JetBrains/java-annotations/blob/d7c469b3b53c2135ba1c8863fc5eb2f5d5ccb36c/common/src/main/java/org/jetbrains/annotations/NotNull.java#L29\r\nWhile this is required for java5 (which obviously does not have `ElementType.TYPE_USE`) it is more of an issue rather than a feature on java 8+. I.e. overlapping scopes lead to tools such as Javadoc recognizing both targets as matched thus leading to issues such as duplication of the annotation in documentation in case of the latter.\r\n\r\nThus I suggest keeping only `ElementType.TYPE_USE` on these annotations in java8 version of the project, and keeping only `{ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE}` on java5 version.\r\n\r\nIf this gets approved I am ready to create the corresponding PR.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/37/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/37/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/36","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/36/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/36/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/36/events","html_url":"https://github.com/JetBrains/java-annotations/issues/36","id":729895260,"node_id":"MDU6SXNzdWU3Mjk4OTUyNjA=","number":36,"title":"@Immutable annotation for value classes","user":{"login":"jwgmeligmeyling","id":3469492,"node_id":"MDQ6VXNlcjM0Njk0OTI=","avatar_url":"https://avatars.githubusercontent.com/u/3469492?v=4","gravatar_id":"","url":"https://api.github.com/users/jwgmeligmeyling","html_url":"https://github.com/jwgmeligmeyling","followers_url":"https://api.github.com/users/jwgmeligmeyling/followers","following_url":"https://api.github.com/users/jwgmeligmeyling/following{/other_user}","gists_url":"https://api.github.com/users/jwgmeligmeyling/gists{/gist_id}","starred_url":"https://api.github.com/users/jwgmeligmeyling/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jwgmeligmeyling/subscriptions","organizations_url":"https://api.github.com/users/jwgmeligmeyling/orgs","repos_url":"https://api.github.com/users/jwgmeligmeyling/repos","events_url":"https://api.github.com/users/jwgmeligmeyling/events{/privacy}","received_events_url":"https://api.github.com/users/jwgmeligmeyling/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-10-26T20:48:57Z","updated_at":"2020-10-26T20:48:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi!\r\n\r\nI am currently migrating a projeect from  jsr305 to `java-annotations`. One of the annotations I can't really seem to find an equivalent for is `@Immutable`. A class being `@Immutable` should not have setters and possibly not even non-final fields.\r\n\r\nThe original implementation and documentation:\r\n\r\n```java\r\n/**\r\n * The class to which this annotation is applied is immutable. This means that\r\n * its state cannot be seen to change by callers. Of necessity this means that\r\n * all public fields are final, and that all public final reference fields refer\r\n * to other immutable objects, and that methods do not publish references to any\r\n * internal state which is mutable by implementation even if not by design.\r\n * Immutable objects may still have internal mutable state for purposes of\r\n * performance optimization; some state variables may be lazily computed, so\r\n * long as they are computed from immutable state and that callers cannot tell\r\n * the difference.\r\n * <p>\r\n * Immutable objects are inherently thread-safe; they may be passed between\r\n * threads or published without synchronization.\r\n */\r\n@Documented\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.CLASS)\r\npublic @interface Immutable {\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/36/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/36/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/30","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/30/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/30/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/30/events","html_url":"https://github.com/JetBrains/java-annotations/issues/30","id":665780616,"node_id":"MDU6SXNzdWU2NjU3ODA2MTY=","number":30,"title":"Advanced @Contract capabilities","user":{"login":"burdoto","id":42473485,"node_id":"MDQ6VXNlcjQyNDczNDg1","avatar_url":"https://avatars.githubusercontent.com/u/42473485?v=4","gravatar_id":"","url":"https://api.github.com/users/burdoto","html_url":"https://github.com/burdoto","followers_url":"https://api.github.com/users/burdoto/followers","following_url":"https://api.github.com/users/burdoto/following{/other_user}","gists_url":"https://api.github.com/users/burdoto/gists{/gist_id}","starred_url":"https://api.github.com/users/burdoto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/burdoto/subscriptions","organizations_url":"https://api.github.com/users/burdoto/orgs","repos_url":"https://api.github.com/users/burdoto/repos","events_url":"https://api.github.com/users/burdoto/events{/privacy}","received_events_url":"https://api.github.com/users/burdoto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-07-26T13:31:15Z","updated_at":"2020-09-18T10:14:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was thinking about possible extra possibilities for the `Contract` annotation.\r\nI have this example already; I will add more as I stumble upon them:\r\nConsider this method:\r\n```java\r\n    @Contract(\"CacheReference -> param1; null -> fail; !null -> new\")\r\n    protected abstract CacheReference<K, V> advanceIntoCacheRef(Reference<V> reference);\r\n```\r\nThe method should do the following things; as described by the contract:\r\n```\r\n- Throw an NPE, if the parameter is `null`\r\n- Wrap the parameter `Reference` (if not `instanceof CacheReference`, else see next) into a `CacheReference`\r\n- Return first parameter if the first parameter is `instanceof CacheReference` (which is already imported due to return type; return types should be validated by `paramN`)\r\n```\r\n\r\nNow, obviously this contract won't work, because it doesn't know about more things than nulls; really. Given other capabilities of IntelliJ, it should be fairly easy coming up with a simple, standalone concept for advanced `Contract` syntax.","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/30/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/30/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/20","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/20/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/20/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/20/events","html_url":"https://github.com/JetBrains/java-annotations/issues/20","id":537973915,"node_id":"MDU6SXNzdWU1Mzc5NzM5MTU=","number":20,"title":"Add @Covariant and @Contravariant annotations","user":{"login":"Glavo","id":20694662,"node_id":"MDQ6VXNlcjIwNjk0NjYy","avatar_url":"https://avatars.githubusercontent.com/u/20694662?v=4","gravatar_id":"","url":"https://api.github.com/users/Glavo","html_url":"https://github.com/Glavo","followers_url":"https://api.github.com/users/Glavo/followers","following_url":"https://api.github.com/users/Glavo/following{/other_user}","gists_url":"https://api.github.com/users/Glavo/gists{/gist_id}","starred_url":"https://api.github.com/users/Glavo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Glavo/subscriptions","organizations_url":"https://api.github.com/users/Glavo/orgs","repos_url":"https://api.github.com/users/Glavo/repos","events_url":"https://api.github.com/users/Glavo/events{/privacy}","received_events_url":"https://api.github.com/users/Glavo/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-12-14T22:31:15Z","updated_at":"2021-08-04T02:05:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"As a library developer, I want to be able to add some annotations to mark the variance of the type parameters of a class. IDE can give the following hint based on this annotation:\r\n- Report a warning when contravariant type parameter T is used as a function parameter type\r\n- Report a warning when covariant type parameter T is used as a function return type\r\n- For function parameter types, prompt user to use `Function<? extends T, ? super U>` (take `java.util.function.Function` as an example) instead of `Function<T, U>`\r\n\r\nAnd the jvm-based language can choose to understand this annotation (e.g. kotlin can understand `class C<@Covariant T>` as `class C<out T>`. This is convenient for developers to provide Kotlin-friendly APIs using pure Java.\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/20/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/20/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/18","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/18/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/18/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/18/events","html_url":"https://github.com/JetBrains/java-annotations/issues/18","id":518359571,"node_id":"MDU6SXNzdWU1MTgzNTk1NzE=","number":18,"title":"What about @ParametersAreNonnullByDefault?","user":{"login":"bibarsov","id":4425630,"node_id":"MDQ6VXNlcjQ0MjU2MzA=","avatar_url":"https://avatars.githubusercontent.com/u/4425630?v=4","gravatar_id":"","url":"https://api.github.com/users/bibarsov","html_url":"https://github.com/bibarsov","followers_url":"https://api.github.com/users/bibarsov/followers","following_url":"https://api.github.com/users/bibarsov/following{/other_user}","gists_url":"https://api.github.com/users/bibarsov/gists{/gist_id}","starred_url":"https://api.github.com/users/bibarsov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bibarsov/subscriptions","organizations_url":"https://api.github.com/users/bibarsov/orgs","repos_url":"https://api.github.com/users/bibarsov/repos","events_url":"https://api.github.com/users/bibarsov/events{/privacy}","received_events_url":"https://api.github.com/users/bibarsov/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"amaembo","id":5114450,"node_id":"MDQ6VXNlcjUxMTQ0NTA=","avatar_url":"https://avatars.githubusercontent.com/u/5114450?v=4","gravatar_id":"","url":"https://api.github.com/users/amaembo","html_url":"https://github.com/amaembo","followers_url":"https://api.github.com/users/amaembo/followers","following_url":"https://api.github.com/users/amaembo/following{/other_user}","gists_url":"https://api.github.com/users/amaembo/gists{/gist_id}","starred_url":"https://api.github.com/users/amaembo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amaembo/subscriptions","organizations_url":"https://api.github.com/users/amaembo/orgs","repos_url":"https://api.github.com/users/amaembo/repos","events_url":"https://api.github.com/users/amaembo/events{/privacy}","received_events_url":"https://api.github.com/users/amaembo/received_events","type":"User","site_admin":false},"assignees":[{"login":"amaembo","id":5114450,"node_id":"MDQ6VXNlcjUxMTQ0NTA=","avatar_url":"https://avatars.githubusercontent.com/u/5114450?v=4","gravatar_id":"","url":"https://api.github.com/users/amaembo","html_url":"https://github.com/amaembo","followers_url":"https://api.github.com/users/amaembo/followers","following_url":"https://api.github.com/users/amaembo/following{/other_user}","gists_url":"https://api.github.com/users/amaembo/gists{/gist_id}","starred_url":"https://api.github.com/users/amaembo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amaembo/subscriptions","organizations_url":"https://api.github.com/users/amaembo/orgs","repos_url":"https://api.github.com/users/amaembo/repos","events_url":"https://api.github.com/users/amaembo/events{/privacy}","received_events_url":"https://api.github.com/users/amaembo/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2019-11-06T09:53:41Z","updated_at":"2021-03-19T17:02:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I think it's a great replacement for jsr-305's annotations (in the context of IntellijIdea's inspection). Would Jetbrains support that annotation? ","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/18/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/18/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/10","repository_url":"https://api.github.com/repos/JetBrains/java-annotations","labels_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/10/labels{/name}","comments_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/10/comments","events_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/10/events","html_url":"https://github.com/JetBrains/java-annotations/issues/10","id":403442773,"node_id":"MDU6SXNzdWU0MDM0NDI3NzM=","number":10,"title":"PropertyKey with compile time prefix value","user":{"login":"saylenty","id":11353127,"node_id":"MDQ6VXNlcjExMzUzMTI3","avatar_url":"https://avatars.githubusercontent.com/u/11353127?v=4","gravatar_id":"","url":"https://api.github.com/users/saylenty","html_url":"https://github.com/saylenty","followers_url":"https://api.github.com/users/saylenty/followers","following_url":"https://api.github.com/users/saylenty/following{/other_user}","gists_url":"https://api.github.com/users/saylenty/gists{/gist_id}","starred_url":"https://api.github.com/users/saylenty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/saylenty/subscriptions","organizations_url":"https://api.github.com/users/saylenty/orgs","repos_url":"https://api.github.com/users/saylenty/repos","events_url":"https://api.github.com/users/saylenty/events{/privacy}","received_events_url":"https://api.github.com/users/saylenty/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-01-26T13:41:35Z","updated_at":"2019-01-26T16:20:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello!\r\n\r\nI'd like to use PropertyKey in some of my projects in order to control usages of l10n keys in compile time. The issue that I faced is that all my property keys is prefixed with \"title\" and \"detail\" values. So that when I create an object (that needs to be localized) I set only the error key without prefix. See the code below for clarification:\r\n\r\n```java \r\n// imports omitted\r\npublic final class Error {\r\n    private final String errorKey;\r\n    public String getErrorKey() {\r\n        return errorKey;\r\n    }\r\n    // would like to ability to set _prefix_ value(s)\r\n    public Error(@PropertyKey(resourceBundle = \"app\", prefix={\"title.\", \"detail.\"}) String errorKey) {\r\n        this.errorKey = errorKey;\r\n    }\r\n}\r\n\r\npublic class ErrorHandler{\r\n    // somewhere in errorHandler\r\n    public void localizeError(Error error, ResourceBundle resourceBundle){\r\n        // create prefixed keys\r\n        String titleKey = \"title.\" + error.getErrorKey();\r\n        String detailKey = \"detail.\" + error.getErrorKey();\r\n\r\n        // localize the error\r\n        String title = resourceBundle.getString(titleKey);\r\n        String detail = resourceBundle.getString(detailKey);\r\n\r\n        // print localized messages\r\n        System.out.println(\"Localized error title is: \" + title);\r\n        System.out.println(\"Localized error detail is: \" + detail);\r\n    }\r\n}\r\n```\r\n\r\nSo, my questions are:\r\n\r\n1. Is it possible to get this functionality in the nearest feature? And could you suggest any workaround for now?\r\n2. Could I write my own annotation with such functionality? Probably in this case I'm supposed to enhance the IDEA inspections. I've never written customization (plugins or so) for IDEA and I'm afraid it would require a lot of work to implement my simple logic, isn't it?","reactions":{"url":"https://api.github.com/repos/JetBrains/java-annotations/issues/10/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JetBrains/java-annotations/issues/10/timeline","performed_via_github_app":null}],"issuesCount":14,"contributors":22,"pullRequests":0,"projectUrl":"https://github.com/JetBrains/java-annotations","issuesUrl":"https://github.com/JetBrains/java-annotations/issues","stars":211,"watchers":211,"forks":29,"githubLicenseName":"Apache-2.0","openIssues":15,"createdAt":"2018-02-16T06:39:51Z","updatedAt":"2021-10-15T08:59:56Z","monthsSinceUpdated":0},{"id":"lombok@1.18.12","groupId":"org.projectlombok","artifactId":"lombok","version":"1.18.12","name":"Project Lombok","description":"Very spicy additions to the Java programming language.","licenses":{"license":{"name":"The MIT License","url":"https://projectlombok.org/LICENSE","distribution":"repo"}},"github":"http://github.com/rzwitserloot/lombok","latestVersion":"1.18.22","issues":[{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2994","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2994/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2994/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2994/events","html_url":"https://github.com/projectlombok/lombok/issues/2994","id":1025075079,"node_id":"I_kwDOAANips49GWeH","number":2994,"title":"[BUG] Eclipse with Lombok doesn't show method usage","user":{"login":"stefan574","id":13134474,"node_id":"MDQ6VXNlcjEzMTM0NDc0","avatar_url":"https://avatars.githubusercontent.com/u/13134474?v=4","gravatar_id":"","url":"https://api.github.com/users/stefan574","html_url":"https://github.com/stefan574","followers_url":"https://api.github.com/users/stefan574/followers","following_url":"https://api.github.com/users/stefan574/following{/other_user}","gists_url":"https://api.github.com/users/stefan574/gists{/gist_id}","starred_url":"https://api.github.com/users/stefan574/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stefan574/subscriptions","organizations_url":"https://api.github.com/users/stefan574/orgs","repos_url":"https://api.github.com/users/stefan574/repos","events_url":"https://api.github.com/users/stefan574/events{/privacy}","received_events_url":"https://api.github.com/users/stefan574/received_events","type":"User","site_admin":false},"labels":[{"id":236276891,"node_id":"MDU6TGFiZWwyMzYyNzY4OTE=","url":"https://api.github.com/repos/projectlombok/lombok/labels/parked","name":"parked","color":"fef2c0","default":false,"description":"Without further feedback this bug cannot be processed. If no feedback is provided, we close these."}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-10-13T10:32:24Z","updated_at":"2021-10-13T12:01:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nAfter installing the lombom plugin and using @Getter, @Setter or @Data, I can't see the usage for getters and setters anymore.\r\n\r\n**To Reproduce**\r\nInstall the lombok plugin, use @Getter, @Setter or @Data and try to see the method usage for getters and setters.\r\n\r\n**Expected behavior**\r\nMethod usage should work the same\r\n\r\n**Version info (please complete the following information):**\r\n - 1.18.22\r\n - Windows 10\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2994/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2994/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2991","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2991/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2991/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2991/events","html_url":"https://github.com/projectlombok/lombok/issues/2991","id":1021271928,"node_id":"I_kwDOAANips483194","number":2991,"title":"[BUG] Use of `@FieldNameConstants` generated `Fields` constants in MapStruct's `@Mappings` annotation breaks Java compilation when using `ignore = true` on mapping","user":{"login":"anno1985","id":47760138,"node_id":"MDQ6VXNlcjQ3NzYwMTM4","avatar_url":"https://avatars.githubusercontent.com/u/47760138?v=4","gravatar_id":"","url":"https://api.github.com/users/anno1985","html_url":"https://github.com/anno1985","followers_url":"https://api.github.com/users/anno1985/followers","following_url":"https://api.github.com/users/anno1985/following{/other_user}","gists_url":"https://api.github.com/users/anno1985/gists{/gist_id}","starred_url":"https://api.github.com/users/anno1985/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anno1985/subscriptions","organizations_url":"https://api.github.com/users/anno1985/orgs","repos_url":"https://api.github.com/users/anno1985/repos","events_url":"https://api.github.com/users/anno1985/events{/privacy}","received_events_url":"https://api.github.com/users/anno1985/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-10-08T16:19:45Z","updated_at":"2021-10-11T14:22:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI have a class `MyClass` with a property `prop`; the class is annotated with `@FieldNameConstants`.\r\nWhen I try to use the generated `Fields` class in MapStruct's mapping annotation, for example\r\n```java \r\n@Mapping(target = MyClass.Fields.prop, ignore = true)\r\n```\r\nthen Java's compiler can't find any of Lombok's generated builders anymore (and several, possibly all, other generated items, like loggers):\r\n```\r\n[ERROR] path/to/Another.class[line:pos] cannot find symbol\r\n  symbol:   class AnotherBuilder\r\n  location: class com.example.Another\r\n\r\n```\r\n(Note that the errors seem to occur for all classes using Lombok, not just the one with the `@FieldNameConstants` annotation.)\r\n\r\nI ensured to use the setup as described in [MapStruct's reference guide](https://mapstruct.org/documentation/stable/reference/html/#_set_up), but with latest stable versions of the three dependencies \r\n```xml\r\n    <lombok.version>1.18.22</lombok.version>\r\n    <mapstruct.version>1.4.2.Final</mapstruct.version>\r\n    <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>\r\n```\r\n\r\nI suspect it's down to how the preprocessors are chained, but rearranging the `path` elements in the pom.xml didn't yield any changes in the result.\r\n\r\n**Expected behaviour**\r\nLombok generating the `Fields` class first, then MapStruct running and successfully using the constants, and the build passing. Changing MapStruct's annotation makes it all pass:\r\n```java \r\n@Mapping(target = \"prop\", ignore = true)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2991/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2991/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2990","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2990/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2990/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2990/events","html_url":"https://github.com/projectlombok/lombok/issues/2990","id":1020807208,"node_id":"I_kwDOAANips482Ego","number":2990,"title":"[BUG] @Log fails on nested enums","user":{"login":"charphi","id":8778378,"node_id":"MDQ6VXNlcjg3NzgzNzg=","avatar_url":"https://avatars.githubusercontent.com/u/8778378?v=4","gravatar_id":"","url":"https://api.github.com/users/charphi","html_url":"https://github.com/charphi","followers_url":"https://api.github.com/users/charphi/followers","following_url":"https://api.github.com/users/charphi/following{/other_user}","gists_url":"https://api.github.com/users/charphi/gists{/gist_id}","starred_url":"https://api.github.com/users/charphi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/charphi/subscriptions","organizations_url":"https://api.github.com/users/charphi/orgs","repos_url":"https://api.github.com/users/charphi/repos","events_url":"https://api.github.com/users/charphi/events{/privacy}","received_events_url":"https://api.github.com/users/charphi/received_events","type":"User","site_admin":false},"labels":[{"id":236276864,"node_id":"MDU6TGFiZWwyMzYyNzY4NjQ=","url":"https://api.github.com/repos/projectlombok/lombok/labels/bug","name":"bug","color":"ffffff","default":true,"description":null},{"id":236276881,"node_id":"MDU6TGFiZWwyMzYyNzY4ODE=","url":"https://api.github.com/repos/projectlombok/lombok/labels/accepted","name":"accepted","color":"ffffff","default":false,"description":"The issue/enhancement is valid, sensible, and explained in sufficient detail"}],"state":"open","locked":false,"assignee":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"assignees":[{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/projectlombok/lombok/milestones/21","html_url":"https://github.com/projectlombok/lombok/milestone/21","labels_url":"https://api.github.com/repos/projectlombok/lombok/milestones/21/labels","id":5817119,"node_id":"MDk6TWlsZXN0b25lNTgxNzExOQ==","number":21,"title":"next-version","description":"Release will be be versioned v1.18.24 or v1.20.0. If it contains major new features, it will likely be named 'Fluffy Goldfish'.","creator":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":1,"state":"open","created_at":"2020-08-27T21:08:52Z","updated_at":"2021-10-08T11:56:25Z","due_on":null,"closed_at":null},"comments":1,"created_at":"2021-10-08T07:56:13Z","updated_at":"2021-10-08T11:56:36Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\nCompilation fails when the annotation @Log is set on a nested enum.\r\n\r\n**To Reproduce**\r\nHere is an example:\r\n```java\r\nclass Example {\r\n\r\n  @Log\r\n  enum Status  { OK, KO }\r\n}\r\n```\r\nThe following error appears during compilation:  \r\n`@Log is not supported on non-static nested classes.`\r\n\r\n**Expected behavior**\r\nShould compile without error.\r\nWas working fine in 1.18.20\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok 1.18.22\r\n - all platforms\r\n\r\n**Additional context**\r\nAddind the keyword `static` to the enum seems to workaround the problem.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2990/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2989","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2989/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2989/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2989/events","html_url":"https://github.com/projectlombok/lombok/issues/2989","id":1020233794,"node_id":"I_kwDOAANips48z4hC","number":2989,"title":"[BUG] @Builder.Default causes compilation failure when generic type parameters have annotations","user":{"login":"kamko","id":17074375,"node_id":"MDQ6VXNlcjE3MDc0Mzc1","avatar_url":"https://avatars.githubusercontent.com/u/17074375?v=4","gravatar_id":"","url":"https://api.github.com/users/kamko","html_url":"https://github.com/kamko","followers_url":"https://api.github.com/users/kamko/followers","following_url":"https://api.github.com/users/kamko/following{/other_user}","gists_url":"https://api.github.com/users/kamko/gists{/gist_id}","starred_url":"https://api.github.com/users/kamko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kamko/subscriptions","organizations_url":"https://api.github.com/users/kamko/orgs","repos_url":"https://api.github.com/users/kamko/repos","events_url":"https://api.github.com/users/kamko/events{/privacy}","received_events_url":"https://api.github.com/users/kamko/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-07T16:23:32Z","updated_at":"2021-10-07T16:23:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\n**To Reproduce**\r\n```java\r\npackage dev.kamko.testapp;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Target;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class TestObject {\r\n\r\n    @Target(value = {ElementType.TYPE_USE})\r\n    @interface TestAnnotation{}\r\n\r\n    @Builder.Default\r\n    private List<@TestAnnotation String> list = new ArrayList<>();\r\n\r\n}\r\n```\r\n\r\nThis class fails to compile with JDK17. Error stacktrace is:\r\n```\r\njava: An exception has occurred in the compiler (17). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.\r\njava: java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writePosition(ClassWriter.java:672)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeTypeAnnotation(ClassWriter.java:649)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeTypeAnnotations(ClassWriter.java:562)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeCode(ClassWriter.java:1120)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeMethod(ClassWriter.java:988)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeMethods(ClassWriter.java:1479)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClassFile(ClassWriter.java:1584)\r\njava: \tat jdk.compiler/com.sun.tools.javac.jvm.ClassWriter.writeClass(ClassWriter.java:1505)\r\njava: \tat jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:738)\r\njava: \tat jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)\r\njava: \tat jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)\r\njava: \tat jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)\r\njava: \tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)\r\njava: \tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)\r\njava: \tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)\r\njava: \tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)\r\njava: \tat org.jetbrains.jps.javac.JavacMain.compile(JavacMain.java:238)\r\njava: \tat org.jetbrains.jps.incremental.java.JavaBuilder.lambda$compileJava$2(JavaBuilder.java:514)\r\njava: \tat org.jetbrains.jps.incremental.java.JavaBuilder.invokeJavac(JavaBuilder.java:560)\r\njava: \tat org.jetbrains.jps.incremental.java.JavaBuilder.compileJava(JavaBuilder.java:512)\r\njava: \tat org.jetbrains.jps.incremental.java.JavaBuilder.compile(JavaBuilder.java:355)\r\njava: \tat org.jetbrains.jps.incremental.java.JavaBuilder.doBuild(JavaBuilder.java:280)\r\njava: \tat org.jetbrains.jps.incremental.java.JavaBuilder.build(JavaBuilder.java:234)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.runModuleLevelBuilders(IncProjectBuilder.java:1485)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.runBuildersForChunk(IncProjectBuilder.java:1123)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.buildTargetsChunk(IncProjectBuilder.java:1268)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.buildChunkIfAffected(IncProjectBuilder.java:1088)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.buildChunks(IncProjectBuilder.java:854)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.runBuild(IncProjectBuilder.java:441)\r\njava: \tat org.jetbrains.jps.incremental.IncProjectBuilder.build(IncProjectBuilder.java:190)\r\njava: \tat org.jetbrains.jps.cmdline.BuildRunner.runBuild(BuildRunner.java:132)\r\njava: \tat org.jetbrains.jps.cmdline.BuildSession.runBuild(BuildSession.java:318)\r\njava: \tat org.jetbrains.jps.cmdline.BuildSession.run(BuildSession.java:146)\r\njava: \tat org.jetbrains.jps.cmdline.BuildMain$MyMessageHandler.lambda$channelRead0$0(BuildMain.java:218)\r\njava: \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\r\njava: \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\r\njava: \tat java.base/java.lang.Thread.run(Thread.java:833)\r\n```\r\nThe code compiles fine on JDK11.\r\nAfter removing of `@Builder.Default` the code compiles also on JDK17. If the annotation is removed from the generic type then the class also compiles.\r\n\r\n**Expected behavior**\r\nThe class should compile correctly on JDK17.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version - **1.18.22**\r\n - Platform - **javac 17**\r\n\r\n**Additional context**\r\nI received the same error when I tried javac 16.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2989/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2988","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2988/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2988/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2988/events","html_url":"https://github.com/projectlombok/lombok/issues/2988","id":1020030695,"node_id":"I_kwDOAANips48zG7n","number":2988,"title":"[DOCS] Improve documentation for @ToString","user":{"login":"michaelboyles","id":17732072,"node_id":"MDQ6VXNlcjE3NzMyMDcy","avatar_url":"https://avatars.githubusercontent.com/u/17732072?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelboyles","html_url":"https://github.com/michaelboyles","followers_url":"https://api.github.com/users/michaelboyles/followers","following_url":"https://api.github.com/users/michaelboyles/following{/other_user}","gists_url":"https://api.github.com/users/michaelboyles/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelboyles/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelboyles/subscriptions","organizations_url":"https://api.github.com/users/michaelboyles/orgs","repos_url":"https://api.github.com/users/michaelboyles/repos","events_url":"https://api.github.com/users/michaelboyles/events{/privacy}","received_events_url":"https://api.github.com/users/michaelboyles/received_events","type":"User","site_admin":false},"labels":[{"id":236276881,"node_id":"MDU6TGFiZWwyMzYyNzY4ODE=","url":"https://api.github.com/repos/projectlombok/lombok/labels/accepted","name":"accepted","color":"ffffff","default":false,"description":"The issue/enhancement is valid, sensible, and explained in sufficient detail"},{"id":3345845311,"node_id":"MDU6TGFiZWwzMzQ1ODQ1MzEx","url":"https://api.github.com/repos/projectlombok/lombok/labels/documentation","name":"documentation","color":"c2e0c6","default":true,"description":"Addressing this item primarily involves writing docs / updating the website"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/projectlombok/lombok/milestones/21","html_url":"https://github.com/projectlombok/lombok/milestone/21","labels_url":"https://api.github.com/repos/projectlombok/lombok/milestones/21/labels","id":5817119,"node_id":"MDk6TWlsZXN0b25lNTgxNzExOQ==","number":21,"title":"next-version","description":"Release will be be versioned v1.18.24 or v1.20.0. If it contains major new features, it will likely be named 'Fluffy Goldfish'.","creator":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":1,"state":"open","created_at":"2020-08-27T21:08:52Z","updated_at":"2021-10-08T11:56:25Z","due_on":null,"closed_at":null},"comments":2,"created_at":"2021-10-07T13:13:26Z","updated_at":"2021-10-08T11:11:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Similar to #2870, which I also raised, I have an answer on Stack Overflow related to `@ToString` which I noticed has 9000 views. It seems to be the case that people are under the impression that it may be possible to change the format of the string generated by `@ToString`. \r\n\r\nSince people are obviously searching for this a lot, I think it would be worth making it clearer in the documentation that this is not possible.\r\n\r\nCurrent\r\n\r\n> Any class definition may be annotated with `@ToString` to let lombok generate an implementation of the `toString()` method. By default, it'll print your class name, along with each field, in order, separated by commas. \r\n\r\nSuggested change\r\n\r\n> Annotating a class with `@ToString` will cause lombok to generate an implementation of the `toString()` method. There is configuration to specify whether field names should be included but otherwise the format is fixed: the class name followed by parentheses containing fields separated by commas, e.g. `MyClass(foo=123, bar=234)`.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2988/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2986","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2986/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2986/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2986/events","html_url":"https://github.com/projectlombok/lombok/issues/2986","id":1019697404,"node_id":"I_kwDOAANips48x1j8","number":2986,"title":"[FEATURE] Generate JSF component properties","user":{"login":"Rawi01","id":5850477,"node_id":"MDQ6VXNlcjU4NTA0Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5850477?v=4","gravatar_id":"","url":"https://api.github.com/users/Rawi01","html_url":"https://github.com/Rawi01","followers_url":"https://api.github.com/users/Rawi01/followers","following_url":"https://api.github.com/users/Rawi01/following{/other_user}","gists_url":"https://api.github.com/users/Rawi01/gists{/gist_id}","starred_url":"https://api.github.com/users/Rawi01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rawi01/subscriptions","organizations_url":"https://api.github.com/users/Rawi01/orgs","repos_url":"https://api.github.com/users/Rawi01/repos","events_url":"https://api.github.com/users/Rawi01/events{/privacy}","received_events_url":"https://api.github.com/users/Rawi01/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-10-07T07:12:33Z","updated_at":"2021-10-07T09:07:34Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Describe the feature**\r\nA JSF component usually uses an enum to list all its properties. For each of the enumerated properties there is a getter and a setter which refers to the state helper to store the value.\r\n\r\n```java\r\npublic class Component extends UIComponent {\r\n\tpublic enum PropertyKeys {\r\n\t\tproperty1,\r\n\t\t...\r\n\t}\r\n\t\r\n\tpublic String getProperty1() {\r\n\t\treturn (String) getStateHelper().eval(PropertyKeys.property1, \"default\");\r\n\t}\r\n\t\r\n\tpublic void setProperty1(String property1) {\r\n\t\tgetStateHelper().put(PropertyKeys.property1, property1);\r\n\t}\r\n\t...\r\n}\r\n```\r\nReal world example: https://github.com/primefaces/primefaces/blob/9f8f972a1a549759859f684b4c221436c0ed93e2/primefaces/src/main/java/org/primefaces/component/selectonemenu/SelectOneMenuBase.java\r\n\r\nWriting all that by hand is quite annoying and error prone (It took me more than an hour to figure out that I missed to adjust one property key in my copy pasted setter).\r\n\r\nI propose to add an annotation (e.g. `@JSFComponentProperties`) that can be added to inner classes. It transforms the whole class into an enum using the field names, uses the field types for getter and setter types and moves the initializer to the default value. Some special handling for primitive types without initializers is required. \r\n\r\nExample to generate the code above: \r\n```java\r\npublic class Component extends UIComponent {\r\n\t@JSFComponentProperties\r\n\tpublic class PropertyKeys {\r\n\t\tString property1 = \"default\";\r\n\t\t...\r\n\t}\r\n}\r\n```\r\n\r\n**Describe the target audience**\r\nJSF developers\r\n\r\n**Additional context**\r\nMost of this should be quite easy, converting a class into an enum might be a little bit harder.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2986/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2986/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2985","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2985/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2985/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2985/events","html_url":"https://github.com/projectlombok/lombok/issues/2985","id":1018590235,"node_id":"I_kwDOAANips48tnQb","number":2985,"title":"[BUG] Launching JUnit test via editor window in Eclipse fails with NullPointerException","user":{"login":"Maia-Everett","id":10684,"node_id":"MDQ6VXNlcjEwNjg0","avatar_url":"https://avatars.githubusercontent.com/u/10684?v=4","gravatar_id":"","url":"https://api.github.com/users/Maia-Everett","html_url":"https://github.com/Maia-Everett","followers_url":"https://api.github.com/users/Maia-Everett/followers","following_url":"https://api.github.com/users/Maia-Everett/following{/other_user}","gists_url":"https://api.github.com/users/Maia-Everett/gists{/gist_id}","starred_url":"https://api.github.com/users/Maia-Everett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Maia-Everett/subscriptions","organizations_url":"https://api.github.com/users/Maia-Everett/orgs","repos_url":"https://api.github.com/users/Maia-Everett/repos","events_url":"https://api.github.com/users/Maia-Everett/events{/privacy}","received_events_url":"https://api.github.com/users/Maia-Everett/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"Rawi01","id":5850477,"node_id":"MDQ6VXNlcjU4NTA0Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5850477?v=4","gravatar_id":"","url":"https://api.github.com/users/Rawi01","html_url":"https://github.com/Rawi01","followers_url":"https://api.github.com/users/Rawi01/followers","following_url":"https://api.github.com/users/Rawi01/following{/other_user}","gists_url":"https://api.github.com/users/Rawi01/gists{/gist_id}","starred_url":"https://api.github.com/users/Rawi01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rawi01/subscriptions","organizations_url":"https://api.github.com/users/Rawi01/orgs","repos_url":"https://api.github.com/users/Rawi01/repos","events_url":"https://api.github.com/users/Rawi01/events{/privacy}","received_events_url":"https://api.github.com/users/Rawi01/received_events","type":"User","site_admin":false},"assignees":[{"login":"Rawi01","id":5850477,"node_id":"MDQ6VXNlcjU4NTA0Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5850477?v=4","gravatar_id":"","url":"https://api.github.com/users/Rawi01","html_url":"https://github.com/Rawi01","followers_url":"https://api.github.com/users/Rawi01/followers","following_url":"https://api.github.com/users/Rawi01/following{/other_user}","gists_url":"https://api.github.com/users/Rawi01/gists{/gist_id}","starred_url":"https://api.github.com/users/Rawi01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rawi01/subscriptions","organizations_url":"https://api.github.com/users/Rawi01/orgs","repos_url":"https://api.github.com/users/Rawi01/repos","events_url":"https://api.github.com/users/Rawi01/events{/privacy}","received_events_url":"https://api.github.com/users/Rawi01/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2021-10-06T15:34:45Z","updated_at":"2021-10-12T16:07:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen Lombok is installed, some actions, including trying to launch a JUnit test by right clicking the editor and selecting \"Run -> JUnit Test\", fail with a stack trace (see below).\r\n\r\nHowever, the same test runs fine if launched via the Run toolbar command.\r\n\r\n**To Reproduce**\r\nI don't know how to reproduce this. It's an IDE problem with a large project, doesn't seem to be dependent on and I don't \r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.20 and 1.18.21 edge (reproducible with both)\r\n - Platform: Eclipse 2020-12\r\n\r\n**Additional context**\r\n\r\nStack trace:\r\n\r\n```\r\njava.lang.reflect.InvocationTargetException\r\n\tat org.eclipse.jface.operation.ModalContext.run(ModalContext.java:397)\r\n\tat org.eclipse.ui.internal.WorkbenchWindow.lambda$7(WorkbenchWindow.java:2353)\r\n\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)\r\n\tat org.eclipse.ui.internal.WorkbenchWindow.run(WorkbenchWindow.java:2351)\r\n\tat org.eclipse.jdt.internal.junit.util.TestSearchEngine.findTests(TestSearchEngine.java:47)\r\n\tat org.eclipse.jdt.junit.launcher.JUnitLaunchShortcut.findTypesToLaunch(JUnitLaunchShortcut.java:226)\r\n\tat org.eclipse.jdt.junit.launcher.JUnitLaunchShortcut.findTypeToLaunch(JUnitLaunchShortcut.java:215)\r\n\tat org.eclipse.jdt.junit.launcher.JUnitLaunchShortcut.launch(JUnitLaunchShortcut.java:191)\r\n\tat org.eclipse.jdt.junit.launcher.JUnitLaunchShortcut.launch(JUnitLaunchShortcut.java:123)\r\n\tat org.eclipse.debug.internal.ui.launchConfigurations.LaunchShortcutExtension.launch(LaunchShortcutExtension.java:419)\r\n\tat org.eclipse.debug.internal.ui.actions.LaunchShortcutAction.runInternal(LaunchShortcutAction.java:83)\r\n\tat org.eclipse.debug.internal.ui.actions.LaunchShortcutAction.runWithEvent(LaunchShortcutAction.java:135)\r\n\tat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:580)\r\n\tat org.eclipse.jface.action.ActionContributionItem.lambda$4(ActionContributionItem.java:414)\r\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)\r\n\tat org.eclipse.swt.widgets.Display.sendEvent(Display.java:5785)\r\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1427)\r\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1453)\r\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1436)\r\n\tat org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1225)\r\n\tat org.eclipse.jface.action.ActionContributionItem.lambda$8(ActionContributionItem.java:1209)\r\n\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)\r\n\tat org.eclipse.swt.widgets.Display.sendEvent(Display.java:5785)\r\n\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1427)\r\n\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:5048)\r\n\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:4526)\r\n\tat org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)\r\n\tat org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)\r\n\tat org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)\r\n\tat org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)\r\n\tat org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)\r\n\tat org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)\r\n\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)\r\n\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)\r\n\tat org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)\r\n\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)\r\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)\r\n\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)\r\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)\r\n\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)\r\n\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)\r\n\tat org.eclipse.equinox.launcher.Main.run(Main.java:1461)\r\n\tat org.eclipse.equinox.launcher.Main.main(Main.java:1434)\r\nCaused by: java.lang.NullPointerException\r\n\tat org.eclipse.jdt.internal.compiler.ast.ASTNode.checkInvocationArguments(ASTNode.java:410)\r\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:953)\r\n\tat org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:390)\r\n\tat org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:259)\r\n\tat org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:131)\r\n\tat org.eclipse.jdt.internal.compiler.ast.IfStatement.resolveIfStatement(IfStatement.java:282)\r\n\tat org.eclipse.jdt.internal.compiler.ast.IfStatement.resolve(IfStatement.java:308)\r\n\tat org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:131)\r\n\tat org.eclipse.jdt.internal.compiler.ast.LambdaExpression.resolveType(LambdaExpression.java:458)\r\n\tat org.eclipse.jdt.internal.compiler.ast.LambdaExpression.cachedResolvedCopy(LambdaExpression.java:975)\r\n\tat org.eclipse.jdt.internal.compiler.ast.LambdaExpression.resolveExpressionExpecting(LambdaExpression.java:1005)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC_OneExpr(InferenceContext18.java:681)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC(InferenceContext18.java:649)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:433)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod18(ParameterizedGenericMethodBinding.java:271)\r\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.isCompatibleWith(MessageSend.java:1100)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:43)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:5067)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:5031)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:871)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:798)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1756)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1657)\r\n\tat org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:3045)\r\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:1017)\r\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:838)\r\n\tat org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1113)\r\n\tat org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:131)\r\n\tat org.eclipse.jdt.internal.compiler.ast.LambdaExpression.resolveType(LambdaExpression.java:458)\r\n\tat org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:721)\r\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:1024)\r\n\tat org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:838)\r\n\tat org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1113)\r\n\tat org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:661)\r\n\tat org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:673)\r\n\tat org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:570)\r\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1493)\r\n\tat org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1618)\r\n\tat org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:662)\r\n\tat org.eclipse.jdt.internal.core.hierarchy.HierarchyResolver.resolve(HierarchyResolver.java:875)\r\n\tat org.eclipse.jdt.internal.core.hierarchy.RegionBasedHierarchyBuilder.createTypeHierarchyBasedOnRegion(RegionBasedHierarchyBuilder.java:86)\r\n\tat org.eclipse.jdt.internal.core.hierarchy.RegionBasedHierarchyBuilder.build(RegionBasedHierarchyBuilder.java:55)\r\n\tat org.eclipse.jdt.internal.core.hierarchy.RegionBasedTypeHierarchy.compute(RegionBasedTypeHierarchy.java:79)\r\n\tat org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy.refresh(TypeHierarchy.java:1319)\r\n\tat org.eclipse.jdt.internal.core.CreateTypeHierarchyOperation.executeOperation(CreateTypeHierarchyOperation.java:94)\r\n\tat org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)\r\n\tat org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)\r\n\tat org.eclipse.jdt.core.JavaCore.newTypeHierarchy(JavaCore.java:5034)\r\n\tat org.eclipse.jdt.internal.junit.launcher.JUnit4TestFinder.findTestsInContainer(JUnit4TestFinder.java:130)\r\n\tat org.eclipse.jdt.internal.junit.util.TestSearchEngine.lambda$0(TestSearchEngine.java:42)\r\n\tat org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:122)\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2985/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2985/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2983","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2983/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2983/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2983/events","html_url":"https://github.com/projectlombok/lombok/issues/2983","id":1016267695,"node_id":"I_kwDOAANips48kwOv","number":2983,"title":"[SEMANTICS] `@NonNull` is currently allowed on classes; it does nothing. Warn for this.","user":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"labels":[{"id":236276881,"node_id":"MDU6TGFiZWwyMzYyNzY4ODE=","url":"https://api.github.com/repos/projectlombok/lombok/labels/accepted","name":"accepted","color":"ffffff","default":false,"description":"The issue/enhancement is valid, sensible, and explained in sufficient detail"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-05T12:29:39Z","updated_at":"2021-10-05T12:30:07Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Lombok updated `@NonNull`'s targets to include `TYPE_USE`, as `@NonNull` has documentary purpose as well.\r\n\r\nHowever, that also means you can annotate types themselves with it. This is legal right now:\r\n\r\n```\r\n@NonNull class Test {}\r\n```\r\n\r\nThis, naturally, has absolutely no effect on lombok. However, one might erroneously think that this is a defaulting hint (that it would e.g. generate null checks in setters or even generate null checks for every non-primitive parameter in methods in the annotated class). That is a reasonable assumption to make.\r\n\r\nThis seems to me like mostly a design mistake in what `TYPE_USE` means, but that's surely not getting fixed as it'd break backwards compatibility in java itself.\r\n\r\nTo avoid the confusion, lombok should generate a warning that cannot be ignored. This would even be backwards compatible. I can't imagine a useful documentary purpose (what does `@NonNull` _on a class itself_ mean, semantically? Nothing but confusing answers there). Alternatively, just generate an error. This wouldn't be backwards compatible, but then who would have annotated classes with `@NonNull`, other than folks who thought that would have some effect, in which case generating an error now is only a good thing: We're informing them that their code was buggy.\r\n\r\nSee [issue 1619](https://github.com/projectlombok/lombok/issues/1619) for more context.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2983/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2983/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2973","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2973/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2973/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2973/events","html_url":"https://github.com/projectlombok/lombok/issues/2973","id":1007214780,"node_id":"I_kwDOAANips48COC8","number":2973,"title":"[BUG] Strict Encapsulation - Clashing Packages / Package org.objectweb.asm.signature in both module lombok and module org.objectweb.asm","user":{"login":"GedMarc","id":5367513,"node_id":"MDQ6VXNlcjUzNjc1MTM=","avatar_url":"https://avatars.githubusercontent.com/u/5367513?v=4","gravatar_id":"","url":"https://api.github.com/users/GedMarc","html_url":"https://github.com/GedMarc","followers_url":"https://api.github.com/users/GedMarc/followers","following_url":"https://api.github.com/users/GedMarc/following{/other_user}","gists_url":"https://api.github.com/users/GedMarc/gists{/gist_id}","starred_url":"https://api.github.com/users/GedMarc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GedMarc/subscriptions","organizations_url":"https://api.github.com/users/GedMarc/orgs","repos_url":"https://api.github.com/users/GedMarc/repos","events_url":"https://api.github.com/users/GedMarc/events{/privacy}","received_events_url":"https://api.github.com/users/GedMarc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-09-25T22:50:13Z","updated_at":"2021-10-06T12:22:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nThe shade of ASM does not get placed in a lombok specified package. This causes test cases in JDK's with module-info's to fail due to duplicate package names in multiple modules\r\n\r\n**To Reproduce**\r\nInclude ASM 9+ as a dependency in a module application\r\n\r\n```\r\n                 <dependency>\r\n                        <groupId>org.ow2.asm</groupId>\r\n                        <artifactId>asm</artifactId>\r\n\t\t\t<version>9.1</version>\r\n                    </dependency>\r\n```\r\nmodule-info\r\n```\r\nrequires org.objectweb.asm;\r\nrequires static lombok;\r\n```\r\nVM Boot Error\r\n```\r\nError occurred during initialization of boot layer\r\njava.lang.LayerInstantiationException: Package org.objectweb.asm.signature in both module lombok and module org.objectweb.asm\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nExecute a test case\r\n\r\n**Expected behavior**\r\nVM boots\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.20\r\n - ```mvn test```\r\n\r\n**Additional context**\r\nAll shades should be placed under the owned package name, and shouldn't reuse packages owned by other libraries \r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2973/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2973/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2969","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2969/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2969/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2969/events","html_url":"https://github.com/projectlombok/lombok/issues/2969","id":1004259761,"node_id":"I_kwDOAANips4728mx","number":2969,"title":"[BUG] @Getter didn't copy javadoc on the field in inner class.","user":{"login":"flikas","id":4678123,"node_id":"MDQ6VXNlcjQ2NzgxMjM=","avatar_url":"https://avatars.githubusercontent.com/u/4678123?v=4","gravatar_id":"","url":"https://api.github.com/users/flikas","html_url":"https://github.com/flikas","followers_url":"https://api.github.com/users/flikas/followers","following_url":"https://api.github.com/users/flikas/following{/other_user}","gists_url":"https://api.github.com/users/flikas/gists{/gist_id}","starred_url":"https://api.github.com/users/flikas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/flikas/subscriptions","organizations_url":"https://api.github.com/users/flikas/orgs","repos_url":"https://api.github.com/users/flikas/repos","events_url":"https://api.github.com/users/flikas/events{/privacy}","received_events_url":"https://api.github.com/users/flikas/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-22T12:51:59Z","updated_at":"2021-09-22T12:51:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n@Getter didn't copy javadoc on the field in inner class.\r\n\r\n**To Reproduce**\r\n1. Source file: \r\n```java\r\npackage demo;\r\nimport lombok.Getter;\r\npublic class PureSimpleClass {\r\n    /**\r\n     * A field.\r\n     */\r\n    @Getter private String field;\r\n\r\n    public static class InnerClass {\r\n        /**\r\n         * Another field.\r\n         */\r\n        @Getter private String innerField;\r\n    }\r\n}\r\n```\r\n2. delombok using: `java -jar lombok.jar delombok src -d src-delomboked`\r\n3. delomboked file:\r\n```java\r\n// Generated by delombok at Wed Sep 22 19:54:29 CST 2021\r\npackage demo;\r\n\r\npublic class PureSimpleClass {\r\n    /**\r\n     * A field.\r\n     */\r\n    private String field;\r\n\r\n\r\n    public static class InnerClass {\r\n        /**\r\n         * Another field.\r\n         */\r\n        private String innerField;\r\n\r\n        @java.lang.SuppressWarnings(\"all\")\r\n        public String getInnerField() {\r\n            return this.innerField;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A field.\r\n     */\r\n    @java.lang.SuppressWarnings(\"all\")\r\n    public String getField() {\r\n        return this.field;\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nExpected the javadoc on the field be copyed, like:\r\n```java\r\n// Generated by delombok at Wed Sep 22 19:54:29 CST 2021\r\npackage demo;\r\n\r\npublic class PureSimpleClass {\r\n    /**\r\n     * A field.\r\n     */\r\n    private String field;\r\n\r\n\r\n    public static class InnerClass {\r\n        /**\r\n         * Another field.\r\n         */\r\n        private String innerField;\r\n\r\n        /**\r\n         * Another field.\r\n         */\r\n        @java.lang.SuppressWarnings(\"all\")\r\n        public String getInnerField() {\r\n            return this.innerField;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A field.\r\n     */\r\n    @java.lang.SuppressWarnings(\"all\")\r\n    public String getField() {\r\n        return this.field;\r\n    }\r\n}\r\n```\r\n\r\n**Version info:**\r\n - Lombok version: 1.18.20\r\n - Platform: \r\n   - `java -version`:\r\n      ```\r\n      openjdk version \"1.8.0_292\"\r\n      OpenJDK Runtime Environment (build 1.8.0_292-8u292-b10-0ubuntu1~18.04-b10)\r\n      OpenJDK 64-Bit Server VM (build 25.292-b10, mixed mode)\r\n      ```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2969/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2969/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2967","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2967/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2967/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2967/events","html_url":"https://github.com/projectlombok/lombok/issues/2967","id":1000341990,"node_id":"I_kwDOAANips47oAHm","number":2967,"title":"[FEATURE] Register at the OpenJDK Quality Outreach","user":{"login":"aalmiray","id":13969,"node_id":"MDQ6VXNlcjEzOTY5","avatar_url":"https://avatars.githubusercontent.com/u/13969?v=4","gravatar_id":"","url":"https://api.github.com/users/aalmiray","html_url":"https://github.com/aalmiray","followers_url":"https://api.github.com/users/aalmiray/followers","following_url":"https://api.github.com/users/aalmiray/following{/other_user}","gists_url":"https://api.github.com/users/aalmiray/gists{/gist_id}","starred_url":"https://api.github.com/users/aalmiray/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aalmiray/subscriptions","organizations_url":"https://api.github.com/users/aalmiray/orgs","repos_url":"https://api.github.com/users/aalmiray/repos","events_url":"https://api.github.com/users/aalmiray/events{/privacy}","received_events_url":"https://api.github.com/users/aalmiray/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-19T15:21:51Z","updated_at":"2021-09-19T23:01:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Please consider registering the project to be visible at https://wiki.openjdk.java.net/display/quality/Quality+Outreach\r\n\r\nThe Outreach team will periodically communicate with project maintainers to let them know when new EA releases are ready, what changes are implemented/coming, and so forth. Lombok being a cornerstone project in the Java ecosystem should be at the forefront 😉 ","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2967/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2967/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2964","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2964/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2964/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2964/events","html_url":"https://github.com/projectlombok/lombok/issues/2964","id":998017793,"node_id":"I_kwDOAANips47fIsB","number":2964,"title":"Lombok install don't find Eclipse when it was installed by chocolatey","user":{"login":"axel584","id":1334088,"node_id":"MDQ6VXNlcjEzMzQwODg=","avatar_url":"https://avatars.githubusercontent.com/u/1334088?v=4","gravatar_id":"","url":"https://api.github.com/users/axel584","html_url":"https://github.com/axel584","followers_url":"https://api.github.com/users/axel584/followers","following_url":"https://api.github.com/users/axel584/following{/other_user}","gists_url":"https://api.github.com/users/axel584/gists{/gist_id}","starred_url":"https://api.github.com/users/axel584/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/axel584/subscriptions","organizations_url":"https://api.github.com/users/axel584/orgs","repos_url":"https://api.github.com/users/axel584/repos","events_url":"https://api.github.com/users/axel584/events{/privacy}","received_events_url":"https://api.github.com/users/axel584/received_events","type":"User","site_admin":false},"labels":[{"id":1789604824,"node_id":"MDU6TGFiZWwxNzg5NjA0ODI0","url":"https://api.github.com/repos/projectlombok/lombok/labels/awaiting-fix-confirmation","name":"awaiting-fix-confirmation","color":"fbca04","default":false,"description":"We believe this bug has been fixed, the issue may be left open for a little while for confirmation."}],"state":"open","locked":false,"assignee":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"assignees":[{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2021-09-16T09:58:05Z","updated_at":"2021-09-16T17:19:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Chocolatey is a package manager for windows and it install Eclipse in the C:\\ProgramData\\chocolatey\\lib\\eclipse-java-oxygen\\tools\\eclipse directory.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2964/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2964/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2957","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2957/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2957/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2957/events","html_url":"https://github.com/projectlombok/lombok/issues/2957","id":995918742,"node_id":"I_kwDOAANips47XIOW","number":2957,"title":"[FEATURE] A way to create custom constructors (where the field(s) to include are explicitly indicated)","user":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-14T11:42:50Z","updated_at":"2021-09-14T11:42:50Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"## Background and description\r\n\r\nLombok currently offers 3 'flavours' of constructor generation, all of which pre-define which fields are intended (in that they are named `NoArgsConstructor`, `AllArgsConstructor`, and `RequiredArgsConstructor`, which are words that describe which fields are to be included inherently). One of these features is wound up with `@Builder` (which implies `@AllArgsConstructor` under most scenarios).\r\n\r\nThere are multiple feature requests for more fine grained control of which fields are to be included, generally in the vein of 'how can I mark a field that lombok thinks is required as not actually required, or vice versa', or 'how can I exclude a field from `@Builder`?'.\r\n\r\nThese feature requests do not make sense, it's like asking 'how do I add a corner to a circle'. Nevertheless, the underlying requirement is a use case we'd like to cater to, so we need some sort of 4th flavour of constructor: Based on a custom list.\r\n\r\nOne annoyance is that java allows multiple constructors in a class, so it's not really right to talk about __the__ custom constructor; one can merely talk about __a__ custom constructor. This does not mesh well with annotations, and doesn't mesh well with the most obvious approach (which is to mark each field you want included explicitly, but how do you indicate that some field should be included for custom constructor 1, and not custom constructor 2?)\r\n\r\n## Simple proposal - single `@CustomConstructor`\r\n\r\nWe ditch the use case of multiple custom constructors, relegating that to the 'that is no longer boilerplate; lombok cannot help you out anymore' dustbin. In this case, all we really need is [A] a `@CustomConstructor` annotation  (valid on types) and [B] a `@CustomConstructor.Include` and `@CustomConstructor.Exclude` annotation (valid on fields).\r\n\r\nObvious downside is that you can only have 1 custom constructor.\r\n\r\nIt is a compiler error if you have include/exclude annotations and no `@CustomConstructor` on the class. It is a compiler error if you have `@CustomConstructor` on a class and zero include/exclude annotations (because, does that mean 'I want no fields' or does that mean 'I want all of them').\r\n\r\n## Denied alternative: Omit `@CustomConstructor` itself (only have Incl/Excl)\r\n\r\nIt seems like the `@CustomConstructor` annotation itself doesn't really need to exist; a single Include or Exclude annotation is enough. However, that complicates matters a bit for `@Builder` and co, and I don't think it helps readability of the end result, nor does it help discoverability of the `@CustomConstructor` feature. Unless I've missed something (in which case feel free to comment), I'm denying this alternative.\r\n\r\n## Denied alternative: Stringly typed multiple custom constructors\r\n\r\nWe _could_ introduce the concept of the 'constructor name'. Then you could do something like:\r\n\r\n```\r\n@CustomConstructor({\"a\", \"foo\"})\r\npublic class Example {\r\n    @CustomConstructor.Include(\"a\")\r\n    private int includedInAButNotInFoo;\r\n}\r\n```\r\n\r\nbut this seems really hard to use, easily fatfingered, lacks IDE support (auto-complete on those constructor names is not going to happen, obviously), and even causes confusion when you want to define one constructor by way of inclusion (only these fields), and the other by way of exclusion (all fields except the ones marked for exclusion).\r\n\r\nMaking this feature way more complicated in the name of what to me seems like a really exotic usecase (multiple constructors required, all of which are field-based and none of which fall under the notion of 'all', 'none', or 'required'), doesn't sound like a good plan. Unless there's a common pattern/very commonly used library out there that more or less requires at least 2 custom constructors that I'm not aware of (in which case, comment and name them), this isn't going to happen (especially not for a first take on this idea; we can always add it later without breaking backwards compatibility if we must).\r\n\r\n### What about final fields?\r\n\r\nWhat do we do with non-included `final` fields? Just init them to 0/false/null? Allow a mechanism to specify the default (this is incredibly complicated, so before you chime in: YEAH! It makes this feature about 10x more complicated, I'd like to hear a clear proposal on how. Any comments with a simple 'yes, important!', even if it goes with a personal story on how much you need it, are not particularly desired, I don't think anybody would argue defaults aren't useful). This defaulting question also extends to NoArgsConstructor to some extent.\r\n\r\n* Just use a single default annotation doesn't work - java's annotation system doesn't allow e.g. `@Default(System.currentTimemillis())` at all (only compile time constants need apply). Even if we restrict defaults to only CTCs, you'd need one annotation for each type (`@DefaultInt`, `@DefaultBoolean`, etc).\r\n* Allowing the field initializer to serve (the way builder works: `@Default private int field = 5;`, implying that only for those constructors that do not include `field`, set it to `5`) is also complicated: What if that expression has side-effects or resolves to a mutable entity. Does that mean it's resolved once for the entire class and that value is assigned as default, or is the expression resolved every time? We also have to 'mess' with your hand written code and move that initializing expression around, which makes this feature very complex and significantly increases maintenance burden. We'd also have to answer some questions about having 2 separate defaulting mechanisms - this really doesn't sound like a workable idea unless we unify `@Builder.Default` and this `@Default` first, but how do we do that, preferably maintaining backwards compatibility?\r\n\r\nI will assume that this feature will be implemented separated (as in, we'll ship without defaulting support now; we can always add it later).\r\n\r\nStatus of this feature request: Gather feedback and use cases first, before making a decision.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2957/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2957/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2954","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2954/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2954/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2954/events","html_url":"https://github.com/projectlombok/lombok/issues/2954","id":993141861,"node_id":"MDU6SXNzdWU5OTMxNDE4NjE=","number":2954,"title":"[BUG] Compilation error when using import wildcard","user":{"login":"curious-odd-man","id":10796252,"node_id":"MDQ6VXNlcjEwNzk2MjUy","avatar_url":"https://avatars.githubusercontent.com/u/10796252?v=4","gravatar_id":"","url":"https://api.github.com/users/curious-odd-man","html_url":"https://github.com/curious-odd-man","followers_url":"https://api.github.com/users/curious-odd-man/followers","following_url":"https://api.github.com/users/curious-odd-man/following{/other_user}","gists_url":"https://api.github.com/users/curious-odd-man/gists{/gist_id}","starred_url":"https://api.github.com/users/curious-odd-man/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/curious-odd-man/subscriptions","organizations_url":"https://api.github.com/users/curious-odd-man/orgs","repos_url":"https://api.github.com/users/curious-odd-man/repos","events_url":"https://api.github.com/users/curious-odd-man/events{/privacy}","received_events_url":"https://api.github.com/users/curious-odd-man/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-10T11:22:44Z","updated_at":"2021-09-10T11:22:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nWhen I use imports with a wildcard compilation stops working (specifically to the case below), while if I use imports for separate classes - it does work.\r\n\r\nI've tried to make smaller example, but it actually reproduced only after I've added custom builder name and a custom Builder class that extends generated builder.\r\n\r\n**To Reproduce**\r\n\r\nOn top of the sample file there are SWITCH with 2 cases.\r\nIf you **uncomment CASE 1** imports, and **comment CASE 2** imports - compilation will fail.\r\nIf you **comment CASE 1** and **uncomment CASE 2** - compilation succeeds.\r\n\r\nA code sample:\r\n```\r\n// SWITCH:\r\n// CASE 1: This way it does not work (uncomment)\r\nimport lombok.*;\r\n// CASE 2: This way it will work (uncomment)\r\n//import lombok.Builder;\r\n//import lombok.Getter;\r\n//import lombok.Singular;\r\n//import lombok.ToString;\r\n// END OF SWITCH\r\n\r\nimport java.util.List;\r\n\r\n@ToString\r\n@Builder(buildMethodName = \"random\")\r\n@Getter\r\npublic class Main {\r\n\r\n    @Singular\r\n    private List<String> strings;\r\n\r\n    @Getter\r\n    public static class Builder extends MainBuilder {\r\n\r\n        public Builder() {\r\n        }\r\n\r\n        @Override\r\n        public Main random() {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n```\r\n**Expected behavior**\r\nCode should compile even with a wildcard import.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: `1.18.20`\r\n - Platform (javac or eclipse, and if so, what is the output of `javac -version` / the version listed in the _about..._ dialog of eclipse.\r\n javac 11.0.9\r\n ```\r\n IntelliJ IDEA: \r\n IntelliJ IDEA 2021.1.2 (Ultimate Edition)\r\nBuild #IU-211.7442.40, built on June 1, 2021\r\nLicensed to ***\r\n\r\nRuntime version: 11.0.11+9-b1341.57 amd64\r\nVM: Dynamic Code Evolution 64-Bit Server VM by JetBrains s.r.o.\r\nWindows 10 10.0\r\nGC: ParNew, ConcurrentMarkSweep\r\nMemory: 4029M\r\nCores: 8\r\nNon-Bundled Plugins: com.github.b3er.idea.plugins.arc.browser (0.23), com.github.curious-odd-man.tee-output (1.3), net.sf.opk.avro-schema-support (203.1.0), org.jetbrains.kotlin (211-1.5.30-release-408-IJ7442.40), JProfiler (19.3), fr.jukien.intellij.plugins.pojo-generator (2.3.1)\r\nKotlin: 211-1.5.30-release-408-IJ7442.40\r\n```\r\nGradle version\r\n``` \r\n------------------------------------------------------------\r\nGradle 7.0.2\r\n------------------------------------------------------------\r\n\r\nBuild time:   2021-05-14 12:02:31 UTC\r\nRevision:     1ef1b260d39daacbf9357f9d8594a8a743e2152e\r\n\r\nKotlin:       1.4.31\r\nGroovy:       3.0.7\r\nAnt:          Apache Ant(TM) version 1.10.9 compiled on September 27 2020\r\nJVM:          11.0.9 (AdoptOpenJDK 11.0.9+11)\r\nOS:           Windows 10 10.0 amd64\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2954/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2953","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2953/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2953/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2953/events","html_url":"https://github.com/projectlombok/lombok/issues/2953","id":992113339,"node_id":"MDU6SXNzdWU5OTIxMTMzMzk=","number":2953,"title":"[FEATURE] @Setter may ignore null argument","user":{"login":"caboodle","id":2452909,"node_id":"MDQ6VXNlcjI0NTI5MDk=","avatar_url":"https://avatars.githubusercontent.com/u/2452909?v=4","gravatar_id":"","url":"https://api.github.com/users/caboodle","html_url":"https://github.com/caboodle","followers_url":"https://api.github.com/users/caboodle/followers","following_url":"https://api.github.com/users/caboodle/following{/other_user}","gists_url":"https://api.github.com/users/caboodle/gists{/gist_id}","starred_url":"https://api.github.com/users/caboodle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/caboodle/subscriptions","organizations_url":"https://api.github.com/users/caboodle/orgs","repos_url":"https://api.github.com/users/caboodle/repos","events_url":"https://api.github.com/users/caboodle/events{/privacy}","received_events_url":"https://api.github.com/users/caboodle/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-09T11:29:44Z","updated_at":"2021-09-09T11:29:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I propose an option for setters to ignore null inputs without throwing an exception.\r\n`@Setter(nullPolicy=\"ignore\")`\r\n\r\nIt often happens that DB entities need to be updated from sparsely populated DTOs, leading to lots of code fragments like\r\n`if (dto.getA()!=null) {entity.setA(dto.getA();}`\r\n\r\nIt would be preferable to just `entity.setA(dto.getA())`; or `entity.setIfNotNullA(dto.getA());`\r\n\r\nSuch an option could be for all non-final members at the class level or for individual fields. Conversely, fields could be marked as `@NullPolicy(\"throw\")` to overwrite the class-level annotation.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2953/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2953/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2952","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2952/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2952/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2952/events","html_url":"https://github.com/projectlombok/lombok/issues/2952","id":991485677,"node_id":"MDU6SXNzdWU5OTE0ODU2Nzc=","number":2952,"title":"[BUG] getter on static field can't be used as static import","user":{"login":"Krzysztof-Lempicki","id":55065779,"node_id":"MDQ6VXNlcjU1MDY1Nzc5","avatar_url":"https://avatars.githubusercontent.com/u/55065779?v=4","gravatar_id":"","url":"https://api.github.com/users/Krzysztof-Lempicki","html_url":"https://github.com/Krzysztof-Lempicki","followers_url":"https://api.github.com/users/Krzysztof-Lempicki/followers","following_url":"https://api.github.com/users/Krzysztof-Lempicki/following{/other_user}","gists_url":"https://api.github.com/users/Krzysztof-Lempicki/gists{/gist_id}","starred_url":"https://api.github.com/users/Krzysztof-Lempicki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Krzysztof-Lempicki/subscriptions","organizations_url":"https://api.github.com/users/Krzysztof-Lempicki/orgs","repos_url":"https://api.github.com/users/Krzysztof-Lempicki/repos","events_url":"https://api.github.com/users/Krzysztof-Lempicki/events{/privacy}","received_events_url":"https://api.github.com/users/Krzysztof-Lempicki/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-08T20:07:15Z","updated_at":"2021-09-13T12:42:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen @Getter is used on static field, getter can't be used as `static import`.\r\n\r\n**To Reproduce**\r\na) create class with: `private final MyInterface interfaceField=null;` and @Getter on it\r\nb) create another class with `main` method that calls getter from point A as `static import`\r\n\r\n**Expected behavior**\r\nPossibility to use getter as static import\r\n\r\nIf this is impossible at least clear error message that it can't be done.\r\n\r\nRight now I get:\r\n\r\n```\r\n[ERROR] /C:/Users/krzys/tmp/cmd_format_tmp/src/main/java/kkl/lib/cmd/formatter/REMOV_ME.java:[14,9] cannot find symbol\r\n[ERROR]   symbol:   method getTestFacade()\r\n[ERROR]   location: class kkl.lib.cmd.formatter.REMOV_ME\r\n[ERROR] /C:/Users/krzys/tmp/cmd_format_tmp/src/main/java/kkl/lib/cmd/formatter/COFO.java:[14,9] cannot find symbol\r\n[ERROR]   symbol:   method getSharedInterface()\r\n[ERROR]   location: class kkl.lib.cmd.formatter.COFO\r\n[ERROR] /C:/Users/krzys/tmp/cmd_format_tmp/src/main/java/kkl/lib/cmd/formatter/COFO.java:[15,29] cannot find symbol\r\n[ERROR]   symbol:   method getTestFacade()\r\n[ERROR]   location: class kkl.lib.cmd.formatter.config.internal.bean.FacadeBeanRepository\r\n```\r\n \r\nOnly `getSharedInterface` causes error. \r\nMethod `getTestFacade()` is called without `static import` but here is wrongly mentioned as an error.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: 1.18.20\r\n - Platform javac 15.0.2\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2952/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2952/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2951","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2951/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2951/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2951/events","html_url":"https://github.com/projectlombok/lombok/issues/2951","id":990647823,"node_id":"MDU6SXNzdWU5OTA2NDc4MjM=","number":2951,"title":"[BUG] @Slf4j会随即唤醒个别阻塞线程","user":{"login":"scqzyq","id":40133380,"node_id":"MDQ6VXNlcjQwMTMzMzgw","avatar_url":"https://avatars.githubusercontent.com/u/40133380?v=4","gravatar_id":"","url":"https://api.github.com/users/scqzyq","html_url":"https://github.com/scqzyq","followers_url":"https://api.github.com/users/scqzyq/followers","following_url":"https://api.github.com/users/scqzyq/following{/other_user}","gists_url":"https://api.github.com/users/scqzyq/gists{/gist_id}","starred_url":"https://api.github.com/users/scqzyq/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scqzyq/subscriptions","organizations_url":"https://api.github.com/users/scqzyq/orgs","repos_url":"https://api.github.com/users/scqzyq/repos","events_url":"https://api.github.com/users/scqzyq/events{/privacy}","received_events_url":"https://api.github.com/users/scqzyq/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-08T03:19:24Z","updated_at":"2021-09-08T03:19:24Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n使用LockSupport.park()阻塞线程后会继续执行后边的代码，并不是所有线程都会这样，只有个别线程会出现这种情况，如果第一次不能复现可以多执行几次test01方法。\r\n\r\n`public class TestLock {\r\n    @Test\r\n    public void test01() {\r\n        for (int i = 0; i < 1000; i++) {\r\n            new Thread(new TestLog()).start();\r\n        }\r\n    }\r\n}\r\n@Slf4j\r\nclass TestLog implements Runnable{\r\n    @Override\r\n    public void run() {\r\n        log.info(\"挂起\");\r\n        LockSupport.park();\r\n        log.error(\"唤醒-------------------------------\");\r\n    }\r\n}`\r\n**Version info (please complete the following information):**\r\n - Lombok version bundled 212.4746.92\r\n - idea\r\n![image](https://user-images.githubusercontent.com/40133380/132441051-0a534694-4255-4433-8bab-1f880d1d5d8e.png)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2951/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2948","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2948/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2948/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2948/events","html_url":"https://github.com/projectlombok/lombok/issues/2948","id":989252853,"node_id":"MDU6SXNzdWU5ODkyNTI4NTM=","number":2948,"title":"[BUG] + character in location of lombok.jar gives spaces in eclipse","user":{"login":"ericjvandervelden","id":1558473,"node_id":"MDQ6VXNlcjE1NTg0NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1558473?v=4","gravatar_id":"","url":"https://api.github.com/users/ericjvandervelden","html_url":"https://github.com/ericjvandervelden","followers_url":"https://api.github.com/users/ericjvandervelden/followers","following_url":"https://api.github.com/users/ericjvandervelden/following{/other_user}","gists_url":"https://api.github.com/users/ericjvandervelden/gists{/gist_id}","starred_url":"https://api.github.com/users/ericjvandervelden/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ericjvandervelden/subscriptions","organizations_url":"https://api.github.com/users/ericjvandervelden/orgs","repos_url":"https://api.github.com/users/ericjvandervelden/repos","events_url":"https://api.github.com/users/ericjvandervelden/events{/privacy}","received_events_url":"https://api.github.com/users/ericjvandervelden/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-06T14:55:57Z","updated_at":"2021-09-06T18:02:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI installed lombok in eclipse on windows. In eclipse.ini I see:\r\n-javaagent:D:\\dev\\eclipse-jee+ServerToolsWeblogic+Jboss\\lombok.jar\r\n\r\nWhen I have started eclipse, I see error messages where it says he cannot find the jar, but with spaces iso the + character:\r\njava.io.FileNotFoundExeption: cannot find D:\\dev\\eclipse-jee ServerToolsWeblogic Jboss\\lombok.jar\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2948/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2947","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2947/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2947/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2947/events","html_url":"https://github.com/projectlombok/lombok/issues/2947","id":988524549,"node_id":"MDU6SXNzdWU5ODg1MjQ1NDk=","number":2947,"title":"Generate builders with solicitor pattern","user":{"login":"jimshowalter","id":211780,"node_id":"MDQ6VXNlcjIxMTc4MA==","avatar_url":"https://avatars.githubusercontent.com/u/211780?v=4","gravatar_id":"","url":"https://api.github.com/users/jimshowalter","html_url":"https://github.com/jimshowalter","followers_url":"https://api.github.com/users/jimshowalter/followers","following_url":"https://api.github.com/users/jimshowalter/following{/other_user}","gists_url":"https://api.github.com/users/jimshowalter/gists{/gist_id}","starred_url":"https://api.github.com/users/jimshowalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jimshowalter/subscriptions","organizations_url":"https://api.github.com/users/jimshowalter/orgs","repos_url":"https://api.github.com/users/jimshowalter/repos","events_url":"https://api.github.com/users/jimshowalter/events{/privacy}","received_events_url":"https://api.github.com/users/jimshowalter/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-05T14:37:01Z","updated_at":"2021-09-12T21:32:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently builders present the same options to the developer even if required fields have already been filled in.\r\n\r\nFor example, if there two fields, foo and bar, then there are fluent setters for foo and bar, and both of those are always visible.\r\n\r\nUsing the \"solicitor\" pattern, instead of returning the same builder after every setter call, a solicitor object that wraps the builder is returned, and the solicitor presents only the next field or fields to be set (one field if there is only one choice, multiple fields if more than one choice makes sense at that phase of evaluation).\r\n\r\nThe last solicitor object offers optional fields, and also offers build() as one of the available calls.\r\n\r\nIf the object being built offers a tree of possible paths, then branching logic can be included in the solicitors that returns a new solicitor based on the most-recent selection.\r\n\r\nCombined with auto-complete in an IDE like IntelliJ or Eclipse, this approach yields a much better authoring experience for developers than a \"flat\" builder like lombok currently generates.\r\n\r\nLombok could generate solicitor-based builders. It would require annotating the order in which to prompt, and indicating which fields are optional, and some way to indicate branching logic when there is a tree of paths. But the reward would be best-in-class builders.\r\n\r\nCreating solicitor-based builders manually is a pain. It would be a boon to get them automatically.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2947/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2946","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2946/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2946/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2946/events","html_url":"https://github.com/projectlombok/lombok/issues/2946","id":987321232,"node_id":"MDU6SXNzdWU5ODczMjEyMzI=","number":2946,"title":"Can I make a one time donation?","user":{"login":"swaranga","id":7319946,"node_id":"MDQ6VXNlcjczMTk5NDY=","avatar_url":"https://avatars.githubusercontent.com/u/7319946?v=4","gravatar_id":"","url":"https://api.github.com/users/swaranga","html_url":"https://github.com/swaranga","followers_url":"https://api.github.com/users/swaranga/followers","following_url":"https://api.github.com/users/swaranga/following{/other_user}","gists_url":"https://api.github.com/users/swaranga/gists{/gist_id}","starred_url":"https://api.github.com/users/swaranga/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/swaranga/subscriptions","organizations_url":"https://api.github.com/users/swaranga/orgs","repos_url":"https://api.github.com/users/swaranga/repos","events_url":"https://api.github.com/users/swaranga/events{/privacy}","received_events_url":"https://api.github.com/users/swaranga/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-03T01:59:49Z","updated_at":"2021-09-03T01:59:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I want to support this project but a monthly/yearly patreon subscription will not be feasible for me. Could I instead do a one time donation somewhere? ","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2946/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2946/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2943","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2943/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2943/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2943/events","html_url":"https://github.com/projectlombok/lombok/issues/2943","id":983993032,"node_id":"MDU6SXNzdWU5ODM5OTMwMzI=","number":2943,"title":"[BUG] @Builder problem with classes consisting of one field and ObjectMapper","user":{"login":"yasharzb","id":45389623,"node_id":"MDQ6VXNlcjQ1Mzg5NjIz","avatar_url":"https://avatars.githubusercontent.com/u/45389623?v=4","gravatar_id":"","url":"https://api.github.com/users/yasharzb","html_url":"https://github.com/yasharzb","followers_url":"https://api.github.com/users/yasharzb/followers","following_url":"https://api.github.com/users/yasharzb/following{/other_user}","gists_url":"https://api.github.com/users/yasharzb/gists{/gist_id}","starred_url":"https://api.github.com/users/yasharzb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yasharzb/subscriptions","organizations_url":"https://api.github.com/users/yasharzb/orgs","repos_url":"https://api.github.com/users/yasharzb/repos","events_url":"https://api.github.com/users/yasharzb/events{/privacy}","received_events_url":"https://api.github.com/users/yasharzb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-31T15:25:11Z","updated_at":"2021-08-31T15:45:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nHi. I noticed that classes consisting of one field have problem with JSON De-serialization via `com.fasterxml.jackson.databind.ObjectMapper` - the default json tool embedded in Spring Boot -  when they're annotated with `@Builder`. \r\n\r\n**To Reproduce**\r\n- Create a new Spring Project\r\n- Create a class with `@Builder` annotation (`MyClass.java`)\r\n- Try to convert a json to the class using `ObjectMapper` \r\n\r\n```java\r\n\r\n@Builder\r\n@Data\r\nclass MyClass{\r\n    private Integer id;\r\n}\r\n```\r\n\r\n```java\r\n\r\nString jsonStr = \"{\\\"id\\\":1}\";\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.reader().readValue(jsonStr, MyClass.class);\r\n```\r\n\r\n**Expected behavior**\r\nYou'll face an exception like this:\r\n`JSON parse error: Cannot construct instance of <the_class>(although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of <the_class> (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: (PushbackInputStream); line: 2, column: 2]`\r\n\r\n**Version info (please complete the following information):**\r\n - 1.8.20\r\n - Java 11 - IntelliJ\r\n\r\n**Additional context**\r\nOnce you add another field to the class or remove the `@Builder` there will be no problem in parsing.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2943/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2938","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2938/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2938/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2938/events","html_url":"https://github.com/projectlombok/lombok/issues/2938","id":976460532,"node_id":"MDU6SXNzdWU5NzY0NjA1MzI=","number":2938,"title":"[BUG] Documentation for \"With\"","user":{"login":"MarcinOrlowski","id":8041294,"node_id":"MDQ6VXNlcjgwNDEyOTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8041294?v=4","gravatar_id":"","url":"https://api.github.com/users/MarcinOrlowski","html_url":"https://github.com/MarcinOrlowski","followers_url":"https://api.github.com/users/MarcinOrlowski/followers","following_url":"https://api.github.com/users/MarcinOrlowski/following{/other_user}","gists_url":"https://api.github.com/users/MarcinOrlowski/gists{/gist_id}","starred_url":"https://api.github.com/users/MarcinOrlowski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarcinOrlowski/subscriptions","organizations_url":"https://api.github.com/users/MarcinOrlowski/orgs","repos_url":"https://api.github.com/users/MarcinOrlowski/repos","events_url":"https://api.github.com/users/MarcinOrlowski/events{/privacy}","received_events_url":"https://api.github.com/users/MarcinOrlowski/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-22T20:11:51Z","updated_at":"2021-08-22T20:11:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It's about the documentation for `With`. Unless I am wrong, the example code for \"With Lombok\" on page: https://projectlombok.org/features/With that currently looks like this:\r\n\r\n```java\r\n  public WithExample(String name, int age) {\r\n    if (name == null) throw new NullPointerException();\r\n    this.name = name;\r\n    this.age = age;\r\n  }\r\n```\r\n\r\ncould be improved by just making `String name` argument `@NonNull`. That should automatically remove the need of check code, so it could look like this:\r\n\r\n```java\r\n  public WithExample(@NonNull String name, int age) {\r\n    this.name = name;\r\n    this.age = age;\r\n  }\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2938/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2938/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2937","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2937/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2937/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2937/events","html_url":"https://github.com/projectlombok/lombok/issues/2937","id":974926542,"node_id":"MDU6SXNzdWU5NzQ5MjY1NDI=","number":2937,"title":"Support for a package/module wide @NonNull annotation for public, protected method parameters","user":{"login":"venkateshamurthy","id":1124320,"node_id":"MDQ6VXNlcjExMjQzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1124320?v=4","gravatar_id":"","url":"https://api.github.com/users/venkateshamurthy","html_url":"https://github.com/venkateshamurthy","followers_url":"https://api.github.com/users/venkateshamurthy/followers","following_url":"https://api.github.com/users/venkateshamurthy/following{/other_user}","gists_url":"https://api.github.com/users/venkateshamurthy/gists{/gist_id}","starred_url":"https://api.github.com/users/venkateshamurthy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/venkateshamurthy/subscriptions","organizations_url":"https://api.github.com/users/venkateshamurthy/orgs","repos_url":"https://api.github.com/users/venkateshamurthy/repos","events_url":"https://api.github.com/users/venkateshamurthy/events{/privacy}","received_events_url":"https://api.github.com/users/venkateshamurthy/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-19T18:17:50Z","updated_at":"2021-08-19T18:17:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently @NonNull is applicable for each individiaul field and becomes too repetetive and verbose to keep adding it for every method parameter.\r\n\r\nCould we have this annotation or equivalent to support all public/protected method parameters which can be applied at package level","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2937/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2935","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2935/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2935/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2935/events","html_url":"https://github.com/projectlombok/lombok/issues/2935","id":974493328,"node_id":"MDU6SXNzdWU5NzQ0OTMzMjg=","number":2935,"title":"[FEATURE] ","user":{"login":"dhoehl","id":33830749,"node_id":"MDQ6VXNlcjMzODMwNzQ5","avatar_url":"https://avatars.githubusercontent.com/u/33830749?v=4","gravatar_id":"","url":"https://api.github.com/users/dhoehl","html_url":"https://github.com/dhoehl","followers_url":"https://api.github.com/users/dhoehl/followers","following_url":"https://api.github.com/users/dhoehl/following{/other_user}","gists_url":"https://api.github.com/users/dhoehl/gists{/gist_id}","starred_url":"https://api.github.com/users/dhoehl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dhoehl/subscriptions","organizations_url":"https://api.github.com/users/dhoehl/orgs","repos_url":"https://api.github.com/users/dhoehl/repos","events_url":"https://api.github.com/users/dhoehl/events{/privacy}","received_events_url":"https://api.github.com/users/dhoehl/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-19T10:04:10Z","updated_at":"2021-08-19T10:04:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nExtend the @Getter Annotation by a switch to modify the Getter when the type is MutableLiveData<Type>.\r\n\r\n@Getter\r\nprivate final MutableLiveData<Boolean> aMutable = new MutableLiveData<>(true);\r\n\r\nshould lead to :\r\nLiveData<Boolean> getAMutable(){return aMutable;}\r\ninstead of\r\nMutableLiveData<Boolean> getAMutable(){return aMutable;}\r\n\r\nBecause with LiveData we almost always never want to expose the mutable version of it\r\n\r\n**Describe the target audience**\r\nWithin Android Apps LiveData is very common","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2935/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2934","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2934/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2934/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2934/events","html_url":"https://github.com/projectlombok/lombok/issues/2934","id":974299254,"node_id":"MDU6SXNzdWU5NzQyOTkyNTQ=","number":2934,"title":"@Builder methods do not copy javadoc in last @param comment and @Singular and Sub Class","user":{"login":"JaesungAhn","id":17820208,"node_id":"MDQ6VXNlcjE3ODIwMjA4","avatar_url":"https://avatars.githubusercontent.com/u/17820208?v=4","gravatar_id":"","url":"https://api.github.com/users/JaesungAhn","html_url":"https://github.com/JaesungAhn","followers_url":"https://api.github.com/users/JaesungAhn/followers","following_url":"https://api.github.com/users/JaesungAhn/following{/other_user}","gists_url":"https://api.github.com/users/JaesungAhn/gists{/gist_id}","starred_url":"https://api.github.com/users/JaesungAhn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JaesungAhn/subscriptions","organizations_url":"https://api.github.com/users/JaesungAhn/orgs","repos_url":"https://api.github.com/users/JaesungAhn/repos","events_url":"https://api.github.com/users/JaesungAhn/events{/privacy}","received_events_url":"https://api.github.com/users/JaesungAhn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"Rawi01","id":5850477,"node_id":"MDQ6VXNlcjU4NTA0Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5850477?v=4","gravatar_id":"","url":"https://api.github.com/users/Rawi01","html_url":"https://github.com/Rawi01","followers_url":"https://api.github.com/users/Rawi01/followers","following_url":"https://api.github.com/users/Rawi01/following{/other_user}","gists_url":"https://api.github.com/users/Rawi01/gists{/gist_id}","starred_url":"https://api.github.com/users/Rawi01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rawi01/subscriptions","organizations_url":"https://api.github.com/users/Rawi01/orgs","repos_url":"https://api.github.com/users/Rawi01/repos","events_url":"https://api.github.com/users/Rawi01/events{/privacy}","received_events_url":"https://api.github.com/users/Rawi01/received_events","type":"User","site_admin":false},"assignees":[{"login":"Rawi01","id":5850477,"node_id":"MDQ6VXNlcjU4NTA0Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/5850477?v=4","gravatar_id":"","url":"https://api.github.com/users/Rawi01","html_url":"https://github.com/Rawi01","followers_url":"https://api.github.com/users/Rawi01/followers","following_url":"https://api.github.com/users/Rawi01/following{/other_user}","gists_url":"https://api.github.com/users/Rawi01/gists{/gist_id}","starred_url":"https://api.github.com/users/Rawi01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Rawi01/subscriptions","organizations_url":"https://api.github.com/users/Rawi01/orgs","repos_url":"https://api.github.com/users/Rawi01/repos","events_url":"https://api.github.com/users/Rawi01/events{/privacy}","received_events_url":"https://api.github.com/users/Rawi01/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2021-08-19T05:54:06Z","updated_at":"2021-09-13T01:06:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"related #2481 \r\n\r\n1. last `@param` case\r\ndo not generate last `@param` field comment\r\n```\r\npublic class Test {\r\n    private String firstField;\r\n    private String secondField;\r\n    private String lastField;\r\n\r\n    /**\r\n     * @param firstField Comment First\r\n     * @param secondField Comment Second\r\n     * @param lastField Comment Last\r\n    */\r\n    @Builder\r\n    public Test(final String firstField, final String secondField, final String lastField) {\r\n        this.firstField= firstField;\r\n        this.secondField= secondField;\r\n        this.lastField= lastField;\r\n    }\r\n\r\n    private void bla() {\r\n        Test.builder()\r\n            .firstField(\"a\") // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .secondField(\"b\") // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .lastField(\"c\") // <--- no Javadoc displayed in tooltip without delombok, and delombok won't generate Javadoc\r\n            .build();\r\n    }\r\n}\r\n```\r\n\r\n```\r\npublic class Test {\r\n    private String firstField;\r\n    private String secondField;\r\n    private String lastField;\r\n\r\n    /**\r\n     * @param firstField Comment First\r\n     * @param secondField Comment Second\r\n     * @param lastField Comment Last\r\n     * @author user <--- Add any comments at the end. generate javadoc last @param field\r\n    */\r\n    @Builder\r\n    public Test(final String firstField, final String secondField, final String lastField) {\r\n        this.firstField= firstField;\r\n        this.secondField= secondField;\r\n        this.lastField= lastField;\r\n    }\r\n\r\n    private void bla() {\r\n        Test.builder()\r\n            .firstField(\"a\") // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .secondField(\"b\") // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .lastField(\"c\") // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .build();\r\n    }\r\n}\r\n```\r\n\r\n2. `@Singular` case\r\ndo not generate `@Singular` field and singular name of this field comment\r\n```\r\npublic class Test {\r\n    private String firstField;\r\n    private List<String> secondField;\r\n    private List<String> lastField;\r\n\r\n    /**\r\n     * @param firstField Comment First\r\n     * @param secondField Comment Second\r\n     * @param lastField Comment Last\r\n     * @author user\r\n    */\r\n    @Builder\r\n    public Test(final String firstField, final List<String> secondField, @Singular(\"addLast\") final List<String> lastField) {\r\n        this.firstField= firstField;\r\n        this.secondField= secondField;\r\n        this.lastField= lastField;\r\n    }\r\n\r\n    private void bla() {\r\n        Test.builder()\r\n            .firstField(\"a\") // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .secondField(null) // <--- no Javadoc displayed in tooltip without delombok, but delombok would generate Javadoc\r\n            .lastField(null) // <--- no Javadoc displayed in tooltip without delombok, and delombok won't generate Javadoc\r\n            .addLast(\"c\") // <--- no Javadoc displayed in tooltip without delombok, and delombok won't generate Javadoc\r\n            .build();\r\n    }\r\n}\r\n```\r\n\r\n3.  Sub Class case\r\ndo not generate all field comment\r\n```\r\npublic class Test {\r\n    ...~~...\r\n\r\n    public static class Sub {\r\n        /** \r\n         * @param firstField Comment First\r\n         * @param secondField Comment Second\r\n         * @param lastField Comment Last\r\n        */\r\n        @Builder\r\n        public Sub(final String firstField, final String secondField, final String lastField) {\r\n            this.firstField= firstField;\r\n            this.secondField= secondField;\r\n            this.lastField= lastField;\r\n        }\r\n    }\r\n    private void bla() {\r\n        Test.Sub.builder()\r\n            .firstField(\"a\") // <--- no Javadoc displayed in tooltip without delombok, and delombok won't generate Javadoc\r\n            .secondField(\"b\") // <--- no Javadoc displayed in tooltip without delombok, and delombok won't generate Javadoc\r\n            .lastField(\"c\") // <--- no Javadoc displayed in tooltip without delombok, and delombok won't generate Javadoc\r\n            .build();\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2934/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2934/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2933","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2933/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2933/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2933/events","html_url":"https://github.com/projectlombok/lombok/issues/2933","id":973014354,"node_id":"MDU6SXNzdWU5NzMwMTQzNTQ=","number":2933,"title":"[FEATURE] Let @RequiredArgsConstructor handler migrate field's annotations","user":{"login":"MarushkoNY","id":34109872,"node_id":"MDQ6VXNlcjM0MTA5ODcy","avatar_url":"https://avatars.githubusercontent.com/u/34109872?v=4","gravatar_id":"","url":"https://api.github.com/users/MarushkoNY","html_url":"https://github.com/MarushkoNY","followers_url":"https://api.github.com/users/MarushkoNY/followers","following_url":"https://api.github.com/users/MarushkoNY/following{/other_user}","gists_url":"https://api.github.com/users/MarushkoNY/gists{/gist_id}","starred_url":"https://api.github.com/users/MarushkoNY/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MarushkoNY/subscriptions","organizations_url":"https://api.github.com/users/MarushkoNY/orgs","repos_url":"https://api.github.com/users/MarushkoNY/repos","events_url":"https://api.github.com/users/MarushkoNY/events{/privacy}","received_events_url":"https://api.github.com/users/MarushkoNY/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-17T19:51:33Z","updated_at":"2021-08-18T06:51:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello there!\r\nI've encountered a situation few times where I had to use spring's qualifier annotation on final fields.\r\nAlong with that I used @RequiredArgsConstructor for making injectable constructor and as you may know qualifier's annotations stayed.\r\nIs it possible to add an optional switcher that will migrate all the field's annotations to constructor arguments or \r\nis it out of scope of lombok's paradigm? \r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2933/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2933/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2929","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2929/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2929/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2929/events","html_url":"https://github.com/projectlombok/lombok/issues/2929","id":970841219,"node_id":"MDU6SXNzdWU5NzA4NDEyMTk=","number":2929,"title":"Allow adding annotations to package-info.java","user":{"login":"lskr802","id":24194673,"node_id":"MDQ6VXNlcjI0MTk0Njcz","avatar_url":"https://avatars.githubusercontent.com/u/24194673?v=4","gravatar_id":"","url":"https://api.github.com/users/lskr802","html_url":"https://github.com/lskr802","followers_url":"https://api.github.com/users/lskr802/followers","following_url":"https://api.github.com/users/lskr802/following{/other_user}","gists_url":"https://api.github.com/users/lskr802/gists{/gist_id}","starred_url":"https://api.github.com/users/lskr802/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lskr802/subscriptions","organizations_url":"https://api.github.com/users/lskr802/orgs","repos_url":"https://api.github.com/users/lskr802/repos","events_url":"https://api.github.com/users/lskr802/events{/privacy}","received_events_url":"https://api.github.com/users/lskr802/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-14T06:40:00Z","updated_at":"2021-08-14T06:40:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Most often we keen all our POJO classes in a single package and adding annotations to each classes seems redundant. So if you could add this feature so that we can add all required annotations in package-info.java itself instead of adding it in all POJO classes. ","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2929/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2929/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2927","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2927/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2927/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2927/events","html_url":"https://github.com/projectlombok/lombok/issues/2927","id":968984701,"node_id":"MDU6SXNzdWU5Njg5ODQ3MDE=","number":2927,"title":"[FEATURE] toBuilder configurable from lombok.config","user":{"login":"kennethjor","id":289163,"node_id":"MDQ6VXNlcjI4OTE2Mw==","avatar_url":"https://avatars.githubusercontent.com/u/289163?v=4","gravatar_id":"","url":"https://api.github.com/users/kennethjor","html_url":"https://github.com/kennethjor","followers_url":"https://api.github.com/users/kennethjor/followers","following_url":"https://api.github.com/users/kennethjor/following{/other_user}","gists_url":"https://api.github.com/users/kennethjor/gists{/gist_id}","starred_url":"https://api.github.com/users/kennethjor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kennethjor/subscriptions","organizations_url":"https://api.github.com/users/kennethjor/orgs","repos_url":"https://api.github.com/users/kennethjor/repos","events_url":"https://api.github.com/users/kennethjor/events{/privacy}","received_events_url":"https://api.github.com/users/kennethjor/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-12T14:52:10Z","updated_at":"2021-08-12T14:52:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nAllow the default value of `toBuilder` in `@Builder` to be configurable via `lombok.config`.\r\n\r\nIt defaults to false. It'd be cool to be able to set it to true globally.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2927/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2927/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2925","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2925/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2925/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2925/events","html_url":"https://github.com/projectlombok/lombok/issues/2925","id":964537056,"node_id":"MDU6SXNzdWU5NjQ1MzcwNTY=","number":2925,"title":"[FEATURE] cache JavacAST object ","user":{"login":"dulm","id":1228446,"node_id":"MDQ6VXNlcjEyMjg0NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1228446?v=4","gravatar_id":"","url":"https://api.github.com/users/dulm","html_url":"https://github.com/dulm","followers_url":"https://api.github.com/users/dulm/followers","following_url":"https://api.github.com/users/dulm/following{/other_user}","gists_url":"https://api.github.com/users/dulm/gists{/gist_id}","starred_url":"https://api.github.com/users/dulm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dulm/subscriptions","organizations_url":"https://api.github.com/users/dulm/orgs","repos_url":"https://api.github.com/users/dulm/repos","events_url":"https://api.github.com/users/dulm/events{/privacy}","received_events_url":"https://api.github.com/users/dulm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-10T02:30:33Z","updated_at":"2021-08-10T02:31:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\n`JavacAST ast = new JavacAST(messager, context, unit, cleanup);` every round will create ast for the same unit, if cache ast, it could compile faster.\r\n\r\nLombokProcessor.process\r\n```\r\n\t\twhile (true) {\r\n\t\t\t// Step 2: For all CUs (in the map, not the roundEnv!), run them across all handlers at their current prio level.\r\n\t\t\t\r\n\t\t\tfor (long prio : priorityLevels) {\r\n\t\t\t\tList<JCCompilationUnit> cusForThisRound = new ArrayList<JCCompilationUnit>();\r\n\t\t\t\tfor (Map.Entry<JCCompilationUnit, Long> entry : roots.entrySet()) {\r\n\t\t\t\t\tLong prioOfCu = entry.getValue();\r\n\t\t\t\t\tif (prioOfCu == null || prioOfCu != prio) continue;\r\n\t\t\t\t\tcusForThisRound.add(entry.getKey());\r\n\t\t\t\t}\r\n\t\t\t\ttransformer.transform(prio, javacProcessingEnv.getContext(), cusForThisRound, cleanup);\r\n\t\t\t}\r\n\r\n            }\r\n```\r\n\r\n```\r\n\tpublic void transform(long priority, Context context, List<JCCompilationUnit> compilationUnits, CleanupRegistry cleanup) {\r\n\t\tfor (JCCompilationUnit unit : compilationUnits) {\r\n\t\t\tif (!Boolean.TRUE.equals(LombokConfiguration.read(ConfigurationKeys.LOMBOK_DISABLE, JavacAST.getAbsoluteFileLocation(unit)))) {\r\n\t\t\t\tJavacAST ast = new JavacAST(messager, context, unit, cleanup);\r\n\t\t\t\tast.traverse(new AnnotationVisitor(priority));\r\n\t\t\t\thandlers.callASTVisitors(ast, priority);\r\n\t\t\t\tif (ast.isChanged()) LombokOptions.markChanged(context, (JCCompilationUnit) ast.top().get());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\n**Describe the target audience**\r\nall project could compile faster.\r\n\r\n**Additional context**\r\nAdd any other context about the feature / enhancement here.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2925/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2925/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2923","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2923/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2923/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2923/events","html_url":"https://github.com/projectlombok/lombok/issues/2923","id":962919002,"node_id":"MDU6SXNzdWU5NjI5MTkwMDI=","number":2923,"title":"[FEATURE]  surport @Inherited to lombock annotations","user":{"login":"dulm","id":1228446,"node_id":"MDQ6VXNlcjEyMjg0NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1228446?v=4","gravatar_id":"","url":"https://api.github.com/users/dulm","html_url":"https://github.com/dulm","followers_url":"https://api.github.com/users/dulm/followers","following_url":"https://api.github.com/users/dulm/following{/other_user}","gists_url":"https://api.github.com/users/dulm/gists{/gist_id}","starred_url":"https://api.github.com/users/dulm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dulm/subscriptions","organizations_url":"https://api.github.com/users/dulm/orgs","repos_url":"https://api.github.com/users/dulm/repos","events_url":"https://api.github.com/users/dulm/events{/privacy}","received_events_url":"https://api.github.com/users/dulm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-06T17:26:27Z","updated_at":"2021-08-07T01:15:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Before submitting**\r\nPlease check our [wiki](https://github.com/projectlombok/lombok/wiki) because some feature requests are asked _a lot_ and there are good reasons (as explained on the wiki) why we can't (yet) implement them or why we won't implement them.\r\n\r\n**Describe the feature**\r\nI'm developing my own anno based on lombok. and find the @Inherited is not work in lombok annos.\r\n\r\nlombok anno:\r\n```\r\n@Inherited\r\n@Target(TYPE)\r\n@Retention(SOURCE)\r\npublic @interface ABase {\r\n    String value() default \"\";\r\n}\r\n```\r\nuse in code:\r\n```\r\n@ABase\r\nclass Base{\r\n}\r\n```\r\n\r\n```\r\nclass Sub extend Base{\r\n}\r\n```\r\n\r\nThe handler extend JavacAnnotationHandler<ABase>  only handling class Base, not handling class Sub as expected.\r\n\r\nhttps://stackoverflow.com/questions/44244579/java-annotation-processor-ignores-annotation-in-parent-class\r\nBut if use api `getElementsAnnotatedWith`, we can see the two class both is annoed .\r\n```\r\nroundEnv.getElementsAnnotatedWith(ABase.class) = {LinkedHashSet@12808}  size = 2\r\n 0 = {Symbol$ClassSymbol@12785} \"Base\"\r\n 1 = {Symbol$ClassSymbol@12786} \"Sub\"\r\n```\r\n\r\nThe reason maybe is lombok  is implemented by JavacNode.traverse, it is vitited by the real code.\r\n\r\n**Describe the target audience**\r\nDescribe which programmers and/or which kinds of programs would benefit from your feature proposal. If the feature proposal interacts with a library that isn't part of the core java libraries, link to this project.\r\n\r\n**Additional context**\r\nAdd any other context about the feature / enhancement here.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2923/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2923/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2922","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2922/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2922/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2922/events","html_url":"https://github.com/projectlombok/lombok/issues/2922","id":962878836,"node_id":"MDU6SXNzdWU5NjI4Nzg4MzY=","number":2922,"title":"Allow copyable annotations on fields even when restricted by annotation @Target","user":{"login":"mwisnicki","id":96032,"node_id":"MDQ6VXNlcjk2MDMy","avatar_url":"https://avatars.githubusercontent.com/u/96032?v=4","gravatar_id":"","url":"https://api.github.com/users/mwisnicki","html_url":"https://github.com/mwisnicki","followers_url":"https://api.github.com/users/mwisnicki/followers","following_url":"https://api.github.com/users/mwisnicki/following{/other_user}","gists_url":"https://api.github.com/users/mwisnicki/gists{/gist_id}","starred_url":"https://api.github.com/users/mwisnicki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mwisnicki/subscriptions","organizations_url":"https://api.github.com/users/mwisnicki/orgs","repos_url":"https://api.github.com/users/mwisnicki/repos","events_url":"https://api.github.com/users/mwisnicki/events{/privacy}","received_events_url":"https://api.github.com/users/mwisnicki/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-06T16:22:01Z","updated_at":"2021-08-06T16:25:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Parameter-only annotations are currently incompatible with lombok's copyableAnnotations.\r\n\r\nThis unfortunately affects some highly popular libraries (spring-projects/spring-boot#20402).\r\n\r\nAs a simpler and more limited alternative to the solution described in #1335 I propose that when annotation is listed in copyableAnnotations then Lombok should work it's magic to allow setting such annotation on field event when `@Target` says otherwise. Naturally after transformation such annotation would essentially move from field to parameter.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2922/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2921","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2921/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2921/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2921/events","html_url":"https://github.com/projectlombok/lombok/issues/2921","id":962505718,"node_id":"MDU6SXNzdWU5NjI1MDU3MTg=","number":2921,"title":"[FEATURE] sanitize for @ToString","user":{"login":"lamplet","id":7948653,"node_id":"MDQ6VXNlcjc5NDg2NTM=","avatar_url":"https://avatars.githubusercontent.com/u/7948653?v=4","gravatar_id":"","url":"https://api.github.com/users/lamplet","html_url":"https://github.com/lamplet","followers_url":"https://api.github.com/users/lamplet/followers","following_url":"https://api.github.com/users/lamplet/following{/other_user}","gists_url":"https://api.github.com/users/lamplet/gists{/gist_id}","starred_url":"https://api.github.com/users/lamplet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lamplet/subscriptions","organizations_url":"https://api.github.com/users/lamplet/orgs","repos_url":"https://api.github.com/users/lamplet/repos","events_url":"https://api.github.com/users/lamplet/events{/privacy}","received_events_url":"https://api.github.com/users/lamplet/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-06T08:09:20Z","updated_at":"2021-08-06T08:09:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I want to sanitize the toString, not only exclude some fields.\r\n\r\nMaybe we can add a sanitize class for @ToString\r\n```\r\n@ToString(sanitize=SanitizeUtil.class)\r\n```\r\n```\r\nclass SanitizeUtil {\r\nString sanitize(Class clazz, String fieldName, String fieldValue) {\r\n    // sanitize\r\n}\r\n}\r\n```\r\nThen we can sanitize the toString.\r\n\r\nThanks!","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2921/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2921/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2919","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2919/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2919/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2919/events","html_url":"https://github.com/projectlombok/lombok/issues/2919","id":962304827,"node_id":"MDU6SXNzdWU5NjIzMDQ4Mjc=","number":2919,"title":"Retire @Helper in favor of Java 10 var","user":{"login":"mwisnicki","id":96032,"node_id":"MDQ6VXNlcjk2MDMy","avatar_url":"https://avatars.githubusercontent.com/u/96032?v=4","gravatar_id":"","url":"https://api.github.com/users/mwisnicki","html_url":"https://github.com/mwisnicki","followers_url":"https://api.github.com/users/mwisnicki/followers","following_url":"https://api.github.com/users/mwisnicki/following{/other_user}","gists_url":"https://api.github.com/users/mwisnicki/gists{/gist_id}","starred_url":"https://api.github.com/users/mwisnicki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mwisnicki/subscriptions","organizations_url":"https://api.github.com/users/mwisnicki/orgs","repos_url":"https://api.github.com/users/mwisnicki/repos","events_url":"https://api.github.com/users/mwisnicki/events{/privacy}","received_events_url":"https://api.github.com/users/mwisnicki/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-06T01:01:37Z","updated_at":"2021-08-06T01:10:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I think with Java 10 and up one can achieve good enough syntax for local methods that `@Helper` can be retired.\r\n\r\nHere's how the example from https://projectlombok.org/features/experimental/Helper could be rewritten with `var` keyword:\r\n\r\n```java\r\npublic class HelperExample {\r\n  int someMethod(int arg1) {\r\n    int localVar = 5;\r\n\r\n    var helpers = new Object() {\r\n      int helperMethod(int arg) {\r\n        return arg + localVar;\r\n      }\r\n    };\r\n\r\n    return helpers.helperMethod(10);\r\n  }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2919/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2918","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2918/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2918/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2918/events","html_url":"https://github.com/projectlombok/lombok/issues/2918","id":959470689,"node_id":"MDU6SXNzdWU5NTk0NzA2ODk=","number":2918,"title":"[BUG] @Generated doesn't cover lambdas in JaCoCo/SonarQube","user":{"login":"esend7881","id":5004148,"node_id":"MDQ6VXNlcjUwMDQxNDg=","avatar_url":"https://avatars.githubusercontent.com/u/5004148?v=4","gravatar_id":"","url":"https://api.github.com/users/esend7881","html_url":"https://github.com/esend7881","followers_url":"https://api.github.com/users/esend7881/followers","following_url":"https://api.github.com/users/esend7881/following{/other_user}","gists_url":"https://api.github.com/users/esend7881/gists{/gist_id}","starred_url":"https://api.github.com/users/esend7881/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/esend7881/subscriptions","organizations_url":"https://api.github.com/users/esend7881/orgs","repos_url":"https://api.github.com/users/esend7881/repos","events_url":"https://api.github.com/users/esend7881/events{/privacy}","received_events_url":"https://api.github.com/users/esend7881/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-03T20:20:30Z","updated_at":"2021-08-03T22:45:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI am noticing that within JaCoCo/SonarQube, code within my `@Generated` functions that exist within a lambda still register as non-covered lines.\r\n\r\n**To Reproduce**\r\nSee screen here:\r\n\r\n![image](https://user-images.githubusercontent.com/5004148/128078761-50c075f0-4efc-4da9-ab7c-462e66637d80.png)\r\n\r\nEssentially, all lines within the function annotated by `@Generated` should not be covered by JaCoCo/SonarQube, etc. All the lines with the red bar on the left have lambdas in them. `() -> ...`, etc. \r\n\r\n**Expected behavior**\r\nI'm not sure if this needs to be fixed on the JaCoCo end or if `@Generated` can be updated, but coverage needs to be ignored by all code within the function annotated by `@Generated`.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.20\r\n - Platform Maven running jacoco 0.8.7\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2918/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2918/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2917","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2917/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2917/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2917/events","html_url":"https://github.com/projectlombok/lombok/issues/2917","id":959441423,"node_id":"MDU6SXNzdWU5NTk0NDE0MjM=","number":2917,"title":"[BUG] \"value\" field in init expression of @Getter(lazy=true) not working","user":{"login":"Vyacheslav-Lapin","id":930608,"node_id":"MDQ6VXNlcjkzMDYwOA==","avatar_url":"https://avatars.githubusercontent.com/u/930608?v=4","gravatar_id":"","url":"https://api.github.com/users/Vyacheslav-Lapin","html_url":"https://github.com/Vyacheslav-Lapin","followers_url":"https://api.github.com/users/Vyacheslav-Lapin/followers","following_url":"https://api.github.com/users/Vyacheslav-Lapin/following{/other_user}","gists_url":"https://api.github.com/users/Vyacheslav-Lapin/gists{/gist_id}","starred_url":"https://api.github.com/users/Vyacheslav-Lapin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Vyacheslav-Lapin/subscriptions","organizations_url":"https://api.github.com/users/Vyacheslav-Lapin/orgs","repos_url":"https://api.github.com/users/Vyacheslav-Lapin/repos","events_url":"https://api.github.com/users/Vyacheslav-Lapin/events{/privacy}","received_events_url":"https://api.github.com/users/Vyacheslav-Lapin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-03T19:49:30Z","updated_at":"2021-08-03T19:49:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This code:\r\n```\r\n@RequiredArgsConstructor\r\npublic class LazyGetterBugExample {\r\n\r\n  String value;\r\n\r\n  @Getter(lazy = true)\r\n  int valueLength = value.length();\r\n\r\n  public static void main(String[] args) {\r\n    System.out.println(\r\n        new LazyGetterBugExample(\"Lorem ipsum dolor sit amet\")\r\n            .getValueLength());\r\n  }\r\n}\r\n```\r\nwill rise exception through compile time:\r\n\r\n> error: cannot find symbol\r\n  `@Getter(lazy = true)`\r\n  ^\r\n  symbol:   method length()\r\n  location: variable value of type java.lang.Object\r\n\r\n..., but if we just RENAME field variable \"value\" to whatever else - \"val\", for example - it compiles and executes successfully!\r\n\r\n**The reason is...**\r\nthis class will delomboked to this:\r\n```\r\npublic int getValueLength() {\r\n    java.lang.Object value = this.valueLength.get();\r\n    if (value == null) {\r\n      //...\r\n      final int actualValue = val.length();\r\n      //...\r\n    }\r\n  }\r\n```\r\nI.e., when we try to use \"value\", it conflicts with local variable - \"value\", used in code, generated by Lombok (and has a type java.lang.Object and actually has not \"length()\" method, that's why we had an _error message_ above).\r\n\r\nSo, I think, the problem is that **_LOCAL VARIABLE_** in method, generated by Lombok for `@Getter(lazy = true)`, was not named so well...\r\nThis name - \"value\" - is used very often for field, so I think this bug is important to fix.\r\n\r\n**Possible solution**\r\nI think, there is 2 variants:\r\n1. Insert check in code of generator, that if we use the \"value\" field in expression, then assign the local variable any another  name (and check that it is not used in expression too. of course)\r\n2. Just rename the \"value\" local variable to something, that will never used by anyone - like `$_$321_IT_WILL_NEVER_USED_BY_ANYONE_123_$_$`, for example...\r\n\r\n**Version info:**\r\n - Lombok version: 1.18.20\r\n - Platform: javac, full `$ java -version` output:\r\nopenjdk version \"16.0.2\" 2021-07-20\r\nOpenJDK Runtime Environment Corretto-16.0.2.7.1 (build 16.0.2+7)\r\nOpenJDK 64-Bit Server VM Corretto-16.0.2.7.1 (build 16.0.2+7, mixed mode, sharing)\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2917/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2916","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2916/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2916/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2916/events","html_url":"https://github.com/projectlombok/lombok/issues/2916","id":959086591,"node_id":"MDU6SXNzdWU5NTkwODY1OTE=","number":2916,"title":"Add callSuper for RequiredArgsConstructor, AllArgsConstructor","user":{"login":"Paramood","id":26360776,"node_id":"MDQ6VXNlcjI2MzYwNzc2","avatar_url":"https://avatars.githubusercontent.com/u/26360776?v=4","gravatar_id":"","url":"https://api.github.com/users/Paramood","html_url":"https://github.com/Paramood","followers_url":"https://api.github.com/users/Paramood/followers","following_url":"https://api.github.com/users/Paramood/following{/other_user}","gists_url":"https://api.github.com/users/Paramood/gists{/gist_id}","starred_url":"https://api.github.com/users/Paramood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Paramood/subscriptions","organizations_url":"https://api.github.com/users/Paramood/orgs","repos_url":"https://api.github.com/users/Paramood/repos","events_url":"https://api.github.com/users/Paramood/events{/privacy}","received_events_url":"https://api.github.com/users/Paramood/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-03T12:53:52Z","updated_at":"2021-08-03T22:29:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It would be nice to be able to write\r\n```java\r\n@RequiredArgsConstructor\r\nclass BaseClass {\r\n\r\n    private final String baseClassField;\r\n\r\n}\r\n\r\n@RequiredArgsConstructor(callSuper = true) // or let callSuper work implicitly\r\nclass ExtendedClass extends BaseClass {\r\n\r\n    private final Integer extendedClassField;\r\n\r\n}\r\n```\r\ninstead of\r\n```java\r\n@RequiredArgsConstructor\r\nclass BaseClass {\r\n\r\n    private final String baseClassField;\r\n\r\n}\r\n\r\nclass ExtendedClass extends BaseClass {\r\n\r\n    private final Integer extendedClassField;\r\n\r\n    ExtendedClass(Integer extendedClassField, String baseClassField) {\r\n        super(baseClassField);\r\n        this.extendedClassField = extendedClassField;\r\n    }\r\n\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2916/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2916/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2914","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2914/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2914/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2914/events","html_url":"https://github.com/projectlombok/lombok/issues/2914","id":954839128,"node_id":"MDU6SXNzdWU5NTQ4MzkxMjg=","number":2914,"title":"[BUG] @Data annotation does not generate a proper RequiredArgsConstructor with @NonNull fields unless added explicitly","user":{"login":"KasNotten","id":27761654,"node_id":"MDQ6VXNlcjI3NzYxNjU0","avatar_url":"https://avatars.githubusercontent.com/u/27761654?v=4","gravatar_id":"","url":"https://api.github.com/users/KasNotten","html_url":"https://github.com/KasNotten","followers_url":"https://api.github.com/users/KasNotten/followers","following_url":"https://api.github.com/users/KasNotten/following{/other_user}","gists_url":"https://api.github.com/users/KasNotten/gists{/gist_id}","starred_url":"https://api.github.com/users/KasNotten/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KasNotten/subscriptions","organizations_url":"https://api.github.com/users/KasNotten/orgs","repos_url":"https://api.github.com/users/KasNotten/repos","events_url":"https://api.github.com/users/KasNotten/events{/privacy}","received_events_url":"https://api.github.com/users/KasNotten/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-28T13:09:55Z","updated_at":"2021-07-28T13:11:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen combining the Data annotation, which is supposed to add a RequiredArgsConstructor, does not generate a usable constructor for a NonNull field in a class. It does work when I add the RequiredArgsConstructor manually.\r\n\r\n**To Reproduce**\r\nAnnotate a class with Data and annotate a field with NonNull. Next, try to create a new instance of that object with that field as a constructor parameter. It will not work. Try adding the RequiredArgsConstructor explicitly, then it will work.\r\n\r\nCode that I used:\r\n```java\r\n@Entity\r\n@Data\r\n//@RequiredArgsConstructor\r\n@NoArgsConstructor\r\npublic class Person {\r\n    @Id @GeneratedValue\r\n    private Long id;\r\n\r\n    @NotNull\r\n    @NotBlank\r\n    @Size(min = 1, max = 15)\r\n    private @NonNull String name;\r\n\r\n    @Min(0)\r\n    @Max(150)\r\n    private int age;\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nI expected Data to add a RequiredArgsConstructor for my NonNull marked fields\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok 1.18.20\r\n - Java 16.0.1\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2914/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2914/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2913","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2913/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2913/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2913/events","html_url":"https://github.com/projectlombok/lombok/issues/2913","id":954838544,"node_id":"MDU6SXNzdWU5NTQ4Mzg1NDQ=","number":2913,"title":"[FEATURE] Annotation for non final variables for lambdas","user":{"login":"3DRaven","id":3204467,"node_id":"MDQ6VXNlcjMyMDQ0Njc=","avatar_url":"https://avatars.githubusercontent.com/u/3204467?v=4","gravatar_id":"","url":"https://api.github.com/users/3DRaven","html_url":"https://github.com/3DRaven","followers_url":"https://api.github.com/users/3DRaven/followers","following_url":"https://api.github.com/users/3DRaven/following{/other_user}","gists_url":"https://api.github.com/users/3DRaven/gists{/gist_id}","starred_url":"https://api.github.com/users/3DRaven/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/3DRaven/subscriptions","organizations_url":"https://api.github.com/users/3DRaven/orgs","repos_url":"https://api.github.com/users/3DRaven/repos","events_url":"https://api.github.com/users/3DRaven/events{/privacy}","received_events_url":"https://api.github.com/users/3DRaven/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-28T13:09:20Z","updated_at":"2021-07-28T13:53:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, All!\r\n\r\nWe have every time problem with variables accessed from lambdas for writing. Stupid example I need to make\r\n```\r\nint counter = 0;\r\nList.of(1,2,3).stream().forEach(x->x%2==0?counter++:counter);\r\n```\r\nIt is error because counter need to be final. Solution is use \"Container\" for saved value;\r\n```\r\nAtomicInteger counter = new AtomicInteger(0);\r\nList.of(1,2,3).stream().forEach(x->x%2==0?counter.addAndGet(1):counter);\r\n```\r\nIn Kotlin it is autogenerated container ```Ref<T>``` with one property ```value```.\r\n\r\nCan we add to Lombok annotation for autogeneration container too?\r\n```\r\n@Volatile int counter = 0;\r\nList.of(1,2,3).stream().forEach(x->x%2==0?counter++:counter);\r\n```\r\n\r\nor\r\n\r\n```\r\n@Boxed int counter = 0;\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2913/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2913/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2911","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2911/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2911/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2911/events","html_url":"https://github.com/projectlombok/lombok/issues/2911","id":952280065,"node_id":"MDU6SXNzdWU5NTIyODAwNjU=","number":2911,"title":"Support turbine processing environment ","user":{"login":"regarm","id":9305227,"node_id":"MDQ6VXNlcjkzMDUyMjc=","avatar_url":"https://avatars.githubusercontent.com/u/9305227?v=4","gravatar_id":"","url":"https://api.github.com/users/regarm","html_url":"https://github.com/regarm","followers_url":"https://api.github.com/users/regarm/followers","following_url":"https://api.github.com/users/regarm/following{/other_user}","gists_url":"https://api.github.com/users/regarm/gists{/gist_id}","starred_url":"https://api.github.com/users/regarm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/regarm/subscriptions","organizations_url":"https://api.github.com/users/regarm/orgs","repos_url":"https://api.github.com/users/regarm/repos","events_url":"https://api.github.com/users/regarm/events{/privacy}","received_events_url":"https://api.github.com/users/regarm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-25T13:57:19Z","updated_at":"2021-09-10T14:19:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nLombok currently doesn't support Turbine processing environment.  I am creating this bug to find roadmap for this feature.\r\nRecently, this error was added logged more in more verbose way.\r\n\r\nhttps://github.com/projectlombok/lombok/commit/0519cb23b1ab4e572d4c6e8b2d8b9c12c19af4ad\r\n\r\n**Describe the target audience**\r\nBazel 4+\r\n\r\n**Additional context**\r\nCurrently, we can avoid this error with ```--nojava_header_compilation```, though this can supposedly slow down build speed.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2911/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2911/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2910","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2910/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2910/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2910/events","html_url":"https://github.com/projectlombok/lombok/issues/2910","id":951525150,"node_id":"MDU6SXNzdWU5NTE1MjUxNTA=","number":2910,"title":"[FEATURE] lombok.addNullAnnotations considers package-info.java with Springs @NonNullApi and @NonNullFields","user":{"login":"heyimMarc","id":20112912,"node_id":"MDQ6VXNlcjIwMTEyOTEy","avatar_url":"https://avatars.githubusercontent.com/u/20112912?v=4","gravatar_id":"","url":"https://api.github.com/users/heyimMarc","html_url":"https://github.com/heyimMarc","followers_url":"https://api.github.com/users/heyimMarc/followers","following_url":"https://api.github.com/users/heyimMarc/following{/other_user}","gists_url":"https://api.github.com/users/heyimMarc/gists{/gist_id}","starred_url":"https://api.github.com/users/heyimMarc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/heyimMarc/subscriptions","organizations_url":"https://api.github.com/users/heyimMarc/orgs","repos_url":"https://api.github.com/users/heyimMarc/repos","events_url":"https://api.github.com/users/heyimMarc/events{/privacy}","received_events_url":"https://api.github.com/users/heyimMarc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-23T12:12:16Z","updated_at":"2021-07-23T12:12:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"My IDE (Intellij) is highlighting unnecessary null checks and possible NullPointerExceptions.\r\nWith the config lombok.addNullAnnotations = spring and a package-info.java like\r\n\r\n`@NonNullFields\r\n@NonNullApi\r\npackage foo.bar;\r\n\r\nimport org.springframework.lang.NonNullApi;\r\nimport org.springframework.lang.NonNullFields;`\r\n\r\nIt would be great when this is also considered in the generated Builder, Getter and Setter by annotating everything with @NotNull unless I annotated it with @Nullable.\r\n\r\nThis will help the IDE to identify null issues.\r\n\r\nCurrently, Lombok generated classes are overseen. For Example, Foobar.setFoo(null) or Foobar.builder().foo(null) are not getting highlighted cause of the missing implicit @NonNull in the generated classes.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2910/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2910/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2909","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2909/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2909/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2909/events","html_url":"https://github.com/projectlombok/lombok/issues/2909","id":950685248,"node_id":"MDU6SXNzdWU5NTA2ODUyNDg=","number":2909,"title":"Eclipse 6/2021 not working with @Slf4j import lombok.extern.slf4j.Slf4j;","user":{"login":"jdl2206","id":20343799,"node_id":"MDQ6VXNlcjIwMzQzNzk5","avatar_url":"https://avatars.githubusercontent.com/u/20343799?v=4","gravatar_id":"","url":"https://api.github.com/users/jdl2206","html_url":"https://github.com/jdl2206","followers_url":"https://api.github.com/users/jdl2206/followers","following_url":"https://api.github.com/users/jdl2206/following{/other_user}","gists_url":"https://api.github.com/users/jdl2206/gists{/gist_id}","starred_url":"https://api.github.com/users/jdl2206/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jdl2206/subscriptions","organizations_url":"https://api.github.com/users/jdl2206/orgs","repos_url":"https://api.github.com/users/jdl2206/repos","events_url":"https://api.github.com/users/jdl2206/events{/privacy}","received_events_url":"https://api.github.com/users/jdl2206/received_events","type":"User","site_admin":false},"labels":[{"id":236276865,"node_id":"MDU6TGFiZWwyMzYyNzY4NjU=","url":"https://api.github.com/repos/projectlombok/lombok/labels/critical","name":"critical","color":"ffffff","default":false,"description":null},{"id":236276866,"node_id":"MDU6TGFiZWwyMzYyNzY4NjY=","url":"https://api.github.com/repos/projectlombok/lombok/labels/eclipse","name":"eclipse","color":"ffffff","default":false,"description":null},{"id":236276880,"node_id":"MDU6TGFiZWwyMzYyNzY4ODA=","url":"https://api.github.com/repos/projectlombok/lombok/labels/task","name":"task","color":"ffffff","default":false,"description":"There is a clear list of steps to take to address this item"},{"id":236276881,"node_id":"MDU6TGFiZWwyMzYyNzY4ODE=","url":"https://api.github.com/repos/projectlombok/lombok/labels/accepted","name":"accepted","color":"ffffff","default":false,"description":"The issue/enhancement is valid, sensible, and explained in sufficient detail"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-07-22T13:43:02Z","updated_at":"2021-09-16T11:00:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"My lombok versions for my projects are 1.18.20 and 1.18.18. After installing eclipse 6/2021 all of my log statements have the \"log cannot be resolved\" error in eclipse. It recognizes all of these types of imports: import lombok.Data; just not import lombok.extern.slf4j.Slf4j;\r\n\r\nHowever, in eclipse, suddenly warning are appearing for all of my attributes without setters/getters in spite of the @Data annotation and I'm getting warnings that the variables aren't used and do I want to create a setters/getters.\r\n\r\nI tried to follow the instructions to install lombok into eclipse, https://stackoverflow.com/questions/16627751/building-with-lomboks-slf4j-and-eclipse-cannot-find-symbol-log, but the lombok jar doesn't recognize the 6/2021 version of eclipse. I also tried adding these lines to the eclipse.ini file to install lombok into eclipse, but then eclipse doesn't start.\r\n\r\n-vmargs\r\n...\r\n-javaagent:lombok.jar\r\n-Xbootclasspath/a:lombok.jar\r\n\r\nPer a closed lombok issue, https://github.com/projectlombok/lombok/issues/2882, I added those lines to eclipse.ini but that didn't help:\r\n--illegal-access=warn\r\n--add-opens java.base/java.lang=ALL-UNNAMED","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2909/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2909/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2908","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2908/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2908/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2908/events","html_url":"https://github.com/projectlombok/lombok/issues/2908","id":949487299,"node_id":"MDU6SXNzdWU5NDk0ODcyOTk=","number":2908,"title":"[BUG] Bad Checker Framework annotation NotCalledMethods","user":{"login":"janrieke","id":14800757,"node_id":"MDQ6VXNlcjE0ODAwNzU3","avatar_url":"https://avatars.githubusercontent.com/u/14800757?v=4","gravatar_id":"","url":"https://api.github.com/users/janrieke","html_url":"https://github.com/janrieke","followers_url":"https://api.github.com/users/janrieke/followers","following_url":"https://api.github.com/users/janrieke/following{/other_user}","gists_url":"https://api.github.com/users/janrieke/gists{/gist_id}","starred_url":"https://api.github.com/users/janrieke/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/janrieke/subscriptions","organizations_url":"https://api.github.com/users/janrieke/orgs","repos_url":"https://api.github.com/users/janrieke/repos","events_url":"https://api.github.com/users/janrieke/events{/privacy}","received_events_url":"https://api.github.com/users/janrieke/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-21T09:00:32Z","updated_at":"2021-07-21T12:08:48Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"When setting `checkerframework = 4.0`, lombok generates `org.checkerframework.checker.calledmethods.qual.NotCalledMethods` on the setter methods of `@Builder`/`@SuperBuilder`.\r\nHowever, this annotation does not exist. It's still located in the old package: `org.checkerframework.checker.builder.qual.NotCalledMethods`\r\n\r\nThis results in a compile error.\r\n\r\n**To Reproduce**\r\n\r\nCompile \r\n\r\n    @lombok.Builder\r\n    public class BuilderTest {\r\n        String name;\r\n    }\r\n\r\nwith lombok.config:\r\n\r\n    lombok.addNullAnnotations = checkerframework\r\n    checkerframework = 4.0\r\n\r\n\r\n**Expected behavior**\r\nGenerate the correct annotation.\r\n\r\nA better solutions would be (from my point of view) generating no annotation at all. If the Checker Framework will support this annotation eventually, lombok could start generating it again (with the help of the version check). However, I doubt the usefulness of such an annotation: Why should it be a misuse of the builder pattern to call a builder setter method twice? For instance, you could fill in some default values into a new builder and pass it to other methods to possibly overwrite those default. And when using `toBuilder()`, you will have no choice but calling a setter twice, because all methods must be marked as \"called\" on the return type of `toBuilder()` to avoid Checker Framework complaining about uncalled methods.\r\n\r\nFurthermore, the minimum version for `@CalledMethods` (and `@This`) should be reduced, as it is already supported by Checker Framework 3.16.0 (maybe earlier).\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: 1.18.20\r\n - Checker Framework version: 3.16.0\r\n - Platform: javac 11.0.12","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2908/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2908/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2906","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2906/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2906/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2906/events","html_url":"https://github.com/projectlombok/lombok/issues/2906","id":945670559,"node_id":"MDU6SXNzdWU5NDU2NzA1NTk=","number":2906,"title":"Publish Certificate Fingerprint used on Eclipse Update Site","user":{"login":"meeque","id":901490,"node_id":"MDQ6VXNlcjkwMTQ5MA==","avatar_url":"https://avatars.githubusercontent.com/u/901490?v=4","gravatar_id":"","url":"https://api.github.com/users/meeque","html_url":"https://github.com/meeque","followers_url":"https://api.github.com/users/meeque/followers","following_url":"https://api.github.com/users/meeque/following{/other_user}","gists_url":"https://api.github.com/users/meeque/gists{/gist_id}","starred_url":"https://api.github.com/users/meeque/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/meeque/subscriptions","organizations_url":"https://api.github.com/users/meeque/orgs","repos_url":"https://api.github.com/users/meeque/repos","events_url":"https://api.github.com/users/meeque/events{/privacy}","received_events_url":"https://api.github.com/users/meeque/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-15T19:01:38Z","updated_at":"2021-07-15T19:01:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The [Lombok Eclipse Installation Page](https://projectlombok.org/setup/eclipse) says:\r\n> WARNING: This plugin installer is currently unsigned, and we have given up on figuring out how to fix that; if team eclipse or somebody else can help us out, we're all ears!\r\n\r\nHowever there seems to be some kind of signature after all. Eclipse just doesn't trust it. It asks me whether to trust the certificate?\r\n\r\n**Describe the feature**\r\n\r\nI don't have a solution for this, but maybe a **workaround**. Publishing the expected certificate fingerprint on the Lombok website would give Eclipse users more confidence. The SHA1 fingerprint that I currently observe is this one:\r\n```\r\n16:27:76:2E:E4:80:AE:37:B9:35:26:86:6D:88:2D:1D:1C:6D:9C:49\r\n```\r\nEclipse displays it in the *Thumbprint* field of the *Details* view. It does not print all those colons though. To get that representation you can export the certificate and run the following command on it:\r\n```\r\nopenssl x509 -in ProjectLombok.der -inform DER -noout -fingerprint -sha1\r\n```\r\n\r\n**Describe the target audience**\r\n\r\nProbably not many, since there are so many other ways to install Lombok. Just thought I'd try the Eclipse way this time. I'm hoping that Eclipse will keep me updated with new versions.\r\n\r\n**Additional context**\r\n\r\nThe Lombok Eclipse Update Site and the Lombok Website run on the same domain and use the same server certificate. So checking a certificate fingerprint published on the website is somewhat redundant.\r\n\r\nIn any case, publishing the certificate fingerprint only makes sense, if the private key that belongs to that certificate is being kept confidential. I have not investigated that. And someone would have to update the website, if the private key or the certificate ever change.\r\n\r\nAll that said, I can submit a PR for  [website/templates/setup/eclipse.html](https://github.com/projectlombok/lombok/blob/5120abe4741c78d19d7e65404f407cfe57074a47/website/templates/setup/eclipse.html#L28).\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2906/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2906/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2905","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2905/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2905/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2905/events","html_url":"https://github.com/projectlombok/lombok/issues/2905","id":945350414,"node_id":"MDU6SXNzdWU5NDUzNTA0MTQ=","number":2905,"title":"[BUG] Jacksonized generating empty json","user":{"login":"OpsRJ","id":1771890,"node_id":"MDQ6VXNlcjE3NzE4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/1771890?v=4","gravatar_id":"","url":"https://api.github.com/users/OpsRJ","html_url":"https://github.com/OpsRJ","followers_url":"https://api.github.com/users/OpsRJ/followers","following_url":"https://api.github.com/users/OpsRJ/following{/other_user}","gists_url":"https://api.github.com/users/OpsRJ/gists{/gist_id}","starred_url":"https://api.github.com/users/OpsRJ/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OpsRJ/subscriptions","organizations_url":"https://api.github.com/users/OpsRJ/orgs","repos_url":"https://api.github.com/users/OpsRJ/repos","events_url":"https://api.github.com/users/OpsRJ/events{/privacy}","received_events_url":"https://api.github.com/users/OpsRJ/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-07-15T12:55:16Z","updated_at":"2021-08-22T07:41:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI have a simple Pojo class annotated with @Builder and @Jacksonized when I try to use jackson to write the class as string it is generating a empty json `{}`\r\n\r\n**To Reproduce**\r\n```\r\n@Jacksonized\r\n@Builder\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\npublic class EthLegacyTransaction {\r\n\r\n    private String blockHash;\r\n    private String input;\r\n    private BigInteger blockNumber;\r\n    private BigInteger gas;\r\n    private String transactionIndex;\r\n    private String from;\r\n    private String to;\r\n    private BigInteger nonce;\r\n    private BigInteger value;\r\n    private String hash;\r\n    private BigInteger gasPrice;\r\n}\r\n```\r\nTo do a simple test:\r\n\r\n```\r\npublic class TestClass {\r\n\r\n    public static void main(String[] args) {\r\n        EthLegacyTransaction eth = EthLegacyTransaction.builder()\r\n                .blockHash(blockHash)\r\n                .input(input)\r\n                .blockNumber(blockNumber)\r\n                .gas(gas)\r\n                .transactionIndex(transactionIndex)\r\n                .from(from)\r\n                .to(to)\r\n                .nonce(nonce)\r\n                .value(value)\r\n                .hash(hash)\r\n                .build();\r\n\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n        try {\r\n            System.out.println(objectMapper.writeValueAsString(eth));\r\n        } catch (JsonProcessingException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe output is: `{}`\r\n\r\n**Expected behavior**\r\nGenerate a valid json\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.20\r\n - JDK 15.0.2\r\n - JAckson 2.12.14\r\n - Intellij 2021.1.1\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2905/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2905/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2903","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2903/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2903/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2903/events","html_url":"https://github.com/projectlombok/lombok/issues/2903","id":943850856,"node_id":"MDU6SXNzdWU5NDM4NTA4NTY=","number":2903,"title":"[FEATURE] Default values for regular methods","user":{"login":"esend7881","id":5004148,"node_id":"MDQ6VXNlcjUwMDQxNDg=","avatar_url":"https://avatars.githubusercontent.com/u/5004148?v=4","gravatar_id":"","url":"https://api.github.com/users/esend7881","html_url":"https://github.com/esend7881","followers_url":"https://api.github.com/users/esend7881/followers","following_url":"https://api.github.com/users/esend7881/following{/other_user}","gists_url":"https://api.github.com/users/esend7881/gists{/gist_id}","starred_url":"https://api.github.com/users/esend7881/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/esend7881/subscriptions","organizations_url":"https://api.github.com/users/esend7881/orgs","repos_url":"https://api.github.com/users/esend7881/repos","events_url":"https://api.github.com/users/esend7881/events{/privacy}","received_events_url":"https://api.github.com/users/esend7881/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-13T21:43:48Z","updated_at":"2021-07-13T21:43:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nCould Lombok create an annotation to allow for a default value for regular functions. For example:\r\n\r\n```.java\r\npublic static void myFunc(String var1, int var2) {\r\n   // code\r\n}\r\n\r\npublic static void myFunc(String var1) {\r\n   int var2 = 1234;\r\n   // code\r\n}\r\n\r\npublic static void myFunc(int var2) {\r\n   String var1 = \"defaultVal\";\r\n   // code\r\n}\r\n```\r\n\r\nCould lombok be used so that all I need to do is write:\r\n\r\n```.java\r\npublic static void myFunc(@Default(\"defaultVal\") String var1, @Default(1234) var2) {\r\n   // code\r\n}\r\n```\r\n\r\nI suppose only primitives (int, double, long, etc), object primitives (Integer, Double, Long) and strings could be used here.  Maybe an array of primitives could be done like this `@Default([1, 2, 3, 4])` or `@Default([\"my\", \"string\", \"array\"])`\r\n\r\n\r\n**Describe the target audience**\r\nThis will help in reducing the number of redundant functions for this fairly popular feature that I know is in Python and C++.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2903/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2901","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2901/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2901/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2901/events","html_url":"https://github.com/projectlombok/lombok/issues/2901","id":942635994,"node_id":"MDU6SXNzdWU5NDI2MzU5OTQ=","number":2901,"title":"[FEATURE] Add option to add @javax.annotation.Nonnull (or other runtime annotation) to everything marked with @lombok.NonNull","user":{"login":"vlsergey","id":969363,"node_id":"MDQ6VXNlcjk2OTM2Mw==","avatar_url":"https://avatars.githubusercontent.com/u/969363?v=4","gravatar_id":"","url":"https://api.github.com/users/vlsergey","html_url":"https://github.com/vlsergey","followers_url":"https://api.github.com/users/vlsergey/followers","following_url":"https://api.github.com/users/vlsergey/following{/other_user}","gists_url":"https://api.github.com/users/vlsergey/gists{/gist_id}","starred_url":"https://api.github.com/users/vlsergey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vlsergey/subscriptions","organizations_url":"https://api.github.com/users/vlsergey/orgs","repos_url":"https://api.github.com/users/vlsergey/repos","events_url":"https://api.github.com/users/vlsergey/events{/privacy}","received_events_url":"https://api.github.com/users/vlsergey/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-13T02:53:55Z","updated_at":"2021-07-13T02:55:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a code generator that relies on presence of nullable / nonnull annotations on class fields. User can add `@javax.annotation.Nonnull` annotation to mark some fields as required.\r\n\r\nBut user already uses lombok and already have `@lombok.NonNull` on some fields. Code generator doesn't see such annotations (because of class-only retention policy). So it would be nice to let lombok automatically add some non-null annotations to fields and other elements (METHOD, PARAMETER) if it's compatible with target runtime annotation. So user will not need to duplicate nonnull annotations.\r\n\r\nWhat i'm trying to get rid of is:\r\n```java\r\nimport javax.annotation.Nonnull;\r\nimport lombok.Data;\r\nimport lombok.NonNull;\r\n\r\n@Data\r\nclass MyClass {\r\n    //TODO: one annotation should be enough\r\n    private @Nonnull @NonNull String label;\r\n}\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2901/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2899","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2899/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2899/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2899/events","html_url":"https://github.com/projectlombok/lombok/issues/2899","id":941334920,"node_id":"MDU6SXNzdWU5NDEzMzQ5MjA=","number":2899,"title":"[FEATURE] Exclude Autowired fields from Builder","user":{"login":"Bludwood","id":45344668,"node_id":"MDQ6VXNlcjQ1MzQ0NjY4","avatar_url":"https://avatars.githubusercontent.com/u/45344668?v=4","gravatar_id":"","url":"https://api.github.com/users/Bludwood","html_url":"https://github.com/Bludwood","followers_url":"https://api.github.com/users/Bludwood/followers","following_url":"https://api.github.com/users/Bludwood/following{/other_user}","gists_url":"https://api.github.com/users/Bludwood/gists{/gist_id}","starred_url":"https://api.github.com/users/Bludwood/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Bludwood/subscriptions","organizations_url":"https://api.github.com/users/Bludwood/orgs","repos_url":"https://api.github.com/users/Bludwood/repos","events_url":"https://api.github.com/users/Bludwood/events{/privacy}","received_events_url":"https://api.github.com/users/Bludwood/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-10T22:39:40Z","updated_at":"2021-07-10T22:39:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have an entity class called AppUser.  I autowire my PasswordEncoder in order to encode the password during new registrations or authentication. I can't make the field static or final because it's autowired in. And with that, I don't see any way to exclude this field from Builder. Can you update Lombok to exclude Autowired fields from the Builder, or provide an annotation to exclude them, such as @Builder.Exclude?\r\n\r\n\r\n```\r\n//DB ANNOTATIONS:\r\n@Entity @Table(name = \"AppUsers\", indexes = @Index(columnList = \"username\", unique = true))\r\n//LOMBOK ANNOTATIONS:\r\n@Builder @Getter @Setter\r\n@ToString(includeFieldNames=true) @EqualsAndHashCode(callSuper = false)\r\n@AllArgsConstructor(staticName = \"of\")\r\npublic class AppUser implements UserDetails {\r\n\r\n    //*********************************************************************************************\r\n    //* NEEDED FOR UTILITY METHODS\r\n    //*********************************************************************************************\r\n\r\n    @Autowired @Transient\r\n    @Getter(AccessLevel.NONE) @Setter(AccessLevel.NONE)\r\n    @ToString.Exclude\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n\r\n    //*********************************************************************************************\r\n    //* FIELDS\r\n    //*********************************************************************************************\r\n\r\n    @JsonIgnore\r\n    @Id @Column(nullable = false)\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long appUserId;\r\n\r\n\r\n    @Column(nullable = false)\r\n    private String username;\r\n\r\n\r\n    @JsonIgnore\r\n    @Column(nullable = false)\r\n    private String password;\r\n\r\n    _<more fields>_\r\n\r\n    public void setAndEncodePassword(String password) {\r\n        this.password = passwordEncoder.encode(password);\r\n    }\r\n\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2899/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2891","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2891/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2891/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2891/events","html_url":"https://github.com/projectlombok/lombok/issues/2891","id":930255401,"node_id":"MDU6SXNzdWU5MzAyNTU0MDE=","number":2891,"title":"[FEATURE] apply @ToString.Exclude to @Builder toString","user":{"login":"davidje13","id":3287761,"node_id":"MDQ6VXNlcjMyODc3NjE=","avatar_url":"https://avatars.githubusercontent.com/u/3287761?v=4","gravatar_id":"","url":"https://api.github.com/users/davidje13","html_url":"https://github.com/davidje13","followers_url":"https://api.github.com/users/davidje13/followers","following_url":"https://api.github.com/users/davidje13/following{/other_user}","gists_url":"https://api.github.com/users/davidje13/gists{/gist_id}","starred_url":"https://api.github.com/users/davidje13/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidje13/subscriptions","organizations_url":"https://api.github.com/users/davidje13/orgs","repos_url":"https://api.github.com/users/davidje13/repos","events_url":"https://api.github.com/users/davidje13/events{/privacy}","received_events_url":"https://api.github.com/users/davidje13/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-25T14:59:31Z","updated_at":"2021-06-27T10:55:24Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\n\r\n`@Builder`s always get an automatic `toString`. Currently this ignores any `@ToString` annotations (inclusions/exclusions):\r\n\r\n```java\r\n@Value\r\n@Builder\r\npublic class Foo {\r\n    int a;\r\n\r\n    @ToString.Exclude\r\n    int secret;\r\n}\r\n```\r\n\r\n```java\r\nSystem.out.println(Foo.builder().secret(7).toString()); // Foo.FooBuilder(a=0, secret=7)\r\n```\r\n\r\nIdeally the `@ToString.Exclude` annotation (and related annotations) should propagate to the builder. It seems this may also need some special handling to interact with `@Builder.Default` since that changes the builder fields slightly.\r\n\r\nCurrently this is vaguely possible by overriding the default `toString`, but requires manually writing the `toString` method, which is especially non-trivial if `@Builder.Default` has been used:\r\n\r\n```java\r\n@Value\r\n@Builder\r\npublic class Foo {\r\n    int a;\r\n\r\n    @ToString.Exclude\r\n    int secret;\r\n\r\n    public static class FooBuilder {\r\n        @Override\r\n        public String toString() {\r\n            return \"****\"; // easiest: just mask everything\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Describe the target audience**\r\nThis is necessary when working with sensitive data which **must not** be logged accidentally. One alternative is to use a wrapper class (e.g. `@Value class Sensitive<T> { T value; String toString() { return \"***\"; } }`), but this can be cumbersome.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2891/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2891/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2890","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2890/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2890/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2890/events","html_url":"https://github.com/projectlombok/lombok/issues/2890","id":929914952,"node_id":"MDU6SXNzdWU5Mjk5MTQ5NTI=","number":2890,"title":"[BUG] NonNull annotation on fields not used by EqualsAndHashCode","user":{"login":"OPeyrusse","id":29573092,"node_id":"MDQ6VXNlcjI5NTczMDky","avatar_url":"https://avatars.githubusercontent.com/u/29573092?v=4","gravatar_id":"","url":"https://api.github.com/users/OPeyrusse","html_url":"https://github.com/OPeyrusse","followers_url":"https://api.github.com/users/OPeyrusse/followers","following_url":"https://api.github.com/users/OPeyrusse/following{/other_user}","gists_url":"https://api.github.com/users/OPeyrusse/gists{/gist_id}","starred_url":"https://api.github.com/users/OPeyrusse/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OPeyrusse/subscriptions","organizations_url":"https://api.github.com/users/OPeyrusse/orgs","repos_url":"https://api.github.com/users/OPeyrusse/repos","events_url":"https://api.github.com/users/OPeyrusse/events{/privacy}","received_events_url":"https://api.github.com/users/OPeyrusse/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-06-25T07:35:50Z","updated_at":"2021-06-28T09:17:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nWhen annotating a field with `@NonNull`, this is not taken into account in generated equals/hashCode.\r\nThis generates errors for tools like Spotbugs and we cannot really annotate those methods as they don't exist.\r\n\r\n**To Reproduce**\r\n\r\nSee this gist [1] for the POM file.\r\n\r\nWith the following POJO:\r\n\r\n```java\r\n@RequiredArgsConstructor\r\n@EqualsAndHashCode\r\npublic class Obj {\r\n  private final Integer value;\r\n  private final @NonNull String name;\r\n}\r\n```\r\n\r\nthe generated `Obj#equals(Object)` is:\r\n\r\n```java\r\n  @java.lang.Override\r\n  @java.lang.SuppressWarnings(\"all\")\r\n  public boolean equals(final java.lang.Object o) {\r\n    if (o == this) return true;\r\n    if (!(o instanceof Obj)) return false;\r\n    final Obj other = (Obj) o;\r\n    if (!other.canEqual((java.lang.Object) this)) return false;\r\n    final java.lang.Object this$value = this.value;\r\n    final java.lang.Object other$value = other.value;\r\n    if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;\r\n    final java.lang.Object this$name = this.name;\r\n    final java.lang.Object other$name = other.name;\r\n    if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;\r\n    return true;\r\n  }\r\n```\r\n\r\nThe null check for `this$name` is not necessary.\r\n\r\n**Expected behavior**\r\n\r\n```diff\r\n    final java.lang.Object this$name = this.name;\r\n    final java.lang.Object other$name = other.name;\r\n-    if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;\r\n+    if (this$name.equals(other$name)) return false;\r\n```\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: 1.18.20\r\n - Platform: Ubuntu 21.04, java Zulu15.29+15-CA, Maven 3.6.3\r\n\r\n**Additional information**\r\n\r\nDecompiled code obtained using `java -jar lombok.jar delombok ...`.\r\n\r\n[1] https://gist.github.com/OPeyrusse/5f3c51ebb944b68c847e546a19b5445d","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2890/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2889","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2889/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2889/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2889/events","html_url":"https://github.com/projectlombok/lombok/issues/2889","id":929802175,"node_id":"MDU6SXNzdWU5Mjk4MDIxNzU=","number":2889,"title":"compile error when i use @ExtensionMethod","user":{"login":"zhoujiaping","id":12986723,"node_id":"MDQ6VXNlcjEyOTg2NzIz","avatar_url":"https://avatars.githubusercontent.com/u/12986723?v=4","gravatar_id":"","url":"https://api.github.com/users/zhoujiaping","html_url":"https://github.com/zhoujiaping","followers_url":"https://api.github.com/users/zhoujiaping/followers","following_url":"https://api.github.com/users/zhoujiaping/following{/other_user}","gists_url":"https://api.github.com/users/zhoujiaping/gists{/gist_id}","starred_url":"https://api.github.com/users/zhoujiaping/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zhoujiaping/subscriptions","organizations_url":"https://api.github.com/users/zhoujiaping/orgs","repos_url":"https://api.github.com/users/zhoujiaping/repos","events_url":"https://api.github.com/users/zhoujiaping/events{/privacy}","received_events_url":"https://api.github.com/users/zhoujiaping/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-06-25T03:51:49Z","updated_at":"2021-07-03T15:03:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nwhen i use @ExtensionMethod, some times it will report compile error, java.lang.Stackoverflow.\r\n**To Reproduce**\r\n```\r\npackage org.example.ext;\r\n\r\nimport lombok.experimental.ExtensionMethod;\r\nimport org.assertj.core.util.Lists;\r\nimport org.junit.jupiter.api.Test;\r\nimport java.util.Arrays;\r\n\r\n@ExtensionMethod(Arrays.class)\r\npublic class ExtendsionsBugTest {\r\n\r\n    @Test\r\n    public void testCompileError() {\r\n       Lists.newArrayList(\"ONE\",\"TWO\").forEach(it->\r\n               println(it)\r\n       );\r\n       Lists.newArrayList(\"ONE\",\"TWO\").forEach(it->\r\n               println(it)\r\n       );\r\n    }\r\n    public <T> void println(T t){\r\n        System.out.println(t);\r\n    }\r\n\r\n}\r\n\r\n```\r\n**Expected behavior**\r\nit works.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok 1.18.4\r\n - Platform (jdk 1.8.0_291)\r\n\r\n**Additional context**\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2889/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2889/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2888","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2888/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2888/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2888/events","html_url":"https://github.com/projectlombok/lombok/issues/2888","id":929195825,"node_id":"MDU6SXNzdWU5MjkxOTU4MjU=","number":2888,"title":"[FEATURE] Call setter method to assign value in @Builder","user":{"login":"joutvhu","id":9401202,"node_id":"MDQ6VXNlcjk0MDEyMDI=","avatar_url":"https://avatars.githubusercontent.com/u/9401202?v=4","gravatar_id":"","url":"https://api.github.com/users/joutvhu","html_url":"https://github.com/joutvhu","followers_url":"https://api.github.com/users/joutvhu/followers","following_url":"https://api.github.com/users/joutvhu/following{/other_user}","gists_url":"https://api.github.com/users/joutvhu/gists{/gist_id}","starred_url":"https://api.github.com/users/joutvhu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joutvhu/subscriptions","organizations_url":"https://api.github.com/users/joutvhu/orgs","repos_url":"https://api.github.com/users/joutvhu/repos","events_url":"https://api.github.com/users/joutvhu/events{/privacy}","received_events_url":"https://api.github.com/users/joutvhu/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-24T12:50:03Z","updated_at":"2021-09-30T11:29:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently, when using `@Builder`, values are assigned directly to fields without going through setters.\r\n\r\nConsider the following example:\r\n\r\n```java\r\n@Builder\r\npublic static class Foo {\r\n    private Integer value;\r\n    private Boolean even;\r\n\r\n    public void setValue(Integer value) {\r\n        this.value = value;\r\n        this.even = (value & 1) == 0;\r\n    }\r\n}\r\n```\r\n\r\nAnd here are my expectation:\r\n```java\r\n@Test\r\npublic void testBuilderCallToSetter() {\r\n    Foo result = Foo.builder().value(4).build();\r\n    Assertions.assertTrue(result.even);\r\n}\r\n```\r\n\r\nI think we can add a property to `@Builder` to indicate which fields are need to call setter. Or create a new annotation to annotate on the setter function.\r\n\r\nThanks.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2888/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2888/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2887","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2887/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2887/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2887/events","html_url":"https://github.com/projectlombok/lombok/issues/2887","id":929028399,"node_id":"MDU6SXNzdWU5MjkwMjgzOTk=","number":2887,"title":"[FEATURE] Delegate to JDK-provided methods like Long.hashCode(long) in generated hashCode()","user":{"login":"stsypanov","id":10835776,"node_id":"MDQ6VXNlcjEwODM1Nzc2","avatar_url":"https://avatars.githubusercontent.com/u/10835776?v=4","gravatar_id":"","url":"https://api.github.com/users/stsypanov","html_url":"https://github.com/stsypanov","followers_url":"https://api.github.com/users/stsypanov/followers","following_url":"https://api.github.com/users/stsypanov/following{/other_user}","gists_url":"https://api.github.com/users/stsypanov/gists{/gist_id}","starred_url":"https://api.github.com/users/stsypanov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stsypanov/subscriptions","organizations_url":"https://api.github.com/users/stsypanov/orgs","repos_url":"https://api.github.com/users/stsypanov/repos","events_url":"https://api.github.com/users/stsypanov/events{/privacy}","received_events_url":"https://api.github.com/users/stsypanov/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-24T09:24:06Z","updated_at":"2021-06-30T13:47:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Consider this code\r\n```java\r\n@EqualsAndHashCode\r\nclass Foo {\r\n  long value;\r\n}\r\n```\r\nAfter compilation this turns into\r\n```java\r\nclass Foo {\r\n    long value;\r\n\r\n    public boolean equals(final Object o) {\r\n      //...\r\n    }\r\n\r\n    public int hashCode() {\r\n        int PRIME = true;\r\n        int result = 1;\r\n        long $value = this.value;\r\n        int resultx = result * 59 + (int)($value >>> 32 ^ $value);\r\n        return resultx;\r\n    }\r\n}\r\n```\r\nHere instead of generating the code manually Lombok should just delegate to `Long.hashCode(long)`. Same is applicable for some other primitives, e.g. `boolean`, `float`, `double`. This allows both code reuse and JDK-compatible behaviour.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2887/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2887/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2883","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2883/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2883/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2883/events","html_url":"https://github.com/projectlombok/lombok/issues/2883","id":926594393,"node_id":"MDU6SXNzdWU5MjY1OTQzOTM=","number":2883,"title":"[BUG] GWT Build will fail with JSR-308 Error after Upgrade to 1.18.12","user":{"login":"MCMicS","id":4604206,"node_id":"MDQ6VXNlcjQ2MDQyMDY=","avatar_url":"https://avatars.githubusercontent.com/u/4604206?v=4","gravatar_id":"","url":"https://api.github.com/users/MCMicS","html_url":"https://github.com/MCMicS","followers_url":"https://api.github.com/users/MCMicS/followers","following_url":"https://api.github.com/users/MCMicS/following{/other_user}","gists_url":"https://api.github.com/users/MCMicS/gists{/gist_id}","starred_url":"https://api.github.com/users/MCMicS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MCMicS/subscriptions","organizations_url":"https://api.github.com/users/MCMicS/orgs","repos_url":"https://api.github.com/users/MCMicS/repos","events_url":"https://api.github.com/users/MCMicS/events{/privacy}","received_events_url":"https://api.github.com/users/MCMicS/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-21T21:00:57Z","updated_at":"2021-06-21T21:00:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nAfter Upgrade from 1.18.10 to at least 1.18.12 the compilation of GWT modules will fail with JSR 308 Annotation error.\r\n> Annotation types that do not specify explicit target element types cannot be applied here\r\n\r\nI've tried the newest version (1.18.20) because some fixed ECJ error but this still occurs.\r\n\r\n**To Reproduce**\r\nSample project; https://github.com/MCMicS/gwt-lombok-issue\r\nyou can switch between the branches for single lombok versions.\r\n\r\nin branch [delomboked](https://github.com/MCMicS/gwt-lombok-issue/tree/delomboked) is a test for inner `static class` (with `@Value` and `@ParametersAreNonnullByDefault`) which will also break the compilation\r\n\r\nThere is also a matrix workflow for `1.18.1.0`, `1.18.12` and `1.18.20`.\r\n\r\n**Expected behavior**\r\nCompilation still works with newer lombok version without delombokes source jars\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: 1.18.12 - 1.18.20\r\n - GWT: gwt-maven-plugin with ECJ javaagent\r\n\r\n**Additional context**\r\nFirstly it seems related to #2640. It seems to work if the Lombok annotated Files was within the current project. But it fails if the annotated files are within a jar file. If I use delomboked sources the compilation works again.\r\n\r\nMaybe I've forgotten to configure something\r\nMy first idea was following change: `lombok.addNullAnnotations`\r\n> FEATURE: Tired of being unable to use @javax.annotation.ParametersAreNonnullByDefault or @org.eclipse.jdt.annotation.NonNullByDefault because then the equals method that lombok generates isn't valid? Fret no more; lombok can now add nullity annotations where relevant. Set the flavour of nullity annotation you prefer in your lombok.config. Applies to the return value of toString, withX, chainable setX, static constructors, build, builder, etcetera, and the parameter of equals, canEqual, and the plural form of @Singular marked fields for builder classes. Issue #788\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2883/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2883/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2880","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2880/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2880/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2880/events","html_url":"https://github.com/projectlombok/lombok/issues/2880","id":924139464,"node_id":"MDU6SXNzdWU5MjQxMzk0NjQ=","number":2880,"title":"[FEATURE] Annotation for code removal (@Removed for removing a class/method).","user":{"login":"ghuser","id":672768,"node_id":"MDQ6VXNlcjY3Mjc2OA==","avatar_url":"https://avatars.githubusercontent.com/u/672768?v=4","gravatar_id":"","url":"https://api.github.com/users/ghuser","html_url":"https://github.com/ghuser","followers_url":"https://api.github.com/users/ghuser/followers","following_url":"https://api.github.com/users/ghuser/following{/other_user}","gists_url":"https://api.github.com/users/ghuser/gists{/gist_id}","starred_url":"https://api.github.com/users/ghuser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ghuser/subscriptions","organizations_url":"https://api.github.com/users/ghuser/orgs","repos_url":"https://api.github.com/users/ghuser/repos","events_url":"https://api.github.com/users/ghuser/events{/privacy}","received_events_url":"https://api.github.com/users/ghuser/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-06-17T16:45:30Z","updated_at":"2021-06-27T11:08:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Before submitting**\r\n\r\n**Describe the feature**\r\n\r\nAbility to add `@Removed`  to a class/method in order to remove its content, or `@RemovedFile` to a class to remove all declarations in the file.\r\n\r\nIdeally it could be also added also not top of methods for removing them.\r\n\r\n**Describe the target audience**\r\n\r\nIn huge, multi-module, service-oriented, legacy projects that face a long-term stage of code refactoring / cleanup, there are cases where classes or parts of the code need to be removed but under a safety net that their source is still there for review. It is not easy to search among physically removed classes to see whether you may actually need something.\r\n\r\nThe alternative solution to add an maven exclusion, has at least the following issues:\r\n- it is not strongly typed\r\n- It cannot remove methods\r\n- You cannot visually see that a class is removed (e.g. by seeing an annotation on top of it).\r\n\r\nAdding `@Deprecated` annotation does not help either, because if there are classes/methods bound to a language-independent protocol (e.g. web services or rest endpoints), they might actually be called at some point without realizing that they are actually useful. \r\nAlso we can never be sure (unless manually check via IDE) whether they might still be used by some other part of the code or whether they are shadowing some other class (with the same package) from another module (which is to be loaded on the same class-loader repository).\r\n\r\n\r\n\r\n**Additional context**\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2880/reactions","total_count":1,"+1":0,"-1":1,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2880/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2877","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2877/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2877/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2877/events","html_url":"https://github.com/projectlombok/lombok/issues/2877","id":918484784,"node_id":"MDU6SXNzdWU5MTg0ODQ3ODQ=","number":2877,"title":"[BUG] AST.replaceNewWithExistingOld only replace LombokNode in LombokNode.children  without in AST.nodeMap","user":{"login":"dulm","id":1228446,"node_id":"MDQ6VXNlcjEyMjg0NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1228446?v=4","gravatar_id":"","url":"https://api.github.com/users/dulm","html_url":"https://github.com/dulm","followers_url":"https://api.github.com/users/dulm/followers","following_url":"https://api.github.com/users/dulm/following{/other_user}","gists_url":"https://api.github.com/users/dulm/gists{/gist_id}","starred_url":"https://api.github.com/users/dulm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dulm/subscriptions","organizations_url":"https://api.github.com/users/dulm/orgs","repos_url":"https://api.github.com/users/dulm/repos","events_url":"https://api.github.com/users/dulm/events{/privacy}","received_events_url":"https://api.github.com/users/dulm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-11T09:16:24Z","updated_at":"2021-06-11T09:59:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nAST.replaceNewWithExistingOld only replace LombokNode in LombokNode.children with old;\r\nnot replace the LombokNode in AST.nodeMap with old\r\n\r\nhttps://github.com/projectlombok/lombok/blob/5120abe4741c78d19d7e65404f407cfe57074a47/src/core/lombok/core/AST.java#L193\r\n\r\n\r\n```\r\n\tL replaceNewWithExistingOld(Map<N, L> oldNodes, L newNode) {\r\n\t\tL oldNode = oldNodes.get(newNode.get());\r\n\t\tL targetNode = oldNode == null ? newNode : oldNode;\r\n\t\tList children = new ArrayList();\r\n\t\tfor (L child : newNode.children) {\r\n\t\t\tL oldChild = replaceNewWithExistingOld(oldNodes, child);\r\n\t\t\tchildren.add(oldChild);\r\n\t\t\toldChild.parent = targetNode;\r\n\t\t}\r\n\t\ttargetNode.children = LombokImmutableList.copyOf(children);\r\n\t\treturn targetNode;\r\n\t}\r\n```\r\n\r\n\r\n\r\nHere is a example in memory when debug on breakpoint at\r\nhttps://github.com/projectlombok/lombok/blob/5120abe4741c78d19d7e65404f407cfe57074a47/src/core/lombok/javac/handlers/HandleFieldDefaults.java#L97\r\n\r\n\r\n```ini\r\nfieldNode = {JavacNode@12861} \"NODE FIELD (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) private String name\"\r\n```\r\nold fieldNode is 12861\r\n\r\n\r\n```ini\r\nfieldNode.ast.top.children.content[0].children.content = {Object[4]@13305} \r\n 0 = {JavacNode@11626} \"NODE ANNOTATION (class com.sun.tools.javac.tree.JCTree$JCAnnotation) @Setter()\"\r\n 1 = {JavacNode@11640} \"NODE ANNOTATION (class com.sun.tools.javac.tree.JCTree$JCAnnotation) @FieldDefaults(level = AccessLevel.PRIVATE)\"\r\n 2 = {JavacNode@13073} \"NODE METHOD (class com.sun.tools.javac.tree.JCTree$JCMethodDecl) \\npublic <init>() {\\n    super();\\n}\"\r\n 3 = {JavacNode@12861} \"NODE FIELD (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) private String name\"\r\n  ast = {JavacAST@11650} \r\n  kind = {AST$Kind@12906} \"FIELD\"\r\n  node = {JCTree$JCVariableDecl@12876} \"private String name\"\r\n  children = {LombokImmutableList@13256} \"[NODE TYPE_USE (class com.sun.tools.javac.tree.JCTree$JCIdent) String]\"\r\n  parent = {JavacNode@11624} \"NODE TYPE (class com.sun.tools.javac.tree.JCTree$JCClassDecl) \\n@Setter()\\n@FieldDefaults(level = AccessLevel.PRIVATE)\\npublic class Aaa {\\n    \\n    public Aaa() {\\n        super();\\n    }\\n    private String name;\\n}\"\r\n  isStructurallySignificant = true\r\n```\r\n`3 = {JavacNode@12861} \"NODE FIELD (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) private String name\"`\r\nfieldNode in children is already changed to oldobj is 12861\r\n\r\n\r\n```ini\r\nfieldNode.ast.nodeMap = {IdentityHashMap@12574}  size = 9\r\n {JCTree$JCIdent@12945} \"String\" -> {JavacNode@13029} \"NODE TYPE_USE (class com.sun.tools.javac.tree.JCTree$JCIdent) String\"\r\n {JCTree$JCIdent@13068} \"super\" -> {JavacNode@13069} \"NODE STATEMENT (class com.sun.tools.javac.tree.JCTree$JCIdent) super\"\r\n {JCTree$JCMethodInvocation@13070} \"super()\" -> {JavacNode@13071} \"NODE STATEMENT (class com.sun.tools.javac.tree.JCTree$JCMethodInvocation) super()\"\r\n {JCTree$JCAnnotation@11641} \"@FieldDefaults(level = AccessLevel.PRIVATE)\" -> {JavacNode@11640} \"NODE ANNOTATION (class com.sun.tools.javac.tree.JCTree$JCAnnotation) @FieldDefaults(level = AccessLevel.PRIVATE)\"\r\n {JCTree$JCMethodDecl@13072} \"\\npublic <init>() {\\n    super();\\n}\" -> {JavacNode@13073} \"NODE METHOD (class com.sun.tools.javac.tree.JCTree$JCMethodDecl) \\npublic <init>() {\\n    super();\\n}\"\r\n {JCTree$JCVariableDecl@12876} \"private String name\" -> {JavacNode@12964} \"NODE FIELD (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) private String name\"\r\n  key = {JCTree$JCVariableDecl@12876} \"private String name\"\r\n  value = {JavacNode@12964} \"NODE FIELD (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) private String name\"\r\n {JCTree$JCClassDecl@11625} \"\\n@Setter()\\n@FieldDefaults(level = AccessLevel.PRIVATE)\\npublic class Aaa {\\n    \\n    public Aaa() {\\n        super();\\n    }\\n    private String name;\\n}\" -> {JavacNode@11624} \"NODE TYPE (class com.sun.tools.javac.tree.JCTree$JCClassDecl) \\n@Setter()\\n@FieldDefaults(level = AccessLevel.PRIVATE)\\npublic class Aaa {\\n    \\n    public Aaa() {\\n        super();\\n    }\\n    private String name;\\n}\"\r\n {JCTree$JCAnnotation@11631} \"@Setter()\" -> {JavacNode@11626} \"NODE ANNOTATION (class com.sun.tools.javac.tree.JCTree$JCAnnotation) @Setter()\"\r\n {JCTree$JCExpressionStatement@13074} \"super();\" -> {JavacNode@13075} \"NODE STATEMENT (class com.sun.tools.javac.tree.JCTree$JCExpressionStatement) super();\"\r\n```\r\n\r\n` {JCTree$JCVariableDecl@12876} \"private String name\" -> {JavacNode@12964} \"NODE FIELD (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) private String name\"`\r\nfieldNode in nodeMap is still newobj 12964\r\n\r\n\r\n\r\n\r\nAnd should be notice that  the curNode.rebuild(), parent's children ref to curNode is not changed by replaceNewWithExistingOld. \r\nWhen call `getAst().buildTree(get(), kind)`  the curNode in AST.nodeMap changed to new by calling `putInMap` in `buildXxx`. But curNode's parentNode not modify by any code, so is still old.\r\n\r\n```java\r\n\tpublic void rebuild() {\r\n\t\tMap<N, L> oldNodes = new IdentityHashMap<N, L>();\r\n\t\tgatherAndRemoveChildren(oldNodes);\r\n\t\t\r\n\t\tL newNode = getAst().buildTree(get(), kind);\r\n\t\t\r\n\t\tgetAst().setChanged();\r\n\t\t\r\n\t\tgetAst().replaceNewWithExistingOld(oldNodes, newNode);\r\n\t}\r\n```\r\n\r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior, preferably in the form of the smallest java source file you can make that will show the problem when compiled with `javac -cp lombok.jar ExampleFile.java` or as sole java file in a fresh new eclipse project.\r\n\r\nIf this is not possible, give us enough to reproduce the problem. If you have stack traces or error messages please include all of them, and include screen shots if that will help explain the problem.\r\n\r\n**Expected behavior**\r\nAST.replaceNewWithExistingOld only replace LombokNode in LombokNode.children and AST.nodeMap\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok 1.18.18\r\n - Platform javac\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2877/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2875","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2875/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2875/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2875/events","html_url":"https://github.com/projectlombok/lombok/issues/2875","id":918128967,"node_id":"MDU6SXNzdWU5MTgxMjg5Njc=","number":2875,"title":"[FEATURE] Warnings output by Lombok should be prefixed with a category","user":{"login":"hakanai","id":43236,"node_id":"MDQ6VXNlcjQzMjM2","avatar_url":"https://avatars.githubusercontent.com/u/43236?v=4","gravatar_id":"","url":"https://api.github.com/users/hakanai","html_url":"https://github.com/hakanai","followers_url":"https://api.github.com/users/hakanai/followers","following_url":"https://api.github.com/users/hakanai/following{/other_user}","gists_url":"https://api.github.com/users/hakanai/gists{/gist_id}","starred_url":"https://api.github.com/users/hakanai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hakanai/subscriptions","organizations_url":"https://api.github.com/users/hakanai/orgs","repos_url":"https://api.github.com/users/hakanai/repos","events_url":"https://api.github.com/users/hakanai/events{/privacy}","received_events_url":"https://api.github.com/users/hakanai/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-11T02:06:36Z","updated_at":"2021-06-27T11:10:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Current warnings output by Lombok look like this:\r\n\r\n```\r\n/path/to/File.java:42: warning: Use of @SneakyThrows is flagged according to lombok configuration.\r\n```\r\n\r\nFor comparison, warnings from the actual Java compiler look like:\r\n\r\n```\r\n/path/to/File.java:42: warning: [deprecation] searchScrollAsync(SearchScrollRequest,RequestOptions,ActionListener<SearchResponse>) in ESClient has been deprecated\r\n```\r\n\r\nwhile custom warnings from Error Prone look like:\r\n\r\n```\r\n/path/to/File.java:42: warning: [JdkObsolete] It is very rare for LinkedList to out-perform ArrayList or ArrayDeque. Avoid it unless you're willing to invest a lot of time into benchmarking. Caveat: LinkedList supports null elements, but ArrayDeque does not.\r\n```\r\n\r\nThe text in square brackets (the warning category) helps build reports on warning counts of different types. I'd be curious to know how many SneakyThrows warnings I have in the codebase, but currently I have no way to get this from the Jenkins warning report, because all SneakyThrows warnings fall into the \"default\" category. I'd have to make my own warning scraper that looks for the text inside the warning instead, perhaps, and somehow plug that into the Jenkins warnings plugin.\r\n\r\nIdeally, each unique warning Lombok can output should be its own category, though I think I would settle for a single \"Lombok\" category for all warnings at present, just because the vast majority in our own codebase are SneakyThrows anyway.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2875/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2874","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2874/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2874/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2874/events","html_url":"https://github.com/projectlombok/lombok/issues/2874","id":915787958,"node_id":"MDU6SXNzdWU5MTU3ODc5NTg=","number":2874,"title":"[FEATURE] @DefaultValue to set default values when a parameter is null","user":{"login":"datze","id":11994396,"node_id":"MDQ6VXNlcjExOTk0Mzk2","avatar_url":"https://avatars.githubusercontent.com/u/11994396?v=4","gravatar_id":"","url":"https://api.github.com/users/datze","html_url":"https://github.com/datze","followers_url":"https://api.github.com/users/datze/followers","following_url":"https://api.github.com/users/datze/following{/other_user}","gists_url":"https://api.github.com/users/datze/gists{/gist_id}","starred_url":"https://api.github.com/users/datze/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/datze/subscriptions","organizations_url":"https://api.github.com/users/datze/orgs","repos_url":"https://api.github.com/users/datze/repos","events_url":"https://api.github.com/users/datze/events{/privacy}","received_events_url":"https://api.github.com/users/datze/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-09T05:23:30Z","updated_at":"2021-06-27T11:29:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nI suggest a annotation `@DefaultValue(Object)` for constructor/method parameters or even all class members.\r\nIt replaces a `null` value with a default value.\r\n\r\nExample with boiler-plate code:\r\n```\r\n    public Foo(int value1, String value2, String value3, Integer value4) {\r\n        this.value1 = value1;\r\n        this.value2 = value2 != null ? value2 : \"\";\r\n        this.value3 = value3 != null ? value3 : \"foo\";\r\n        this.value4 = value4 != null ? value4 : 45;\r\n    }\r\n```\r\nwith Lombok `@DefaulValue()` on the parameters:\r\n```\r\n    public Foo(int value1, @DefaultValue(\"\") String value2, @DefaultValue(\"foo\") String value3, @DefaultValue(45) Integer value4) {\r\n        this.value1 = value1;\r\n        this.value2 = value2;\r\n        this.value3 = value3;\r\n        this.value4 = value4;\r\n    }\r\n```\r\n\r\nor on the class members\r\n```\r\nclass Foo {\r\n    int value1;\r\n    String value2;\r\n    String value3;\r\n    Integer value4;\r\n\r\n    public Foo(int value1, String value2, String value3, Integer value4) {\r\n        this.value1 = value1;\r\n        this.value2 = value2 != null ? value2 : \"\";\r\n        this.value3 = value3 != null ? value3 : \"foo\";\r\n        this.value4 = value4 != null ? value4 : 45;\r\n    }\r\n\r\n    public void setValue1(int value1) {\r\n        this.value1 = value1;\r\n    }\r\n\r\n    public void setValue2(String value2) {\r\n        this.value2 = value2 != null ? value2 : \"\";\r\n    }\r\n\r\n    public void setValue3(String value3) {\r\n        this.value3 = value3 != null ? value3 : \"foo\";\r\n    }\r\n\r\n    public void setValue4(Integer value4) {\r\n        this.value4 = value4 != null ? value4 : 45;\r\n    }\r\n\r\n}\r\n```\r\nwith Lombok:\r\n```\r\n@Setter\r\n@AllArgsConstructor\r\nclass Foo {\r\n    int value1;\r\n    @DefaultValue(\"\")\r\n    String value2;\r\n    @DefaultValue(\"foo\")\r\n    String value3;\r\n    @DefaultValue(45)\r\n    Integer value4;\r\n}\r\n```\r\n\r\n**Describe the target audience**\r\nThere are places where you MUST handle with `null` parameters because you can't change code either because you are not it's owner or it is generated.\r\nIn this case you must handle null values and replace them with some default values.\r\n\r\n**Additional context**\r\n-\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2874/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2874/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2869","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2869/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2869/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2869/events","html_url":"https://github.com/projectlombok/lombok/issues/2869","id":913362933,"node_id":"MDU6SXNzdWU5MTMzNjI5MzM=","number":2869,"title":"[FEATURE] @ExtensionMethod with Method reference","user":{"login":"yoyosource","id":46222147,"node_id":"MDQ6VXNlcjQ2MjIyMTQ3","avatar_url":"https://avatars.githubusercontent.com/u/46222147?v=4","gravatar_id":"","url":"https://api.github.com/users/yoyosource","html_url":"https://github.com/yoyosource","followers_url":"https://api.github.com/users/yoyosource/followers","following_url":"https://api.github.com/users/yoyosource/following{/other_user}","gists_url":"https://api.github.com/users/yoyosource/gists{/gist_id}","starred_url":"https://api.github.com/users/yoyosource/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yoyosource/subscriptions","organizations_url":"https://api.github.com/users/yoyosource/orgs","repos_url":"https://api.github.com/users/yoyosource/repos","events_url":"https://api.github.com/users/yoyosource/events{/privacy}","received_events_url":"https://api.github.com/users/yoyosource/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-06-07T09:55:48Z","updated_at":"2021-06-08T08:01:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nI recently found the @ExtensionMethod experimental feature and found joy in using it. There is just one thing that bugs me and that is the usability of the `ExtensionMethod` feature in Method references. This is useful in Streams or other lambda stuff.\r\n\r\nlomboked\r\n```java\r\nclass Extension {\r\n    public static int convertToInt(String s) {\r\n        return Integer.parseInt(s);\r\n    }\r\n}\r\n\r\n@ExtensionMethod(Extension.class)\r\nclass Usability {\r\n    public static void main(String[] args) {\r\n        // The Arrays.asList([...]) could be some user input as String or anything else\r\n        Arrays.asList(\"3\", \"5\", \"7\").stream().map(String::convertToInt).forEach(System.out::println);\r\n    }\r\n}\r\n```\r\n\r\ndelomboked\r\n```java\r\nclass Extension {\r\n    public static int convertToInt(String s) {\r\n        return Integer.parseInt(s);\r\n    }\r\n}\r\n\r\nclass Usability {\r\n    public static void main(String[] args) {\r\n        // The Arrays.asList([...]) could be some user input as String or anything else\r\n        Arrays.asList(\"3\", \"5\", \"7\").stream().map(s -> Extension.convertToInt(s)).forEach(System.out::println);\r\n    }\r\n}\r\n```\r\n\r\n**Describe the target audience**\r\nThis in itself would be useful for Stream stuff in java and would be a more concise way of having seamless extension of other classes.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2869/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2869/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2867","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2867/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2867/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2867/events","html_url":"https://github.com/projectlombok/lombok/issues/2867","id":911286871,"node_id":"MDU6SXNzdWU5MTEyODY4NzE=","number":2867,"title":"[FEATURE] Use @nullable on Builder properties to be able to use them in @NonNullByDefault packages/classes","user":{"login":"dborie","id":49395531,"node_id":"MDQ6VXNlcjQ5Mzk1NTMx","avatar_url":"https://avatars.githubusercontent.com/u/49395531?v=4","gravatar_id":"","url":"https://api.github.com/users/dborie","html_url":"https://github.com/dborie","followers_url":"https://api.github.com/users/dborie/followers","following_url":"https://api.github.com/users/dborie/following{/other_user}","gists_url":"https://api.github.com/users/dborie/gists{/gist_id}","starred_url":"https://api.github.com/users/dborie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dborie/subscriptions","organizations_url":"https://api.github.com/users/dborie/orgs","repos_url":"https://api.github.com/users/dborie/repos","events_url":"https://api.github.com/users/dborie/events{/privacy}","received_events_url":"https://api.github.com/users/dborie/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-04T08:59:51Z","updated_at":"2021-06-04T12:09:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI'm currently unable to use any @Builder in package annotated with @NonNullByDefault as the lombok generated builder does not have any nullity annotation on their own internal field.\r\nI've tried a lot of lombok config key like `lombok.addNullAnnotations` but none of them seem to change this behavior.\r\n\r\nIt may be a bug, or just me misunderstanding something as v1.18.12 changelog seem to say that issue #788 should have fixed builder too.\r\n\r\nTo reproduce, \r\n```\r\nimport org.eclipse.jdt.annotation.NonNullByDefault;\r\n\r\nimport lombok.Builder;\r\n\r\n@NonNullByDefault\r\npublic class BasicStuff {\r\n\r\n    @Builder\r\n    public static class Parameter {\r\n        String field;\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe solution seem simple, as simply add the right flavor of @nullable on builder field would fix it without any side effect I can think of.\r\n\r\nWhat do you think about this? Did I just encounter a bug or did not understood something?\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2867/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2867/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2865","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2865/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2865/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2865/events","html_url":"https://github.com/projectlombok/lombok/issues/2865","id":910903629,"node_id":"MDU6SXNzdWU5MTA5MDM2Mjk=","number":2865,"title":"[FEATURE] Trace annotation for Eclipse plugin developers","user":{"login":"jgsuess","id":782737,"node_id":"MDQ6VXNlcjc4MjczNw==","avatar_url":"https://avatars.githubusercontent.com/u/782737?v=4","gravatar_id":"","url":"https://api.github.com/users/jgsuess","html_url":"https://github.com/jgsuess","followers_url":"https://api.github.com/users/jgsuess/followers","following_url":"https://api.github.com/users/jgsuess/following{/other_user}","gists_url":"https://api.github.com/users/jgsuess/gists{/gist_id}","starred_url":"https://api.github.com/users/jgsuess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jgsuess/subscriptions","organizations_url":"https://api.github.com/users/jgsuess/orgs","repos_url":"https://api.github.com/users/jgsuess/repos","events_url":"https://api.github.com/users/jgsuess/events{/privacy}","received_events_url":"https://api.github.com/users/jgsuess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-03T22:18:09Z","updated_at":"2021-06-10T20:27:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Description**\r\nImplement a `@Trace` annotation that allows for trace switches, in parallel to `@Log` starting as example with the\r\n[Eclipse Trace Facility](https://wiki.eclipse.org/FAQ_How_do_I_use_the_platform_debug_tracing_facility)\r\n\r\n**Target Audience**\r\nEclipse Plugin Developers\r\n\r\n**Additional context**\r\nWhile there are logging services available in Eclipse, the Platform Logging facility is straightforward to use and reliable. Its only disadvantage is the code bulk it carries. \r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2865/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2865/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2864","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2864/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2864/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2864/events","html_url":"https://github.com/projectlombok/lombok/issues/2864","id":910901874,"node_id":"MDU6SXNzdWU5MTA5MDE4NzQ=","number":2864,"title":"[FEATURE] Add Eclipse implementation for logging","user":{"login":"jgsuess","id":782737,"node_id":"MDQ6VXNlcjc4MjczNw==","avatar_url":"https://avatars.githubusercontent.com/u/782737?v=4","gravatar_id":"","url":"https://api.github.com/users/jgsuess","html_url":"https://github.com/jgsuess","followers_url":"https://api.github.com/users/jgsuess/followers","following_url":"https://api.github.com/users/jgsuess/following{/other_user}","gists_url":"https://api.github.com/users/jgsuess/gists{/gist_id}","starred_url":"https://api.github.com/users/jgsuess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jgsuess/subscriptions","organizations_url":"https://api.github.com/users/jgsuess/orgs","repos_url":"https://api.github.com/users/jgsuess/repos","events_url":"https://api.github.com/users/jgsuess/events{/privacy}","received_events_url":"https://api.github.com/users/jgsuess/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-03T22:14:42Z","updated_at":"2021-06-10T20:28:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Description**\r\nImplement an `@Log` flavour for the [Eclipse Plartform Logging Facility](https://wiki.eclipse.org/FAQ_How_do_I_use_the_platform_logging_facility%3F)\r\n\r\n**Target Audience**\r\nEclipse Plugin Developers\r\n\r\n**Additional context**\r\nWhile there are logging services available in Eclipse, the Platform Logging facility is straightforward to use and reliable. Its only disadvantage is the code bulk it carries. Lombok can address this.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2864/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2864/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2862","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2862/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2862/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2862/events","html_url":"https://github.com/projectlombok/lombok/issues/2862","id":909198265,"node_id":"MDU6SXNzdWU5MDkxOTgyNjU=","number":2862,"title":"[FEATURE] Generate a toKey method","user":{"login":"1zg12","id":52658745,"node_id":"MDQ6VXNlcjUyNjU4NzQ1","avatar_url":"https://avatars.githubusercontent.com/u/52658745?v=4","gravatar_id":"","url":"https://api.github.com/users/1zg12","html_url":"https://github.com/1zg12","followers_url":"https://api.github.com/users/1zg12/followers","following_url":"https://api.github.com/users/1zg12/following{/other_user}","gists_url":"https://api.github.com/users/1zg12/gists{/gist_id}","starred_url":"https://api.github.com/users/1zg12/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/1zg12/subscriptions","organizations_url":"https://api.github.com/users/1zg12/orgs","repos_url":"https://api.github.com/users/1zg12/repos","events_url":"https://api.github.com/users/1zg12/events{/privacy}","received_events_url":"https://api.github.com/users/1zg12/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-02T07:18:31Z","updated_at":"2021-07-18T03:51:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\n\r\n\r\nFor domain objects, it's a common use we need to put that into a map for fast retrieval. An annotation for Lombok to auto-generate a toKey method for the map key would be very helpful.\r\n\r\nWith Lombok\r\n```\r\n@Data\r\npublic class Employee {\r\n    @Tokey\r\n    String name;\r\n    @Tokey\r\n    String age;\r\n    String department;\r\n}\r\n```\r\nVanilla Java\r\n```\r\nclass Employee  {\r\n    String name;\r\n    String age;\r\n    long id;\r\n    \r\n    public String toKey() {\r\n        return \"Employee {\" +\r\n                \"name='\" + name + '\\'' +\r\n                \", age='\" + age + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2862/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2862/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2861","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2861/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2861/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2861/events","html_url":"https://github.com/projectlombok/lombok/issues/2861","id":909157809,"node_id":"MDU6SXNzdWU5MDkxNTc4MDk=","number":2861,"title":"[BUG] Spring Boot Maven Compiler Plugin silent about stub generation error and fails compilation","user":{"login":"britesoft","id":68596223,"node_id":"MDQ6VXNlcjY4NTk2MjIz","avatar_url":"https://avatars.githubusercontent.com/u/68596223?v=4","gravatar_id":"","url":"https://api.github.com/users/britesoft","html_url":"https://github.com/britesoft","followers_url":"https://api.github.com/users/britesoft/followers","following_url":"https://api.github.com/users/britesoft/following{/other_user}","gists_url":"https://api.github.com/users/britesoft/gists{/gist_id}","starred_url":"https://api.github.com/users/britesoft/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/britesoft/subscriptions","organizations_url":"https://api.github.com/users/britesoft/orgs","repos_url":"https://api.github.com/users/britesoft/repos","events_url":"https://api.github.com/users/britesoft/events{/privacy}","received_events_url":"https://api.github.com/users/britesoft/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-02T06:25:57Z","updated_at":"2021-06-06T10:15:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhile annotating the Spring Boot REST request parameters, a developer in my team made the following mistake\r\n\r\n`@RequestParam(value=\"endDate\", required = false)\r\n  @DateTimeFormat(iso = DateTimeFormat.ISO.DATE.DATE)\r\n   LocalDate endDate`\r\n\r\nInstead of DateTimeFormat.ISO.DATE, by mistake I typed as above. While this is not a compilation error, but maven compiler plugin fails subsequently due to failing generation of methods and builders.\r\nThe developer without checking fully committed the changes (It was a mistake) but our build system failed.\r\n\r\n**To Reproduce**\r\nAs explained above use DateTimeFormat.ISO.DATE.DATE instead of DateTimeFormat.ISO.DATE. Or any enum like this in the code.\r\n\r\n**Expected behavior**\r\nFailing is expected. It will be really helpful if we get feedback on the offending class and construct. In a large project where we use lots of Lombok annotations, simply failing without any feedback is a big problem. \r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.20\r\n - Platform Maven with maven-compiler-plugin\r\n\r\n**Additional context**\r\nAny failure in annotation processing of Lombok, should be given as feedback. Turning on -e or -X switch in maven didn't help either. I had rever one by one recent changes (These changes are checked in by the programmers) before I could identify the offedning class and enum usage.\r\nThe error below was due to missing getter methods.\r\n\r\n![image](https://user-images.githubusercontent.com/68596223/120433859-5cd7ef00-c399-11eb-8e7f-01624d5b827c.png)\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2861/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2861/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2860","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2860/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2860/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2860/events","html_url":"https://github.com/projectlombok/lombok/issues/2860","id":908158882,"node_id":"MDU6SXNzdWU5MDgxNTg4ODI=","number":2860,"title":"[BUG]  create-intellij-project not work","user":{"login":"dulm","id":1228446,"node_id":"MDQ6VXNlcjEyMjg0NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1228446?v=4","gravatar_id":"","url":"https://api.github.com/users/dulm","html_url":"https://github.com/dulm","followers_url":"https://api.github.com/users/dulm/followers","following_url":"https://api.github.com/users/dulm/following{/other_user}","gists_url":"https://api.github.com/users/dulm/gists{/gist_id}","starred_url":"https://api.github.com/users/dulm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dulm/subscriptions","organizations_url":"https://api.github.com/users/dulm/orgs","repos_url":"https://api.github.com/users/dulm/repos","events_url":"https://api.github.com/users/dulm/events{/privacy}","received_events_url":"https://api.github.com/users/dulm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-01T10:44:40Z","updated_at":"2021-06-02T07:11:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n`ant intellij`\r\n```\r\n/lombok/buildScripts/create-intellij-project.ant.xml:36: java.lang.IllegalArgumentException: requested configuration not found in projectlombok.org#lombok;working@MacBook-Pro-2.mshome.net: [ 'buildTools' ]\r\n```\r\n\r\nfix:  change  `create-intellij-project.ant.xml`:  `buildTools` to `buildtools`\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior, preferably in the form of the smallest java source file you can make that will show the problem when compiled with `javac -cp lombok.jar ExampleFile.java` or as sole java file in a fresh new eclipse project.\r\n\r\nIf this is not possible, give us enough to reproduce the problem. If you have stack traces or error messages please include all of them, and include screen shots if that will help explain the problem.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version:  master\r\n - Platform (javac or eclipse, and if so, what is the output of `javac -version` / the version listed in the _about..._ dialog of eclipse.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2860/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2856","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2856/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2856/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2856/events","html_url":"https://github.com/projectlombok/lombok/issues/2856","id":904026264,"node_id":"MDU6SXNzdWU5MDQwMjYyNjQ=","number":2856,"title":"@With uses `==` for object equality, which can cause unexpected issue with Strings","user":{"login":"mjsmcp","id":445834,"node_id":"MDQ6VXNlcjQ0NTgzNA==","avatar_url":"https://avatars.githubusercontent.com/u/445834?v=4","gravatar_id":"","url":"https://api.github.com/users/mjsmcp","html_url":"https://github.com/mjsmcp","followers_url":"https://api.github.com/users/mjsmcp/followers","following_url":"https://api.github.com/users/mjsmcp/following{/other_user}","gists_url":"https://api.github.com/users/mjsmcp/gists{/gist_id}","starred_url":"https://api.github.com/users/mjsmcp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjsmcp/subscriptions","organizations_url":"https://api.github.com/users/mjsmcp/orgs","repos_url":"https://api.github.com/users/mjsmcp/repos","events_url":"https://api.github.com/users/mjsmcp/events{/privacy}","received_events_url":"https://api.github.com/users/mjsmcp/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-05-27T17:43:07Z","updated_at":"2021-05-27T21:02:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Generated code from Lombok's `@With` annotation uses `==` to compare objects, which does not necessarily work as intended for Strings. See [FindBugs ](https://spotbugs.readthedocs.io/en/stable/bugDescriptions.html#es-comparison-of-string-parameter-using-or-es-comparing-parameter-string-with-eq), where this is called out as a bad practice.\r\n\r\n```\r\n@With\r\n@AllArgsConstructor\r\npublic class SampleClass {\r\n    private String foo;\r\n    private Object bar;\r\n}\r\n```\r\n\r\nProcesses to something along these lines:\r\n```\r\npublic SampleClass withFoo(String foo) {\r\n    return this.foo == foo ? this : new SampleClass(foo, this.bar);\r\n}\r\n```\r\n\r\nFor potential solutions:\r\n\r\n1. Use the `Objects.equals` method instead. (null-safe equals)\r\n2. Use the `.equals` method instead (non-null-safe equals)\r\n3. Provide a configuration option for the `@With` to select the equality mechanism you want (`equality = Equality.NULL_SAFE`)\r\n\r\nI would suggest approach 3 as it maintains backwards compatibility with existing behavior for a non-experimental feature.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2856/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2856/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2855","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2855/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2855/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2855/events","html_url":"https://github.com/projectlombok/lombok/issues/2855","id":903617772,"node_id":"MDU6SXNzdWU5MDM2MTc3NzI=","number":2855,"title":"[BUG] Unable to create a custom annotations in lombok way","user":{"login":"chandru-kumar","id":26222838,"node_id":"MDQ6VXNlcjI2MjIyODM4","avatar_url":"https://avatars.githubusercontent.com/u/26222838?v=4","gravatar_id":"","url":"https://api.github.com/users/chandru-kumar","html_url":"https://github.com/chandru-kumar","followers_url":"https://api.github.com/users/chandru-kumar/followers","following_url":"https://api.github.com/users/chandru-kumar/following{/other_user}","gists_url":"https://api.github.com/users/chandru-kumar/gists{/gist_id}","starred_url":"https://api.github.com/users/chandru-kumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chandru-kumar/subscriptions","organizations_url":"https://api.github.com/users/chandru-kumar/orgs","repos_url":"https://api.github.com/users/chandru-kumar/repos","events_url":"https://api.github.com/users/chandru-kumar/events{/privacy}","received_events_url":"https://api.github.com/users/chandru-kumar/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-05-27T11:58:19Z","updated_at":"2021-07-24T10:37:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm trying to create a custom annotation in lombok way. Im refereing @Getter or @Cleanup annotaions. But when i try to create my own annotation and Handler, I'm unable to extend the EclipseAnnotationHandler<>. I did install the lombok to eclipse and added the lombok jar to project as external dependency..Also added the dependency to pom.xml..\r\n\r\nIs there any reference to setup the project to extend the lombok to create a custom annotations? ","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2855/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2854","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2854/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2854/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2854/events","html_url":"https://github.com/projectlombok/lombok/issues/2854","id":901799151,"node_id":"MDU6SXNzdWU5MDE3OTkxNTE=","number":2854,"title":"[BUG] handmade no-args constructor drops the default value if the field has `@Builder.Default`","user":{"login":"moznion","id":1422834,"node_id":"MDQ6VXNlcjE0MjI4MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1422834?v=4","gravatar_id":"","url":"https://api.github.com/users/moznion","html_url":"https://github.com/moznion","followers_url":"https://api.github.com/users/moznion/followers","following_url":"https://api.github.com/users/moznion/following{/other_user}","gists_url":"https://api.github.com/users/moznion/gists{/gist_id}","starred_url":"https://api.github.com/users/moznion/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/moznion/subscriptions","organizations_url":"https://api.github.com/users/moznion/orgs","repos_url":"https://api.github.com/users/moznion/repos","events_url":"https://api.github.com/users/moznion/events{/privacy}","received_events_url":"https://api.github.com/users/moznion/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-26T05:42:22Z","updated_at":"2021-05-26T05:57:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello team,\r\n\r\n**Describe the bug**\r\n\r\nOnce `@Builder` has been used with a handmade no-args constructor (i.e. without `@NoArgsConstructor`) in a special situation, that constructor drops the default value of the field.\r\n\r\n**To Reproduce**\r\n\r\n```java\r\nimport lombok.Builder;\r\n\r\npublic class Diagnose {\r\n    @Builder\r\n    public static class Foo {\r\n        @Builder.Default\r\n        private String str = \"default\";\r\n\r\n        public Foo() {\r\n        }\r\n\r\n        public Foo(final String str) {\r\n            this.str = str;\r\n        }\r\n    }\r\n\r\n    public static void main(String... argv) {\r\n        System.out.println(new Foo().str); // `\"default\"` is the expected value, but it gets `null`\r\n    }\r\n}\r\n```\r\n\r\nBut if I remove `@Builder.Default` then it can get `\"default\"` in the main method. And if I use `@NoArgsConstructor` instead of a handmade no-args constructor, it can get the expected default value as well.\r\n\r\n[EDIT]\r\nAnd if I delombok the above code, it works fine though.\r\n\r\n**Expected behavior**\r\n\r\nI expect it should respect the default value (i.e. `\"default\"` in the above example) of the field even if I use a handmade no-args constructor with `@Builder` and `@Builder.Default`.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version\r\n   - 1.18.20\r\n  \r\n - Platform\r\n```\r\n$ java -version\r\nopenjdk version \"11.0.10\" 2021-01-19\r\nOpenJDK Runtime Environment AdoptOpenJDK (build 11.0.10+9)\r\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.10+9, mixed mode)\r\n```\r\n\r\n---\r\n\r\nI'd like to say many thanks for this great project.\r\nregarding,","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2854/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2854/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2853","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2853/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2853/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2853/events","html_url":"https://github.com/projectlombok/lombok/issues/2853","id":900203980,"node_id":"MDU6SXNzdWU5MDAyMDM5ODA=","number":2853,"title":"[FEATURE] Generate mapping function for enums","user":{"login":"Blastman","id":3926243,"node_id":"MDQ6VXNlcjM5MjYyNDM=","avatar_url":"https://avatars.githubusercontent.com/u/3926243?v=4","gravatar_id":"","url":"https://api.github.com/users/Blastman","html_url":"https://github.com/Blastman","followers_url":"https://api.github.com/users/Blastman/followers","following_url":"https://api.github.com/users/Blastman/following{/other_user}","gists_url":"https://api.github.com/users/Blastman/gists{/gist_id}","starred_url":"https://api.github.com/users/Blastman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Blastman/subscriptions","organizations_url":"https://api.github.com/users/Blastman/orgs","repos_url":"https://api.github.com/users/Blastman/repos","events_url":"https://api.github.com/users/Blastman/events{/privacy}","received_events_url":"https://api.github.com/users/Blastman/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-25T02:46:31Z","updated_at":"2021-06-27T12:18:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I create a lot of mapping function for enums such as\r\n\r\n```java\r\npublic enum StatusEnum {\r\n    ACTIVE(\"A\"),\r\n    INACTIVE(\"I\"),\r\n    PENDING(\"P\");\r\n\r\n    private final String dbCode;\r\n    private static final Map<String, StatusEnum> STATUS_TO_MAPPING;\r\n\r\n    static {\r\n        STATUS_TO_MAPPING = Stream.of(StatusEnum.values())\r\n            .collect(Collectors.toUnmodifiableMap(statusEnum -> statusEnum.getDbCode().toUpperCase(), Function.identity()));\r\n    }\r\n\r\n    public static Optional<StatusEnum> fromDbCode(String dbCode) {\r\n        if (dbCode == null) {\r\n            return Optional.empty();\r\n        }\r\n        return Optional.ofNullable(STATUS_TO_MAPPING.get(dbCode.toUpperCase()))\r\n    }\r\n\r\n    StatusEnum(String dbCode) {\r\n        this.dbCode = dbCode;\r\n    }\r\n\r\n    public String getDbCode() {\r\n        return dbCode;\r\n    }\r\n}\r\n```\r\n\r\nSuggested enhancement would generate the status mapping function instead such as:\r\n```java\r\n@Getter\r\npublic enum StatusEnum {\r\n    ACTIVE(\"A\"),\r\n    INACTIVE(\"I\"),\r\n    PENDING(\"P\"),\r\n    UNKNOWN(\"U\");\r\n\r\n    @EnumMappingFunction(caseInsensitive = true, returnOptional = true)\r\n    private final String dbCode;\r\n\r\n    StatusEnum(String dbCode) {\r\n        this.dbCode = dbCode;\r\n    }\r\n}\r\n```\r\nTo where a `public static Optional<Enum>/Enum from[variable-name](FromVariableType var) {}` function is generated. My example uses string but could use any basic type on an enum.\r\n\r\nTo use such a feature, it would require that the field is final and there's only a one-to-one mapping. Allowing a null or default could be useful too but harder to implement since you can't use an enum in a field annotation of same enum class. (It would be nice to define `defaultValue = StatusEnum.UNKNOWN` / `defaultValue = \"U\"` type of thing).\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2853/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2853/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2849","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2849/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2849/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2849/events","html_url":"https://github.com/projectlombok/lombok/issues/2849","id":897078581,"node_id":"MDU6SXNzdWU4OTcwNzg1ODE=","number":2849,"title":"[FEATURE] ToString's onlyExplicitlyIncluded configurable from lombok.config","user":{"login":"mickroll","id":9883575,"node_id":"MDQ6VXNlcjk4ODM1NzU=","avatar_url":"https://avatars.githubusercontent.com/u/9883575?v=4","gravatar_id":"","url":"https://api.github.com/users/mickroll","html_url":"https://github.com/mickroll","followers_url":"https://api.github.com/users/mickroll/followers","following_url":"https://api.github.com/users/mickroll/following{/other_user}","gists_url":"https://api.github.com/users/mickroll/gists{/gist_id}","starred_url":"https://api.github.com/users/mickroll/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mickroll/subscriptions","organizations_url":"https://api.github.com/users/mickroll/orgs","repos_url":"https://api.github.com/users/mickroll/repos","events_url":"https://api.github.com/users/mickroll/events{/privacy}","received_events_url":"https://api.github.com/users/mickroll/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-20T16:26:31Z","updated_at":"2021-05-20T16:26:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"As there is the `@ToString(onlyExplicitlyIncluded = true/false)` option already, it would make sense to have the ability of setting it once across the project at the `lombok.config`.\r\n\r\nJustification:\r\n- Improved signal-to-noise ratio\r\n- Better readability (arguably)\r\n- Helps keeping project convention consistent\r\n\r\nBTW. Thanks for adding this option. It really helps preventing data leakage into log files 👍","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2849/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2849/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2848","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2848/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2848/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2848/events","html_url":"https://github.com/projectlombok/lombok/issues/2848","id":896837317,"node_id":"MDU6SXNzdWU4OTY4MzczMTc=","number":2848,"title":"[BUG] neither `lombok.onX.flagUsage` nor `lombok.experimental.flagUsage` works with `onX`","user":{"login":"mr-july","id":452907,"node_id":"MDQ6VXNlcjQ1MjkwNw==","avatar_url":"https://avatars.githubusercontent.com/u/452907?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-july","html_url":"https://github.com/mr-july","followers_url":"https://api.github.com/users/mr-july/followers","following_url":"https://api.github.com/users/mr-july/following{/other_user}","gists_url":"https://api.github.com/users/mr-july/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-july/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-july/subscriptions","organizations_url":"https://api.github.com/users/mr-july/orgs","repos_url":"https://api.github.com/users/mr-july/repos","events_url":"https://api.github.com/users/mr-july/events{/privacy}","received_events_url":"https://api.github.com/users/mr-july/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-20T13:29:07Z","updated_at":"2021-05-20T13:29:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nNeither `lombok.onX.flagUsage = ERROR` nor `lombok.experimental.flagUsage = ERROR` works with `onConstructor`, `onMethod` and `onParam`.\r\n\r\n**To Reproduce**\r\nCreate simple gradle project.\r\n```groovy\r\n// build.gradle\r\nplugins {\r\n    id 'java'\r\n}\r\n\r\ngroup 'org.example'\r\nversion '1.0-SNAPSHOT'\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    compileOnly 'org.projectlombok:lombok:1.18.20'\r\n    annotationProcessor 'org.projectlombok:lombok:1.18.20'\r\n\r\n    implementation group: 'javax.inject', name: 'javax.inject', version: '1'\r\n    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'\r\n    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'\r\n}\r\n```\r\n```properties\r\n# lombok.config\r\nlombok.onX.flagUsage = ERROR\r\nlombok.experimental.flagUsage = ERROR\r\n```\r\n```java\r\n// OnXExample.java\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\n\r\nimport javax.inject.Inject;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Column;\r\nimport javax.validation.constraints.Max;\r\n\r\n@AllArgsConstructor(onConstructor=@__(@Inject))\r\npublic class OnXExample {\r\n  @Getter(onMethod_={@Id, @Column(name=\"unique-id\")}) //JDK8\r\n  @Setter(onParam_=@Max(10000)) //JDK8\r\n  private long unid;\r\n}\r\n```\r\n\r\nThen execute\r\n```\r\n./gradlew jar\r\n```\r\n\r\nThe compilation is successful. :-(\r\n\r\n**Expected behavior**\r\nCompilation error must occur, because the `onConstructor`, `onMethod` and `onParam` annotations must produce an error according to `lombok.onX.flagUsage` and `lombok.experimental.flagUsage` parameters in lombok configuration.\r\n\r\n**Version info:**\r\n - Lombok 1.18.20\r\n - Platforms: javac 15.0.2, javac 11.0.11, javac 1.8.0_281\r\n\r\n**Additional context**\r\nArch Linux x86_64\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2848/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2847","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2847/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2847/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2847/events","html_url":"https://github.com/projectlombok/lombok/issues/2847","id":896526009,"node_id":"MDU6SXNzdWU4OTY1MjYwMDk=","number":2847,"title":"[FEATURE] Replace @Accessors with new @FluentGetter, @FluentSetter, @FluentChainSetter, @ChainSetter","user":{"login":"Cypher01","id":6649965,"node_id":"MDQ6VXNlcjY2NDk5NjU=","avatar_url":"https://avatars.githubusercontent.com/u/6649965?v=4","gravatar_id":"","url":"https://api.github.com/users/Cypher01","html_url":"https://github.com/Cypher01","followers_url":"https://api.github.com/users/Cypher01/followers","following_url":"https://api.github.com/users/Cypher01/following{/other_user}","gists_url":"https://api.github.com/users/Cypher01/gists{/gist_id}","starred_url":"https://api.github.com/users/Cypher01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Cypher01/subscriptions","organizations_url":"https://api.github.com/users/Cypher01/orgs","repos_url":"https://api.github.com/users/Cypher01/repos","events_url":"https://api.github.com/users/Cypher01/events{/privacy}","received_events_url":"https://api.github.com/users/Cypher01/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-20T09:15:54Z","updated_at":"2021-05-20T09:20:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The `@Accessors` annotation limits the configuration to have only one version of Getters and Setters, fluent or not fluent, chain or not chain. And one has to admit, it was never a good design to have a separate annotation to configure a different annotation.\r\n\r\n### Improvement idea 1:\r\nThe 'fluent' and 'chain' configuations should be directly in `@Setter` and the 'fluent' configuation should be directly in `@Getter` ('chain' doesn't affect Getters). The 'prefix' configuration is out of scope of this feature request.\r\n\r\n### Improvement idea 2 resp. feature request:\r\nThe scope of this feature request is to have the opportunity to have both, fluent _and_ not fluent Getters and Setters, as well as chained _and_ not chained Setters.\r\n\r\nThe probably cleanest solution would be to get rid of configuration parameters and switch to separate new annotations.\r\n\r\n### Suggestion:\r\nRemove\r\n- `@Accessors`\r\n\r\nKeep\r\n- `@Getter`\r\n- `@Setter`\r\n\r\nAdd new\r\n- `@FluentGetter`\r\n- `@FluentSetter`\r\n- `@FluentChainSetter` (or `@FluentChainedSetter`)\r\n- `@ChainSetter` (or `@ChainedSetter`)\r\n\r\nThere are limitations: `@Setter` and `@ChainSetter` would collide as they have the same signature and only different return types. The same goes for `@FluentSetter` and `@FluentChainSetter`. Not sure what would be the best solution for this.\r\n\r\n### Alternative:\r\nRemove\r\n- `@Accessors`\r\n\r\nKeep\r\n- `@Getter`\r\n\r\nUpdate\r\n- `@Setter` -> Add boolean 'chain' configuration\r\n\r\nAdd new\r\n- `@FluentGetter`\r\n- `@FluentSetter` -> Also include boolean 'chain' configuration\r\n\r\n### To give a little bit of context:\r\nThe idea comes from the OpenAPI generator. When generating API models, the generator adds three accessors:\r\n- default Getter, like `public String getMyString()`\r\n- default Setter, like `public void setMyString(String myString)`\r\n- _additionally_ a fluent chained setter, like `public MyClass myString(String myString)`\r\n\r\nWith these changes users have the opportunity to add all different permutations of Getters and Setters to their classes. This would be a great improvement making old basic lombok functionality cleaner, easier to use, and overall better.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2847/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2847/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2846","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2846/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2846/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2846/events","html_url":"https://github.com/projectlombok/lombok/issues/2846","id":896372916,"node_id":"MDU6SXNzdWU4OTYzNzI5MTY=","number":2846,"title":"[BUG] Lombok not work with @JsonIgnore","user":{"login":"tuyendt6","id":6881640,"node_id":"MDQ6VXNlcjY4ODE2NDA=","avatar_url":"https://avatars.githubusercontent.com/u/6881640?v=4","gravatar_id":"","url":"https://api.github.com/users/tuyendt6","html_url":"https://github.com/tuyendt6","followers_url":"https://api.github.com/users/tuyendt6/followers","following_url":"https://api.github.com/users/tuyendt6/following{/other_user}","gists_url":"https://api.github.com/users/tuyendt6/gists{/gist_id}","starred_url":"https://api.github.com/users/tuyendt6/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tuyendt6/subscriptions","organizations_url":"https://api.github.com/users/tuyendt6/orgs","repos_url":"https://api.github.com/users/tuyendt6/repos","events_url":"https://api.github.com/users/tuyendt6/events{/privacy}","received_events_url":"https://api.github.com/users/tuyendt6/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-20T07:05:59Z","updated_at":"2021-05-20T07:05:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Test Code \r\nimport lombok.Data;\r\n@Data\r\npublic class TMasStatus {\r\n        @JsonIgnore\r\n\tprivate String sNameSlct;\r\n}\r\n\r\n**Describe the bug**\r\nwhen I used lombok.jar --> Ver.1.16.20 , in Json file 'snameSlct' was shown , this means  @JsonIgnore not work as well\r\nbut when I use lombok.jar --> Ver.1.18.16 , in Json file 'snameSlct' was  not shown ,  this means  @JsonIgnore  work as well .\r\ncan you let me know why this happend ? \r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2846/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2845","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2845/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2845/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2845/events","html_url":"https://github.com/projectlombok/lombok/issues/2845","id":895722002,"node_id":"MDU6SXNzdWU4OTU3MjIwMDI=","number":2845,"title":"[BUG]  Javac crash when compiling class","user":{"login":"xxDark","id":19853368,"node_id":"MDQ6VXNlcjE5ODUzMzY4","avatar_url":"https://avatars.githubusercontent.com/u/19853368?v=4","gravatar_id":"","url":"https://api.github.com/users/xxDark","html_url":"https://github.com/xxDark","followers_url":"https://api.github.com/users/xxDark/followers","following_url":"https://api.github.com/users/xxDark/following{/other_user}","gists_url":"https://api.github.com/users/xxDark/gists{/gist_id}","starred_url":"https://api.github.com/users/xxDark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xxDark/subscriptions","organizations_url":"https://api.github.com/users/xxDark/orgs","repos_url":"https://api.github.com/users/xxDark/repos","events_url":"https://api.github.com/users/xxDark/events{/privacy}","received_events_url":"https://api.github.com/users/xxDark/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-19T17:51:39Z","updated_at":"2021-05-19T20:12:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nJavac crash when compiling class\r\n\r\n**To Reproduce**\r\nAttempting to compile the following code results in a crash:\r\n```Java\r\n  private static Class<?> unmaskOwner(Object handle) {\r\n    if (handle instanceof Class) {\r\n      return (Class<?>) handle;\r\n    }\r\n    return handle.getClass();\r\n  }\r\n```\r\n\r\n**Expected behavior**\r\nNo javac crash\r\n\r\n**Version info):**\r\n- 1.18.20\r\n\r\nhttps://paste.implario.dev/acadojijuc.java","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2845/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2843","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2843/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2843/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2843/events","html_url":"https://github.com/projectlombok/lombok/issues/2843","id":892113656,"node_id":"MDU6SXNzdWU4OTIxMTM2NTY=","number":2843,"title":"Accessors chain and inheritance","user":{"login":"DSEyers","id":17279759,"node_id":"MDQ6VXNlcjE3Mjc5NzU5","avatar_url":"https://avatars.githubusercontent.com/u/17279759?v=4","gravatar_id":"","url":"https://api.github.com/users/DSEyers","html_url":"https://github.com/DSEyers","followers_url":"https://api.github.com/users/DSEyers/followers","following_url":"https://api.github.com/users/DSEyers/following{/other_user}","gists_url":"https://api.github.com/users/DSEyers/gists{/gist_id}","starred_url":"https://api.github.com/users/DSEyers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DSEyers/subscriptions","organizations_url":"https://api.github.com/users/DSEyers/orgs","repos_url":"https://api.github.com/users/DSEyers/repos","events_url":"https://api.github.com/users/DSEyers/events{/privacy}","received_events_url":"https://api.github.com/users/DSEyers/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-14T17:37:06Z","updated_at":"2021-05-14T19:22:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Scenario**\r\nWas expecting if use ancessor chaining that on child I could set child instances variables and parent, but only way is to first do all child settings (makes sense). but not ideal.\r\n\r\n```\r\n@Accessors(chain = true)\r\npublic class Parent {\r\n    private String nameParent;\r\n}\r\n```\r\n\r\n```\r\n@Accessors(chain = true)\r\npublic class Child extends Parent {\r\n    private String nameChild;\r\n}\r\n```\r\n\r\nThen try to use the setters on a child once you have used a parent setter you can not access other child setters.\r\n public static void main(String[] args) {\r\n        final Child child1 = new Child()\r\n                .setNameParent(\"parent\")\r\n                .setNameChild(\"child\");   // This you can NOT do (it returned parent object prior)\r\n\r\n        final Child child2 = new Child()\r\n                .setNameChild(\"child\") \r\n                .setNameParent(\"parent\");  // works\r\n    }","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2843/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2843/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2839","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2839/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2839/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2839/events","html_url":"https://github.com/projectlombok/lombok/issues/2839","id":886817569,"node_id":"MDU6SXNzdWU4ODY4MTc1Njk=","number":2839,"title":"[BUG] Exception while resolving: NODE LOCAL because \"that.type\" is null","user":{"login":"adrian-herscu","id":2996545,"node_id":"MDQ6VXNlcjI5OTY1NDU=","avatar_url":"https://avatars.githubusercontent.com/u/2996545?v=4","gravatar_id":"","url":"https://api.github.com/users/adrian-herscu","html_url":"https://github.com/adrian-herscu","followers_url":"https://api.github.com/users/adrian-herscu/followers","following_url":"https://api.github.com/users/adrian-herscu/following{/other_user}","gists_url":"https://api.github.com/users/adrian-herscu/gists{/gist_id}","starred_url":"https://api.github.com/users/adrian-herscu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adrian-herscu/subscriptions","organizations_url":"https://api.github.com/users/adrian-herscu/orgs","repos_url":"https://api.github.com/users/adrian-herscu/repos","events_url":"https://api.github.com/users/adrian-herscu/events{/privacy}","received_events_url":"https://api.github.com/users/adrian-herscu/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-11T10:33:24Z","updated_at":"2021-05-23T12:09:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n```\r\n[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ qa-tester-utils ---\r\n[INFO] Changes detected - recompiling the module!\r\n[INFO] Compiling 82 source files to C:\\projects\\system-testing\\qa-tester-utils\\target\\classes\r\nException while resolving: NODE LOCAL (class com.sun.tools.javac.tree.JCTree$JCVariableDecl) @val\r\nfinal ___Lombok_VAL_Attrib__ object = actualIterator.next()(SimpleFileObject[C:\\projects\\system-testing\\qa-tester-utils\\src\\main\\java\\com\\ge\\acutecare\\qa\\tester\\utils\\StreamMatchersExtensions.java])\r\njava.lang.NullPointerException: Cannot invoke \"com.sun.tools.javac.code.Type.hasTag(com.sun.tools.javac.code.TypeTag)\" because \"that.type\" is null\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Check$Validator.visitTypeIdent(Check.java:1489)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree.accept(JCTree.java:2484)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Check$Validator.validateTree(Check.java:1508)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Check.validate(Check.java:1379)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitVarDef(Attr.java:1288)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:983)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:764)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1442)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1047)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1232)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:893)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5330)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5221)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5057)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitClassDef(Attr.java:974)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCClassDecl.accept(JCTree.java:790)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitAnonymousClassDefinition(Attr.java:2840)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitNewClass(Attr.java:2731)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewClass.accept(JCTree.java:1800)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitReturn(Attr.java:2308)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1657)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:764)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1442)\r\n\tat jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1047)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:671)\r\n\tat jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:745)\r\n\tat lombok.javac.JavacResolution.attrib(JavacResolution.java:249)\r\n\tat lombok.javac.JavacResolution.memberEnterAndAttribute(JavacResolution.java:217)\r\n\tat lombok.javac.JavacResolution.resolveMethodMember(JavacResolution.java:165)\r\n\tat lombok.javac.handlers.HandleVal.endVisitLocal(HandleVal.java:144)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:122)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:126)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:126)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:105)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:95)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:126)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:126)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:105)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:95)\r\n\tat lombok.javac.JavacAST.traverseChildren(JavacAST.java:222)\r\n\tat lombok.javac.JavacNode.traverse(JavacNode.java:90)\r\n\tat lombok.javac.JavacAST.traverse(JavacAST.java:218)\r\n\tat lombok.javac.HandlerLibrary.callASTVisitors(HandlerLibrary.java:276)\r\n\tat lombok.javac.JavacTransformer.transform(JavacTransformer.java:64)\r\n\tat lombok.javac.apt.LombokProcessor.process(LombokProcessor.java:328)\r\n\tat lombok.core.AnnotationProcessor$JavacDescriptor.process(AnnotationProcessor.java:187)\r\n\tat lombok.core.AnnotationProcessor.process(AnnotationProcessor.java:241)\r\n\tat lombok.launch.AnnotationProcessorHider$AnnotationProcessor.process(AnnotationProcessor.java:90)\r\n\tat jdk.compiler/com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:1025)\r\n\tat jdk.compiler/com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:940)\r\n\tat jdk.compiler/com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1269)\r\n\tat jdk.compiler/com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1384)\r\n\tat jdk.compiler/com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1261)\r\n\tat jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:935)\r\n\tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)\r\n\tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)\r\n\tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)\r\n\tat jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)\r\n\tat org.codehaus.plexus.compiler.javac.JavaxToolsCompiler.compileInProcess(JavaxToolsCompiler.java:126)\r\n\tat org.codehaus.plexus.compiler.javac.JavacCompiler.performCompile(JavacCompiler.java:174)\r\n\tat org.apache.maven.plugin.compiler.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:1129)\r\n\tat org.apache.maven.plugin.compiler.CompilerMojo.execute(CompilerMojo.java:188)\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:210)\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:156)\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:148)\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)\r\n\tat org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:190)\r\n\tat org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:186)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\r\n\tat java.base/java.lang.Thread.run(Thread.java:831)\r\n[INFO] -------------------------------------------------------------\r\n[ERROR] COMPILATION ERROR : \r\n[INFO] -------------------------------------------------------------\r\n[ERROR] Lombok visitor handler class lombok.javac.handlers.HandleVal failed: java.lang.NullPointerException: Cannot invoke \"com.sun.tools.javac.code.Type.hasTag(com.sun.tools.javac.code.TypeTag)\" because \"that.type\" is null\r\n[INFO] 1 error\r\n\r\n```\r\n\r\n**To Reproduce**\r\n```\r\n    <!-- NOTE: same happens with 16 -->\r\n    <java.version>14</java.version>\r\n    <maven.compiler.source>${java.version}</maven.compiler.source>\r\n    <maven.compiler.target>${java.version}</maven.compiler.target>\r\n    <maven.compiler.release>${java.version}</maven.compiler.release>\r\n```\r\n```\r\n      <dependency>\r\n        <groupId>org.projectlombok</groupId>\r\n        <artifactId>lombok</artifactId>\r\n        <version>1.18.20</version>\r\n        <scope>provided</scope>\r\n      </dependency>\r\n```\r\n```\r\n        <plugin>\r\n          <groupId>org.apache.maven.plugins</groupId>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n          <configuration>\r\n            <!-- NOTE: same happens without this section -->\r\n            <annotationProcessorPaths>\r\n              <path>\r\n                <groupId>org.projectlombok</groupId>\r\n                <artifactId>lombok</artifactId>\r\n                <version>1.18.20</version>\r\n              </path>\r\n            </annotationProcessorPaths>\r\n          </configuration>\r\n        </plugin>\r\n```\r\n\r\n**Expected behavior**\r\nProject should compile and open without errors both in IntelliJ and Eclipse.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.20\r\n - Platform (javac or eclipse, and if so, what is the output of `javac -version` / the version listed in the _about..._ dialog of eclipse.\r\n```\r\nApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)\r\nMaven home: C:\\Users\\212600552\\AppData\\Local\\JetBrains\\Toolbox\\apps\\IDEA-U\\ch-0\\211.7142.45\\plugins\\maven\\lib\\maven3\r\nJava version: 16.0.1, vendor: Oracle Corporation, runtime: C:\\Program Files\\Java\\jdk-16.0.1\r\nDefault locale: en_US, platform encoding: UTF-8\r\nOS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\r\n```\r\n**Additional context**\r\nSame project compiles with Java 8 and opens fine both in IntelliJ aand Eclipse.\r\nSeems related to \r\nhttps://github.com/projectlombok/lombok/issues/2681\r\nalthough the error is different.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2839/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2837","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2837/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2837/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2837/events","html_url":"https://github.com/projectlombok/lombok/issues/2837","id":882134448,"node_id":"MDU6SXNzdWU4ODIxMzQ0NDg=","number":2837,"title":"[FEATURE] Whitelist experimental features","user":{"login":"TheChilliPL","id":18823939,"node_id":"MDQ6VXNlcjE4ODIzOTM5","avatar_url":"https://avatars.githubusercontent.com/u/18823939?v=4","gravatar_id":"","url":"https://api.github.com/users/TheChilliPL","html_url":"https://github.com/TheChilliPL","followers_url":"https://api.github.com/users/TheChilliPL/followers","following_url":"https://api.github.com/users/TheChilliPL/following{/other_user}","gists_url":"https://api.github.com/users/TheChilliPL/gists{/gist_id}","starred_url":"https://api.github.com/users/TheChilliPL/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TheChilliPL/subscriptions","organizations_url":"https://api.github.com/users/TheChilliPL/orgs","repos_url":"https://api.github.com/users/TheChilliPL/repos","events_url":"https://api.github.com/users/TheChilliPL/events{/privacy}","received_events_url":"https://api.github.com/users/TheChilliPL/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-09T10:35:31Z","updated_at":"2021-05-09T10:35:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nI wanted to be able to mark every experimental usage as a warning and allow the `@UtilityClass` experimental feature, so I tried configuring it so:\r\n```properties\r\nlombok.experimental.flagUsage = warning\r\nlombok.utilityClass.flagUsage = allow\r\n```\r\nbut it doesn't work for some reason. The project builds, but usage of the `@UtilityClass` annotation is still being marked as a warning. It should be possible to whitelist some specific experimental features.\r\n\r\n(Additionally, the IntelliJ IDEA plugin doesn't show these warnings in code—they only show up in build output)\r\n\r\n**Describe the target audience**\r\nDevelopers that want to use only some of the experimental features that seem most useful.","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2837/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2836","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2836/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2836/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2836/events","html_url":"https://github.com/projectlombok/lombok/issues/2836","id":879320891,"node_id":"MDU6SXNzdWU4NzkzMjA4OTE=","number":2836,"title":"[FEATURE] Hope to develop new annotations","user":{"login":"achnly","id":28851853,"node_id":"MDQ6VXNlcjI4ODUxODUz","avatar_url":"https://avatars.githubusercontent.com/u/28851853?v=4","gravatar_id":"","url":"https://api.github.com/users/achnly","html_url":"https://github.com/achnly","followers_url":"https://api.github.com/users/achnly/followers","following_url":"https://api.github.com/users/achnly/following{/other_user}","gists_url":"https://api.github.com/users/achnly/gists{/gist_id}","starred_url":"https://api.github.com/users/achnly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/achnly/subscriptions","organizations_url":"https://api.github.com/users/achnly/orgs","repos_url":"https://api.github.com/users/achnly/repos","events_url":"https://api.github.com/users/achnly/events{/privacy}","received_events_url":"https://api.github.com/users/achnly/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-05-07T16:34:01Z","updated_at":"2021-05-11T15:27:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Project Lombok is a java library that automatically plugs into your editor and build tools,I like to use it!\r\nNow there is a problem that bothers me：\r\n1. @Data Too many methods generated,Hope that there is an annotation that can generate **Getter,Setter,ToString** method.Otherwise I need to add these three comments\r\nExample:\r\n```java\r\n@Getter\r\n@Setter\r\n@ToString\r\n// god,Too many annotations\r\npublic class Demo {\r\n    \r\n}\r\n// If there is this Annotation：\r\n// god,Too many annotations\r\n@GST  // If there is this Annotation：\r\n// @GST = @Getter + @Setter + @ToString\r\npublic class Demo {\r\n    \r\n}\r\n\r\n```\r\n2. @AllArgsConstructor,@NoArgsConstructor.Can you provide an aggregate annotation?\r\nExample:\r\n```java\r\n@NoArgsAndAllArgsConstructor // If there is this Annotation\r\n// @NoArgsAndAllArgsConstructor = @AllArgsConstructor + @NoArgsConstructor\r\nclass Demo {\r\n    private String name;\r\n    /*---------------- Generate parameterized and non-parameter constructs ---------------------*/\r\n    public Demo() {}\r\n\r\n    public Demo(String name) {\r\n        this.name = name;\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2836/reactions","total_count":4,"+1":2,"-1":2,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2836/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2835","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2835/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2835/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2835/events","html_url":"https://github.com/projectlombok/lombok/issues/2835","id":877862532,"node_id":"MDU6SXNzdWU4Nzc4NjI1MzI=","number":2835,"title":"[FEATURE] automatic @SneakyThrows","user":{"login":"cvmocanu","id":59873,"node_id":"MDQ6VXNlcjU5ODcz","avatar_url":"https://avatars.githubusercontent.com/u/59873?v=4","gravatar_id":"","url":"https://api.github.com/users/cvmocanu","html_url":"https://github.com/cvmocanu","followers_url":"https://api.github.com/users/cvmocanu/followers","following_url":"https://api.github.com/users/cvmocanu/following{/other_user}","gists_url":"https://api.github.com/users/cvmocanu/gists{/gist_id}","starred_url":"https://api.github.com/users/cvmocanu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cvmocanu/subscriptions","organizations_url":"https://api.github.com/users/cvmocanu/orgs","repos_url":"https://api.github.com/users/cvmocanu/repos","events_url":"https://api.github.com/users/cvmocanu/events{/privacy}","received_events_url":"https://api.github.com/users/cvmocanu/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-06T18:47:23Z","updated_at":"2021-05-06T18:48:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\n\r\nAutomatically apply `@SneakyThrows` in all places where it's needed to make the compiler happy.\r\nThe feature should be configurable in `lombok.config` and turned-off by default.\r\n\r\n**Describe the target audience**\r\n\r\nI know some people disagree, but I consider checked exception as a failed experiment.\r\nIt looks good on paper, but in the real world it forces us to fill our programs with boilerplace code just to keep the compiler happy, without bringing any other improvement.\r\n\r\nChecked exceptions are quite awful.\r\n\r\nFor example:\r\n* none of the functional interfaces in `java.util.function` (like `Supplier`) declare checked exceptions. That means that when you need to create a lambda for such a functional interface, the compiler doesn't let you throw checked exceptions. The workaround is to catch `Exception` and rethrow it as an unchecked exception. This creates unnecessary boilerplate in the lambda, but this is not all. At the point where you need to handle that exception, you need to walk the cause chain past the unchecked exception to get to the real exception that you need to handle. This is additional boilerplate code that we need to write just to keep the compiler happy.\r\n* the compiler is dumb enough to force us to catch checked exception that are guaranteed never to happen. For example, the compiler forces us to catch `UnsupportedEncodingException` when calling the constructor `InputStreamReader(InputStream in, String charsetName)` with `charsetName=UTF-8`. But that exception can never happen, because the JVM is required by specification to support UTF-8.\r\n* I'm sure there are other examples that I can't think of right now.\r\n\r\n`@SneakyThrows` helps a lot.\r\n\r\nBut the problem is that you need to manually apply it.\r\nIn a sense, if you never want checked exceptions, `@SneakyThrows` is also boilerplate (even though a lot less than what javac requires).\r\n\r\nThe proposal is to automatically apply `@SneakyThrows` everywhere is needed in order to keep the compiler happy.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2835/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2835/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2833","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2833/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2833/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2833/events","html_url":"https://github.com/projectlombok/lombok/issues/2833","id":876660582,"node_id":"MDU6SXNzdWU4NzY2NjA1ODI=","number":2833,"title":"[BUG] Exception in Android Studio 4.2","user":{"login":"krojew","id":1268573,"node_id":"MDQ6VXNlcjEyNjg1NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1268573?v=4","gravatar_id":"","url":"https://api.github.com/users/krojew","html_url":"https://github.com/krojew","followers_url":"https://api.github.com/users/krojew/followers","following_url":"https://api.github.com/users/krojew/following{/other_user}","gists_url":"https://api.github.com/users/krojew/gists{/gist_id}","starred_url":"https://api.github.com/users/krojew/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krojew/subscriptions","organizations_url":"https://api.github.com/users/krojew/orgs","repos_url":"https://api.github.com/users/krojew/repos","events_url":"https://api.github.com/users/krojew/events{/privacy}","received_events_url":"https://api.github.com/users/krojew/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-05-05T17:03:05Z","updated_at":"2021-05-08T04:34:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nLombok visitor handler class lombok.javac.handlers.HandleVal failed: java.lang.NullPointerException is present when building a project in latest Android Studio 4.2.\r\n\r\n**To Reproduce**\r\nImport lombok.var and declare a variable using it in the code along with a build error: illegal reference to restricted type 'var'.\r\n\r\n**Expected behavior**\r\nSuccessful build.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: 0.34-2020.2\r\n - Platform: Android Studio 4.2\r\n\r\n**Additional context**\r\nProblem occurred only after upgrading the Studio.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2833/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2829","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2829/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2829/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2829/events","html_url":"https://github.com/projectlombok/lombok/issues/2829","id":874623128,"node_id":"MDU6SXNzdWU4NzQ2MjMxMjg=","number":2829,"title":"[BUG] Delombok not Working with Modules","user":{"login":"bradleylarrick","id":42816944,"node_id":"MDQ6VXNlcjQyODE2OTQ0","avatar_url":"https://avatars.githubusercontent.com/u/42816944?v=4","gravatar_id":"","url":"https://api.github.com/users/bradleylarrick","html_url":"https://github.com/bradleylarrick","followers_url":"https://api.github.com/users/bradleylarrick/followers","following_url":"https://api.github.com/users/bradleylarrick/following{/other_user}","gists_url":"https://api.github.com/users/bradleylarrick/gists{/gist_id}","starred_url":"https://api.github.com/users/bradleylarrick/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bradleylarrick/subscriptions","organizations_url":"https://api.github.com/users/bradleylarrick/orgs","repos_url":"https://api.github.com/users/bradleylarrick/repos","events_url":"https://api.github.com/users/bradleylarrick/events{/privacy}","received_events_url":"https://api.github.com/users/bradleylarrick/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2021-05-03T14:26:22Z","updated_at":"2021-05-07T15:15:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The Lombok plugin and delombok are not working correctly with modules. I've created\r\na sample project at https://github.com/bradleylarrick/delombok-example.git.\r\n\r\nI'm using Maven 3.8.1, Lombok 1.18.20 and JDK 11 (the same behavior exhibits with JDK 16).\r\n\r\nWithout the module-info.java file the delombok process works correctly.  When I add\r\nthe module-info.java file the lombok plugin errors saying that the modules referenced in\r\nmodule-info.java can't be found:\r\n\r\nsrc\\main\\java\\module-info.java:24: error: module not found: com.fasterxml.jackson.annotation\r\nsrc\\main\\java\\module-info.java:25: error: module not found: com.fasterxml.jackson.core\r\n .\r\n .\r\n .\r\n\r\nI get the same errors when I try running the delombok from the command line using the same arguments\r\nthe plugin uses.\r\n\r\nI can get the command line delombok to work if I change the sourcepath to point to the lombok-enabled\r\ncode (src/main/lombok) instead if the standard code (src/main/java). This presents the problem of\r\nrequiring all classes the lombok-enabled code reference to be in the src/main/lombok path.\r\n\r\nI tried changing the command line script to add the jar files to the module-path instead of the classpath,\r\nbut then I get the following errors on the lombok-enabled classes:\r\n\r\nC:\\projects\\delombok-example\\src\\main\\lombok\\org\\larrick\\datagen\\data\\Address.java:7: error: file should be on source path, or on patch path for module\r\nC:\\projects\\delombok-example\\src\\main\\lombok\\org\\larrick\\datagen\\data\\Ethnicity.java:7: error: file should be on source path, or on patch path for module\r\n .\r\n .\r\n .\r\n\r\nPlease advise.\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2829/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2826","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2826/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2826/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2826/events","html_url":"https://github.com/projectlombok/lombok/issues/2826","id":873687286,"node_id":"MDU6SXNzdWU4NzM2ODcyODY=","number":2826,"title":"[BUG] Eclipse cant compile in combination Val, ObjectWithSupberBuilder and method Call","user":{"login":"MoDotEu","id":66417143,"node_id":"MDQ6VXNlcjY2NDE3MTQz","avatar_url":"https://avatars.githubusercontent.com/u/66417143?v=4","gravatar_id":"","url":"https://api.github.com/users/MoDotEu","html_url":"https://github.com/MoDotEu","followers_url":"https://api.github.com/users/MoDotEu/followers","following_url":"https://api.github.com/users/MoDotEu/following{/other_user}","gists_url":"https://api.github.com/users/MoDotEu/gists{/gist_id}","starred_url":"https://api.github.com/users/MoDotEu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MoDotEu/subscriptions","organizations_url":"https://api.github.com/users/MoDotEu/orgs","repos_url":"https://api.github.com/users/MoDotEu/repos","events_url":"https://api.github.com/users/MoDotEu/events{/privacy}","received_events_url":"https://api.github.com/users/MoDotEu/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-01T14:27:14Z","updated_at":"2021-05-05T21:23:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nUsing lombok.val  with AnyObject with  **SuperBuilder** cant be used.  in Eclipse.\r\nCompile error is thrown\r\n```\r\nThe method anyMethod(BusinessObjectWithSuperBuilder) in the type DemoApplication is not applicable for the arguments (Object)\r\n```\r\n\r\n\r\n**To Reproduce**\r\n\r\n```\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.EqualsAndHashCode;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\nimport lombok.experimental.SuperBuilder;\r\n\r\npublic class DemoApplication {\r\n\r\n\tpublic void compileValFromLombok() {\r\n\t\tlombok.val canCompile = BusinessObjectWithSuperBuilder.builder()\r\n\t\t\t.name(\"asdf\").build();\r\n\t\tanyMethod(canCompile); // fails to compile\r\n\r\n\t\tanyMethod(BusinessObjectWithSuperBuilder.builder() // compiles\r\n\t\t\t.name(\"asdf\").build());\r\n\t}\r\n\r\n\tprivate void anyMethod(BusinessObjectWithSuperBuilder x) {\r\n\t\tSystem.out.println(x);\r\n\t}\r\n}\r\n\r\n@Getter\r\n@Setter\r\n@SuperBuilder\r\n@NoArgsConstructor\r\nabstract class AbstractBO {\r\n\tprivate Long id;\r\n}\r\n\r\n@Getter\r\n@Setter\r\n@SuperBuilder // replacing with @Builder, will compile\r\n@EqualsAndHashCode(callSuper = true)\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\nclass BusinessObjectWithSuperBuilder extends AbstractBO {\r\n\tprivate String name;\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nCompiling with Eclipse works like maven or IDEA\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version: Lombok v1.18.20 \r\n - Eclipse Version: 2021-03 (4.19.0)\r\n - Maven Version, used for cmd and Eclipse: apache-maven-3.6.2\r\n - Java Version, used for cmd and Eclipse : OpenJDK Runtime Environment (build 11.0.11+9-Ubuntu-0ubuntu2.20.04)\r\n - javac 11.0.11\r\n - Platform: Ubuntu 20.04.2 LTS\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2826/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2826/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2824","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2824/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2824/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2824/events","html_url":"https://github.com/projectlombok/lombok/issues/2824","id":870411078,"node_id":"MDU6SXNzdWU4NzA0MTEwNzg=","number":2824,"title":"[BUG] Jackson annotation @JsonProperty not working with @Jacksonized","user":{"login":"davidvc","id":71551,"node_id":"MDQ6VXNlcjcxNTUx","avatar_url":"https://avatars.githubusercontent.com/u/71551?v=4","gravatar_id":"","url":"https://api.github.com/users/davidvc","html_url":"https://github.com/davidvc","followers_url":"https://api.github.com/users/davidvc/followers","following_url":"https://api.github.com/users/davidvc/following{/other_user}","gists_url":"https://api.github.com/users/davidvc/gists{/gist_id}","starred_url":"https://api.github.com/users/davidvc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidvc/subscriptions","organizations_url":"https://api.github.com/users/davidvc/orgs","repos_url":"https://api.github.com/users/davidvc/repos","events_url":"https://api.github.com/users/davidvc/events{/privacy}","received_events_url":"https://api.github.com/users/davidvc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-28T21:44:06Z","updated_at":"2021-05-13T01:44:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nIf you use the @JsonProperty annotation on a field to provide a property name that differs from the field name, it does not work. This is with Lombok 1.8.2\r\n\r\n**To Reproduce**\r\nHere is a sample class and a unit test that fails:\r\n```\r\n  @Value\r\n  @Builder\r\n  @Jacksonized\r\n  private static class JacksonExample {\r\n    @JsonProperty(\"myName\")\r\n    String name;\r\n    int age;\r\n  }\r\n\r\n  @Test\r\n  public void jsonPropertyAnnotationLetsYouMapAPropertyToAFieldWithDifferentName() throws Exception {\r\n    JacksonExample jacksonExample = JacksonExample.builder().age(27).name(\"Joe\").build();\r\n    String json = \"{\\\"myName\\\": \\\"Joe\\\", \\\"age\\\": 27}\";\r\n\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    JacksonExample result = objectMapper.readValue(json, JacksonExample.class);\r\n\r\n    assertThat(result, is(equalTo(jacksonExample)));\r\n  }\r\n```\r\nHere is the error I get: \r\n\r\n```\r\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"myName\" (class com.ebay.raptor.viexpsvc.common.lombok.LombokExamplesTest$JacksonExample$JacksonExampleBuilder), not marked as ignorable (2 known properties: \"name\", \"age\"])\r\n at [Source: (String)\"{\"myName\": \"Joe\", \"age\": 27}\"; line: 1, column: 13] (through reference chain: com.ebay.raptor.viexpsvc.common.lombok.LombokExamplesTest$JacksonExample$JacksonExampleBuilder[\"myName\"])\r\n```\r\nWhen I look at the generated code, the Builder does not have any Jackson annotations on it:\r\n\r\n```\r\n    @Generated\r\n    public static class JacksonExampleBuilder {\r\n      @Generated\r\n      private String name;\r\n      @Generated\r\n      private int age;\r\n\r\n      @Generated\r\n      JacksonExampleBuilder() {\r\n      }\r\n\r\n      @Generated\r\n      public LombokExamplesTest.JacksonExample.JacksonExampleBuilder name(String name) {\r\n        this.name = name;\r\n        return this;\r\n      }\r\n\r\n      @Generated\r\n      public LombokExamplesTest.JacksonExample.JacksonExampleBuilder age(int age) {\r\n        this.age = age;\r\n        return this;\r\n      }\r\n\r\n      @Generated\r\n      public LombokExamplesTest.JacksonExample build() {\r\n        return new LombokExamplesTest.JacksonExample(this.name, this.age);\r\n      }\r\n\r\n      @Generated\r\n      public String toString() {\r\n        return \"LombokExamplesTest.JacksonExample.JacksonExampleBuilder(name=\" + this.name + \", age=\" + this.age + \")\";\r\n      }\r\n    }\r\n```\r\n\r\n**Expected behavior**\r\nAttaching @JsonProperty to a field should be honored using @Jacksonized with `@Value`\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.8.2\r\n - java version 11.\r\n - \r\n ```\r\nopenjdk version \"11.0.1\" 2018-10-16 LTS\r\nOpenJDK Runtime Environment Zulu11.2+2 (build 11.0.1+13-LTS)\r\nOpenJDK 64-Bit Server VM Zulu11.2+2 (build 11.0.1+13-LTS, mixed mode)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2824/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2823","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2823/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2823/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2823/events","html_url":"https://github.com/projectlombok/lombok/issues/2823","id":870273857,"node_id":"MDU6SXNzdWU4NzAyNzM4NTc=","number":2823,"title":"[BUG] Jackson annotation @JsonIgnoreProperties not working with @Jacksonized","user":{"login":"davidvc","id":71551,"node_id":"MDQ6VXNlcjcxNTUx","avatar_url":"https://avatars.githubusercontent.com/u/71551?v=4","gravatar_id":"","url":"https://api.github.com/users/davidvc","html_url":"https://github.com/davidvc","followers_url":"https://api.github.com/users/davidvc/followers","following_url":"https://api.github.com/users/davidvc/following{/other_user}","gists_url":"https://api.github.com/users/davidvc/gists{/gist_id}","starred_url":"https://api.github.com/users/davidvc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidvc/subscriptions","organizations_url":"https://api.github.com/users/davidvc/orgs","repos_url":"https://api.github.com/users/davidvc/repos","events_url":"https://api.github.com/users/davidvc/events{/privacy}","received_events_url":"https://api.github.com/users/davidvc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-04-28T19:27:11Z","updated_at":"2021-04-30T06:08:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This test fails with unknown property exception. I am testing with Lombok 1.8.2\r\n\r\n```\r\n  @Value\r\n  @Builder\r\n  @Jacksonized\r\n  @JsonIgnoreProperties(ignoreUnknown = true)\r\n  private static class JacksonExample {\r\n    String name;\r\n    int age;\r\n  }\r\n\r\n  @Test\r\n  public void unknownPropertiesAreIgnored() throws Exception {\r\n    JacksonExample jacksonExample = JacksonExample.builder().age(27).name(\"Joe\").build();\r\n    String json = \"{\\\"name\\\": \\\"Joe\\\", \\\"age\\\": 27, \\\"unknown\\\": 45}\";\r\n\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    JacksonExample result = objectMapper.readValue(json, JacksonExample.class);\r\n\r\n    assertThat(result, is(equalTo(jacksonExample)));\r\n  }\r\n```\r\n\r\nError output:\r\n\r\n```\r\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"unknown\" (class com.ebay.raptor.viexpsvc.common.lombok.LombokExamplesTest$JacksonExample$JacksonExampleBuilder), not marked as ignorable (2 known properties: \"name\", \"age\"])\r\n at [Source: (String)\"{\"name\": \"Joe\", \"age\": 27, \"unknown\": 45}\"; line: 1, column: 41] (through reference chain: com.ebay.raptor.viexpsvc.common.lombok.LombokExamplesTest$JacksonExample$JacksonExampleBuilder[\"unknown\"])\r\n```\r\n\r\npom.xml:\r\n```\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<version>1.18.20</version>\r\n\t\t\t<scope>provided</scope>\r\n\t\t</dependency>\r\n```\r\n\r\nif you look at the generated builder class, it has no annotations on it:\r\n\r\n```\r\n   @JsonPOJOBuilder(\r\n      withPrefix = \"\",\r\n      buildMethodName = \"build\"\r\n    )\r\n    @Generated\r\n    public static class JacksonExampleBuilder {\r\n      @Generated\r\n      private String name;\r\n      @Generated\r\n      private int age;\r\n\r\n      @Generated\r\n      JacksonExampleBuilder() {\r\n      }\r\n\r\n      @Generated\r\n      public LombokExamplesTest.JacksonExample.JacksonExampleBuilder name(String name) {\r\n        this.name = name;\r\n        return this;\r\n      }\r\n\r\n      @Generated\r\n      public LombokExamplesTest.JacksonExample.JacksonExampleBuilder age(int age) {\r\n        this.age = age;\r\n        return this;\r\n      }\r\n\r\n      @Generated\r\n      public LombokExamplesTest.JacksonExample build() {\r\n        return new LombokExamplesTest.JacksonExample(this.name, this.age);\r\n      }\r\n\r\n      @Generated\r\n      public String toString() {\r\n        return \"LombokExamplesTest.JacksonExample.JacksonExampleBuilder(name=\" + this.name + \", age=\" + this.age + \")\";\r\n      }\r\n    }\r\n  }\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2823/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2823/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2821","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2821/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2821/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2821/events","html_url":"https://github.com/projectlombok/lombok/issues/2821","id":869014431,"node_id":"MDU6SXNzdWU4NjkwMTQ0MzE=","number":2821,"title":"[BUG] @CustomLog-key in lombok.config for some error messages seems inconsistent with some javadoc","user":{"login":"FlorentMouysset","id":3446172,"node_id":"MDQ6VXNlcjM0NDYxNzI=","avatar_url":"https://avatars.githubusercontent.com/u/3446172?v=4","gravatar_id":"","url":"https://api.github.com/users/FlorentMouysset","html_url":"https://github.com/FlorentMouysset","followers_url":"https://api.github.com/users/FlorentMouysset/followers","following_url":"https://api.github.com/users/FlorentMouysset/following{/other_user}","gists_url":"https://api.github.com/users/FlorentMouysset/gists{/gist_id}","starred_url":"https://api.github.com/users/FlorentMouysset/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FlorentMouysset/subscriptions","organizations_url":"https://api.github.com/users/FlorentMouysset/orgs","repos_url":"https://api.github.com/users/FlorentMouysset/repos","events_url":"https://api.github.com/users/FlorentMouysset/events{/privacy}","received_events_url":"https://api.github.com/users/FlorentMouysset/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-04-27T16:09:05Z","updated_at":"2021-04-27T16:09:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hello,\r\n\r\nWhen using @CustomLog, some error messages seem to be inconsistent with some javadoc, see :\r\n\r\n![image](https://user-images.githubusercontent.com/3446172/116271397-3ca48700-a780-11eb-95cf-027d547d6919.png)\r\n\r\n`lombok.log.custom.declaration` instead of `log.custom.declaration`\r\n\r\n**To Reproduce (on Eclipse) **\r\n1. Create a valid @CustomLog configuration.\r\n2. Delete 'lombok' at the beginning of the key configuration in lombok.config.\r\n3. Observe the wrong error msg on the @CustomLog annotation.\r\n\r\n**Version info:**\r\nEclipse 2021-03 (4.19.0) \r\nlombok version 1.18.20 and 1.18.18\r\n\r\nPull request coming soon :-)\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2821/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2821/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2819","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2819/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2819/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2819/events","html_url":"https://github.com/projectlombok/lombok/issues/2819","id":866794730,"node_id":"MDU6SXNzdWU4NjY3OTQ3MzA=","number":2819,"title":"[BUG] ","user":{"login":"SoNotMC","id":43901997,"node_id":"MDQ6VXNlcjQzOTAxOTk3","avatar_url":"https://avatars.githubusercontent.com/u/43901997?v=4","gravatar_id":"","url":"https://api.github.com/users/SoNotMC","html_url":"https://github.com/SoNotMC","followers_url":"https://api.github.com/users/SoNotMC/followers","following_url":"https://api.github.com/users/SoNotMC/following{/other_user}","gists_url":"https://api.github.com/users/SoNotMC/gists{/gist_id}","starred_url":"https://api.github.com/users/SoNotMC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SoNotMC/subscriptions","organizations_url":"https://api.github.com/users/SoNotMC/orgs","repos_url":"https://api.github.com/users/SoNotMC/repos","events_url":"https://api.github.com/users/SoNotMC/events{/privacy}","received_events_url":"https://api.github.com/users/SoNotMC/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-24T17:17:15Z","updated_at":"2021-04-24T23:09:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\"cannot find symbol\"\r\n\r\nSays this everytime while compiling, all up to date including the plugin lib and intelj!","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2819/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2819/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2814","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2814/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2814/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2814/events","html_url":"https://github.com/projectlombok/lombok/issues/2814","id":858632804,"node_id":"MDU6SXNzdWU4NTg2MzI4MDQ=","number":2814,"title":"[FEATURE] Make a non static variable in @UtilityClass","user":{"login":"fatihaksoy59","id":5838475,"node_id":"MDQ6VXNlcjU4Mzg0NzU=","avatar_url":"https://avatars.githubusercontent.com/u/5838475?v=4","gravatar_id":"","url":"https://api.github.com/users/fatihaksoy59","html_url":"https://github.com/fatihaksoy59","followers_url":"https://api.github.com/users/fatihaksoy59/followers","following_url":"https://api.github.com/users/fatihaksoy59/following{/other_user}","gists_url":"https://api.github.com/users/fatihaksoy59/gists{/gist_id}","starred_url":"https://api.github.com/users/fatihaksoy59/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fatihaksoy59/subscriptions","organizations_url":"https://api.github.com/users/fatihaksoy59/orgs","repos_url":"https://api.github.com/users/fatihaksoy59/repos","events_url":"https://api.github.com/users/fatihaksoy59/events{/privacy}","received_events_url":"https://api.github.com/users/fatihaksoy59/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-15T08:27:29Z","updated_at":"2021-04-20T10:05:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nAdd the ability to make a non static variable in experimantal utility class via the configuration file or annotation\r\n\r\n```\r\n\r\n@UtilityClass\r\npublic class Test {\r\n\t\r\n\t@Autowired\r\n        // Maybe we can add an annotation ex: @NonStatic\r\n\tprivate ExampleClass example\r\n```","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2814/reactions","total_count":2,"+1":0,"-1":2,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2814/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2813","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2813/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2813/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2813/events","html_url":"https://github.com/projectlombok/lombok/issues/2813","id":857839262,"node_id":"MDU6SXNzdWU4NTc4MzkyNjI=","number":2813,"title":"[BUG] Field annotated with @Builder.Default is suffixed with $value","user":{"login":"mxmlnglt","id":29626929,"node_id":"MDQ6VXNlcjI5NjI2OTI5","avatar_url":"https://avatars.githubusercontent.com/u/29626929?v=4","gravatar_id":"","url":"https://api.github.com/users/mxmlnglt","html_url":"https://github.com/mxmlnglt","followers_url":"https://api.github.com/users/mxmlnglt/followers","following_url":"https://api.github.com/users/mxmlnglt/following{/other_user}","gists_url":"https://api.github.com/users/mxmlnglt/gists{/gist_id}","starred_url":"https://api.github.com/users/mxmlnglt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mxmlnglt/subscriptions","organizations_url":"https://api.github.com/users/mxmlnglt/orgs","repos_url":"https://api.github.com/users/mxmlnglt/repos","events_url":"https://api.github.com/users/mxmlnglt/events{/privacy}","received_events_url":"https://api.github.com/users/mxmlnglt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-14T12:16:38Z","updated_at":"2021-04-21T14:00:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nIn contrary to the Vanilla code shown at the bottom of https://projectlombok.org/features/Builder, a field annotated with `@Builder.Default` will be suffixed with `$value` in the generated Builder; esp. in the example given:\r\n```\r\nprivate long created$value;\r\n```\r\n\r\nWhy does it matter? Because if you already overloaded the matching Builder method, by reusing the field name, when adding the `@Builder.Default`, you have to change code (this is an over-simplified example):\r\n```\r\n@Builder\r\npublic class Pojo {\r\n\r\n\tprivate String category;\r\n\r\n\tpublic static class PojoBuilder {\r\n\r\n\t\tpublic PojoBuilder category(String category) {\r\n\t\t\tif (this.category == null) {\r\n\t\t\t\tthis.category = category;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\nIf I add a default value to `category` + annotate it with `@Builder.Default`, the code above won't compile, because it complains `this.category` doesn't exist in `PojoBuilder.category()`.\r\n\r\n**To Reproduce**\r\nUse the `BuilderExample` class given in the example.\r\n\r\n**Expected behavior**\r\nBe coherent between the code generated and the doc/example.\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok v1.18.20 \"Envious Ferret\" is installed. https://projectlombok.org/\r\n - Platform : Eclipse Version: 2019-03 (4.11.0) // Build id: 20190314-1200","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2813/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2808","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2808/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2808/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2808/events","html_url":"https://github.com/projectlombok/lombok/issues/2808","id":851317000,"node_id":"MDU6SXNzdWU4NTEzMTcwMDA=","number":2808,"title":"[FEATURE] Ability to get value from builder","user":{"login":"JBodkin-LH","id":26540533,"node_id":"MDQ6VXNlcjI2NTQwNTMz","avatar_url":"https://avatars.githubusercontent.com/u/26540533?v=4","gravatar_id":"","url":"https://api.github.com/users/JBodkin-LH","html_url":"https://github.com/JBodkin-LH","followers_url":"https://api.github.com/users/JBodkin-LH/followers","following_url":"https://api.github.com/users/JBodkin-LH/following{/other_user}","gists_url":"https://api.github.com/users/JBodkin-LH/gists{/gist_id}","starred_url":"https://api.github.com/users/JBodkin-LH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JBodkin-LH/subscriptions","organizations_url":"https://api.github.com/users/JBodkin-LH/orgs","repos_url":"https://api.github.com/users/JBodkin-LH/repos","events_url":"https://api.github.com/users/JBodkin-LH/events{/privacy}","received_events_url":"https://api.github.com/users/JBodkin-LH/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-06T11:10:28Z","updated_at":"2021-04-20T10:16:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the feature**\r\nAdd the ability to add getters on the automatically generated builder class via the configuration file or annotation\r\n\r\n**Describe the target audience**\r\nI'm working on a project that implements event sourcing. When generating the projection from the event stream, the logic has a state machine that looks at the previous fold-left value and the current value to determine the new value. As a workaround, the logic calls the build method to temporarily inspect the current state but this means that more objects will need to be garbage collected by the JVM and increases the complexity of the validation logic required in the constructor \r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2808/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2808/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2806","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2806/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2806/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2806/events","html_url":"https://github.com/projectlombok/lombok/issues/2806","id":850148826,"node_id":"MDU6SXNzdWU4NTAxNDg4MjY=","number":2806,"title":"[BUG] @CustomLog not working","user":{"login":"himnay","id":12750409,"node_id":"MDQ6VXNlcjEyNzUwNDA5","avatar_url":"https://avatars.githubusercontent.com/u/12750409?v=4","gravatar_id":"","url":"https://api.github.com/users/himnay","html_url":"https://github.com/himnay","followers_url":"https://api.github.com/users/himnay/followers","following_url":"https://api.github.com/users/himnay/following{/other_user}","gists_url":"https://api.github.com/users/himnay/gists{/gist_id}","starred_url":"https://api.github.com/users/himnay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/himnay/subscriptions","organizations_url":"https://api.github.com/users/himnay/orgs","repos_url":"https://api.github.com/users/himnay/repos","events_url":"https://api.github.com/users/himnay/events{/privacy}","received_events_url":"https://api.github.com/users/himnay/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-04-05T07:19:39Z","updated_at":"2021-04-05T07:21:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am using below setup in build.gradle.\r\ndependencies {\r\n        classpath 'io.freefair.gradle:lombok-plugin:2.9.5'\r\n}\r\n\r\nlombok {\r\n    config['lombok.log.custom.declaration'] = 'com.xxx.yyy.zzz.core.logging.Logger com.xxx.yyy.zzz.core.logging.LoggerFactory.getLogger(TYPE)(TOPIC)'\r\n}\r\n\r\ndependencies {\r\n    annotationProcessor 'org.projectlombok:lombok:1.18.20'\r\n    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.20'\r\n}\r\n\r\nI could see the below entries on the autogenerated lombok.config file\r\n# This file is generated by the 'io.freefair.lombok' Gradle plugin\r\nconfig.stopBubbling = true\r\nlombok.addLombokGeneratedAnnotation = true\r\nlombok.log.custom.declaration = com.xxx.yyy.zzz.core.logging.Logger com.xxx.yyy.zzz.core.logging.LoggerFactory.getLogger(TYPE)(TOPIC)\r\n\r\nMy Sample Code\r\n\r\nimport lombok.CustomLog;\r\n\r\n@CustomLog\r\npublic class TestCustomLog {\r\n    public void test() {\r\n        log.info(\"Hello World\");\r\n    }\r\n}\r\n\r\nException:\r\nerror: cannot find symbol\r\n        log.info(\"Hello World\");\r\n        ^\r\n  symbol:   variable log\r\n  location: class TestCustomLog\r\n\r\nIDE Ver: INTELLIJ ULIMATE 2020.3\r\nJDK Ver: 8\r\n\r\nThere are other lombok annotation which I have used and they work fine.\r\n\r\nxxx.yyy.zzz - this is the package to our in-house logging framework.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2806/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2804","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2804/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2804/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2804/events","html_url":"https://github.com/projectlombok/lombok/issues/2804","id":849144821,"node_id":"MDU6SXNzdWU4NDkxNDQ4MjE=","number":2804,"title":"[BUG] MapConstruct can't find builder method","user":{"login":"metao1","id":7278209,"node_id":"MDQ6VXNlcjcyNzgyMDk=","avatar_url":"https://avatars.githubusercontent.com/u/7278209?v=4","gravatar_id":"","url":"https://api.github.com/users/metao1","html_url":"https://github.com/metao1","followers_url":"https://api.github.com/users/metao1/followers","following_url":"https://api.github.com/users/metao1/following{/other_user}","gists_url":"https://api.github.com/users/metao1/gists{/gist_id}","starred_url":"https://api.github.com/users/metao1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/metao1/subscriptions","organizations_url":"https://api.github.com/users/metao1/orgs","repos_url":"https://api.github.com/users/metao1/repos","events_url":"https://api.github.com/users/metao1/events{/privacy}","received_events_url":"https://api.github.com/users/metao1/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-02T10:43:15Z","updated_at":"2021-04-02T12:13:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am using `mapstruct` to use a mapper interface and `lombok` `@Builder` annotation to force `mapstruct` using it for object instantiation. \r\n\r\n```\r\n@Mapper(componentModel = \"spring\", unmappedTargetPolicy = ReportingPolicy.WARN)\r\npublic interface DTOMapper {\r\n    Student map(Student student);\r\n}\r\n\r\n```\r\n\r\n```\r\n@Value\r\n@Builder\r\n@AllArgsConstructor(access = AccessLevel.PRIVATE)\r\npublic class Student {\r\n    String name;\r\n    int id;\r\n}\r\n\r\nI have the following error on compile:\r\n```\r\n\r\nerror: Student does not have an accessible constructor.\r\n    Student map(Student student);\r\n```\r\n\r\n```\r\n**Version info :**\r\n - `Lombok` version: 1.18.16\r\n - `mapstruct` version:  1.4.2.Final\r\n\r\nIt looks like this bug related to `lombok` itself. To make it working I used a bare metal Student class as below is fine.\r\n\r\nWithout using `lombok` `@Builder` annotation\r\n\r\n```\r\n\r\npublic class Student {\r\n    private final String name;\r\n    private final int id;\r\n\r\n    private Student(Builder builder) {\r\n        this.id = builder.id;\r\n        this.name = builder.name;\r\n    }\r\n\r\n    public static Builder builder() {\r\n        return new Builder();\r\n    }\r\n\r\n    public static class Builder {\r\n        private String name;\r\n        private int id;\r\n        public Builder name(String name) {\r\n            this.name = name;\r\n            return this;\r\n        }\r\n        public Builder id(int id) {\r\n            this.id = id;\r\n            return this;\r\n        }\r\n        public Student build() {\r\n            return new Student(this);\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\nIt might help to note that: In above if I was setting `build() ` method access to private or an empty access indication, it'd said the same error above while using `@Builder`. \r\n","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2804/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2804/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2802","repository_url":"https://api.github.com/repos/projectlombok/lombok","labels_url":"https://api.github.com/repos/projectlombok/lombok/issues/2802/labels{/name}","comments_url":"https://api.github.com/repos/projectlombok/lombok/issues/2802/comments","events_url":"https://api.github.com/repos/projectlombok/lombok/issues/2802/events","html_url":"https://github.com/projectlombok/lombok/issues/2802","id":848348472,"node_id":"MDU6SXNzdWU4NDgzNDg0NzI=","number":2802,"title":"[BUG] Break Room @PrimaryKey(autoGenerate = true)","user":{"login":"firdausmaulan","id":6634470,"node_id":"MDQ6VXNlcjY2MzQ0NzA=","avatar_url":"https://avatars.githubusercontent.com/u/6634470?v=4","gravatar_id":"","url":"https://api.github.com/users/firdausmaulan","html_url":"https://github.com/firdausmaulan","followers_url":"https://api.github.com/users/firdausmaulan/followers","following_url":"https://api.github.com/users/firdausmaulan/following{/other_user}","gists_url":"https://api.github.com/users/firdausmaulan/gists{/gist_id}","starred_url":"https://api.github.com/users/firdausmaulan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/firdausmaulan/subscriptions","organizations_url":"https://api.github.com/users/firdausmaulan/orgs","repos_url":"https://api.github.com/users/firdausmaulan/repos","events_url":"https://api.github.com/users/firdausmaulan/events{/privacy}","received_events_url":"https://api.github.com/users/firdausmaulan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-04-01T10:39:36Z","updated_at":"2021-04-12T13:05:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI'm using Lombok & Room in my android project\r\nEverything going well, until I update Lombok to version 1.18.16\r\nIt's look like new version not compatible with Room annotation @PrimaryKey(autoGenerate = true)\r\nAnd it's throw error : java.lang.NullPointerException: id is marked non-null but is null\r\n\r\n**To Reproduce**\r\n```\r\n@Getter\r\n@Setter\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Entity(indices = {\r\n        @Index(value = \"id\", unique = true)\r\n}, tableName = \"t_sync\")\r\npublic class Sync extends BaseModel {\r\n\r\n    @PrimaryKey(autoGenerate = true)\r\n    @ColumnInfo(name = \"id\")\r\n    @NonNull\r\n    private Long id;\r\n\r\n    ... other properites\r\n\r\n}\r\n```\r\nJust insert the data and crash\r\n\r\n**Expected behavior**\r\n- not crash\r\n- id / property with @PrimaryKey(autoGenerate = true) can generate incremental value\r\n\r\n**Version info (please complete the following information):**\r\n - Lombok version 1.18.16\r\n - Android Studio 4.1.3, Java 8, open jdk, linux mint\r\n\r\n**Additional context**\r\nhttps://developer.android.com/jetpack/androidx/releases/room","reactions":{"url":"https://api.github.com/repos/projectlombok/lombok/issues/2802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/projectlombok/lombok/issues/2802/timeline","performed_via_github_app":null}],"issuesCount":91,"contributors":133,"pullRequests":15,"projectUrl":"https://github.com/rzwitserloot/lombok","issuesUrl":"https://github.com/rzwitserloot/lombok/issues","stars":10616,"watchers":10616,"forks":2008,"githubLicenseName":"NOASSERTION","openIssues":721,"createdAt":"2009-06-08T19:46:41Z","updatedAt":"2021-10-15T06:59:03Z","monthsSinceUpdated":0},{"id":"commons-lang3@3.11","artifactId":"commons-lang3","version":"3.11","name":"Apache Commons Lang","description":"Apache Commons Lang, a package of Java utility classes for the\n  classes that are in java.lang's hierarchy, or are considered to be so\n  standard as to justify existence in java.lang.","github":"https://gitbox.apache.org/repos/asf?p=commons-lang.git","latestVersion":"3.12.0"},{"id":"joda-time@2.10.6","groupId":"joda-time","artifactId":"joda-time","version":"2.10.6","name":"Joda-Time","description":"Joda-Time is the widely used replacement for the Java date and time classes prior to Java SE 8.","licenses":{"license":{"name":"Apache License, Version 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.txt","distribution":"repo"}},"github":"https://github.com/JodaOrg/joda-time","latestVersion":"2.10.12","issues":[{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/569","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/569/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/569/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/569/events","html_url":"https://github.com/JodaOrg/joda-time/issues/569","id":1024092388,"node_id":"I_kwDOABrMvs49Cmjk","number":569,"title":"2021c time zone data base updates","user":{"login":"JigarJoshi","id":917579,"node_id":"MDQ6VXNlcjkxNzU3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/917579?v=4","gravatar_id":"","url":"https://api.github.com/users/JigarJoshi","html_url":"https://github.com/JigarJoshi","followers_url":"https://api.github.com/users/JigarJoshi/followers","following_url":"https://api.github.com/users/JigarJoshi/following{/other_user}","gists_url":"https://api.github.com/users/JigarJoshi/gists{/gist_id}","starred_url":"https://api.github.com/users/JigarJoshi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JigarJoshi/subscriptions","organizations_url":"https://api.github.com/users/JigarJoshi/orgs","repos_url":"https://api.github.com/users/JigarJoshi/repos","events_url":"https://api.github.com/users/JigarJoshi/events{/privacy}","received_events_url":"https://api.github.com/users/JigarJoshi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-12T17:57:28Z","updated_at":"2021-10-12T17:58:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"please cover tzdata 2021c and release joda-time.\r\n\r\nhttp://mm.icann.org/pipermail/tz-announce/2021-October.txt","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/569/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/569/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/568","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/568/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/568/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/568/events","html_url":"https://github.com/JodaOrg/joda-time/issues/568","id":1013891471,"node_id":"I_kwDOABrMvs48bsGP","number":568,"title":"how to calculate the remaining time between two times?","user":{"login":"waleefalrooh","id":38319285,"node_id":"MDQ6VXNlcjM4MzE5Mjg1","avatar_url":"https://avatars.githubusercontent.com/u/38319285?v=4","gravatar_id":"","url":"https://api.github.com/users/waleefalrooh","html_url":"https://github.com/waleefalrooh","followers_url":"https://api.github.com/users/waleefalrooh/followers","following_url":"https://api.github.com/users/waleefalrooh/following{/other_user}","gists_url":"https://api.github.com/users/waleefalrooh/gists{/gist_id}","starred_url":"https://api.github.com/users/waleefalrooh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/waleefalrooh/subscriptions","organizations_url":"https://api.github.com/users/waleefalrooh/orgs","repos_url":"https://api.github.com/users/waleefalrooh/repos","events_url":"https://api.github.com/users/waleefalrooh/events{/privacy}","received_events_url":"https://api.github.com/users/waleefalrooh/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-02T02:34:16Z","updated_at":"2021-10-02T02:49:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"can someone please explain to me how to get the remaining time between the system time and a given time from me using a simple time format like (\"hh: mm aa\") in jodaTime  I absolutely have no clue on how to do it \r\n\r\nthe output should be like this: \" the time left is 5 hours and 40 minutes \r\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/568/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/566","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/566/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/566/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/566/events","html_url":"https://github.com/JodaOrg/joda-time/issues/566","id":1004915962,"node_id":"I_kwDOABrMvs475cz6","number":566,"title":"Handle 2021 timezone data set changes","user":{"login":"jodastephen","id":213212,"node_id":"MDQ6VXNlcjIxMzIxMg==","avatar_url":"https://avatars.githubusercontent.com/u/213212?v=4","gravatar_id":"","url":"https://api.github.com/users/jodastephen","html_url":"https://github.com/jodastephen","followers_url":"https://api.github.com/users/jodastephen/followers","following_url":"https://api.github.com/users/jodastephen/following{/other_user}","gists_url":"https://api.github.com/users/jodastephen/gists{/gist_id}","starred_url":"https://api.github.com/users/jodastephen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jodastephen/subscriptions","organizations_url":"https://api.github.com/users/jodastephen/orgs","repos_url":"https://api.github.com/users/jodastephen/repos","events_url":"https://api.github.com/users/jodastephen/events{/privacy}","received_events_url":"https://api.github.com/users/jodastephen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-23T01:21:39Z","updated_at":"2021-09-29T14:03:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":"too heated","body":"This issue is a placeholder to allow information about the 2021 timezone dataset changes to be captured.","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/566/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/566/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/564","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/564/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/564/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/564/events","html_url":"https://github.com/JodaOrg/joda-time/issues/564","id":981855896,"node_id":"MDU6SXNzdWU5ODE4NTU4OTY=","number":564,"title":"Requesting for Bangla Chronology","user":{"login":"sobujbd","id":16955338,"node_id":"MDQ6VXNlcjE2OTU1MzM4","avatar_url":"https://avatars.githubusercontent.com/u/16955338?v=4","gravatar_id":"","url":"https://api.github.com/users/sobujbd","html_url":"https://github.com/sobujbd","followers_url":"https://api.github.com/users/sobujbd/followers","following_url":"https://api.github.com/users/sobujbd/following{/other_user}","gists_url":"https://api.github.com/users/sobujbd/gists{/gist_id}","starred_url":"https://api.github.com/users/sobujbd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sobujbd/subscriptions","organizations_url":"https://api.github.com/users/sobujbd/orgs","repos_url":"https://api.github.com/users/sobujbd/repos","events_url":"https://api.github.com/users/sobujbd/events{/privacy}","received_events_url":"https://api.github.com/users/sobujbd/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-28T15:05:40Z","updated_at":"2021-09-03T15:09:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Please have a look this wiki [Bengali calendars - Wikipedia](https://en.wikipedia.org/wiki/Bengali_calendars)","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/564/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/564/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/530","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/530/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/530/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/530/events","html_url":"https://github.com/JodaOrg/joda-time/issues/530","id":606184435,"node_id":"MDU6SXNzdWU2MDYxODQ0MzU=","number":530,"title":"Stacktrace prints on Android JVM unit tests","user":{"login":"erikhuizinga","id":19374736,"node_id":"MDQ6VXNlcjE5Mzc0NzM2","avatar_url":"https://avatars.githubusercontent.com/u/19374736?v=4","gravatar_id":"","url":"https://api.github.com/users/erikhuizinga","html_url":"https://github.com/erikhuizinga","followers_url":"https://api.github.com/users/erikhuizinga/followers","following_url":"https://api.github.com/users/erikhuizinga/following{/other_user}","gists_url":"https://api.github.com/users/erikhuizinga/gists{/gist_id}","starred_url":"https://api.github.com/users/erikhuizinga/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/erikhuizinga/subscriptions","organizations_url":"https://api.github.com/users/erikhuizinga/orgs","repos_url":"https://api.github.com/users/erikhuizinga/repos","events_url":"https://api.github.com/users/erikhuizinga/events{/privacy}","received_events_url":"https://api.github.com/users/erikhuizinga/received_events","type":"User","site_admin":false},"labels":[{"id":47662460,"node_id":"MDU6TGFiZWw0NzY2MjQ2MA==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Discussion","name":"Discussion","color":"fbca04","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-04-24T09:44:29Z","updated_at":"2020-04-30T22:41:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Here\r\n\r\nhttps://github.com/JodaOrg/joda-time/blob/124fd322c96b47b132ae08f7f20e319199c6de74/src/main/java/org/joda/time/DateTimeZone.java#L558\r\n\r\na stack trace is printed, after which a default `new UTCProvider()` is returned. This can lead to stack traces being printed to STDERR while no exception is actually thrown by Joda Time. For example, on Android, when running JVM unit tests, this can happen, e.g. see https://github.com/dlew/joda-time-android/issues/148. (Joda Time Android uses Joda Time).\r\n\r\nThe solution for that issue is to set the default `new UTCProvider()` before using Joda Time in tests. This is not user friendly. It would be better if there was a way to get a provider without a stacktrace being printed, or to check if a provider is available before getting it (which is a bit silly, probably).\r\n\r\nThe proposed solution is to default to not printing the stack trace on the line linked above, or make the stack trace printing opt in through some kind of configuration. Alternatively, there could be a method to check if there is a provider, so that the user can provide their own if there is none.","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/530/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/524","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/524/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/524/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/524/events","html_url":"https://github.com/JodaOrg/joda-time/issues/524","id":568327176,"node_id":"MDU6SXNzdWU1NjgzMjcxNzY=","number":524,"title":"joda-time returns the new renamed time zone if DateTimeZone.forID is called with the old time zone id","user":{"login":"TomWolk","id":1161802,"node_id":"MDQ6VXNlcjExNjE4MDI=","avatar_url":"https://avatars.githubusercontent.com/u/1161802?v=4","gravatar_id":"","url":"https://api.github.com/users/TomWolk","html_url":"https://github.com/TomWolk","followers_url":"https://api.github.com/users/TomWolk/followers","following_url":"https://api.github.com/users/TomWolk/following{/other_user}","gists_url":"https://api.github.com/users/TomWolk/gists{/gist_id}","starred_url":"https://api.github.com/users/TomWolk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TomWolk/subscriptions","organizations_url":"https://api.github.com/users/TomWolk/orgs","repos_url":"https://api.github.com/users/TomWolk/repos","events_url":"https://api.github.com/users/TomWolk/events{/privacy}","received_events_url":"https://api.github.com/users/TomWolk/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2020-02-20T14:09:52Z","updated_at":"2021-10-13T17:23:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"For renamed time zones org.joda.time.DateTimeZone.forID(String id) returns a time zone object that uses the new id even if you use the old id as the method parameter.\r\n\r\nThis brings me into trouble when I let two servers that have differen joda versions talk to each other. For instance a server with joda-time 2.3  sends time zone Asia/Rangoon to a server with joda time 2.10.5. The latter will change the time zone to Asia/Yangon when .DateTimeZone.forID is called in the deserialization. When the servers sends the time zone back to the former server, joda-time 2.3 does not know of the time zone Asia/Yangon that was introduced in 2017\r\n\r\nBy the way this change of names is not the case for java.util.TimeZone.getTimeZone(String ID) and java.time.ZoneId.of(String zoneId).\r\n\r\n- Joda-Time version 2.10.5\r\n\r\nTest testRangoonDateTimeZone fails for 2.10.5 but should pass\r\n\r\n    public void testRangoonDateTimeZone() throws Exception {\r\n        DateTimeZone zoneOld = DateTimeZone.forID(\"Asia/Rangoon\");\r\n        assertEquals(zoneOld.getID(), \"Asia/Rangoon\");\r\n\r\n        DateTimeZone zoneNew = DateTimeZone.forID(\"Asia/Yangon\");\r\n        assertEquals(zoneNew.getID(), \"Asia/Yangon\");\r\n    }\r\n\r\n    public void testRangoonJavaUtilTimeZone() throws Exception {\r\n        TimeZone zone = TimeZone.getTimeZone(\"Asia/Rangoon\");\r\n        assertEquals(zone.getID(), \"Asia/Rangoon\");\r\n\r\n        TimeZone zoneNew = TimeZone.getTimeZone(\"Asia/Yangon\");\r\n        assertEquals(zoneNew.getID(), \"Asia/Yangon\");\r\n    }\r\n\r\n    public void testRangoonJavaTimeZoneId() throws Exception {\r\n        ZoneId zone = ZoneId.of(\"Asia/Rangoon\");\r\n        assertEquals(zone.getId(), \"Asia/Rangoon\");\r\n\r\n        ZoneId zoneNew = ZoneId.of(\"Asia/Yangon\");\r\n        assertEquals(zoneNew.getId(), \"Asia/Yangon\");\r\n    }","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/524/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/524/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/522","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/522/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/522/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/522/events","html_url":"https://github.com/JodaOrg/joda-time/issues/522","id":549271545,"node_id":"MDU6SXNzdWU1NDkyNzE1NDU=","number":522,"title":"Create a new Method \"isBetween\" in the class AbstractPartial.java","user":{"login":"nonatorw","id":2484501,"node_id":"MDQ6VXNlcjI0ODQ1MDE=","avatar_url":"https://avatars.githubusercontent.com/u/2484501?v=4","gravatar_id":"","url":"https://api.github.com/users/nonatorw","html_url":"https://github.com/nonatorw","followers_url":"https://api.github.com/users/nonatorw/followers","following_url":"https://api.github.com/users/nonatorw/following{/other_user}","gists_url":"https://api.github.com/users/nonatorw/gists{/gist_id}","starred_url":"https://api.github.com/users/nonatorw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nonatorw/subscriptions","organizations_url":"https://api.github.com/users/nonatorw/orgs","repos_url":"https://api.github.com/users/nonatorw/repos","events_url":"https://api.github.com/users/nonatorw/events{/privacy}","received_events_url":"https://api.github.com/users/nonatorw/received_events","type":"User","site_admin":false},"labels":[{"id":47662460,"node_id":"MDU6TGFiZWw0NzY2MjQ2MA==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Discussion","name":"Discussion","color":"fbca04","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-01-14T01:07:38Z","updated_at":"2020-01-28T23:37:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Create a new method \"isBetween\", to verify if an Partial is between two other Partials.\r\n\r\nSignature: \r\n```java\r\n\t/**\r\n\t * Is this partial between the specified partials (edges included).\r\n\t * <p>\r\n\t * The fields are compared in order, from largest to smallest.\r\n\t * The first field that is non-equal is used to determine the result.\r\n\t * <p>\r\n\t * You may not pass null into this method.\r\n\t * This is because you need a time zone to accurately determine the current date.\r\n\t *\r\n\t * @param partInitial first partial on the compare. Must be earlier than\r\n\t *                    partFinal\r\n\t * @param partFinal   second partial on the compare. Must be later than\r\n\t *                    partInitial\r\n\t *\r\n\t * @return true if this date is between the two dates (included), passed in\r\n\t * \r\n\t * @throws IllegalArgumentException if the specified partial is null\r\n\t * @throws ClassCastException       if the partial has field types that don't\r\n\t *                                  match\r\n\t * @since 2.0\r\n\t */\r\n        public boolean isBetween(ReadablePartial partInitial, ReadablePartial partFinal)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/522/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/491","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/491/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/491/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/491/events","html_url":"https://github.com/JodaOrg/joda-time/issues/491","id":379381167,"node_id":"MDU6SXNzdWUzNzkzODExNjc=","number":491,"title":"Using JVM time zone rules in Joda","user":{"login":"haozhun","id":2020503,"node_id":"MDQ6VXNlcjIwMjA1MDM=","avatar_url":"https://avatars.githubusercontent.com/u/2020503?v=4","gravatar_id":"","url":"https://api.github.com/users/haozhun","html_url":"https://github.com/haozhun","followers_url":"https://api.github.com/users/haozhun/followers","following_url":"https://api.github.com/users/haozhun/following{/other_user}","gists_url":"https://api.github.com/users/haozhun/gists{/gist_id}","starred_url":"https://api.github.com/users/haozhun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haozhun/subscriptions","organizations_url":"https://api.github.com/users/haozhun/orgs","repos_url":"https://api.github.com/users/haozhun/repos","events_url":"https://api.github.com/users/haozhun/events{/privacy}","received_events_url":"https://api.github.com/users/haozhun/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null},{"id":1193399047,"node_id":"MDU6TGFiZWwxMTkzMzk5MDQ3","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Java8","name":"Java8","color":"e99695","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-11-10T02:25:10Z","updated_at":"2019-01-14T22:34:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I understand that this is not something that Joda can provide because Joda cannot depend on `java.time`. I'm writing this issue for two reasons:\r\n\r\n1. I would like comments from @jodastephen about the implementation, both from correctness and performance perspective.\r\n2. I understand that I'm not the first one that has wanted to do this. But I can't find any one who did this successfully. I would like my code be available to others.\r\n\r\nhttps://gist.github.com/haozhun/f73e0c73a2dcc816c752d101b3513ce1\r\n\r\nI understand that this is something more suitable for something like a mailing list than an issue. However, the only I can find is from SourceForge, which is likely obsolete.","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/491/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/491/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/457","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/457/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/457/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/457/events","html_url":"https://github.com/JodaOrg/joda-time/issues/457","id":278968699,"node_id":"MDU6SXNzdWUyNzg5Njg2OTk=","number":457,"title":"Performance issue due to usage of synchronized java.util.TimeZone.getTimeZone(String) in CachedDateTimeZone","user":{"login":"akarsh-jain","id":34058090,"node_id":"MDQ6VXNlcjM0MDU4MDkw","avatar_url":"https://avatars.githubusercontent.com/u/34058090?v=4","gravatar_id":"","url":"https://api.github.com/users/akarsh-jain","html_url":"https://github.com/akarsh-jain","followers_url":"https://api.github.com/users/akarsh-jain/followers","following_url":"https://api.github.com/users/akarsh-jain/following{/other_user}","gists_url":"https://api.github.com/users/akarsh-jain/gists{/gist_id}","starred_url":"https://api.github.com/users/akarsh-jain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akarsh-jain/subscriptions","organizations_url":"https://api.github.com/users/akarsh-jain/orgs","repos_url":"https://api.github.com/users/akarsh-jain/repos","events_url":"https://api.github.com/users/akarsh-jain/events{/privacy}","received_events_url":"https://api.github.com/users/akarsh-jain/received_events","type":"User","site_admin":false},"labels":[{"id":32539325,"node_id":"MDU6TGFiZWwzMjUzOTMyNQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/WontFix","name":"WontFix","color":"0052cc","default":false,"description":null},{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null},{"id":1193399047,"node_id":"MDU6TGFiZWwxMTkzMzk5MDQ3","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Java8","name":"Java8","color":"e99695","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-12-04T11:51:03Z","updated_at":"2019-01-14T22:34:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Joda-Time Version: v2.3\r\n\r\nSince java.util.TimeZone.getTimeZone(String) is synchronized, several concurrent calls to it through org.joda.time.CachedDateTimeZone.toTimeZone() (inherited from org.joda.time.DateTimeZone) get blocked. This creates a performance issue.\r\n\r\nThis can be rectified by overriding it with the non-synchronized java.util.TimeZone.getTimeZone(ZoneId). Pull request created for the same: #456 ","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/457/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/444","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/444/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/444/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/444/events","html_url":"https://github.com/JodaOrg/joda-time/issues/444","id":261914221,"node_id":"MDU6SXNzdWUyNjE5MTQyMjE=","number":444,"title":"Is there any Hebrew calendar support?","user":{"login":"AndroidDeveloperLB","id":5357526,"node_id":"MDQ6VXNlcjUzNTc1MjY=","avatar_url":"https://avatars.githubusercontent.com/u/5357526?v=4","gravatar_id":"","url":"https://api.github.com/users/AndroidDeveloperLB","html_url":"https://github.com/AndroidDeveloperLB","followers_url":"https://api.github.com/users/AndroidDeveloperLB/followers","following_url":"https://api.github.com/users/AndroidDeveloperLB/following{/other_user}","gists_url":"https://api.github.com/users/AndroidDeveloperLB/gists{/gist_id}","starred_url":"https://api.github.com/users/AndroidDeveloperLB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndroidDeveloperLB/subscriptions","organizations_url":"https://api.github.com/users/AndroidDeveloperLB/orgs","repos_url":"https://api.github.com/users/AndroidDeveloperLB/repos","events_url":"https://api.github.com/users/AndroidDeveloperLB/events{/privacy}","received_events_url":"https://api.github.com/users/AndroidDeveloperLB/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-10-01T12:55:54Z","updated_at":"2017-10-29T15:39:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I see multiple ones, but not Hebrew one...\r\n\r\nIf needed, maybe Android calendar can help:\r\nhttps://developer.android.com/reference/android/icu/util/HebrewCalendar.html","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/444/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/440","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/440/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/440/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/440/events","html_url":"https://github.com/JodaOrg/joda-time/issues/440","id":253723447,"node_id":"MDU6SXNzdWUyNTM3MjM0NDc=","number":440,"title":"Time zone abbreviations not translating to French","user":{"login":"mstaro","id":20932648,"node_id":"MDQ6VXNlcjIwOTMyNjQ4","avatar_url":"https://avatars.githubusercontent.com/u/20932648?v=4","gravatar_id":"","url":"https://api.github.com/users/mstaro","html_url":"https://github.com/mstaro","followers_url":"https://api.github.com/users/mstaro/followers","following_url":"https://api.github.com/users/mstaro/following{/other_user}","gists_url":"https://api.github.com/users/mstaro/gists{/gist_id}","starred_url":"https://api.github.com/users/mstaro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mstaro/subscriptions","organizations_url":"https://api.github.com/users/mstaro/orgs","repos_url":"https://api.github.com/users/mstaro/repos","events_url":"https://api.github.com/users/mstaro/events{/privacy}","received_events_url":"https://api.github.com/users/mstaro/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-08-29T16:16:48Z","updated_at":"2017-09-15T09:41:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Key information\r\n\r\n- Joda-Time version: 2.9.9\r\n\r\n### Problem description\r\nI'm submitting this as an issue since I haven't found a solution for this problem anywhere. France has translated versions for time zone abbreviations. To name a few English to French translations:\r\n\r\nAKST -> HNAK\r\nAKDT -> HEAK\r\nCT -> HC\r\nCST -> HNC\r\nCDT -> HEC\r\nET -> HE\r\nEST -> HNE\r\n\r\n### Program\r\nAs an example, I'm trying to obtain the translated equivalent for time zone AKDT (America/Anchorage), which should be HEAK:\r\n```\r\nString tz = DateTimeZone.forID(\"America/Anchorage\").getShortName(DateTimeUtils.currentTimeMillis(), Locale.FRANCE);\r\n// prints AKDT instead of HEAK\r\nSystem.out.println(tz);\r\n```\r\n\r\nI'm aware that this might be an unsupported feature, so far it seems that only German translations are supported. Would there be any workaround to be able to obtain French translations?\r\n\r\nThanks!\r\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/440/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/436","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/436/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/436/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/436/events","html_url":"https://github.com/JodaOrg/joda-time/issues/436","id":244607040,"node_id":"MDU6SXNzdWUyNDQ2MDcwNDA=","number":436,"title":"Periods with extremely long durations behave differently for UTC","user":{"login":"mccartney","id":762437,"node_id":"MDQ6VXNlcjc2MjQzNw==","avatar_url":"https://avatars.githubusercontent.com/u/762437?v=4","gravatar_id":"","url":"https://api.github.com/users/mccartney","html_url":"https://github.com/mccartney","followers_url":"https://api.github.com/users/mccartney/followers","following_url":"https://api.github.com/users/mccartney/following{/other_user}","gists_url":"https://api.github.com/users/mccartney/gists{/gist_id}","starred_url":"https://api.github.com/users/mccartney/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mccartney/subscriptions","organizations_url":"https://api.github.com/users/mccartney/orgs","repos_url":"https://api.github.com/users/mccartney/repos","events_url":"https://api.github.com/users/mccartney/events{/privacy}","received_events_url":"https://api.github.com/users/mccartney/received_events","type":"User","site_admin":false},"labels":[{"id":42319534,"node_id":"MDU6TGFiZWw0MjMxOTUzNA==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/NeedsInvestigation","name":"NeedsInvestigation","color":"eb6420","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-07-21T09:00:34Z","updated_at":"2020-11-09T11:04:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Key information\r\n\r\n- Joda-Time version: 2.9.3\r\n\r\n### Program\r\n```\r\nimport org.joda.time.*;\r\n\r\npublic class PeriodMain {\r\n\r\n  public static void main(String[] argv) {\r\n     System.out.println(java.util.TimeZone.getDefault().getDisplayName());\r\n     System.out.println(org.joda.time.DateTimeZone.getDefault());\r\n  \r\n     long period = 10000000000000000L;\r\n     new Period(period, PeriodType.yearDayTime()).normalizedStandard(PeriodType.dayTime());\r\n   }\r\n}\r\n```\r\n\r\n### Problem description\r\nThe program above behaves differently depending on the time zone. It works for UTC, while it fails with (what seems) any other time zone.\r\n\r\n### Test case\r\n1. Success\r\n```\r\n# TZ=Etc/UTC java -cp ./joda-time-2.9.3.jar:. PeriodMain\r\nPicked up _JAVA_OPTIONS: -Djava.awt.headless=true\r\nCoordinated Universal Time\r\nEtc/UTC\r\n```\r\n2. Failure\r\n```\r\n# TZ=Europe/Warsaw java -cp ./joda-time-2.9.3.jar:. PeriodMain \r\nPicked up _JAVA_OPTIONS: -Djava.awt.headless=true\r\nCentral European Time\r\nEurope/Warsaw\r\nException in thread \"main\" java.lang.ArithmeticException: Value cannot fit in an int: 2777777777\r\n\t\tat org.joda.time.field.FieldUtils.safeToInt(FieldUtils.java:206)\r\n\t\tat org.joda.time.field.BaseDurationField.getDifference(BaseDurationField.java:141)\r\n\t\tat org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference(ZonedChronology.java:343)\r\n\t\tat org.joda.time.chrono.BaseChronology.get(BaseChronology.java:285)\r\n\t\tat org.joda.time.base.BasePeriod.<init>(BasePeriod.java:258)\r\n\t\tat org.joda.time.Period.<init>(Period.java:402)\r\n\t\tat PeriodMain.main(PeriodMain.java:11)\r\n```\r\nOther time zones fail similarly: America/Chicago, etc.","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/436/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/433","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/433/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/433/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/433/events","html_url":"https://github.com/JodaOrg/joda-time/issues/433","id":237276067,"node_id":"MDU6SXNzdWUyMzcyNzYwNjc=","number":433,"title":"LocalDateTime doesn't support MAX YEAR in certain workflows","user":{"login":"gowrav27","id":23173656,"node_id":"MDQ6VXNlcjIzMTczNjU2","avatar_url":"https://avatars.githubusercontent.com/u/23173656?v=4","gravatar_id":"","url":"https://api.github.com/users/gowrav27","html_url":"https://github.com/gowrav27","followers_url":"https://api.github.com/users/gowrav27/followers","following_url":"https://api.github.com/users/gowrav27/following{/other_user}","gists_url":"https://api.github.com/users/gowrav27/gists{/gist_id}","starred_url":"https://api.github.com/users/gowrav27/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gowrav27/subscriptions","organizations_url":"https://api.github.com/users/gowrav27/orgs","repos_url":"https://api.github.com/users/gowrav27/repos","events_url":"https://api.github.com/users/gowrav27/events{/privacy}","received_events_url":"https://api.github.com/users/gowrav27/received_events","type":"User","site_admin":false},"labels":[{"id":42319534,"node_id":"MDU6TGFiZWw0MjMxOTUzNA==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/NeedsInvestigation","name":"NeedsInvestigation","color":"eb6420","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-06-20T16:46:15Z","updated_at":"2017-09-18T17:32:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"LocalDateTime doesn't support MAX YEAR\r\n\r\nJoda version:\r\n2.9.9\r\n\r\nEx:\r\n```\r\nLocalDateTime localDateTimeMax  = new LocalDateTime (Long.MAX_VALUE);\r\nnew LocalDateTime (localDateTimeMax);\r\n```\r\n\r\n```\r\nLocalDateTime localDateTime = new LocalDateTime (Long.MAX_VALUE);\r\nSystem.out.println(localDateTime);\r\n```\r\n\r\nPosted the same on [StackOverFlow](https://stackoverflow.com/questions/44658607/joda-localdatetime-support-on-max-year)\r\n\r\n### Problem description\r\nThe toString and certain constructors dont support Long.MAX_VALUE in LocalDateTime\r\nI see this is similar to the [issue](https://github.com/JodaOrg/joda-time/issues/190) resolved for DateTime\r\n\r\nExample Stack Trace:\r\n```\r\nException in thread \"main\" org.joda.time.IllegalFieldValueException: Value 292278994 for year must be in the range [-292275054,292278993]\r\n    at org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:234)\r\n    at org.joda.time.chrono.BasicYearDateTimeField.set(BasicYearDateTimeField.java:83)\r\n    at org.joda.time.chrono.BaseChronology.set(BaseChronology.java:240)\r\n    at org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo(DateTimeFormatterBuilder.java:1806)\r\n    at org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo(DateTimeFormatterBuilder.java:2474)\r\n    at org.joda.time.format.DateTimeFormatter.printTo(DateTimeFormatter.java:655)\r\n    at org.joda.time.format.DateTimeFormatter.print(DateTimeFormatter.java:709)\r\n    at org.joda.time.LocalDateTime.toString(LocalDateTime.java:2087)\r\n    at java.lang.String.valueOf(String.java:2849)\r\n    at java.lang.StringBuilder.append(StringBuilder.java:128)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/433/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/433/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/427","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/427/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/427/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/427/events","html_url":"https://github.com/JodaOrg/joda-time/issues/427","id":232715325,"node_id":"MDU6SXNzdWUyMzI3MTUzMjU=","number":427,"title":"toTimeZone doesn't work as expected for renamed zones","user":{"login":"haozhun","id":2020503,"node_id":"MDQ6VXNlcjIwMjA1MDM=","avatar_url":"https://avatars.githubusercontent.com/u/2020503?v=4","gravatar_id":"","url":"https://api.github.com/users/haozhun","html_url":"https://github.com/haozhun","followers_url":"https://api.github.com/users/haozhun/followers","following_url":"https://api.github.com/users/haozhun/following{/other_user}","gists_url":"https://api.github.com/users/haozhun/gists{/gist_id}","starred_url":"https://api.github.com/users/haozhun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haozhun/subscriptions","organizations_url":"https://api.github.com/users/haozhun/orgs","repos_url":"https://api.github.com/users/haozhun/repos","events_url":"https://api.github.com/users/haozhun/events{/privacy}","received_events_url":"https://api.github.com/users/haozhun/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-05-31T22:27:02Z","updated_at":"2017-06-05T08:36:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Key information\r\n\r\n- Joda-Time version: 2.9.5 or later (data upgraded from 2016d to 2016i in 2.9.5)\r\n- Java version: 8u112 or earlier (data upgrade from 2016f to 2016i in 6u141, 7u131, 8u121)\r\n  * It should also reproduce in 6u131 or earlier, 7u121 or earlier\r\n- To reproduce this, java must be 2016f or earlier. Joda must be 2016g or later.\r\n  * Asia/Rangoon was renamed to Asia/Yangon in 2016g\r\n- This shouldn't matter. But I'm providing them as requested.\r\n  - Result of `TimeZone.getDefault()`: America/Los_Angeles\r\n  - Result of `DateTimeZone.getDefault()`: America/Los_Angeles\r\n\r\n### Problem description and test case\r\n```\r\n    public static void main(String[] args)\r\n    {\r\n        // This prints Asia/Yangon.\r\n        // Asia/Rangoon was renamed to Asia/Yangon in 2016g.\r\n        DateTimeZone jodaZone = DateTimeZone.forID(\"Asia/Rangoon\");\r\n        System.out.println(\"joda \" + jodaZone);\r\n\r\n        // This prints Asia/Rangoon.\r\n        TimeZone javaZone = TimeZone.getTimeZone(\"Asia/Rangoon\");\r\n        System.out.println(\"java \" + javaZone.getID());\r\n\r\n        // This prints GMT. Asia/Rangoon is expected.\r\n        // This internally calls j.u.TimeZone.getTimeZone(\"Asia/Yangon\"),\r\n        // which returns GMT, because the zone doesn't exist prior to 2016g.\r\n        TimeZone javaZoneFromJoda = jodaZone.toTimeZone();\r\n        System.out.println(\"bad  \" + javaZoneFromJoda.getID());\r\n    }\r\n```\r\n\r\nI understand this might be very hard to fix, and this project is now in maintenance mode, but I would like to file this issue nevertheless and see what you think. I believe it is a bug that `DateTimeZone.forID(\"Asia/Rangoon\").toTimeZone()` returns `GMT`. But I also understand that this is likely a hard bug.","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/427/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/414","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/414/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/414/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/414/events","html_url":"https://github.com/JodaOrg/joda-time/issues/414","id":207886175,"node_id":"MDU6SXNzdWUyMDc4ODYxNzU=","number":414,"title":"Localize the DecimalFormatSeparator in PeriodFormatter appendSecondsWithMillis","user":{"login":"dektar","id":1351463,"node_id":"MDQ6VXNlcjEzNTE0NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1351463?v=4","gravatar_id":"","url":"https://api.github.com/users/dektar","html_url":"https://github.com/dektar","followers_url":"https://api.github.com/users/dektar/followers","following_url":"https://api.github.com/users/dektar/following{/other_user}","gists_url":"https://api.github.com/users/dektar/gists{/gist_id}","starred_url":"https://api.github.com/users/dektar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dektar/subscriptions","organizations_url":"https://api.github.com/users/dektar/orgs","repos_url":"https://api.github.com/users/dektar/repos","events_url":"https://api.github.com/users/dektar/events{/privacy}","received_events_url":"https://api.github.com/users/dektar/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-02-15T18:21:56Z","updated_at":"2017-02-20T16:17:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Key information\r\n\r\n- Joda-Time version: 2.9.4\r\n\r\n### Problem description\r\nJoda-Time does not use the localized decimal format separator for parsing and printing. Instead, the \".\" character is hard-coded in several places in PeriodFormatterBuilder.java.\r\n\r\nExample: https://github.com/JodaOrg/joda-time/blob/43b17998800f9e4bf076d37cba9e1f63bf00e4e7/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java#L1471\r\n\r\nInstead, Joda-Time should use the localized DecimalFormatSeparator, which can be retrieved from DecimalFormatSymbols.getInstance(locale).getDecimalSeparator.\r\nhttps://developer.android.com/reference/java/text/DecimalFormatSymbols.html#getDecimalSeparator()\r\nhttp://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormatSymbols.html#getDecimalSeparator()\r\n\r\n### Test case\r\nMake a formatter with a Locale:\r\nmPeriodFormatter = new PeriodFormatterBuilder()\r\n                .rejectSignedValues(true)  // Applies to all fields\r\n                .printZeroAlways()  // Applies to all fields\r\n                .appendHours()\r\n                .appendLiteral(hourMinuteDivider)\r\n                .minimumPrintedDigits(2)  // Applies to minutes and seconds\r\n                .appendMinutes()\r\n                .appendLiteral(minuteSecondDivider)\r\n                .appendSecondsWithMillis()\r\n                .toFormatter()\r\n                .withLocale(mLocale);\r\nThe SecondsWithMillis field should respect the locale. Use Finnish or Turkish and you expect a \",\"  separator, vs English, which expects a \".\" separator. In fact, both always uses the \".\" when printing.\r\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/414/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/273","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/273/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/273/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/273/events","html_url":"https://github.com/JodaOrg/joda-time/issues/273","id":73715129,"node_id":"MDU6SXNzdWU3MzcxNTEyOQ==","number":273,"title":"Error while parsing cyrillic month names on Linux and OS X","user":{"login":"crashkin","id":3499281,"node_id":"MDQ6VXNlcjM0OTkyODE=","avatar_url":"https://avatars.githubusercontent.com/u/3499281?v=4","gravatar_id":"","url":"https://api.github.com/users/crashkin","html_url":"https://github.com/crashkin","followers_url":"https://api.github.com/users/crashkin/followers","following_url":"https://api.github.com/users/crashkin/following{/other_user}","gists_url":"https://api.github.com/users/crashkin/gists{/gist_id}","starred_url":"https://api.github.com/users/crashkin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/crashkin/subscriptions","organizations_url":"https://api.github.com/users/crashkin/orgs","repos_url":"https://api.github.com/users/crashkin/repos","events_url":"https://api.github.com/users/crashkin/events{/privacy}","received_events_url":"https://api.github.com/users/crashkin/received_events","type":"User","site_admin":false},"labels":[{"id":47662460,"node_id":"MDU6TGFiZWw0NzY2MjQ2MA==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Discussion","name":"Discussion","color":"fbca04","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-05-06T19:32:50Z","updated_at":"2015-09-08T23:44:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Works fine on all systems\n\n``` Java\nDateTimeFormat.forPattern(\"MMMM\").withLocale(Locale.US).parseDateTime(\"January\");\n```\n\nThrow exception on OS X\n\n> Exception in thread \"main\" java.lang.IllegalArgumentException: Invalid format: \"Январь\" \n\n``` Java\nDateTimeFormat.forPattern(\"MMMM\").withLocale(new Locale.Builder().setLanguage(\"ru\").setScript(\"Cyrl\").build()).parseDateTime(\"Январь\");\n```\n\nUsing OS X 10.10 and Linux Ubuntu 14.04, Oracle JDK/JRE 1.8, joda-time 2.7\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/273/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/270","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/270/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/270/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/270/events","html_url":"https://github.com/JodaOrg/joda-time/issues/270","id":71220104,"node_id":"MDU6SXNzdWU3MTIyMDEwNA==","number":270,"title":"Formatting an Ethiopic Chronology date ","user":{"login":"ahassen","id":10027396,"node_id":"MDQ6VXNlcjEwMDI3Mzk2","avatar_url":"https://avatars.githubusercontent.com/u/10027396?v=4","gravatar_id":"","url":"https://api.github.com/users/ahassen","html_url":"https://github.com/ahassen","followers_url":"https://api.github.com/users/ahassen/followers","following_url":"https://api.github.com/users/ahassen/following{/other_user}","gists_url":"https://api.github.com/users/ahassen/gists{/gist_id}","starred_url":"https://api.github.com/users/ahassen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahassen/subscriptions","organizations_url":"https://api.github.com/users/ahassen/orgs","repos_url":"https://api.github.com/users/ahassen/repos","events_url":"https://api.github.com/users/ahassen/events{/privacy}","received_events_url":"https://api.github.com/users/ahassen/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-04-27T08:40:19Z","updated_at":"2015-04-28T07:41:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When I format an Ethiopic chronology date to the format \"MMM dd, YYYY\" i expect the month to be displayed in a text format(as it does for the Gregorian Chronology) but instead the month is displayed in number format. i.e '1' being displayed where the month \"meskerem\" should be displayed.\n\n![code snippet](https://cloud.githubusercontent.com/assets/10027396/7344173/239dd7f8-ecd2-11e4-803c-1936a8bcaf75.png)\n![converted date](https://cloud.githubusercontent.com/assets/10027396/7344174/23a19c4e-ecd2-11e4-8345-c0cabe353de8.png)\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/270/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/257","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/257/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/257/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/257/events","html_url":"https://github.com/JodaOrg/joda-time/issues/257","id":63614648,"node_id":"MDU6SXNzdWU2MzYxNDY0OA==","number":257,"title":"Add helper method to convert from US week numbering","user":{"login":"admackin","id":212268,"node_id":"MDQ6VXNlcjIxMjI2OA==","avatar_url":"https://avatars.githubusercontent.com/u/212268?v=4","gravatar_id":"","url":"https://api.github.com/users/admackin","html_url":"https://github.com/admackin","followers_url":"https://api.github.com/users/admackin/followers","following_url":"https://api.github.com/users/admackin/following{/other_user}","gists_url":"https://api.github.com/users/admackin/gists{/gist_id}","starred_url":"https://api.github.com/users/admackin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/admackin/subscriptions","organizations_url":"https://api.github.com/users/admackin/orgs","repos_url":"https://api.github.com/users/admackin/repos","events_url":"https://api.github.com/users/admackin/events{/privacy}","received_events_url":"https://api.github.com/users/admackin/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-03-23T03:32:54Z","updated_at":"2015-03-23T22:59:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It would be great to have a method to convert from the US week numbering system (First weekday is Sunday, week 1 always starts on the first sunday, preceding days are in week 0) to a JodaTime object\n\nI have written some code to do this but it would be great (for me, and I think others) to have it included in JodaTime. I've posted it under ASL at:\nhttps://gist.github.com/admackin/8e9847c0f4f078ea8cd0\n\nCould this be worked into something suitable for inclusion? I wanted to check if a) it was worth adapting it for inclusion and b) what I would need to do, before opening a pull request. (Obviously I would convert the asserts into proper standalone unit tests, but I'm not sure what else would make sense)\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/257/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/257/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/255","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/255/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/255/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/255/events","html_url":"https://github.com/JodaOrg/joda-time/issues/255","id":62124807,"node_id":"MDU6SXNzdWU2MjEyNDgwNw==","number":255,"title":"Add methods to expose country-to-zone mapping and other meta data ","user":{"login":"kashifshamaz21","id":6056421,"node_id":"MDQ6VXNlcjYwNTY0MjE=","avatar_url":"https://avatars.githubusercontent.com/u/6056421?v=4","gravatar_id":"","url":"https://api.github.com/users/kashifshamaz21","html_url":"https://github.com/kashifshamaz21","followers_url":"https://api.github.com/users/kashifshamaz21/followers","following_url":"https://api.github.com/users/kashifshamaz21/following{/other_user}","gists_url":"https://api.github.com/users/kashifshamaz21/gists{/gist_id}","starred_url":"https://api.github.com/users/kashifshamaz21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kashifshamaz21/subscriptions","organizations_url":"https://api.github.com/users/kashifshamaz21/orgs","repos_url":"https://api.github.com/users/kashifshamaz21/repos","events_url":"https://api.github.com/users/kashifshamaz21/events{/privacy}","received_events_url":"https://api.github.com/users/kashifshamaz21/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-03-16T15:55:44Z","updated_at":"2015-04-05T05:02:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The official IANA timezone data src has information about which zones are used in a country and vice versa. It also has information about zone aliases(called as \"links\"). These are useful pieces of information for better handling of timezones.\nFor example: A user can be shown a list of countries to select from, and based on the chosen countries, a second list of zones used in that country can be pre-populated. To achieve such a functionality, a mapping between Countries-->Zones is needed.\nThis requires parsing of following files from the IANA tz data:\n1. **iso3166.tab**: This file can be parsed to create the country-code to country map.\n2. **zone.tab**: This file can be parsed to create the map between countries to timezone ids.\n\nThis type of functionality was added to moment-timezone library, so that can be used as a reference point if need be. (https://github.com/moment/moment-timezone/blob/develop/tasks/data-meta.js) \n(https://github.com/moment/moment-timezone/blob/develop/data/meta/latest.json)\n@jodastephen Thoughts?\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/255/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/254","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/254/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/254/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/254/events","html_url":"https://github.com/JodaOrg/joda-time/issues/254","id":62044604,"node_id":"MDU6SXNzdWU2MjA0NDYwNA==","number":254,"title":"Provide methods for converting to java.time","user":{"login":"mjiderhamn","id":837073,"node_id":"MDQ6VXNlcjgzNzA3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/837073?v=4","gravatar_id":"","url":"https://api.github.com/users/mjiderhamn","html_url":"https://github.com/mjiderhamn","followers_url":"https://api.github.com/users/mjiderhamn/followers","following_url":"https://api.github.com/users/mjiderhamn/following{/other_user}","gists_url":"https://api.github.com/users/mjiderhamn/gists{/gist_id}","starred_url":"https://api.github.com/users/mjiderhamn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjiderhamn/subscriptions","organizations_url":"https://api.github.com/users/mjiderhamn/orgs","repos_url":"https://api.github.com/users/mjiderhamn/repos","events_url":"https://api.github.com/users/mjiderhamn/events{/privacy}","received_events_url":"https://api.github.com/users/mjiderhamn/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2015-03-16T10:57:39Z","updated_at":"2018-05-10T05:21:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Just like Joda Time provides [methods for converting to](http://www.joda.org/joda-time/apidocs/org/joda/time/LocalDate.html#toDate--)/from `java.util.Date/Calendar`, it would be beneficial - not least for migration - to provide methods to convert to/from the new Java 8 `java.time` classes, such as `org.joda.time.LocalDate` -> `java.time.LocalDate`.\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/254/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/254/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/242","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/242/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/242/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/242/events","html_url":"https://github.com/JodaOrg/joda-time/issues/242","id":57120201,"node_id":"MDU6SXNzdWU1NzEyMDIwMQ==","number":242,"title":"Consider adding support for standalone day of week/month pattern symbols","user":{"login":"dlew","id":514850,"node_id":"MDQ6VXNlcjUxNDg1MA==","avatar_url":"https://avatars.githubusercontent.com/u/514850?v=4","gravatar_id":"","url":"https://api.github.com/users/dlew","html_url":"https://github.com/dlew","followers_url":"https://api.github.com/users/dlew/followers","following_url":"https://api.github.com/users/dlew/following{/other_user}","gists_url":"https://api.github.com/users/dlew/gists{/gist_id}","starred_url":"https://api.github.com/users/dlew/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dlew/subscriptions","organizations_url":"https://api.github.com/users/dlew/orgs","repos_url":"https://api.github.com/users/dlew/repos","events_url":"https://api.github.com/users/dlew/events{/privacy}","received_events_url":"https://api.github.com/users/dlew/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2015-02-10T02:02:53Z","updated_at":"2020-09-19T18:36:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In Android they added support for two non-standard symbols:\n- `c` - standalone day of week\n- `L` - standalone month\n\nI was wondering if it's reasonable to add these to joda-time itself. I can work on a pull request, but I wanted to check before putting any time into it - would it be alright to add, or should we avoid these specializations?\n\n(This was inspired by https://github.com/dlew/joda-time-android/issues/30)\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/242/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/242/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/189","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/189/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/189/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/189/events","html_url":"https://github.com/JodaOrg/joda-time/issues/189","id":44967041,"node_id":"MDU6SXNzdWU0NDk2NzA0MQ==","number":189,"title":"Customizable AM/PM","user":{"login":"yaitskov","id":1292734,"node_id":"MDQ6VXNlcjEyOTI3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1292734?v=4","gravatar_id":"","url":"https://api.github.com/users/yaitskov","html_url":"https://github.com/yaitskov","followers_url":"https://api.github.com/users/yaitskov/followers","following_url":"https://api.github.com/users/yaitskov/following{/other_user}","gists_url":"https://api.github.com/users/yaitskov/gists{/gist_id}","starred_url":"https://api.github.com/users/yaitskov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yaitskov/subscriptions","organizations_url":"https://api.github.com/users/yaitskov/orgs","repos_url":"https://api.github.com/users/yaitskov/repos","events_url":"https://api.github.com/users/yaitskov/events{/privacy}","received_events_url":"https://api.github.com/users/yaitskov/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2014-10-06T10:07:28Z","updated_at":"2016-08-30T10:45:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Bare SimpleDateFormat can parse non standard AM/PM with **DateFormatSymbols.setAmPmStrings** but I cannot find similar feature in JodaTime.\n\nFor example in my case AM is \"A.M.\".\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/189/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/189/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/114","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/114/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/114/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/114/events","html_url":"https://github.com/JodaOrg/joda-time/issues/114","id":26204934,"node_id":"MDU6SXNzdWUyNjIwNDkzNA==","number":114,"title":"ISO8601 strangeness in Interval.parse()","user":{"login":"gsson","id":110603,"node_id":"MDQ6VXNlcjExMDYwMw==","avatar_url":"https://avatars.githubusercontent.com/u/110603?v=4","gravatar_id":"","url":"https://api.github.com/users/gsson","html_url":"https://github.com/gsson","followers_url":"https://api.github.com/users/gsson/followers","following_url":"https://api.github.com/users/gsson/following{/other_user}","gists_url":"https://api.github.com/users/gsson/gists{/gist_id}","starred_url":"https://api.github.com/users/gsson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gsson/subscriptions","organizations_url":"https://api.github.com/users/gsson/orgs","repos_url":"https://api.github.com/users/gsson/repos","events_url":"https://api.github.com/users/gsson/events{/privacy}","received_events_url":"https://api.github.com/users/gsson/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2014-01-23T22:40:59Z","updated_at":"2014-01-27T18:25:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"See comment in test for details.\n\n``` java\nimport static org.junit.Assert.assertTrue;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.Interval;\nimport org.junit.Test;\n\npublic class TestInterval {\n    /* I don't  have access to ISO 8601, but various sources on the\n     * Internet (Wikipedia [1] and others) claim that when defining\n     * intervals from two instants, unspecified fields in the second\n     * instant of the interval should be copied from the first,\n     * including timezones.\n     *\n     * As far as I can tell, unspecified timezones will always be\n     * replaced with the local timezone.\n     *\n     * The strange timezone used in test was selected to minimize the\n     * risk that it is the same as the local timezone.\n     *\n     * [1]: http://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n     */\n    @Test\n    public void testInterval() {\n        String intervalString = \"2007-03-10T00:00+12:34/2007-03-11\";\n        Interval actual = Interval.parse(intervalString);\n\n        DateTimeZone offset = DateTimeZone.forOffsetHoursMinutes(12, 34);\n        DateTime start = new DateTime(2007, 03, 10, 00, 00, offset);\n        DateTime end = new DateTime(2007, 03, 11, 00, 00, offset);\n        Interval expected = new Interval(start, end);\n\n        assertTrue(expected.isEqual(actual));\n    }\n}\n```\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/114/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/114/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/90","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/90/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/90/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/90/events","html_url":"https://github.com/JodaOrg/joda-time/issues/90","id":23312051,"node_id":"MDU6SXNzdWUyMzMxMjA1MQ==","number":90,"title":"Constructing a period from partials fails when partial is a [dayOfYear = 366]","user":{"login":"dm3","id":44071,"node_id":"MDQ6VXNlcjQ0MDcx","avatar_url":"https://avatars.githubusercontent.com/u/44071?v=4","gravatar_id":"","url":"https://api.github.com/users/dm3","html_url":"https://github.com/dm3","followers_url":"https://api.github.com/users/dm3/followers","following_url":"https://api.github.com/users/dm3/following{/other_user}","gists_url":"https://api.github.com/users/dm3/gists{/gist_id}","starred_url":"https://api.github.com/users/dm3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dm3/subscriptions","organizations_url":"https://api.github.com/users/dm3/orgs","repos_url":"https://api.github.com/users/dm3/repos","events_url":"https://api.github.com/users/dm3/events{/privacy}","received_events_url":"https://api.github.com/users/dm3/received_events","type":"User","site_admin":false},"labels":[{"id":42317690,"node_id":"MDU6TGFiZWw0MjMxNzY5MA==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Bug","name":"Bug","color":"e11d21","default":false,"description":null},{"id":111962148,"node_id":"MDU6TGFiZWwxMTE5NjIxNDg=","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/Hard","name":"Hard","color":"660000","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2013-11-26T12:51:17Z","updated_at":"2017-12-08T04:22:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Not sure if this is supposed to fail. Probably not, as the year isn't known.\n\n``` java\nnew Period(new Partial(DateTimeFieldType.dayOfYear(), 200), new Partial(DateTimeFieldType.dayOfYear(), 366));\n// IllegalFieldValueException Value 366 for dayOfYear must be in the range [1,365]\n//  org.joda.time.field.FieldUtils.verifyValueBounds (FieldUtils.java:218)\n//  org.joda.time.field.PreciseDurationDateTimeField.set (PreciseDurationDateTimeField.java:79)\n//  org.joda.time.chrono.BaseChronology.set (BaseChronology.java:240)\n//  org.joda.time.base.BasePeriod.<init> (BasePeriod.java:182)\n//  org.joda.time.Period.<init> (Period.java:562)\n```\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/90/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/90/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/80","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/80/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/80/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/80/events","html_url":"https://github.com/JodaOrg/joda-time/issues/80","id":21308516,"node_id":"MDU6SXNzdWUyMTMwODUxNg==","number":80,"title":"Create option for joda-time to ignore LMT like the JDK.","user":{"login":"xtermi2","id":1821973,"node_id":"MDQ6VXNlcjE4MjE5NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1821973?v=4","gravatar_id":"","url":"https://api.github.com/users/xtermi2","html_url":"https://github.com/xtermi2","followers_url":"https://api.github.com/users/xtermi2/followers","following_url":"https://api.github.com/users/xtermi2/following{/other_user}","gists_url":"https://api.github.com/users/xtermi2/gists{/gist_id}","starred_url":"https://api.github.com/users/xtermi2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xtermi2/subscriptions","organizations_url":"https://api.github.com/users/xtermi2/orgs","repos_url":"https://api.github.com/users/xtermi2/repos","events_url":"https://api.github.com/users/xtermi2/events{/privacy}","received_events_url":"https://api.github.com/users/xtermi2/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2013-10-21T11:09:04Z","updated_at":"2013-11-27T12:52:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Please provide a option in joda-time, maybe a system property (-Djoda.ignoreLMT=true), to ignore the LMT information from the timezone database.\n\nWe are using joda-time in an complex enterprise environment and need to convert between joda and JDK timestamps. At the moment we have a patched joda-time version which ignores the LMT information from the timezone database like the JDK. It would be much easier if joda-time provides an option to behave exactly like the JDK (ignoreing the LMT).\n\nHere you can see our patch. Its not working at runtime. It filters the LMT at compile time and you can't control at runtime it you want to disable or enable LMT:\n\n```\nIndex: src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- src/main/java/org/joda/time/tz/ZoneInfoCompiler.java    (revision 1802)\n+++ src/main/java/org/joda/time/tz/ZoneInfoCompiler.java    (revision )\n@@ -800,6 +800,9 @@\n                                          Map<String, RuleSet> ruleSets)\n         {\n             for (; zone != null; zone = zone.iNext) {\n+                if (\"LMT\".equals(zone.iFormat)) {\n+                    continue;\n+                }\n                 builder.setStandardOffset(zone.iOffsetMillis);\n\n                 if (zone.iRules == null) {\n```\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/80/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/80/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/34","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/34/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/34/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/34/events","html_url":"https://github.com/JodaOrg/joda-time/issues/34","id":15965209,"node_id":"MDU6SXNzdWUxNTk2NTIwOQ==","number":34,"title":"DST settings seems to be interpreted incorrectly when using custom time zone","user":{"login":"miptalan","id":3819361,"node_id":"MDQ6VXNlcjM4MTkzNjE=","avatar_url":"https://avatars.githubusercontent.com/u/3819361?v=4","gravatar_id":"","url":"https://api.github.com/users/miptalan","html_url":"https://github.com/miptalan","followers_url":"https://api.github.com/users/miptalan/followers","following_url":"https://api.github.com/users/miptalan/following{/other_user}","gists_url":"https://api.github.com/users/miptalan/gists{/gist_id}","starred_url":"https://api.github.com/users/miptalan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/miptalan/subscriptions","organizations_url":"https://api.github.com/users/miptalan/orgs","repos_url":"https://api.github.com/users/miptalan/repos","events_url":"https://api.github.com/users/miptalan/events{/privacy}","received_events_url":"https://api.github.com/users/miptalan/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2013-06-25T07:46:58Z","updated_at":"2013-06-25T12:22:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"``` java\nprivate static final Logger logger = LoggerFactory.getLogger(JodaTimeZoneTest.class);\n\nprivate static final LocalDateTime SUMMER_TIME = LocalDateTime.parse(\"2013-06-25T12:00:00\");\nprivate static final LocalDateTime WINTER_TIME = LocalDateTime.parse(\"2012-12-25T12:00:00\");\n\npublic void testTimeZone(TimeZone tz) {\n        DateTimeZone dtzone = DateTimeZone.forTimeZone(tz);\n        int winterHours = hourOfDayUTC(WINTER_TIME, dtzone);\n        int summerHours = hourOfDayUTC(SUMMER_TIME, dtzone);\n        logger.info(\"TZ: {}, winter hours={}, summer hours={}\", new Object[]{tz, winterHours, summerHours});\n        assertEquals(1, Math.abs(winterHours - summerHours));\n    }\n\n    private int hourOfDayUTC(LocalDateTime winterTime, DateTimeZone dtzone) {\n        return winterTime.toDateTime(dtzone).toDateTime(DateTimeZone.UTC).getHourOfDay();\n    }\n```\n\npasses for TimeZone.getTimeZone(\"Europe/London\") but fails for custom TZ with the same settings: \n\n``` java\nnew SimpleTimeZone(3600000,\n                \"GMT\",\n                Calendar.MARCH, -1, Calendar.SUNDAY,\n                3600000, SimpleTimeZone.UTC_TIME,\n                Calendar.OCTOBER, -1, Calendar.SUNDAY,\n                3600000, SimpleTimeZone.UTC_TIME,\n                3600000) \n```\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/34/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/34/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/17","repository_url":"https://api.github.com/repos/JodaOrg/joda-time","labels_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/17/labels{/name}","comments_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/17/comments","events_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/17/events","html_url":"https://github.com/JodaOrg/joda-time/issues/17","id":13354555,"node_id":"MDU6SXNzdWUxMzM1NDU1NQ==","number":17,"title":"Create option for joda-time to use the time zone information from the JDK","user":{"login":"brandonheck","id":1234492,"node_id":"MDQ6VXNlcjEyMzQ0OTI=","avatar_url":"https://avatars.githubusercontent.com/u/1234492?v=4","gravatar_id":"","url":"https://api.github.com/users/brandonheck","html_url":"https://github.com/brandonheck","followers_url":"https://api.github.com/users/brandonheck/followers","following_url":"https://api.github.com/users/brandonheck/following{/other_user}","gists_url":"https://api.github.com/users/brandonheck/gists{/gist_id}","starred_url":"https://api.github.com/users/brandonheck/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brandonheck/subscriptions","organizations_url":"https://api.github.com/users/brandonheck/orgs","repos_url":"https://api.github.com/users/brandonheck/repos","events_url":"https://api.github.com/users/brandonheck/events{/privacy}","received_events_url":"https://api.github.com/users/brandonheck/received_events","type":"User","site_admin":false},"labels":[{"id":42317739,"node_id":"MDU6TGFiZWw0MjMxNzczOQ==","url":"https://api.github.com/repos/JodaOrg/joda-time/labels/RFE","name":"RFE","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2013-04-18T15:19:39Z","updated_at":"2017-06-13T17:42:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In an enterprise environment where there are many isolated applications that utilize joda-time, updating the version of joda-time in each application can be time-consuming and could be considered bad practice to change a deployed application. With the availability of the tzupdater utility [1] for Sun/Oracle JREs, updating the time zone recognized by the JRE has become a fairly trivial, one step process (per JRE). It would be beneficial to have an option for joda-time to use the time zone information provided by the JRE.\n\nWith the understanding that joda-time was written prior to the availability of the tzupdater and the fact that the tzupdater may be an enterprise-level solution, I would envision this enhancement as an optional feature that can be turned on (or off) as needed.\n\n[1] - http://www.oracle.com/technetwork/java/javase/tzupdater-readme-136440.html\n","reactions":{"url":"https://api.github.com/repos/JodaOrg/joda-time/issues/17/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/JodaOrg/joda-time/issues/17/timeline","performed_via_github_app":null}],"issuesCount":27,"contributors":93,"pullRequests":2,"projectUrl":"https://github.com/JodaOrg/joda-time","issuesUrl":"https://github.com/JodaOrg/joda-time/issues","stars":4709,"watchers":4709,"forks":894,"githubLicenseName":"Apache-2.0","openIssues":29,"createdAt":"2011-05-16T16:49:57Z","updatedAt":"2021-10-15T02:30:27Z","monthsSinceUpdated":0},{"id":"jackson-core@2.11.2","groupId":"com.fasterxml.jackson.core","artifactId":"jackson-core","version":"2.11.2","name":"Jackson-core","description":"Core part of Jackson that defines Streaming API as well as basic shared abstractions","licenses":{"license":{"name":"The Apache Software License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.txt","distribution":"repo"}},"github":"http://github.com/FasterXML/jackson-core","latestVersion":"2.13.0","issues":[{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/719","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/719/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/719/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/719/events","html_url":"https://github.com/FasterXML/jackson-core/issues/719","id":1023359543,"node_id":"I_kwDOAC5a0848_zo3","number":719,"title":"Allow backquoted string (based on ES6 template string)","user":{"login":"yairlenga","id":4863782,"node_id":"MDQ6VXNlcjQ4NjM3ODI=","avatar_url":"https://avatars.githubusercontent.com/u/4863782?v=4","gravatar_id":"","url":"https://api.github.com/users/yairlenga","html_url":"https://github.com/yairlenga","followers_url":"https://api.github.com/users/yairlenga/followers","following_url":"https://api.github.com/users/yairlenga/following{/other_user}","gists_url":"https://api.github.com/users/yairlenga/gists{/gist_id}","starred_url":"https://api.github.com/users/yairlenga/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yairlenga/subscriptions","organizations_url":"https://api.github.com/users/yairlenga/orgs","repos_url":"https://api.github.com/users/yairlenga/repos","events_url":"https://api.github.com/users/yairlenga/events{/privacy}","received_events_url":"https://api.github.com/users/yairlenga/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-10-12T04:48:26Z","updated_at":"2021-10-13T15:08:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Suggesting adding an option to the JSON PARSER to allow backquoted  string, based on ES6 template string.\r\n\r\nThe main benefit will be simplified way to enter multi line strings. It will allow (for most cases) to copy paste data from external documents, without having to edit the constant by adding ‘\\’ before every new line, etc. likewise editing of such strings is significantly easier for users, and code.\r\n\r\nexample:\r\n\r\n```\r\n { foo: \\`with backquoted string\r\nEasy to see line breakdown,\r\nEnter escapes \\n and \\t\r\nAnd use quote ‘ and “\r\n` } \r\n```\r\n\r\nabive string using standard json in difficult to maintain.\r\n\r\nto emphasize, I do not suggest in this ticket that support will be included for placeholders ($(expression), tagged strings,  sinterpolation. This can be a follow ( and very useful) extensions.\r\n\r\nto support the argument, I want to highlight Jackson already support most of EC6 grammar; extra comma, unquoted identifiers and more.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/719/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/719/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/717","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/717/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/717/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/717/events","html_url":"https://github.com/FasterXML/jackson-core/issues/717","id":998296101,"node_id":"I_kwDOAC5a0847gMol","number":717,"title":"Hex capitalization for JsonWriter should be configurable","user":{"login":"pakoito","id":514871,"node_id":"MDQ6VXNlcjUxNDg3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/514871?v=4","gravatar_id":"","url":"https://api.github.com/users/pakoito","html_url":"https://github.com/pakoito","followers_url":"https://api.github.com/users/pakoito/followers","following_url":"https://api.github.com/users/pakoito/following{/other_user}","gists_url":"https://api.github.com/users/pakoito/gists{/gist_id}","starred_url":"https://api.github.com/users/pakoito/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pakoito/subscriptions","organizations_url":"https://api.github.com/users/pakoito/orgs","repos_url":"https://api.github.com/users/pakoito/repos","events_url":"https://api.github.com/users/pakoito/events{/privacy}","received_events_url":"https://api.github.com/users/pakoito/received_events","type":"User","site_admin":false},"labels":[{"id":3386951150,"node_id":"LA_kwDOAC5a087J4MXu","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.14","name":"2.14","color":"13A6BE","default":false,"description":"Issue planned (at earliest) for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-09-16T14:41:25Z","updated_at":"2021-10-13T20:30:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We're seeing inconsistencies between JS's and Jackson's representation of non-printable characters embedded in JSON strings. Where JS sends `\\u001b`, once it goes through Jackson the field holds the string `\\u001B`, causing all kind of hashing issues.\r\n\r\nIn https://github.com/FasterXML/jackson-core/blob/efe51e83648ed1b4c33ad1ffd5e2cbee5e0c6091/src/main/java/com/fasterxml/jackson/core/io/CharTypes.java#L7 we find that the hex values are hardcoded as capital `A-F`, whereas other representations such as JS's `JSON.stringify` indicate you should use lowercase `a-f` instead.\r\n\r\nThese are used in the standard JsonWriter via https://github.com/FasterXML/jackson-core/blob/94a0e1cab04a218cb189e635727ca803dc56a958/src/main/java/com/fasterxml/jackson/core/JsonStreamContext.java#L331\r\n\r\nWe would like to see a configuration parameter or recommended approach to overcome this issue.\r\n\r\nSeen in 2.13, made from before 2.0","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/717/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/715","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/715/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/715/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/715/events","html_url":"https://github.com/FasterXML/jackson-core/issues/715","id":993604705,"node_id":"MDU6SXNzdWU5OTM2MDQ3MDU=","number":715,"title":"Allow `TokenFilter`s to keep empty arrays and objects","user":{"login":"nik9000","id":215970,"node_id":"MDQ6VXNlcjIxNTk3MA==","avatar_url":"https://avatars.githubusercontent.com/u/215970?v=4","gravatar_id":"","url":"https://api.github.com/users/nik9000","html_url":"https://github.com/nik9000","followers_url":"https://api.github.com/users/nik9000/followers","following_url":"https://api.github.com/users/nik9000/following{/other_user}","gists_url":"https://api.github.com/users/nik9000/gists{/gist_id}","starred_url":"https://api.github.com/users/nik9000/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nik9000/subscriptions","organizations_url":"https://api.github.com/users/nik9000/orgs","repos_url":"https://api.github.com/users/nik9000/repos","events_url":"https://api.github.com/users/nik9000/events{/privacy}","received_events_url":"https://api.github.com/users/nik9000/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-09-10T21:22:50Z","updated_at":"2021-09-12T03:57:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Include version information for Jackson version you use: We use 2.10.4 but 2.13 doesn't support this either\r\n\r\nMaybe this is possible in a way I don't know about, but I was hoping I could write a `TokenFilter` that could preserve empty arrays and objects. It looks like now if a `TokenFilter#includeProperty` doesn't return `INCLUDE_ALL` for an empty array then the array is removed. I'd love it if the `TokenFilter` could make that choice- maybe something like adding this to `TokenFilter`:\r\n\r\n```\r\n    public boolean includeEmptyArray(boolean contentsFiltered) throws IOException {\r\n        return false;\r\n    }\r\n```\r\n\r\nThere is already a `filterFinishArray` but I don't think I can control the underlying filter with it. And I'm not sure if I can tell if the filter has filtered the contents of the array or not.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/715/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/714","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/714/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/714/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/714/events","html_url":"https://github.com/FasterXML/jackson-core/issues/714","id":982016804,"node_id":"MDU6SXNzdWU5ODIwMTY4MDQ=","number":714,"title":"  java.lang.NoClassDefFoundError: java.util.stream.Stream","user":{"login":"bibink874","id":82039830,"node_id":"MDQ6VXNlcjgyMDM5ODMw","avatar_url":"https://avatars.githubusercontent.com/u/82039830?v=4","gravatar_id":"","url":"https://api.github.com/users/bibink874","html_url":"https://github.com/bibink874","followers_url":"https://api.github.com/users/bibink874/followers","following_url":"https://api.github.com/users/bibink874/following{/other_user}","gists_url":"https://api.github.com/users/bibink874/gists{/gist_id}","starred_url":"https://api.github.com/users/bibink874/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bibink874/subscriptions","organizations_url":"https://api.github.com/users/bibink874/orgs","repos_url":"https://api.github.com/users/bibink874/repos","events_url":"https://api.github.com/users/bibink874/events{/privacy}","received_events_url":"https://api.github.com/users/bibink874/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-29T07:17:18Z","updated_at":"2021-08-29T07:17:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am using the below gradles in my project for reading values using ObjectMapper.\r\n\r\n- 'com.fasterxml.jackson.core:jackson-core:2.11.1'\r\n- 'com.fasterxml.jackson.core:jackson-annotations:2.11.1'\r\n- 'com.fasterxml.jackson.core:jackson-databind:2.11.1'\r\n\r\n\r\n I am getting crash \" **java.lang.NoClassDefFoundError: java.util.stream.Stream**\" like this in marshmallow and lollipop mobile ie; version below 24. \r\n\r\nCan you please explain how to rid of this bug.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/714/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/708","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/708/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/708/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/708/events","html_url":"https://github.com/FasterXML/jackson-core/issues/708","id":945988094,"node_id":"MDU6SXNzdWU5NDU5ODgwOTQ=","number":708,"title":"FilteringParserDelegate cannot deserialize empty list","user":{"login":"xiazuojie","id":25221069,"node_id":"MDQ6VXNlcjI1MjIxMDY5","avatar_url":"https://avatars.githubusercontent.com/u/25221069?v=4","gravatar_id":"","url":"https://api.github.com/users/xiazuojie","html_url":"https://github.com/xiazuojie","followers_url":"https://api.github.com/users/xiazuojie/followers","following_url":"https://api.github.com/users/xiazuojie/following{/other_user}","gists_url":"https://api.github.com/users/xiazuojie/gists{/gist_id}","starred_url":"https://api.github.com/users/xiazuojie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xiazuojie/subscriptions","organizations_url":"https://api.github.com/users/xiazuojie/orgs","repos_url":"https://api.github.com/users/xiazuojie/repos","events_url":"https://api.github.com/users/xiazuojie/events{/privacy}","received_events_url":"https://api.github.com/users/xiazuojie/received_events","type":"User","site_admin":false},"labels":[{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-16T06:32:07Z","updated_at":"2021-07-20T17:54:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This is a follow up issue of https://github.com/FasterXML/jackson-core/issues/700 .\r\n\r\nIf using FilteringParserDelegate to filter out a part of json, it throws the following exception when the input json is an empty list (\"[]\").\r\n\r\n```\r\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: No content to map due to end-of-input\r\n at [Source: (byte[])\"[]\"; line: 1, column: 2]\r\n\r\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._initForReading(ObjectMapper.java:4688)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:4561)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2823)\r\n\tat com.alibaba.dapr.serialization.json.FilteringParserDelegateTest.testFilteringParserDelegateWithEmptyList(FilteringParserDelegateTest.java:36)\r\n```\r\nTest case:\r\n```java\r\npackage com.alibaba.dapr.serialization.json;\r\n\r\nimport com.fasterxml.jackson.core.JsonParser;\r\nimport com.fasterxml.jackson.core.filter.FilteringParserDelegate;\r\nimport com.fasterxml.jackson.core.filter.TokenFilter;\r\nimport com.fasterxml.jackson.core.type.TypeReference;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.Test;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport static org.junit.Assert.assertTrue;\r\n\r\npublic class FilteringParserDelegateTest {\r\n    @Test\r\n    public void testFilteringParserDelegateWithEmptyList() throws IOException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        final TokenFilter tokenFilter = new TokenFilter() {\r\n            @Override\r\n            public TokenFilter includeProperty(String name) {\r\n                if (\"@type\".equals(name)) {\r\n                    return null;\r\n                }\r\n                return INCLUDE_ALL;\r\n            }\r\n        };\r\n\r\n        byte[] content = \"[]\".getBytes(StandardCharsets.UTF_8);\r\n\r\n        JsonParser jp = mapper.createParser(content);\r\n        JsonParser jsonParser = new FilteringParserDelegate(jp, tokenFilter, TokenFilter.Inclusion.INCLUDE_ALL_AND_PATH, true);\r\n\r\n        List<Map<String, String>> a = mapper.readValue(jsonParser, new TypeReference<List<Map<String, String>>>() {});\r\n        assertTrue(a.isEmpty());\r\n    }\r\n}\r\n\r\n```\r\nJackson version: 2.12.3","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/708/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/707","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/707/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/707/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/707/events","html_url":"https://github.com/FasterXML/jackson-core/issues/707","id":940473336,"node_id":"MDU6SXNzdWU5NDA0NzMzMzY=","number":707,"title":"JsonReadFeature: Introduce missing features for JSON5 compatibility","user":{"login":"GrahamLea","id":754403,"node_id":"MDQ6VXNlcjc1NDQwMw==","avatar_url":"https://avatars.githubusercontent.com/u/754403?v=4","gravatar_id":"","url":"https://api.github.com/users/GrahamLea","html_url":"https://github.com/GrahamLea","followers_url":"https://api.github.com/users/GrahamLea/followers","following_url":"https://api.github.com/users/GrahamLea/following{/other_user}","gists_url":"https://api.github.com/users/GrahamLea/gists{/gist_id}","starred_url":"https://api.github.com/users/GrahamLea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GrahamLea/subscriptions","organizations_url":"https://api.github.com/users/GrahamLea/orgs","repos_url":"https://api.github.com/users/GrahamLea/repos","events_url":"https://api.github.com/users/GrahamLea/events{/privacy}","received_events_url":"https://api.github.com/users/GrahamLea/received_events","type":"User","site_admin":false},"labels":[{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-09T06:50:39Z","updated_at":"2021-07-09T18:46:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The optional features in the JSON parser allow it be configured to _almost_ be a fully-compatible parser for JSON5.\r\n\r\nThere's just a few missing features, documented here:\r\nhttps://stackoverflow.com/questions/68312227/can-the-jackson-parser-be-used-to-parse-json5\r\n\r\nSummarised as:\r\n- hexadecimal numbers\r\n- trailing decimal points on numbers\r\n- plus signs before numbers\r\n- extra whitespace characters\r\n\r\nI propose that additional Jackson features be added for each of these JSON5 features to allow Jackson to be used as a fully-compliant JSON5 parser.\r\n\r\n(#612 was a similar but more specific request, though it seems that feature is already covered)\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/707/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/707/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/701","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/701/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/701/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/701/events","html_url":"https://github.com/FasterXML/jackson-core/issues/701","id":897697778,"node_id":"MDU6SXNzdWU4OTc2OTc3Nzg=","number":701,"title":"jackson-core-2.10.5 dependency tree doesn't contains jackson-core-2.3.1 as a dependency and how it's possible to depend on the same source?","user":{"login":"karthik0411","id":41343122,"node_id":"MDQ6VXNlcjQxMzQzMTIy","avatar_url":"https://avatars.githubusercontent.com/u/41343122?v=4","gravatar_id":"","url":"https://api.github.com/users/karthik0411","html_url":"https://github.com/karthik0411","followers_url":"https://api.github.com/users/karthik0411/followers","following_url":"https://api.github.com/users/karthik0411/following{/other_user}","gists_url":"https://api.github.com/users/karthik0411/gists{/gist_id}","starred_url":"https://api.github.com/users/karthik0411/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/karthik0411/subscriptions","organizations_url":"https://api.github.com/users/karthik0411/orgs","repos_url":"https://api.github.com/users/karthik0411/repos","events_url":"https://api.github.com/users/karthik0411/events{/privacy}","received_events_url":"https://api.github.com/users/karthik0411/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-21T05:42:19Z","updated_at":"2021-05-26T17:23:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**mvn dependency:tree**\r\n\r\ncom.fasterxml.jackson.core:jackson-core:bundle:2.10.5\r\n\\- junit:junit:jar:4.12:test\r\n   \\- org.hamcrest:hamcrest-core:jar:1.3:test\r\n\r\nbut when we try a build it's fetching jackson-core-2.3.1 ,jackson-annotations-2.3.1,jackson-databind-2.3.1 as a dependency\r\nin local repository (.m2/repositories).\r\n\r\nHow a framework depend on it's own subversion?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/701/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/701/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/697","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/697/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/697/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/697/events","html_url":"https://github.com/FasterXML/jackson-core/issues/697","id":867855943,"node_id":"MDU6SXNzdWU4Njc4NTU5NDM=","number":697,"title":"TypeReference hack to ensure non-raw usage doesn't actually work.","user":{"login":"rzwitserloot","id":93303,"node_id":"MDQ6VXNlcjkzMzAz","avatar_url":"https://avatars.githubusercontent.com/u/93303?v=4","gravatar_id":"","url":"https://api.github.com/users/rzwitserloot","html_url":"https://github.com/rzwitserloot","followers_url":"https://api.github.com/users/rzwitserloot/followers","following_url":"https://api.github.com/users/rzwitserloot/following{/other_user}","gists_url":"https://api.github.com/users/rzwitserloot/gists{/gist_id}","starred_url":"https://api.github.com/users/rzwitserloot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rzwitserloot/subscriptions","organizations_url":"https://api.github.com/users/rzwitserloot/orgs","repos_url":"https://api.github.com/users/rzwitserloot/repos","events_url":"https://api.github.com/users/rzwitserloot/events{/privacy}","received_events_url":"https://api.github.com/users/rzwitserloot/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-04-26T15:51:04Z","updated_at":"2021-04-28T17:30:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The source of [TypeReference.java](https://github.com/FasterXML/jackson-core/blob/master/src/main/java/com/fasterxml/jackson/core/type/TypeReference.java) refers in its javadoc to specifically this comment from [Neal Gafter's blogpost about Super TypeTokens](https://gafter.blogspot.com/2006/12/super-type-tokens.html):\r\n\r\n> Brian Oxley said...\r\n> Rather than check for a type parameter in the constructor, you can make it a syntax error to leave out:\r\n> \r\n> ```\r\n> public abstract TypeReference<R> implements Comparable<TypeReference<R>> {\r\n>   // ...\r\n>   \r\n>   public int compareTo(TypeReference<R> o) {\r\n>     // Need a real implementation.\r\n>     // Only saying \"return 0\" for illustration.\r\n>     return 0;\r\n>   }\r\n> }\r\n> ```\r\n>\r\n> Now this is legal:\r\n>\r\n> `new TypeReference<Object>() { };`\r\n>\r\n> But this is a syntax error for not implementing `Comparable`:\r\n>\r\n> `new TypeReference() { }`;\r\n>\r\n> _February 20, 2007 6:12 AM_\r\n\r\nThe problem is, __that comment is utter hogwash__ and it does absolutely nothing. And yet, jackson's TypeReference code copies this idea.\r\n\r\nTo reproduce, make a blank dir and save this to `Test.java`:\r\n```java\r\nimport java.lang.reflect.*;\r\n\r\nabstract class TypeReference<T> implements Comparable<TypeReference<T>> {\r\n  protected final Type _type;\r\n  protected TypeReference() {\r\n    Type superClass = getClass().getGenericSuperclass();\r\n    if (superClass instanceof Class<?>) { // sanity check, should never happen\r\n      throw new IllegalArgumentException(\"Internal error: TypeReference constructed without actual type information\");\r\n    }\r\n    _type = ((ParameterizedType) superClass).getActualTypeArguments()[0];\r\n  }\r\n\r\n  @Override public int compareTo(TypeReference<T> o) { return 0; }\r\n\r\n  public static void main(String[] args) {\r\n    TypeReference raw = new TypeReference() {};\r\n  }\r\n}\r\n```\r\n\r\n(That is the current TypeRef code, with a `main` that tests the theory that the Comparable 'trick' does anything useful).\r\n\r\nThen:\r\n\r\n```\r\njavac Test.java\r\n```\r\n\r\nand it just compiles. It shouldn't be compiling. (tried it on my system, with AdoptOpenJDK 14.0.1, and with OpenJDK8 as well. Perhaps this really did work in 6 or 7, but keeping this weirdness around for the sake of versions EOLed so long ago is perhaps not worthwhile).\r\n\r\nSUGGESTED FIX:\r\n\r\n* Adjust the javadoc by removing the commentary what Comparator is for and the reference to the comment, keeping the link to the STT blogpost, though.\r\n* Remove `implements Comparable<TypeReference<T>>`.\r\n* Remove the `compareTo` method implementation.\r\n* Change the text of the thrown exception; remove the `\"Internal error: \"` part. Probably mention that a raw TypeReference isn't how you're supposed to use it, so that the programmer who runs into this gets a hint about what they are doing wrong.\r\n* Remove the `// sanity check`  comment.\r\n\r\nAlternatively, first investigate ways to make this code fail at compile time (which is the original intent of this non-working 'hack'), but I don't think there's any way to make it happen without preprocessors annotation processor hackery.\r\n\r\nNB: I can provide a PR for this trivial change; the principal time effort is presumably to investigate if removing Comparable is going to cause backwards compatibility issues and if the Jackson dev team is willing to give up on the dream of compile-time-checking for an actual type vs. spending some time trying to find another inventive hack. I thought it best to kickstart discussion first.\r\n\r\nIMPACT ANALYSIS OF BUG: Light, it just confuses folks. If you try this stunt of making a 'raw' TypeReference, then you get no compiler error (even though one is intended). However, resolving the expression `new TypeReference() {}` still throws that 'Internal error' exception. Someone who does that by accident is presumably confused and would be helped out a little more with better exception text, but that's all.\r\n\r\nIMPACT ANALYSIS OF FIX: Well, anybody who decided to use a TypeReference as a Comparator for some bizarre reason is going to find that this is technically backwards incompatible, but presumably you'd be doing them a favour by breaking code that makes no sense at all. This 'fix' also means the notion that raw TypeReference STTs are turned into compiler errors no longer works (but then it never did, presumably).","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/697/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/697/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/695","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/695/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/695/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/695/events","html_url":"https://github.com/FasterXML/jackson-core/issues/695","id":852100273,"node_id":"MDU6SXNzdWU4NTIxMDAyNzM=","number":695,"title":"`java.lang.ClassNotFoundException`: `com.fasterxml.jackson.core.JsonFactory` caused by upgrading jackson-core","user":{"login":"aubrey-y","id":60039494,"node_id":"MDQ6VXNlcjYwMDM5NDk0","avatar_url":"https://avatars.githubusercontent.com/u/60039494?v=4","gravatar_id":"","url":"https://api.github.com/users/aubrey-y","html_url":"https://github.com/aubrey-y","followers_url":"https://api.github.com/users/aubrey-y/followers","following_url":"https://api.github.com/users/aubrey-y/following{/other_user}","gists_url":"https://api.github.com/users/aubrey-y/gists{/gist_id}","starred_url":"https://api.github.com/users/aubrey-y/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aubrey-y/subscriptions","organizations_url":"https://api.github.com/users/aubrey-y/orgs","repos_url":"https://api.github.com/users/aubrey-y/repos","events_url":"https://api.github.com/users/aubrey-y/events{/privacy}","received_events_url":"https://api.github.com/users/aubrey-y/received_events","type":"User","site_admin":false},"labels":[{"id":940632172,"node_id":"MDU6TGFiZWw5NDA2MzIxNzI=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"Needs a test case (unit test or such) to proceed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-04-07T07:25:31Z","updated_at":"2021-04-07T20:35:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### `Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.core.JsonFactory`\r\n```\r\nException in thread \"JavaFX Application Thread\" java.lang.RuntimeException: java.lang.reflect.InvocationTargetException\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$MethodHandler.invoke(FXMLLoader.java:1862)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$ControllerMethodEventHandler.handle(FXMLLoader.java:1729)\r\n\tat javafx.base/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86)\r\n\tat javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234)\r\n\tat javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)\r\n\tat javafx.base/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)\r\n\tat javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)\r\n\tat javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)\r\n\tat javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)\r\n\tat javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)\r\n\tat javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)\r\n\tat javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)\r\n\tat javafx.base/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)\r\n\tat javafx.base/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:49)\r\n\tat javafx.base/javafx.event.Event.fireEvent(Event.java:198)\r\n\tat javafx.graphics/javafx.scene.Node.fireEvent(Node.java:8886)\r\n\tat javafx.controls/javafx.scene.control.Button.fire(Button.java:203)\r\n\tat javafx.controls/com.sun.javafx.scene.control.behavior.ButtonBehavior.mouseReleased(ButtonBehavior.java:208)\r\n\tat javafx.controls/com.sun.javafx.scene.control.inputmap.InputMap.handle(InputMap.java:274)\r\n\tat javafx.base/com.sun.javafx.event.CompositeEventHandler$NormalEventHandlerRecord.handleBubblingEvent(CompositeEventHandler.java:247)\r\n\tat javafx.base/com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:80)\r\n\tat javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234)\r\n\tat javafx.base/com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191)\r\n\tat javafx.base/com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59)\r\n\tat javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58)\r\n\tat javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)\r\n\tat javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)\r\n\tat javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)\r\n\tat javafx.base/com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56)\r\n\tat javafx.base/com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114)\r\n\tat javafx.base/com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74)\r\n\tat javafx.base/com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54)\r\n\tat javafx.base/javafx.event.Event.fireEvent(Event.java:198)\r\n\tat javafx.graphics/javafx.scene.Scene$MouseHandler.process(Scene.java:3856)\r\n\tat javafx.graphics/javafx.scene.Scene.processMouseEvent(Scene.java:1851)\r\n\tat javafx.graphics/javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2584)\r\n\tat javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409)\r\n\tat javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299)\r\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:389)\r\n\tat javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447)\r\n\tat javafx.graphics/com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412)\r\n\tat javafx.graphics/com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446)\r\n\tat javafx.graphics/com.sun.glass.ui.View.handleMouseEvent(View.java:556)\r\n\tat javafx.graphics/com.sun.glass.ui.View.notifyMouse(View.java:942)\r\n\tat javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method)\r\n\tat javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174)\r\n\tat java.base/java.lang.Thread.run(Thread.java:835)\r\nCaused by: java.lang.reflect.InvocationTargetException\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n\tat com.sun.javafx.reflect.Trampoline.invoke(MethodUtil.java:76)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n\tat javafx.base/com.sun.javafx.reflect.MethodUtil.invoke(MethodUtil.java:273)\r\n\tat javafx.fxml/com.sun.javafx.fxml.MethodHelper.invoke(MethodHelper.java:83)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$MethodHandler.invoke(FXMLLoader.java:1859)\r\n\t... 46 more\r\nCaused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/JsonFactory\r\n\tat com.google.api.client.json.jackson2@1.38.0/com.google.api.client.json.jackson2.JacksonFactory.<init>(JacksonFactory.java:41)\r\n\tat com.google.api.client.json.jackson2@1.38.0/com.google.api.client.json.jackson2.JacksonFactory$InstanceHolder.<clinit>(JacksonFactory.java:62)\r\n\tat com.google.api.client.json.jackson2@1.38.0/com.google.api.client.json.jackson2.JacksonFactory.getDefaultInstance(JacksonFactory.java:57)\r\n\tat org.example/org.example.services.EmailService.<clinit>(EmailService.java:23)\r\n\tat org.example/org.example.controllers.OptionsController.<init>(OptionsController.java:51)\r\n\tat org.example/org.example.controllers.PrimaryController.lambda$switchToOptions$1(PrimaryController.java:52)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$ValueElement.processAttribute(FXMLLoader.java:940)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$InstanceDeclarationElement.processAttribute(FXMLLoader.java:982)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$Element.processStartElement(FXMLLoader.java:229)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader$ValueElement.processStartElement(FXMLLoader.java:754)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader.processStartElement(FXMLLoader.java:2808)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2634)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader.loadImpl(FXMLLoader.java:2548)\r\n\tat javafx.fxml/javafx.fxml.FXMLLoader.load(FXMLLoader.java:2517)\r\n\tat org.example/org.example.services.AppService.setRoot(AppService.java:50)\r\n\tat org.example/org.example.controllers.PrimaryController.switchToOptions(PrimaryController.java:55)\r\n\t... 57 more\r\nCaused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.core.JsonFactory\r\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:583)\r\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)\r\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)\r\n\t... 73 more\r\nApr 07, 2021 3:16:12 AM javafx.scene.CssStyleHelper calculateValue\r\nWARNING: Caught 'java.lang.ClassCastException: class java.lang.Double cannot be cast to class javafx.scene.paint.Paint (java.lang.Double is in module java.base of loader 'bootstrap'; javafx.scene.paint.Paint is in module javafx.graphics of loader 'app')' while converting value for '-fx-background-color' from inline style on Button@3039cd2[styleClass=button Pixeboy]''\r\nApr 07, 2021 3:16:12 AM javafx.scene.CssStyleHelper calculateValue\r\nWARNING: Caught 'java.lang.ClassCastException: class java.lang.Double cannot be cast to class javafx.scene.paint.Paint (java.lang.Double is in module java.base of loader 'bootstrap'; javafx.scene.paint.Paint is in module javafx.graphics of loader 'app')' while converting value for '-fx-background-color' from inline style on Button[id=closeButton, styleClass=button Pixeboy]''\r\n```\r\n\r\nThis occurs only after upgrading from\r\n\r\n```xml\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>2.1.3</version>\r\n        </dependency>\r\n```\r\nto\r\n```xml\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>2.12.2</version>\r\n        </dependency>\r\n```\r\n\r\nThis problem has been widely documented in the [googleapis](https://github.com/googleapis/google-api-java-client/issues/376) organization and the only solution has been to downgrade to `2.1.3`.\r\n\r\nHere is the class (`EmailService`) where this error is being raised (line commented):\r\n\r\n```java\r\npackage org.example.services;\r\n\r\nimport com.google.api.client.http.HttpTransport;\r\nimport com.google.api.services.gmail.Gmail;\r\n\r\nimport com.google.api.services.gmail.model.Message;\r\nimport com.google.api.client.auth.oauth2.Credential;\r\nimport com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\r\nimport com.google.api.client.json.jackson2.JacksonFactory;\r\nimport com.google.api.client.util.Base64;\r\nimport javax.mail.MessagingException;\r\nimport javax.mail.Session;\r\nimport javax.mail.internet.InternetAddress;\r\nimport javax.mail.internet.MimeMessage;\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.Properties;\r\n\r\npublic class EmailService {\r\n\r\n    private HttpTransport httpTransport;\r\n\r\n    private static final JacksonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance(); //error raising on this line\r\n    private static final String APPLICATION_NAME = \"Turbulent Souls\";\r\n\r\n    public EmailService(HttpTransport httpTransport) {\r\n        this.httpTransport = httpTransport;\r\n    }\r\n\r\n    public boolean sendEmail(String targetEmail, String code) throws MessagingException, IOException {\r\n        Gmail gmail = this.getGmail();\r\n        Message message = this.createMessageWithEmail(\r\n                this.createEmail(\r\n                        targetEmail,\r\n                        System.getenv(\"GOOGLE_EMAIL\"),\r\n                        \"Your Authentication Code\",\r\n                        \"Here is your authentication code: \" + code\r\n                                + \"\\n\\nIt is valid for the next 60 seconds.\"\r\n                                + \"\\n\\nIf you are not the intended recipient of this email,\"\r\n                                + \"please ignore this communication or report this incident\"\r\n                                + \"by replying to this email.\")\r\n        );\r\n        return this.sendMessage(gmail, System.getenv(\"GOOGLE_EMAIL\"), message);\r\n    }\r\n\r\n    private Gmail getGmail() {\r\n        Credential credential = new GoogleCredential.Builder()\r\n                .setTransport(this.httpTransport)\r\n                .setJsonFactory(JSON_FACTORY)\r\n                .setClientSecrets(\r\n                        System.getenv(\"GCP_CLIENT_ID\"),\r\n                        System.getenv(\"GCP_CLIENT_SECRET\"))\r\n                .build()\r\n                .setAccessToken(System.getenv(\"GCP_ACCESS_TOKEN\"))\r\n                .setRefreshToken(System.getenv(\"GCP_REFRESH_TOKEN\"));\r\n\r\n        return new Gmail.Builder(this.httpTransport, JSON_FACTORY, credential)\r\n                .setApplicationName(APPLICATION_NAME)\r\n                .build();\r\n    }\r\n\r\n    /**\r\n     * Create a MimeMessage using the parameters provided.\r\n     *\r\n     * @param to email address of the receiver\r\n     * @param from email address of the sender, the mailbox account\r\n     * @param subject subject of the email\r\n     * @param bodyText body text of the email\r\n     * @return the MimeMessage to be used to send email\r\n     * @throws MessagingException\r\n     */\r\n    public MimeMessage createEmail(String to,\r\n                                          String from,\r\n                                          String subject,\r\n                                          String bodyText)\r\n            throws MessagingException {\r\n        Session session = Session.getDefaultInstance(new Properties(), null);\r\n\r\n        MimeMessage email = new MimeMessage(session);\r\n\r\n        email.setFrom(new InternetAddress(from));\r\n        email.addRecipient(javax.mail.Message.RecipientType.TO,\r\n                new InternetAddress(to));\r\n        email.setSubject(subject);\r\n        email.setText(bodyText);\r\n        return email;\r\n    }\r\n\r\n    /**\r\n     * Create a message from an email.\r\n     *\r\n     * @param emailContent Email to be set to raw of message\r\n     * @return a message containing a base64url encoded email\r\n     * @throws IOException\r\n     * @throws MessagingException\r\n     */\r\n    public Message createMessageWithEmail(MimeMessage emailContent)\r\n            throws MessagingException, IOException {\r\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\r\n        emailContent.writeTo(buffer);\r\n        byte[] bytes = buffer.toByteArray();\r\n        String encodedEmail = Base64.encodeBase64URLSafeString(bytes);\r\n        Message message = new Message();\r\n        message.setRaw(encodedEmail);\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Send an email from the user's mailbox to its recipient.\r\n     *\r\n     * @param service Authorized Gmail API instance.\r\n     * @param userId User's email address. The special value \"me\"\r\n     * can be used to indicate the authenticated user.\r\n     * @param emailContent Email to be sent.\r\n     * @return whether or not message was sent\r\n     * @throws MessagingException\r\n     * @throws IOException\r\n     */\r\n    public boolean sendMessage(Gmail service,\r\n                                      String userId,\r\n                                      Message emailContent) throws IOException {\r\n        Message message = service.users().messages().send(userId, emailContent).execute();\r\n\r\n        System.out.println(\"Message id: \" + message.getId());\r\n        System.out.println(message.toPrettyString());\r\n        return message.getLabelIds().contains(\"SENT\");\r\n    }\r\n}\r\n```\r\n\r\nand I have also attached my pom.xml dependencies:\r\n\r\n```xml\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-controls</artifactId>\r\n            <version>15.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-media</artifactId>\r\n            <version>15.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-fxml</artifactId>\r\n            <version>15.0.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-api</artifactId>\r\n            <version>5.4.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-engine</artifactId>\r\n            <version>5.4.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.platform</groupId>\r\n            <artifactId>junit-platform-launcher</artifactId>\r\n            <version>1.4.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-core</artifactId>\r\n            <version>3.8.0</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.testfx</groupId>\r\n            <artifactId>testfx-junit5</artifactId>\r\n            <version>4.0.16-alpha</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.sun.mail</groupId>\r\n            <artifactId>javax.mail</artifactId>\r\n            <version>1.6.2</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>2.12.2</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.google.apis</groupId>\r\n            <artifactId>google-api-services-gmail</artifactId>\r\n            <version>v1-rev20210301-1.31.0</version>\r\n        </dependency>\r\n    </dependencies>\r\n```\r\n\r\nI'm not sure why upgrading causes this problem but I figured this was worth looking into, since this essentially renders jackson incompatible with [GCP documentation](https://developers.google.com/gmail/api/quickstart/java#step_2_set_up_the_sample).","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/695/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/686","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/686/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/686/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/686/events","html_url":"https://github.com/FasterXML/jackson-core/issues/686","id":836199765,"node_id":"MDU6SXNzdWU4MzYxOTk3NjU=","number":686,"title":"(3.0) Report / handle collision overflow of `ByteQuadsCanonicalizer` cleanly (OssFuzz)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-19T17:02:21Z","updated_at":"2021-03-21T00:06:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"(note: reported by oss-fuzz, as https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32216)\r\n\r\nSo: currently overflow in `ByteQuadsCanonicalizer` (as well as `CharsToNameCanonicalizer`) is reported as `IllegalStateException`, bubbling up to user. But it would make more sense to expose it as \"regular\" exception that Jackson uses. For Jackson 2.x that'd be one of:\r\n\r\n* `IOException` if considered part of low-level I/O problem\r\n* `JsonProcessingException` (for 3.x replaced by `JacksonException`)\r\n* `JsonParseException` (for 3.x replaced by `StreamReadException`)\r\n\r\nMy initial thinking is that `JsonProcessingException` would make most sense initially, since:\r\n\r\n1. This is not really I/O problem, but is due to content (assumed as likely DoS attempt)\r\n2. If and when we implement \"processing limits\" checks, there is probably benefit from adding new category for such exceptions, as subtype of `JsonProcessingException` (but not JsonParser/StreamReadException)\r\n\r\nOne tricky part, however, is that API does not allow throwing checked exceptions at this point.\r\nThis would not be a problem for 3.0 where `JacksonException` became unchecked, but is a challenge with 2.x\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/686/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/686/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/684","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/684/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/684/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/684/events","html_url":"https://github.com/FasterXML/jackson-core/issues/684","id":828123871,"node_id":"MDU6SXNzdWU4MjgxMjM4NzE=","number":684,"title":"Add \"JsonPointer#appendProperty\" and \"JsonPointer#appendIndex\"","user":{"login":"LouizFC","id":20371970,"node_id":"MDQ6VXNlcjIwMzcxOTcw","avatar_url":"https://avatars.githubusercontent.com/u/20371970?v=4","gravatar_id":"","url":"https://api.github.com/users/LouizFC","html_url":"https://github.com/LouizFC","followers_url":"https://api.github.com/users/LouizFC/followers","following_url":"https://api.github.com/users/LouizFC/following{/other_user}","gists_url":"https://api.github.com/users/LouizFC/gists{/gist_id}","starred_url":"https://api.github.com/users/LouizFC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LouizFC/subscriptions","organizations_url":"https://api.github.com/users/LouizFC/orgs","repos_url":"https://api.github.com/users/LouizFC/repos","events_url":"https://api.github.com/users/LouizFC/events{/privacy}","received_events_url":"https://api.github.com/users/LouizFC/received_events","type":"User","site_admin":false},"labels":[{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-10T17:58:04Z","updated_at":"2021-03-10T19:46:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When working heavily with JsonPointers, the following patterns usually emerges:\r\n\r\n```java\r\nJsonPointer root = JsonPointer.compile(\"/a/b\");\r\n/// ... code\r\nString property = \"c\"\r\nroot.append(JsonPointer.compile(\"/\" + property));\r\n/// or\r\nJsonPointer.compile(root + \"/\" + property)\r\n```\r\n\r\nThis is quite verbose, also a bit error prone, because it is easy to forget to add the `/` before each append.\r\n\r\nAlso, I found no easy way of appending slash characters without prior escaping.\r\n\r\nSo the two methods proposed should help with both convenience and some edge cases. The only thing that worries me is overusing/misusing this methods. Jackson JsonPointer is `head centric`, appending to the tail is expensive, so maybe documenting a warning should be good?\r\n\r\nI will open a PR when I get some free time. [I did a similar thing in the past](https://github.com/LouizFC/path-segment), so I think I can probably reuse the tests from there.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/684/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/684/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/681","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/681/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/681/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/681/events","html_url":"https://github.com/FasterXML/jackson-core/issues/681","id":816709724,"node_id":"MDU6SXNzdWU4MTY3MDk3MjQ=","number":681,"title":"Eliding sensitive data during deserialization","user":{"login":"pr0ton","id":131529,"node_id":"MDQ6VXNlcjEzMTUyOQ==","avatar_url":"https://avatars.githubusercontent.com/u/131529?v=4","gravatar_id":"","url":"https://api.github.com/users/pr0ton","html_url":"https://github.com/pr0ton","followers_url":"https://api.github.com/users/pr0ton/followers","following_url":"https://api.github.com/users/pr0ton/following{/other_user}","gists_url":"https://api.github.com/users/pr0ton/gists{/gist_id}","starred_url":"https://api.github.com/users/pr0ton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pr0ton/subscriptions","organizations_url":"https://api.github.com/users/pr0ton/orgs","repos_url":"https://api.github.com/users/pr0ton/repos","events_url":"https://api.github.com/users/pr0ton/events{/privacy}","received_events_url":"https://api.github.com/users/pr0ton/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-25T17:22:33Z","updated_at":"2021-02-25T19:01:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Use case**\r\nWhen we deserialize payloads that contain sensitive information, on failure the exception can contain the entire payload. This gets logged to our logging system and includes sensitive info and PII. \r\n\r\n**Describe the solution you'd like**\r\n* Control over encrypting or eliding sensitive payloads\r\n\r\n**Describe alternatives you've considered**\r\n* Catching all exceptions at every source and transforming exceptions to remove sensitive information\r\n\r\n**Additional context**\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/681/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/679","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/679/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/679/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/679/events","html_url":"https://github.com/FasterXML/jackson-core/issues/679","id":802570493,"node_id":"MDU6SXNzdWU4MDI1NzA0OTM=","number":679,"title":"Number parsing should fail for trailing dot (period)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"},{"id":2732726843,"node_id":"MDU6TGFiZWwyNzMyNzI2ODQz","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/has-failing-test","name":"has-failing-test","color":"4e8a16","default":false,"description":"Indicates that there exists a test case (under `failing/`) to reproduce the issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-06T01:07:43Z","updated_at":"2021-10-04T06:35:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Looks like content such as:\r\n\r\n```\r\n[ 100.300.30 ]\r\n```\r\n\r\ndoes pass and report number token `100.300`, only failing when trying to access to the following token.\r\nThis should be caught earlier.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/679/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/679/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/668","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/668/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/668/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/668/events","html_url":"https://github.com/FasterXML/jackson-core/issues/668","id":792607499,"node_id":"MDU6SXNzdWU3OTI2MDc0OTk=","number":668,"title":"Add `JacksonException.Reference` (demote from `JsonMappingException`)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-01-23T17:08:34Z","updated_at":"2021-01-23T17:08:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In order to add better (optional) logical location information for all Jackson, it is necessary to move `Reference` helper type down from `jackson-databind` into `jackson-core`. While it could be added as a main-level class, it probably makes more sense as a static inner class for `JacksonException`, the new uber-base class for exceptions.\r\n\r\nIt will then also make sense to move related functionality down the inheritance chain.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/668/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/649","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/649/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/649/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/649/events","html_url":"https://github.com/FasterXML/jackson-core/issues/649","id":738173845,"node_id":"MDU6SXNzdWU3MzgxNzM4NDU=","number":649,"title":"Bug in FilteringParserDelegate","user":{"login":"jhaber","id":611459,"node_id":"MDQ6VXNlcjYxMTQ1OQ==","avatar_url":"https://avatars.githubusercontent.com/u/611459?v=4","gravatar_id":"","url":"https://api.github.com/users/jhaber","html_url":"https://github.com/jhaber","followers_url":"https://api.github.com/users/jhaber/followers","following_url":"https://api.github.com/users/jhaber/following{/other_user}","gists_url":"https://api.github.com/users/jhaber/gists{/gist_id}","starred_url":"https://api.github.com/users/jhaber/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhaber/subscriptions","organizations_url":"https://api.github.com/users/jhaber/orgs","repos_url":"https://api.github.com/users/jhaber/repos","events_url":"https://api.github.com/users/jhaber/events{/privacy}","received_events_url":"https://api.github.com/users/jhaber/received_events","type":"User","site_admin":false},"labels":[{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-11-07T05:05:47Z","updated_at":"2020-11-14T22:14:38Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"There seems to be a bug in `FilteringParserDelegate` that specifically manifests when trying to filter out arrays. Here's a test that reproduces the behavior (can be added to `BasicParserFilteringTest`):\r\n```java\r\n    public void testExcludeArrays() throws Exception\r\n    {\r\n        class NoArraysFilter extends TokenFilter\r\n        {\r\n            @Override\r\n            public TokenFilter filterStartArray() {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        String jsonString = aposToQuotes(\"{'a':123,'array':[1,2]}\");\r\n        JsonParser p0 = JSON_F.createParser(jsonString);\r\n        FilteringParserDelegate p = new FilteringParserDelegate(p0,\r\n            new NoArraysFilter(),\r\n            true, // includePath\r\n            true // multipleMatches\r\n        );\r\n        String result = readAndWrite(JSON_F, p);\r\n        assertEquals(aposToQuotes(\"{'a':123}\"), result);\r\n        assertEquals(1, p.getMatchCount());\r\n    }\r\n```\r\n\r\nThis test fails with:\r\n```\r\njunit.framework.ComparisonFailure: \r\nExpected :{\"a\":123}\r\nActual   :{\"a\"}\r\n```\r\n\r\nI discovered this bug while adding test coverage for #573. However, I confirmed that the bug exists in jackson-core versions 2.8.9, 2.9.10, 2.10.5, and 2.11.3 (and therefore wasn't introduced in #573).\r\n\r\nNo one has complained yet, and a quick GitHub search suggests there isn't much code in the wild (if any) doing `filterStartArray() { return null; }` so I don't think it's a high priority to fix this. I mainly just wanted to log this issue so that I can link to it (above the commented out unit test)","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/649/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/649/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/637","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/637/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/637/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/637/events","html_url":"https://github.com/FasterXML/jackson-core/issues/637","id":684106631,"node_id":"MDU6SXNzdWU2ODQxMDY2MzE=","number":637,"title":"Add configurable \"document/processing limits\" for JSON parser","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":1209645968,"node_id":"MDU6TGFiZWwxMjA5NjQ1OTY4","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/performance","name":"performance","color":"e878db","default":false,"description":"Issue related to performance problems or enhancements"},{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-23T03:20:19Z","updated_at":"2020-08-23T03:21:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"(note: related to/inspired by https://github.com/FasterXML/jackson-databind/issues/2816)\r\n\r\nSome aspects of input document are prone to possible abuse, so that malicious sender can create specifically crafted documents to try to overload server. This includes things like:\r\n\r\n1. Ridiculously deeply nested documents (it only takes 2 characters to create Array context so 8k document can have 4000 levels of nesting)\r\n2. Very long names: Jackson's name decoding is optimized for short names and while it can handle any length (within bounds of total memory available) performance characteristics are not great beyond, say, couple of thousands of characters\r\n3. Very long numbers: textual length of tens of thousands of numbers might be problematic for some uses\r\n4. (possibly?) Huge number of properties per JSON Object -- for some use cases construction of data structures with tens or hundreds of thousands of distinct keys can be problematic\r\n5. (possibly?) Extra long text segments (megabytes of content) can similarly become problematic -- this could also result from broken encoding (missing closing quote)\r\n\r\nand although streaming parser can typically handle many of these cases quite well, they can be very problematic for higher-level processing -- and even for streaming, for highly parallel processing.\r\n\r\nSo. It would be good to create a configurable set of options that:\r\n\r\n1. Default to same safe set of limits for likely problematic cases (like limit nesting to what is known to typically fit in wrt stack frames; limit maximum property names)\r\n2. Leave more speculative limits (text length) to unlimited (or very high)\r\n3. Offer a simple way to configure limits (possibly only per `JsonFactory`, although it'd be really nice if per-parser overrides were possible)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/637/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/637/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/633","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/633/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/633/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/633/events","html_url":"https://github.com/FasterXML/jackson-core/issues/633","id":666910837,"node_id":"MDU6SXNzdWU2NjY5MTA4Mzc=","number":633,"title":"Skip RS CTRL-CHAR to support JSON Text Sequences","user":{"login":"quaff","id":143040,"node_id":"MDQ6VXNlcjE0MzA0MA==","avatar_url":"https://avatars.githubusercontent.com/u/143040?v=4","gravatar_id":"","url":"https://api.github.com/users/quaff","html_url":"https://github.com/quaff","followers_url":"https://api.github.com/users/quaff/followers","following_url":"https://api.github.com/users/quaff/following{/other_user}","gists_url":"https://api.github.com/users/quaff/gists{/gist_id}","starred_url":"https://api.github.com/users/quaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/quaff/subscriptions","organizations_url":"https://api.github.com/users/quaff/orgs","repos_url":"https://api.github.com/users/quaff/repos","events_url":"https://api.github.com/users/quaff/events{/privacy}","received_events_url":"https://api.github.com/users/quaff/received_events","type":"User","site_admin":false},"labels":[{"id":2383639715,"node_id":"MDU6TGFiZWwyMzgzNjM5NzE1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/hacktoberfest","name":"hacktoberfest","color":"e580aa","default":false,"description":"Issue related to Hactoberfest2020 activities, eligible for additional rewards"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-07-28T09:12:59Z","updated_at":"2020-10-27T04:02:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently jackson supports reading newline-delimited json such as [JSON Lines](http://jsonlines.org/) and [NDJSON](https://github.com/ndjson/ndjson-spec), see https://github.com/FasterXML/jackson-databind/issues/1304.\r\nThere is a proposed standard RFC7464 call [JSON Text Sequences](https://tools.ietf.org/html/rfc7464), it's similar to newline-delimited json by add a leading RS CTRL-CHAR which is not accepted by jackson.\r\n```\r\ncom.fasterxml.jackson.core.JsonParseException: Illegal character ((CTRL-CHAR, code 30)): only regular white space (\\r, \\n, \\t) is allowed between tokens\r\n at [Source: (String)\"\u001e{\"name\":\"name1\"}\r\n\u001e{\"name\":\"name2\"}\r\n\"; line: 1, column: 2]\r\n\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1851)\r\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:707)\r\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(ParserMinimalBase.java:685)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd(ReaderBasedJsonParser.java:2397)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:672)\r\n\tat com.fasterxml.jackson.databind.ObjectReader.readValues(ObjectReader.java:1898)\r\n```\r\nIt would be nice if jackson simply treat RS as \"\\t\" be default or `JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS` enabled.\r\nhere is test case:\r\n```java\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.MappingIterator;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class JSONTextSequencesTest {\r\n\r\n\t@Test\r\n\tpublic void test() throws Exception {\r\n\t\tString json = \"\\u001E{\\\"name\\\":\\\"name1\\\"}\\n\\u001E{\\\"name\\\":\\\"name2\\\"}\\n\";\r\n\t\tObjectMapper om = new ObjectMapper();\r\n\t\tMappingIterator<JsonNode> it = om.readerFor(JsonNode.class).readValues(json);\r\n\t\tList<String> names = new ArrayList<>();\r\n\t\twhile (it.hasNext())\r\n\t\t\tnames.add(it.next().get(\"name\").asText());\r\n\t\tassertEquals(2, names.size());\r\n\t\tassertEquals(\"name1\", names.get(0));\r\n\t\tassertEquals(\"name2\", names.get(1));\r\n\t}\r\n\r\n}\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/633/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/612","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/612/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/612/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/612/events","html_url":"https://github.com/FasterXML/jackson-core/issues/612","id":600887948,"node_id":"MDU6SXNzdWU2MDA4ODc5NDg=","number":612,"title":"New JsonReadFeature: JSON5 compatible multi-line String values","user":{"login":"literakl","id":6383287,"node_id":"MDQ6VXNlcjYzODMyODc=","avatar_url":"https://avatars.githubusercontent.com/u/6383287?v=4","gravatar_id":"","url":"https://api.github.com/users/literakl","html_url":"https://github.com/literakl","followers_url":"https://api.github.com/users/literakl/followers","following_url":"https://api.github.com/users/literakl/following{/other_user}","gists_url":"https://api.github.com/users/literakl/gists{/gist_id}","starred_url":"https://api.github.com/users/literakl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/literakl/subscriptions","organizations_url":"https://api.github.com/users/literakl/orgs","repos_url":"https://api.github.com/users/literakl/repos","events_url":"https://api.github.com/users/literakl/events{/privacy}","received_events_url":"https://api.github.com/users/literakl/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-04-16T09:28:49Z","updated_at":"2021-05-08T11:28:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I read the [JsonParser features](https://github.com/FasterXML/jackson-core/wiki/JsonParser-Features) and it is great that there are relaxed features available. I was reading [JSON5](https://json5.org/) and [HJSON ](https://hjson.github.io/) and they have some interesting features.\r\n\r\nFull support for JSON5 would be great. I especially miss:\r\n\r\nMultiline strings:\r\n\r\n```\r\nlineBreaks: \"Look, Mom! \\\r\nNo \\\\n's!\",\r\n```\r\n\r\nTrailing comma:\r\n\r\n{\r\n \"field\": 1,\r\n}\r\n\r\nIt would be great if you could consider an addition of these features. I have not found such request between issues. Thank you","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/612/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/612/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/601","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/601/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/601/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/601/events","html_url":"https://github.com/FasterXML/jackson-core/issues/601","id":568624837,"node_id":"MDU6SXNzdWU1Njg2MjQ4Mzc=","number":601,"title":"JsonParser.getCurrentLocation is not updated for `DataInput` input","user":{"login":"fabienrenaud","id":3112233,"node_id":"MDQ6VXNlcjMxMTIyMzM=","avatar_url":"https://avatars.githubusercontent.com/u/3112233?v=4","gravatar_id":"","url":"https://api.github.com/users/fabienrenaud","html_url":"https://github.com/fabienrenaud","followers_url":"https://api.github.com/users/fabienrenaud/followers","following_url":"https://api.github.com/users/fabienrenaud/following{/other_user}","gists_url":"https://api.github.com/users/fabienrenaud/gists{/gist_id}","starred_url":"https://api.github.com/users/fabienrenaud/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabienrenaud/subscriptions","organizations_url":"https://api.github.com/users/fabienrenaud/orgs","repos_url":"https://api.github.com/users/fabienrenaud/repos","events_url":"https://api.github.com/users/fabienrenaud/events{/privacy}","received_events_url":"https://api.github.com/users/fabienrenaud/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-02-20T22:53:45Z","updated_at":"2020-02-21T00:27:43Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Issue\r\n\r\nUsing  a `JsonParser` instantiated via `JsonParser.createParser(DataInput)` does not update `JsonLocation` values returned by `JsonParser.getCurrentLocation`  (everything defaults to -1).\r\n\r\nSwitching to `JsonParser.createParser(InputStream)` with the same input object populates the `JsonLocation` data as expected.\r\n\r\n### Use case\r\n\r\nI use `JsonParser` to manually extract slices of Netty byte buffers (that contain Json). To feed Netty ByteBufs to JsonParser, I have to wrap the `ByteBuf` in a `ByteBufInputStream` which `extends InputStream` and `implements DataInput`. `JsonParser` accepts both types so explicit casting is required.\r\n\r\n * This works and populates `JsonLocation` values:\r\n```\r\nByteBuf buf = ...;\r\nJsonParser parser = JSON_FACTORY.createParser((InputStream) new ByteBufInputStream(buf));\r\n```\r\n * This does not populate `JsonLocation` values:\r\n```\r\nByteBuf buf = ...;\r\nJsonParser parser = JSON_FACTORY.createParser((DataInput) new ByteBufInputStream(buf));\r\n```\r\n\r\n\r\nIssue affects at least versions 2.9.8 and 2.10.2.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/601/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/596","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/596/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/596/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/596/events","html_url":"https://github.com/FasterXML/jackson-core/issues/596","id":560748625,"node_id":"MDU6SXNzdWU1NjA3NDg2MjU=","number":596,"title":"Can't tell non-blocking parser what charset to use for decoding input","user":{"login":"mizosoft","id":30330664,"node_id":"MDQ6VXNlcjMwMzMwNjY0","avatar_url":"https://avatars.githubusercontent.com/u/30330664?v=4","gravatar_id":"","url":"https://api.github.com/users/mizosoft","html_url":"https://github.com/mizosoft","followers_url":"https://api.github.com/users/mizosoft/followers","following_url":"https://api.github.com/users/mizosoft/following{/other_user}","gists_url":"https://api.github.com/users/mizosoft/gists{/gist_id}","starred_url":"https://api.github.com/users/mizosoft/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mizosoft/subscriptions","organizations_url":"https://api.github.com/users/mizosoft/orgs","repos_url":"https://api.github.com/users/mizosoft/repos","events_url":"https://api.github.com/users/mizosoft/events{/privacy}","received_events_url":"https://api.github.com/users/mizosoft/received_events","type":"User","site_admin":false},"labels":[{"id":1831575765,"node_id":"MDU6TGFiZWwxODMxNTc1NzY1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/documentation","name":"documentation","color":"a0d330","default":true,"description":"Issue that documentation improvements could solve or alleviate"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-02-06T03:01:08Z","updated_at":"2020-02-07T17:54:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm using Jackson's non-blocking parser to implement a `BodySubscriber` for use with Java's non-blocking HTTP client. The parser is created by `JsonFactory#createNonBlockingByteArrayParser()` using the factory instance associated with the `ObjectMapper` . It's working like a charm, but it seems that it uses `UTF-8` by default and there is no way of telling it other encodings to use (such as the encoding specified by the response headers other than `UTF-8`).\r\n\r\nI figured it might auto-detect the response body's encoding like it's the case with other parsers, but it turned out that it assumes all input is `UTF-8`. For example, this snippet would crash:\r\n```java\r\n    ObjectMapper mapper = new JsonMapper();\r\n    byte[] jsonBytes = \"{\\\"Psst!\\\": \\\"I'm not UTF-8\\\"}\".getBytes(StandardCharsets.UTF_16);\r\n    JsonParser asyncParser = mapper.getFactory().createNonBlockingByteArrayParser();\r\n    ByteArrayFeeder feeder = ((ByteArrayFeeder) asyncParser.getNonBlockingInputFeeder());\r\n    feeder.feedInput(jsonBytes, 0, jsonBytes.length);\r\n    feeder.endOfInput();\r\n    Map<String, String> map = mapper.readValue(asyncParser, new TypeReference<>() {});\r\n    System.out.println(map);\r\n```\r\nIt works fine if the JSON string is encoded with `UTF-8`.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/596/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/584","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/584/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/584/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/584/events","html_url":"https://github.com/FasterXML/jackson-core/issues/584","id":539191147,"node_id":"MDU6SXNzdWU1MzkxOTExNDc=","number":584,"title":"JsonGenerator#writeTypePrefix writes an id \"null\" and cannot be set up to skip the id completely","user":{"login":"jonfreedman","id":1092134,"node_id":"MDQ6VXNlcjEwOTIxMzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1092134?v=4","gravatar_id":"","url":"https://api.github.com/users/jonfreedman","html_url":"https://github.com/jonfreedman","followers_url":"https://api.github.com/users/jonfreedman/followers","following_url":"https://api.github.com/users/jonfreedman/following{/other_user}","gists_url":"https://api.github.com/users/jonfreedman/gists{/gist_id}","starred_url":"https://api.github.com/users/jonfreedman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonfreedman/subscriptions","organizations_url":"https://api.github.com/users/jonfreedman/orgs","repos_url":"https://api.github.com/users/jonfreedman/repos","events_url":"https://api.github.com/users/jonfreedman/events{/privacy}","received_events_url":"https://api.github.com/users/jonfreedman/received_events","type":"User","site_admin":false},"labels":[{"id":1606361670,"node_id":"MDU6TGFiZWwxNjA2MzYxNjcw","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/good%20first%20issue","name":"good first issue","color":"b3ff6d","default":true,"description":"Issue that seems easy to resolve and is likely a good candidate for contributors new to project"},{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-12-17T16:54:14Z","updated_at":"2021-03-10T19:47:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a `TypeIdResolver` implementation which works around generic type erasure to allow marshaling/unmarshaling of a parameterized type.  This works fine when the underlying parameterized type maps directly onto a JSON type e.g. `java.lang.Double` but when it's a type that needs to be converted to a JSON string e.g. `java.time.LocalDate` then my `TypeIdResolver` is asked for a type and I can either return the String \"java.time.LocalDate\" or a null value.\r\n\r\nIf I return a null then `TypeSerializerBase#handleMissingId` currently does nothing as per https://github.com/FasterXML/jackson-databind/issues/633 but it looks like the control of how to write the typeId is now handed off to `JsonGenerator#writeTypePrefix` @ https://github.com/FasterXML/jackson-core/blob/master/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java#L1061\r\n\r\nIt would be great if writeTypePrefix  did nothign if `typeIdDef.id` is null - I don't want to monkey-patch this unless it's going to make it into master...","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/584/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/584/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/577","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/577/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/577/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/577/events","html_url":"https://github.com/FasterXML/jackson-core/issues/577","id":518139683,"node_id":"MDU6SXNzdWU1MTgxMzk2ODM=","number":577,"title":"Consider number-decoding improvements from jsoniter or Lemire's \"fast double parser\" (esp. for `double`/`float`, `BigInteger`)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":1209645968,"node_id":"MDU6TGFiZWwxMjA5NjQ1OTY4","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/performance","name":"performance","color":"e878db","default":false,"description":"Issue related to performance problems or enhancements"},{"id":1606361670,"node_id":"MDU6TGFiZWwxNjA2MzYxNjcw","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/good%20first%20issue","name":"good first issue","color":"b3ff6d","default":true,"description":"Issue that seems easy to resolve and is likely a good candidate for contributors new to project"}],"state":"open","locked":false,"assignee":{"login":"abc12345678912345","id":29579256,"node_id":"MDQ6VXNlcjI5NTc5MjU2","avatar_url":"https://avatars.githubusercontent.com/u/29579256?v=4","gravatar_id":"","url":"https://api.github.com/users/abc12345678912345","html_url":"https://github.com/abc12345678912345","followers_url":"https://api.github.com/users/abc12345678912345/followers","following_url":"https://api.github.com/users/abc12345678912345/following{/other_user}","gists_url":"https://api.github.com/users/abc12345678912345/gists{/gist_id}","starred_url":"https://api.github.com/users/abc12345678912345/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abc12345678912345/subscriptions","organizations_url":"https://api.github.com/users/abc12345678912345/orgs","repos_url":"https://api.github.com/users/abc12345678912345/repos","events_url":"https://api.github.com/users/abc12345678912345/events{/privacy}","received_events_url":"https://api.github.com/users/abc12345678912345/received_events","type":"User","site_admin":false},"assignees":[{"login":"abc12345678912345","id":29579256,"node_id":"MDQ6VXNlcjI5NTc5MjU2","avatar_url":"https://avatars.githubusercontent.com/u/29579256?v=4","gravatar_id":"","url":"https://api.github.com/users/abc12345678912345","html_url":"https://github.com/abc12345678912345","followers_url":"https://api.github.com/users/abc12345678912345/followers","following_url":"https://api.github.com/users/abc12345678912345/following{/other_user}","gists_url":"https://api.github.com/users/abc12345678912345/gists{/gist_id}","starred_url":"https://api.github.com/users/abc12345678912345/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abc12345678912345/subscriptions","organizations_url":"https://api.github.com/users/abc12345678912345/orgs","repos_url":"https://api.github.com/users/abc12345678912345/repos","events_url":"https://api.github.com/users/abc12345678912345/events{/privacy}","received_events_url":"https://api.github.com/users/abc12345678912345/received_events","type":"User","site_admin":false}],"milestone":null,"comments":10,"created_at":"2019-11-06T00:03:07Z","updated_at":"2021-09-07T19:52:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Jsoniter project (https://github.com/plokhotnyuk/jsoniter-scala) has many impressive performance optimizations; linked f.ex from here:\r\n\r\nhttps://www.reddit.com/r/java/comments/darehu/jackson_release_210/f1ysf1e/\r\n\r\nOf ones included, number-parsing would be relevant for this repo.\r\n\r\nEDIT: also see (from the comment below)\r\n\r\n\"Unrelated to jsoniter but this recent port of Lemire's Double parser:\r\n\r\nhttps://github.com/wrandelshofer/FastDoubleParser\r\n\r\nand the original paper https://arxiv.org/abs/2101.11408 also relevant\"\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/577/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/577/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/535","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/535/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/535/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/535/events","html_url":"https://github.com/FasterXML/jackson-core/issues/535","id":436514971,"node_id":"MDU6SXNzdWU0MzY1MTQ5NzE=","number":535,"title":"Poor support for UTF-8 without CANONICALIZE_FIELD_NAMES and non UTF-8 encoded byte payloads","user":{"login":"fabienrenaud","id":3112233,"node_id":"MDQ6VXNlcjMxMTIyMzM=","avatar_url":"https://avatars.githubusercontent.com/u/3112233?v=4","gravatar_id":"","url":"https://api.github.com/users/fabienrenaud","html_url":"https://github.com/fabienrenaud","followers_url":"https://api.github.com/users/fabienrenaud/followers","following_url":"https://api.github.com/users/fabienrenaud/following{/other_user}","gists_url":"https://api.github.com/users/fabienrenaud/gists{/gist_id}","starred_url":"https://api.github.com/users/fabienrenaud/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabienrenaud/subscriptions","organizations_url":"https://api.github.com/users/fabienrenaud/orgs","repos_url":"https://api.github.com/users/fabienrenaud/repos","events_url":"https://api.github.com/users/fabienrenaud/events{/privacy}","received_events_url":"https://api.github.com/users/fabienrenaud/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-04-24T06:17:35Z","updated_at":"2020-03-08T02:05:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"In [ByteSourceJsonBootstrapper#L247](https://github.com/FasterXML/jackson-core/blob/master/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java#L247):\r\n```\r\n    public JsonParser constructParser(ObjectReadContext readCtxt,\r\n            int streamReadFeatures, int formatReadFeatures,\r\n            ByteQuadsCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols,\r\n            int factoryFeatures) throws IOException\r\n    {\r\n        JsonEncoding enc = detectEncoding();\r\n\r\n        if (enc == JsonEncoding.UTF8) {\r\n            /* and without canonicalization, byte-based approach is not performant; just use std UTF-8 reader\r\n             * (which is ok for larger input; not so hot for smaller; but this is not a common case)\r\n             */\r\n            if (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(factoryFeatures)) {\r\n                ByteQuadsCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);\r\n                return new UTF8StreamJsonParser(readCtxt, _context,\r\n                        streamReadFeatures, formatReadFeatures, _in, can,\r\n                        _inputBuffer, _inputPtr, _inputEnd, _bufferRecyclable);\r\n            }\r\n        }\r\n        return new ReaderBasedJsonParser(readCtxt, _context, streamReadFeatures, formatReadFeatures,\r\n                constructReader(),\r\n                rootCharSymbols.makeChild(factoryFeatures));\r\n    }\r\n```\r\nThe `if` block is clearly an optimization and skipped when the `CANONICALIZE_FIELD_NAMES` feature is disabled.\r\n\r\nThis means existing tests should pass when this block is skipped. However, commenting said block causes 9 test failures (7 seem legit):\r\n```\r\n> mvn test\r\n...\r\n[INFO] Results:\r\n[INFO]\r\n[ERROR] Failures:\r\n[ERROR]   LocationInArrayTest.testOffsetInArraysBytes:12->_testOffsetInArrays:29->_assertLocation:61 expected:<2> but was:<-1>\r\n[ERROR]   LocationInObjectTest.testOffsetWithObjectFieldsUsingUTF8:18 expected:<1> but was:<-1>\r\n[ERROR]   LocationOffsetsTest.testOffsetWithInputOffset:68 expected:<0> but was:<-1>\r\n[ERROR]   LocationOffsetsTest.testSimpleInitialOffsets:41 expected:<0> but was:<-1>\r\n[ERROR]   TestArrayParsing.testInvalidExtraComma:70->BaseTest.verifyException:481 Expected an exception with one of substrings ([expected a value]): got one with message \"Unexpected character (']' (code 93)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')\r\n at [Source: (ByteArrayInputStream); line: 1, column: 8]\"\r\n[ERROR]   TestParserClosing.testReleaseContentBytes:110 expected:<6> but was:<-1>\r\n[ERROR]   JsonParserTest.testUtf8BOMHandling:443 expected:<0> but was:<-1>\r\n[ERROR]   SymbolTableMergingTest.testByteSymbolsWithClose:33->_testWithClose:87->_getParser:106 expected:<class com.fasterxml.jackson.core.json.UTF8StreamJsonParser> but was:<class com.fasterxml.jackson.core.json.ReaderBasedJsonParser>\r\n[ERROR]   SymbolTableMergingTest.testByteSymbolsWithEOF:39->_getParser:106 expected:<class com.fasterxml.jackson.core.json.UTF8StreamJsonParser> but was:<class com.fasterxml.jackson.core.json.ReaderBasedJsonParser>\r\n[ERROR] Errors:\r\n[ERROR]   JsonParserTest.testBytesAsSource:418 » JsonParse Illegal character ((CTRL-CHAR...\r\n[ERROR]   TestSymbolTables.testByteBasedSymbolTable:149->_findSymbols:178 ClassCast com....\r\n[INFO]\r\n[ERROR] Tests run: 870, Failures: 9, Errors: 2, Skipped: 0\r\n```\r\n\r\nOr, rather than removing the entire block, the `JsonFactory` in test classes such as `LocationOffsetsTest`, `BaseTest` etc. can be altered to disable the `canonicalize_field_names` feature:\r\n```\r\n    final JsonFactory JSON_F = new JsonFactory(new JsonFactoryBuilder()\r\n        .disable(TokenStreamFactory.Feature.CANONICALIZE_FIELD_NAMES));\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/535/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/535/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/515","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/515/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/515/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/515/events","html_url":"https://github.com/FasterXML/jackson-core/issues/515","id":408545251,"node_id":"MDU6SXNzdWU0MDg1NDUyNTE=","number":515,"title":"Use JDK Base64 to Replace Base64Variant","user":{"login":"belugabehr","id":12578579,"node_id":"MDQ6VXNlcjEyNTc4NTc5","avatar_url":"https://avatars.githubusercontent.com/u/12578579?v=4","gravatar_id":"","url":"https://api.github.com/users/belugabehr","html_url":"https://github.com/belugabehr","followers_url":"https://api.github.com/users/belugabehr/followers","following_url":"https://api.github.com/users/belugabehr/following{/other_user}","gists_url":"https://api.github.com/users/belugabehr/gists{/gist_id}","starred_url":"https://api.github.com/users/belugabehr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/belugabehr/subscriptions","organizations_url":"https://api.github.com/users/belugabehr/orgs","repos_url":"https://api.github.com/users/belugabehr/repos","events_url":"https://api.github.com/users/belugabehr/events{/privacy}","received_events_url":"https://api.github.com/users/belugabehr/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2019-02-10T15:20:20Z","updated_at":"2020-05-19T19:30:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/515/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/515/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/514","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/514/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/514/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/514/events","html_url":"https://github.com/FasterXML/jackson-core/issues/514","id":403441221,"node_id":"MDU6SXNzdWU0MDM0NDEyMjE=","number":514,"title":"Use Ryu for Float/Double to String conversions","user":{"login":"re-thc","id":38070640,"node_id":"MDQ6VXNlcjM4MDcwNjQw","avatar_url":"https://avatars.githubusercontent.com/u/38070640?v=4","gravatar_id":"","url":"https://api.github.com/users/re-thc","html_url":"https://github.com/re-thc","followers_url":"https://api.github.com/users/re-thc/followers","following_url":"https://api.github.com/users/re-thc/following{/other_user}","gists_url":"https://api.github.com/users/re-thc/gists{/gist_id}","starred_url":"https://api.github.com/users/re-thc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/re-thc/subscriptions","organizations_url":"https://api.github.com/users/re-thc/orgs","repos_url":"https://api.github.com/users/re-thc/repos","events_url":"https://api.github.com/users/re-thc/events{/privacy}","received_events_url":"https://api.github.com/users/re-thc/received_events","type":"User","site_admin":false},"labels":[{"id":1209645968,"node_id":"MDU6TGFiZWwxMjA5NjQ1OTY4","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/performance","name":"performance","color":"e878db","default":false,"description":"Issue related to performance problems or enhancements"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-01-26T13:21:07Z","updated_at":"2021-03-11T08:57:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, see https://github.com/ulfjack/ryu and the paper / benchmarks / information. Might help a lot in JSON output from Float / Double.\r\n\r\nCheers!","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/514/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/514/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/507","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/507/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/507/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/507/events","html_url":"https://github.com/FasterXML/jackson-core/issues/507","id":399188927,"node_id":"MDU6SXNzdWUzOTkxODg5Mjc=","number":507,"title":"Include forward slash ('/') as character to escape by default in String values","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null},{"id":940315930,"node_id":"MDU6TGFiZWw5NDAzMTU5MzA=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/active","name":"active","color":"fbca04","default":false,"description":"Issue is being (or will shortly be) actively worked on"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-01-15T04:59:31Z","updated_at":"2019-01-15T04:59:36Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Jackson 2.x only escapes minimum set of characters, as defined by JSON specification. This does not include forward slash character ('/'). But while legal, it turns out that more often than not users do want escaping, to guard against potential inclusion-in-HTML problems, particularly for embedded JSON constants in Javascript sources, in script tags.\r\n\r\nNow: although it is possible to enable escaping already (via `CharacterEscapes`), it is bit verbose, and also adds some measurable (not huge, but not completely trivial) overhead.\r\nSo for 3.0 let's add this character as escape-by-default, but also add a simple mechanism for turning that off if feasible (`JsonWriteFeature`, most likely?).\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/507/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/507/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/505","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/505/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/505/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/505/events","html_url":"https://github.com/FasterXML/jackson-core/issues/505","id":391448495,"node_id":"MDU6SXNzdWUzOTE0NDg0OTU=","number":505,"title":"It is intrusive and aggressive to close not owned input/output stream by default","user":{"login":"kezhuw","id":541734,"node_id":"MDQ6VXNlcjU0MTczNA==","avatar_url":"https://avatars.githubusercontent.com/u/541734?v=4","gravatar_id":"","url":"https://api.github.com/users/kezhuw","html_url":"https://github.com/kezhuw","followers_url":"https://api.github.com/users/kezhuw/followers","following_url":"https://api.github.com/users/kezhuw/following{/other_user}","gists_url":"https://api.github.com/users/kezhuw/gists{/gist_id}","starred_url":"https://api.github.com/users/kezhuw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kezhuw/subscriptions","organizations_url":"https://api.github.com/users/kezhuw/orgs","repos_url":"https://api.github.com/users/kezhuw/repos","events_url":"https://api.github.com/users/kezhuw/events{/privacy}","received_events_url":"https://api.github.com/users/kezhuw/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-12-16T09:08:38Z","updated_at":"2018-12-16T19:53:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In 2.x, `JsonParser` and `JsonGenerator` enable `JsonParser.Feature.AUTO_CLOSE_SOURCE` and `JsonGenerator.Feature.AUTO_CLOSE_TARGET` by default. I think it is too intrusive and aggressive to enable these features by default since they operate on input/output stream not owned by parser/generator as the javadoc states.\r\n\r\nBesides this, I found `YAMLGenerator` closes input/output stream always without consulting these features. This makes me can't use `ObjectMapper.writeValue(OutputStream out, Object value)` to write yaml content embedded in another stream, say zipped file stream.\r\n\r\nPS: I saw these features are migrated to `StreamReadFeature` and `StreamWriteFeature` in `master`.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/505/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/505/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/503","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/503/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/503/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/503/events","html_url":"https://github.com/FasterXML/jackson-core/issues/503","id":390382831,"node_id":"MDU6SXNzdWUzOTAzODI4MzE=","number":503,"title":"Separate `PrettyPrinter` / `Instantiatable` into instance/supplier","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-12-12T19:51:09Z","updated_at":"2018-12-12T19:51:09Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As of Jackson 2.x, `PrettyPrinter` interface is overloaded with `Instantiable` \"mix-in\" -- so `PrettyPrinter` that is registered is either:\r\n\r\n1. Used as-is, if impl does not implement `Instantiatable`. This works for stateless implementations\r\n2. If `Instantiatable` implemented, `createInstance()` called -- instance configured is basically \"blueprint\"\r\n\r\nThis is confusing setup, a result of retrofitting to solve a problem after `PrettyPrinter` was in use.\r\n\r\nBut with Jackson 3.0 we could and probably should change this to just configure supplier (with help of Java 8 functional interfaces), when configuring factories.\r\nAnd if leaving method in generator, that can just take a configured/stateless `PrettyPrinter` instance.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/503/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/503/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/493","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/493/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/493/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/493/events","html_url":"https://github.com/FasterXML/jackson-core/issues/493","id":372252941,"node_id":"MDU6SXNzdWUzNzIyNTI5NDE=","number":493,"title":"`ArrayIndexOutOfBoundsException` for `UTF8DataInputJsonParser`  for particularly long integer numbers (256k+ digits)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-10-20T21:06:34Z","updated_at":"2019-08-30T16:50:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Looks like no bounds check are verified when buffering digits of integer numbers by `UTF8DataInputJsonParser`, and thereby long enough integer numbers (longer than current empty buffer size, or at very least, longer than maximum segment which is 256k characters) will hit buffer boundary and throw exception.\r\n\r\nLooking at other implements `UTF8StreamJsonParser` and others handle this better.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/493/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/493/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/485","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/485/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/485/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/485/events","html_url":"https://github.com/FasterXML/jackson-core/issues/485","id":367889495,"node_id":"MDU6SXNzdWUzNjc4ODk0OTU=","number":485,"title":"Add `vanilla` flag for generators","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null},{"id":1209645968,"node_id":"MDU6TGFiZWwxMjA5NjQ1OTY4","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/performance","name":"performance","color":"e878db","default":false,"description":"Issue related to performance problems or enhancements"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-10-08T17:42:14Z","updated_at":"2019-08-13T06:06:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"With 3.0 we can start specializing generators (and parsers too) more, due to full immutability of feature flags.\r\n\r\nOne thing that should allow minor performance optimization is separating \"non-vanilla\" feature handling, such as:\r\n\r\n* Unquoted field names\r\n* Pretty-printing\r\n* Custom escaping\r\n\r\ninto either fully separate generator implementations, or, as the first step, to use \"vanilla flag\" (similar to how `BeanDeserializer` works) to at least combine many checks into one, streamlining the default case of not requiring additional checks.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/485/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/478","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/478/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/478/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/478/events","html_url":"https://github.com/FasterXML/jackson-core/issues/478","id":360863061,"node_id":"MDU6SXNzdWUzNjA4NjMwNjE=","number":478,"title":"Provide implementation of ByteBufferFeeder","user":{"login":"poutsma","id":330665,"node_id":"MDQ6VXNlcjMzMDY2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/330665?v=4","gravatar_id":"","url":"https://api.github.com/users/poutsma","html_url":"https://github.com/poutsma","followers_url":"https://api.github.com/users/poutsma/followers","following_url":"https://api.github.com/users/poutsma/following{/other_user}","gists_url":"https://api.github.com/users/poutsma/gists{/gist_id}","starred_url":"https://api.github.com/users/poutsma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/poutsma/subscriptions","organizations_url":"https://api.github.com/users/poutsma/orgs","repos_url":"https://api.github.com/users/poutsma/repos","events_url":"https://api.github.com/users/poutsma/events{/privacy}","received_events_url":"https://api.github.com/users/poutsma/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2018-09-17T13:12:24Z","updated_at":"2020-03-10T13:12:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently, there is no implementation of `com.fasterxml.jackson.core.async.ByteBufferFeeder` provided in Jackson Core; there is only an implementation of `ByteArrayFeeder`. Within Spring Framework, this requires us to covert the (potentially non-heap-allocated) ByteBuffers into byte arrays before feeding them to the parser, resulting in insufficient memory usage.\r\n\r\nPlease provide an implementation of `ByteBufferFeeder`.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/478/reactions","total_count":10,"+1":10,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/478/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/473","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/473/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/473/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/473/events","html_url":"https://github.com/FasterXML/jackson-core/issues/473","id":347577305,"node_id":"MDU6SXNzdWUzNDc1NzczMDU=","number":473,"title":"Add `JsonReadFeature.ALLOW_JDK_WHITESPACE` (or equivalent)","user":{"login":"HansBrende","id":5846890,"node_id":"MDQ6VXNlcjU4NDY4OTA=","avatar_url":"https://avatars.githubusercontent.com/u/5846890?v=4","gravatar_id":"","url":"https://api.github.com/users/HansBrende","html_url":"https://github.com/HansBrende","followers_url":"https://api.github.com/users/HansBrende/followers","following_url":"https://api.github.com/users/HansBrende/following{/other_user}","gists_url":"https://api.github.com/users/HansBrende/gists{/gist_id}","starred_url":"https://api.github.com/users/HansBrende/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HansBrende/subscriptions","organizations_url":"https://api.github.com/users/HansBrende/orgs","repos_url":"https://api.github.com/users/HansBrende/repos","events_url":"https://api.github.com/users/HansBrende/events{/privacy}","received_events_url":"https://api.github.com/users/HansBrende/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-08-04T02:12:42Z","updated_at":"2020-05-18T16:42:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using jackson version 2.9.6,\r\n```java\r\nSystem.out.println(\"'\\\\u2028' is whitespace: \" + Character.isWhitespace('\\u2028'));\r\nSystem.out.println(\"'\\\\u2028' is space char: \" + Character.isSpaceChar('\\u2028'));\r\nSystem.out.println(\"'\\\\u2028' is line separator: \" \r\n        + (Character.getType('\\u2028') == Character.LINE_SEPARATOR));\r\n\r\nnew JsonFactory().createParser(\"\\u2028{\\\"some\\\": \\\"json\\\"}\").nextToken();\r\n```\r\nprints:\r\n```\r\n'\\u2028' is whitespace: true\r\n'\\u2028' is space char: true\r\n'\\u2028' is line separator: true\r\n\r\ncom.fasterxml.jackson.core.JsonParseException: Unexpected character (' ' (code 8232 / 0x2028)): \r\nexpected a valid value (number, String, array, object, 'true', 'false' or 'null')\r\n at [Source: (String)\" {\"some\": \"json\"}\"; line: 1, column: 2]\r\n\r\n\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1804)\r\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:669)\r\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(ParserMinimalBase.java:567)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(ReaderBasedJsonParser.java:1892)\r\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:747)\r\n```\r\n\r\nIt seems like by default, whitespace should be ignored, or at least we should have a feature that would allow us to ignore whitespace.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/473/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/473/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/468","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/468/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/468/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/468/events","html_url":"https://github.com/FasterXML/jackson-core/issues/468","id":336027887,"node_id":"MDU6SXNzdWUzMzYwMjc4ODc=","number":468,"title":"Add new `JsonReadFeature` for handling Mongo/BSON wrapper JSON extensions","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-06-26T23:37:30Z","updated_at":"2019-08-30T16:50:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Since Mongo(DB) defines a set of extensions (\"shell mode\" -- see https://docs.mongodb.com/manual/reference/mongodb-extended-json/), and since support for reading such \"enhanced\" content seems sparse, it may make sense to add optional support for handling at least most commonly used wrapper extensions.\r\n\r\nNote: this does NOT mean reading actual binary BSON content, for which separate backend is needed: there already exists `bson4jackson`.\r\n\r\nNOTE: this requires implmenetation of #467 as well, so that we avoid adding this as `JsonParser.Feature` as it only applies to JSON backend, not for other formats.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/468/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/415","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/415/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/415/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/415/events","html_url":"https://github.com/FasterXML/jackson-core/issues/415","id":264916502,"node_id":"MDU6SXNzdWUyNjQ5MTY1MDI=","number":415,"title":"Feature request: Annotation based mixin configuration","user":{"login":"b0c1","id":339029,"node_id":"MDQ6VXNlcjMzOTAyOQ==","avatar_url":"https://avatars.githubusercontent.com/u/339029?v=4","gravatar_id":"","url":"https://api.github.com/users/b0c1","html_url":"https://github.com/b0c1","followers_url":"https://api.github.com/users/b0c1/followers","following_url":"https://api.github.com/users/b0c1/following{/other_user}","gists_url":"https://api.github.com/users/b0c1/gists{/gist_id}","starred_url":"https://api.github.com/users/b0c1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b0c1/subscriptions","organizations_url":"https://api.github.com/users/b0c1/orgs","repos_url":"https://api.github.com/users/b0c1/repos","events_url":"https://api.github.com/users/b0c1/events{/privacy}","received_events_url":"https://api.github.com/users/b0c1/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-10-12T12:08:35Z","updated_at":"2018-05-02T03:01:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi!\r\nUsually, I working on a multi-module project where the ObjectMapper initialization is in the parent project.\r\nThis will help to create Mixin in the child project. I created a small example:\r\n\r\n```java\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.TYPE})\r\npublic @interface Mixin {\r\n    Class<?> value();\r\n}\r\n//================================\r\n\r\npublic class AnnotationMixinResolver implements ClassIntrospector.MixInResolver {\r\n    private Map<Class<?>, Class<?>> cachedMixinList = new HashMap<>();\r\n\r\n    @Override\r\n    public Class<?> findMixInClassFor(Class<?> cls) {\r\n        if (cachedMixinList.containsKey(cls)) {\r\n            return cachedMixinList.get(cls);\r\n        }\r\n        if (cls.isAnnotationPresent(Mixin.class)) {\r\n            Class<?> foundMixin = cls.getAnnotation(Mixin.class).value();\r\n            cachedMixinList.put(cls, foundMixin);\r\n            return foundMixin;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public ClassIntrospector.MixInResolver copy() {\r\n        return new AnnotationMixinResolver();\r\n    }\r\n}\r\n```\r\nI register the `AnnotationMixinResolver` class in the ObjectMapper with `.setMixInResolver(new AnnotationMixinResolver())` \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/415/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/376","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/376/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/376/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/376/events","html_url":"https://github.com/FasterXML/jackson-core/issues/376","id":228877667,"node_id":"MDU6SXNzdWUyMjg4Nzc2Njc=","number":376,"title":"Improve `JsonLocation` source handling: do not assume UTF-8 for byte sources","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-05-15T23:51:04Z","updated_at":"2020-05-18T16:36:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Although 2.9 improves handling of source references, and works nicely for JSON input, handling of byte sources (like `byte[]`) is problematic for binary formats like Smile and CBOR as it tries to decode a snippet in UTF-8. This won't work and instead we should either:\r\n\r\n1. Display snippet in hex instead, OR\r\n2. Just not display anything\r\n\r\nDetermination for this could be done in multiple ways; for example:\r\n\r\n1. Use heuristics to see if first N bytes are UTF-8 safe\r\n2. Use existing (or, possibly added) calls to determine if format is textual/binary\r\n\r\nEither way, it'd be good to display UTF-8 contents for textual formats; and avoid problems for binary formats.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/376/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/376/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/375","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/375/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/375/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/375/events","html_url":"https://github.com/FasterXML/jackson-core/issues/375","id":228091331,"node_id":"MDU6SXNzdWUyMjgwOTEzMzE=","number":375,"title":"Add `peekToken()`, mostly to support non-blocking parsing","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-05-11T19:08:45Z","updated_at":"2017-05-23T22:51:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"With upcoming support for non-blocking parsing (see #57 for json, but also for other formats) there may be need to add more methods to help with some specific aspects.\r\n\r\nOne such aspect is that due to input handling there is no way to properly implement \"lazy\" decoding for most events: since intent to skip is not known early enough, `nextToken()` must buffer all content.\r\nThis is fine in many cases (start/end markers, small numbers, property names that must be retained), but can be sub-optimal for larger values (binary, long text).\r\nNow, adding something like `skipToken()` might work, but assumes that type of next token is fully known from context; this may or may not be known.\r\n\r\nBut it should be possible to add a new variant of `nextToken()`; one that does advance input enough to detect type of token, but without requiring anything more than peeking one byte (or couple, retaining them). This method specifically should not advance logical token stream so that:\r\n\r\n1. It should be possible to call this new method (`peekToken()`?) multiple times and get same result (that is: it's idempotent)\r\n2. When calling `nextToken()`, returned type must be same as what `peekToken()` returned\r\n\r\nNow: although this method mostly makes sense for non-blocking use case, it might be useful for blocking I/O too, so let's expect support to be added there too, over time.\r\n\r\nAnd since this is new addition operation has to be optional: that is, initial default implementation should return `JsonToken.NOT_AVAILABLE` (alternative would be throwing an exception).\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/375/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/375/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/363","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/363/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/363/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/363/events","html_url":"https://github.com/FasterXML/jackson-core/issues/363","id":216228955,"node_id":"MDU6SXNzdWUyMTYyMjg5NTU=","number":363,"title":"Check why UTF-8 decoding does not fail on illegal encodings of Surrogate codes","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":1898473713,"node_id":"MDU6TGFiZWwxODk4NDczNzEz","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.12","name":"2.12","color":"6a9dc4","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-03-22T22:32:59Z","updated_at":"2020-05-18T16:36:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"See https://github.com/FasterXML/jackson-dataformats-binary/pull/65 for background: it looks like UTF-8 json parser is not checking for case of 3-byte character being surrogate: I think it should.\r\n(although there is still the whole issue of why JSON escapes may be used in such a way...).\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/363/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/363/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/355","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/355/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/355/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/355/events","html_url":"https://github.com/FasterXML/jackson-core/issues/355","id":209315092,"node_id":"MDU6SXNzdWUyMDkzMTUwOTI=","number":355,"title":"Allow registering \"string-converter hook\", for low-level coercion or String mutation","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":609583758,"node_id":"MDU6TGFiZWw2MDk1ODM3NTg=","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/3.x","name":"3.x","color":"006b75","default":false,"description":null},{"id":2294679355,"node_id":"MDU6TGFiZWwyMjk0Njc5MzU1","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/2.13","name":"2.13","color":"c5def5","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-02-22T00:24:29Z","updated_at":"2020-12-05T20:53:40Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"One common wish for processing (at various levels) is to be able to modify incoming String values, to either:\r\n\r\n1. Modify Strings themselves (trim whitespace, change casing etc), or\r\n2. Change type of scalar token reported (coercion): for example, change String value \"12\" into number `12` (`int`)\r\n\r\nWhile such functionality is most often needed for formats like `CSV` and `XML` (and perhaps `properties`), it seems that due to needed across multiple formats this would really make sense as `jackson-core` functionality.\r\n\r\nWhat probably makes sense is to try to figure out abstractions needed, interaction, but require implementations to wire actual activity. In fact, it is almost certainly impossible to do it efficiently and cleanly from within `jackson-core` itself (or from databind).\r\nBut it should be possible to implement it in core both for API, and wiring for JSON, and then add similar functionality for other textual (and maybe, if there's demand, for binary?) codecs.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/355/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/355/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/350","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/350/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/350/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/350/events","html_url":"https://github.com/FasterXML/jackson-core/issues/350","id":205026069,"node_id":"MDU6SXNzdWUyMDUwMjYwNjk=","number":350,"title":"Jackson encoding and decoding invalid unicode?","user":{"login":"devinrsmith","id":6764691,"node_id":"MDQ6VXNlcjY3NjQ2OTE=","avatar_url":"https://avatars.githubusercontent.com/u/6764691?v=4","gravatar_id":"","url":"https://api.github.com/users/devinrsmith","html_url":"https://github.com/devinrsmith","followers_url":"https://api.github.com/users/devinrsmith/followers","following_url":"https://api.github.com/users/devinrsmith/following{/other_user}","gists_url":"https://api.github.com/users/devinrsmith/gists{/gist_id}","starred_url":"https://api.github.com/users/devinrsmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devinrsmith/subscriptions","organizations_url":"https://api.github.com/users/devinrsmith/orgs","repos_url":"https://api.github.com/users/devinrsmith/repos","events_url":"https://api.github.com/users/devinrsmith/events{/privacy}","received_events_url":"https://api.github.com/users/devinrsmith/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-02-02T23:15:19Z","updated_at":"2017-02-04T19:14:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Should Jackson encode and decode strings that aren't unicode?\r\n\r\nI've got some testing where Strings aren't encodable in UTF-8 or UTF-16, but seem to pass the Jackson encode / decode process just fine.\r\n\r\nhttps://gist.github.com/devinrsmith/51f10cfdebc7c7b803aa6df4f13b097c\r\n\r\nIs this expected behavior?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/350/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/346","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/346/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/346/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/346/events","html_url":"https://github.com/FasterXML/jackson-core/issues/346","id":200512120,"node_id":"MDU6SXNzdWUyMDA1MTIxMjA=","number":346,"title":"Optimize TextBuffer.contentsAsDouble()","user":{"login":"CodingFabian","id":176132,"node_id":"MDQ6VXNlcjE3NjEzMg==","avatar_url":"https://avatars.githubusercontent.com/u/176132?v=4","gravatar_id":"","url":"https://api.github.com/users/CodingFabian","html_url":"https://github.com/CodingFabian","followers_url":"https://api.github.com/users/CodingFabian/followers","following_url":"https://api.github.com/users/CodingFabian/following{/other_user}","gists_url":"https://api.github.com/users/CodingFabian/gists{/gist_id}","starred_url":"https://api.github.com/users/CodingFabian/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/CodingFabian/subscriptions","organizations_url":"https://api.github.com/users/CodingFabian/orgs","repos_url":"https://api.github.com/users/CodingFabian/repos","events_url":"https://api.github.com/users/CodingFabian/events{/privacy}","received_events_url":"https://api.github.com/users/CodingFabian/received_events","type":"User","site_admin":false},"labels":[{"id":1209645968,"node_id":"MDU6TGFiZWwxMjA5NjQ1OTY4","url":"https://api.github.com/repos/FasterXML/jackson-core/labels/performance","name":"performance","color":"e878db","default":false,"description":"Issue related to performance problems or enhancements"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-01-12T23:45:40Z","updated_at":"2020-08-23T03:12:12Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Currently TextBuffer contentsAsDouble will first create a string that is passed to Double.parseDouble().\r\n\r\nI know floating point parsing is painful but if you are looking for optimization opportunities, this is one.\r\n<img width=\"1190\" alt=\"screen shot 2017-01-13 at 00 45 25\" src=\"https://cloud.githubusercontent.com/assets/176132/21912953/997f5970-d929-11e6-84db-4ef8b8a24bc3.png\">\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/346/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/252","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/252/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/252/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/252/events","html_url":"https://github.com/FasterXML/jackson-core/issues/252","id":129665092,"node_id":"MDU6SXNzdWUxMjk2NjUwOTI=","number":252,"title":"Add functionality for canonical serialization of JSON floating-point numbers, for ES6 (and V8) compatibility","user":{"login":"cyberphone","id":8044211,"node_id":"MDQ6VXNlcjgwNDQyMTE=","avatar_url":"https://avatars.githubusercontent.com/u/8044211?v=4","gravatar_id":"","url":"https://api.github.com/users/cyberphone","html_url":"https://github.com/cyberphone","followers_url":"https://api.github.com/users/cyberphone/followers","following_url":"https://api.github.com/users/cyberphone/following{/other_user}","gists_url":"https://api.github.com/users/cyberphone/gists{/gist_id}","starred_url":"https://api.github.com/users/cyberphone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cyberphone/subscriptions","organizations_url":"https://api.github.com/users/cyberphone/orgs","repos_url":"https://api.github.com/users/cyberphone/repos","events_url":"https://api.github.com/users/cyberphone/events{/privacy}","received_events_url":"https://api.github.com/users/cyberphone/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2016-01-29T04:40:56Z","updated_at":"2016-09-01T04:19:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Related:\nhttps://github.com/Microsoft/ChakraCore/issues/149\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/252/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/223","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/223/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/223/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/223/events","html_url":"https://github.com/FasterXML/jackson-core/issues/223","id":110880547,"node_id":"MDU6SXNzdWUxMTA4ODA1NDc=","number":223,"title":"UTF8JsonGenerator writes supplementary characters as a surrogate pair -- should use 4-byte encoding","user":{"login":"ianroberts","id":428107,"node_id":"MDQ6VXNlcjQyODEwNw==","avatar_url":"https://avatars.githubusercontent.com/u/428107?v=4","gravatar_id":"","url":"https://api.github.com/users/ianroberts","html_url":"https://github.com/ianroberts","followers_url":"https://api.github.com/users/ianroberts/followers","following_url":"https://api.github.com/users/ianroberts/following{/other_user}","gists_url":"https://api.github.com/users/ianroberts/gists{/gist_id}","starred_url":"https://api.github.com/users/ianroberts/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ianroberts/subscriptions","organizations_url":"https://api.github.com/users/ianroberts/orgs","repos_url":"https://api.github.com/users/ianroberts/repos","events_url":"https://api.github.com/users/ianroberts/events{/privacy}","received_events_url":"https://api.github.com/users/ianroberts/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2015-10-11T20:20:48Z","updated_at":"2019-11-12T22:07:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When outputting a string value containing a supplementary Unicode code point, UTF8JsonGenerator is encoding the supplementary character as a pair of `\\uNNNN` escapes representing the two halves of the surrogate pair that would denote the code point in UTF-16 instead of using the correct multi-byte UTF-8 encoding of the character.  The following Groovy script demonstrates the behaviour:\n\n```\n@Grab(group='com.fasterxml.jackson.core', module='jackson-core', version='2.6.2')\nimport com.fasterxml.jackson.core.JsonFactory\n\ndef factory = new JsonFactory()\ndef bytes1 = new ByteArrayOutputStream()\ndef gen1 = factory.createGenerator(bytes1) // UTF8JsonGenerator\ngen1.writeStartObject()\ngen1.writeStringField(\"test\", new String(Character.toChars(0x1F602)))\ngen1.writeEndObject()\ngen1.close()\nSystem.out.write(bytes1.toByteArray())\nprintln \"\"\n// prints {\"test\":\"\\uD83D\\uDE02\"}\n\n\ndef bytes2 = new ByteArrayOutputStream()\nnew OutputStreamWriter(bytes2, \"UTF-8\").withWriter { w ->\n  def gen2 = factory.createGenerator(w) // WriterBasedJsonGenerator\n  gen2.writeStartObject()\n  gen2.writeStringField(\"test\", new String(Character.toChars(0x1F602)))\n  gen2.writeEndObject()\n  gen2.close()\n}\nSystem.out.write(bytes2.toByteArray())\nprintln \"\"\n// prints {\"test\":\"😂\"}\n```\n\nWhen generating to a Writer rather than an OutputStream (and letting Java handle the UTF-8 byte conversion) the supplementary character U+1F602 is encoded as the correct UTF-8 four byte sequence `f0 9f 98 82`.\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/223/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/223/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/67","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/67/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/67/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/67/events","html_url":"https://github.com/FasterXML/jackson-core/issues/67","id":12616417,"node_id":"MDU6SXNzdWUxMjYxNjQxNw==","number":67,"title":"Improve buffer recycling for platforms that have broken SoftReference (Android)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2013-03-29T19:41:16Z","updated_at":"2017-09-14T01:41:21Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Since Google seems unable to provide sane handling for SoftReferences, perhaps we can work-around this issue to some degree, at least for a relatively common case of single-threaded reuse.\n\nThe basic idea would be that before checking for combination of `ThreadLocal` and `SoftReference`, it'd be possible to use a share `AtomicReference` for a single buffer. If an instance is found this way, it could avoid use of SoftReference-based alternative; if not, it could use current handling.\nThis should not add significant overhead over current approach (it might even improve it slightly), but should work better on Android.\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/67/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/67/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/27","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/27/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/27/events","html_url":"https://github.com/FasterXML/jackson-core/issues/27","id":6134271,"node_id":"MDU6SXNzdWU2MTM0Mjcx","number":27,"title":"Add generator#writeUTF8String(InputStream)","user":{"login":"kimchy","id":41300,"node_id":"MDQ6VXNlcjQxMzAw","avatar_url":"https://avatars.githubusercontent.com/u/41300?v=4","gravatar_id":"","url":"https://api.github.com/users/kimchy","html_url":"https://github.com/kimchy","followers_url":"https://api.github.com/users/kimchy/followers","following_url":"https://api.github.com/users/kimchy/following{/other_user}","gists_url":"https://api.github.com/users/kimchy/gists{/gist_id}","starred_url":"https://api.github.com/users/kimchy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kimchy/subscriptions","organizations_url":"https://api.github.com/users/kimchy/orgs","repos_url":"https://api.github.com/users/kimchy/repos","events_url":"https://api.github.com/users/kimchy/events{/privacy}","received_events_url":"https://api.github.com/users/kimchy/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2012-08-09T18:41:07Z","updated_at":"2012-09-28T20:55:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It would be great to have the option to add the ability to write a UTF string from an `InputStream`, not just byte array.\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/27/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/27/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/15","repository_url":"https://api.github.com/repos/FasterXML/jackson-core","labels_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/15/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/15/events","html_url":"https://github.com/FasterXML/jackson-core/issues/15","id":4769467,"node_id":"MDU6SXNzdWU0NzY5NDY3","number":15,"title":"Add 'readText()' method in JsonParser","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2012-05-27T04:22:00Z","updated_at":"2021-04-29T17:17:09Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Current JsonParser.getText() requires reading of the whole JSON String value as String.\nWhile convenient, this may not be optimal when processing large payloads.\n\nAs an alternative method, there should be something like:\n\n  boolean readText(Writer w);\n\nwhich would read JSON String value, and pass it using given Writer; but possibly in separate chunks, without aggregating it. This allows caller to do incremental processing and avoid potentially big temporary memory usage.\n\nIn addition, for non-blocking parser implementations, this method could do partial decoding, meaning that it would only parse part of textual value; return value indicating whether full contents (true) or partial content (false) was processed.\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-core/issues/15/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-core/issues/15/timeline","performed_via_github_app":null}],"issuesCount":45,"contributors":68,"pullRequests":3,"projectUrl":"https://github.com/FasterXML/jackson-core","issuesUrl":"https://github.com/FasterXML/jackson-core/issues","stars":1987,"watchers":1987,"forks":646,"githubLicenseName":"Apache-2.0","openIssues":48,"createdAt":"2011-12-23T02:00:51Z","updatedAt":"2021-10-15T17:37:01Z","monthsSinceUpdated":0},{"id":"jackson-databind@2.11.2","groupId":"com.fasterxml.jackson.core","artifactId":"jackson-databind","version":"2.11.2","name":"jackson-databind","description":"General data-binding package for Jackson (2.x): works on streaming API (core) implementation(s)","licenses":{"license":{"name":"The Apache Software License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.txt","distribution":"repo"}},"github":"http://github.com/FasterXML/jackson-databind","latestVersion":"2.13.0","issues":[{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3299","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3299/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3299/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3299/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3299","id":1022903238,"node_id":"I_kwDOAC5e2c48-EPG","number":3299,"title":"Add option for `FromStringDeserializer` not to trim JSON string value when deserializing JDK types like `java.util.regex.Pattern`","user":{"login":"jberger","id":735765,"node_id":"MDQ6VXNlcjczNTc2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/735765?v=4","gravatar_id":"","url":"https://api.github.com/users/jberger","html_url":"https://github.com/jberger","followers_url":"https://api.github.com/users/jberger/followers","following_url":"https://api.github.com/users/jberger/following{/other_user}","gists_url":"https://api.github.com/users/jberger/gists{/gist_id}","starred_url":"https://api.github.com/users/jberger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jberger/subscriptions","organizations_url":"https://api.github.com/users/jberger/orgs","repos_url":"https://api.github.com/users/jberger/repos","events_url":"https://api.github.com/users/jberger/events{/privacy}","received_events_url":"https://api.github.com/users/jberger/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-10-11T16:22:54Z","updated_at":"2021-10-13T21:44:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nI have a large JSON structure containing arrays of Patterns to match as part of a lookup. Some contain patterns that [end in an escaped literal space](https://github.com/opawg/user-agents/blob/220a8d281685c3a5ea6f5cbe36f1064c811d7025/src/user-agents.json#L868), ie `\\\\ `. When this happens the [trim behavior](https://github.com/FasterXML/jackson-databind/blob/79e1f0c5cb30977975be1f90a661e008aa340783/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java#L63) (that I had to search rather hard to find) causes the pattern to now end in an escape character which then fails to compile as a Pattern.\r\n\r\n**Describe the solution you'd like**\r\nWhile I can understand trimming string values in XML as an unfortunate side-effect of the whitespace independent structure, in JSON I would have expected to be somewhat more literal. Even so if this is the behavior that more people want, can you please at least add an attribute that would prevent trimming?\r\n\r\n**Usage example**\r\nSomething like `.with(DeserializationFeature.NO_TRIM)` would be sufficient.\r\n\r\n**Additional context**\r\nI'm sure I must have missed something in the documentation but I was not easy to find that values were supposed to be trimmed. Indeed my searching mostly found people asking in various forums how to cause the values to be trimmed, not to prevent them from being trimmed. Clarifying that behavior in the documentation would be nice as well.\r\n\r\nThanks\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3299/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3299/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3298","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3298/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3298/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3298/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3298","id":1021855693,"node_id":"I_kwDOAC5e2c486EfN","number":3298,"title":"Pre-process Value or Easily Delegate to Default Deserializer","user":{"login":"EarthCitizen","id":1094129,"node_id":"MDQ6VXNlcjEwOTQxMjk=","avatar_url":"https://avatars.githubusercontent.com/u/1094129?v=4","gravatar_id":"","url":"https://api.github.com/users/EarthCitizen","html_url":"https://github.com/EarthCitizen","followers_url":"https://api.github.com/users/EarthCitizen/followers","following_url":"https://api.github.com/users/EarthCitizen/following{/other_user}","gists_url":"https://api.github.com/users/EarthCitizen/gists{/gist_id}","starred_url":"https://api.github.com/users/EarthCitizen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/EarthCitizen/subscriptions","organizations_url":"https://api.github.com/users/EarthCitizen/orgs","repos_url":"https://api.github.com/users/EarthCitizen/repos","events_url":"https://api.github.com/users/EarthCitizen/events{/privacy}","received_events_url":"https://api.github.com/users/EarthCitizen/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-10-10T01:57:57Z","updated_at":"2021-10-13T15:12:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a simple situation. The JSON I want to deserialize is in a base 64 encoded value. I need to decode the value, then let the default deserialization mechanisms take it the rest of the way. I see many people on Stackoverflow having the same need, but the solutions seem overly complicated for such a simple problem.\r\n\r\nIf there could be a value pre-processor that is separate from the deserialization process, and runs before deserialization is carried out, that would be amazing. And conversely, a post-processor would be it's counterpart to turn values back into base 64 after serialization.\r\n\r\nIn my case, I don't actually need any deserialization customization at all. Just converting from base 64. Needing to write a custom deserializer in this case seems to be overkill. But, I am not aware of any other way to do it.\r\n\r\nIf a pre-processor is not possible, then perhaps a way to easily call the default deserializer from the custom one. There does not seem to be a way to currently to this without the overly complex solutions presented in various Stackoverflow answers.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3298/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3298/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3297","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3297/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3297/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3297/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3297","id":1020466175,"node_id":"I_kwDOAC5e2c480xP_","number":3297,"title":"`@JsonDeserialize(converter = ...)` does not work with Records","user":{"login":"gavlyukovskiy","id":15277543,"node_id":"MDQ6VXNlcjE1Mjc3NTQz","avatar_url":"https://avatars.githubusercontent.com/u/15277543?v=4","gravatar_id":"","url":"https://api.github.com/users/gavlyukovskiy","html_url":"https://github.com/gavlyukovskiy","followers_url":"https://api.github.com/users/gavlyukovskiy/followers","following_url":"https://api.github.com/users/gavlyukovskiy/following{/other_user}","gists_url":"https://api.github.com/users/gavlyukovskiy/gists{/gist_id}","starred_url":"https://api.github.com/users/gavlyukovskiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gavlyukovskiy/subscriptions","organizations_url":"https://api.github.com/users/gavlyukovskiy/orgs","repos_url":"https://api.github.com/users/gavlyukovskiy/repos","events_url":"https://api.github.com/users/gavlyukovskiy/events{/privacy}","received_events_url":"https://api.github.com/users/gavlyukovskiy/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-10-07T21:10:53Z","updated_at":"2021-10-08T17:32:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n`@JsonDeserialize(converter = ...)` on Record's fields isn't picked up by Jackson during deserialization. I'm using this converter to parse time without zone information into `Instant` field.\r\n\r\n**Version information**\r\nJackson: 2.13, 2.13.1-SNAPSHOT\r\nJDK: 17\r\n\r\n**To Reproduce**\r\n```\r\npublic class JacksonTestCase {\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        var objectMapper = new ObjectMapper().registerModule(new JavaTimeModule());\r\n\r\n        objectMapper.readValue(\"\"\"\r\n                               { \"value\": \"test\", \"time\": \"2021-10-07T22:47:15\" }\r\n                                \"\"\", RecordEntity.class);\r\n    }\r\n\r\n    static record RecordEntity(\r\n            String value,\r\n            @JsonDeserialize(converter = InstantWithoutZoneConverter.class)\r\n            Instant time\r\n    ) {\r\n    }\r\n\r\n    static class InstantWithoutZoneConverter implements Converter<LocalDateTime, Instant> {\r\n        @Override\r\n        public Instant convert(LocalDateTime value) {\r\n            return value.toInstant(ZoneOffset.UTC);\r\n        }\r\n\r\n        @Override\r\n        public JavaType getInputType(TypeFactory typeFactory) {\r\n            return typeFactory.constructType(LocalDateTime.class);\r\n        }\r\n\r\n        @Override\r\n        public JavaType getOutputType(TypeFactory typeFactory) {\r\n            return typeFactory.constructType(Instant.class);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Additional context**\r\nIt looks similar to #2974 and workaround to add `@JsonProperty(\"time\")` works here as well:\r\n```\r\n    static record RecordEntity(\r\n            String value,\r\n            @JsonProperty(\"time\")\r\n            @JsonDeserialize(converter = InstantWithoutZoneConverter.class)\r\n            Instant time\r\n    ) {\r\n    }\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3297/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3296","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3296/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3296/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3296/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3296","id":1017900888,"node_id":"I_kwDOAC5e2c48q-9Y","number":3296,"title":"DecimalNode is improperly (de)serialized","user":{"login":"victornoel","id":160975,"node_id":"MDQ6VXNlcjE2MDk3NQ==","avatar_url":"https://avatars.githubusercontent.com/u/160975?v=4","gravatar_id":"","url":"https://api.github.com/users/victornoel","html_url":"https://github.com/victornoel","followers_url":"https://api.github.com/users/victornoel/followers","following_url":"https://api.github.com/users/victornoel/following{/other_user}","gists_url":"https://api.github.com/users/victornoel/gists{/gist_id}","starred_url":"https://api.github.com/users/victornoel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/victornoel/subscriptions","organizations_url":"https://api.github.com/users/victornoel/orgs","repos_url":"https://api.github.com/users/victornoel/repos","events_url":"https://api.github.com/users/victornoel/events{/privacy}","received_events_url":"https://api.github.com/users/victornoel/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-10-06T09:34:35Z","updated_at":"2021-10-15T17:42:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nWhen a `DecimalNode` is cloned via serialization (serialized then deserialized), the clone is not equal to the original.\r\n\r\nI know there are a lot of issues related to `BigDecimal` in jackson, but I don't think I have seen one about this. Don't hesitate to close it if there are other planned/tracked issues that covers this :)\r\n\r\n**Version information**\r\n\r\n2.12.1\r\n\r\n**To Reproduce**\r\n\r\n```java\r\n    @Test\r\n    public void should_properly_deserialize_decimal_node() {\r\n        var node = new ObjectMapper().getNodeFactory().numberNode(BigDecimal.ONE);\r\n        Assert.assertTrue(node instanceof DecimalNode);\r\n        var clone = clone(node);\r\n        Assert.assertTrue(clone.equals(node));\r\n        Assert.assertTrue(node.equals(clone));\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    private <T> T clone(T original) {\r\n        try(var baos = new ByteArrayOutputStream(); var oos = new ObjectOutputStream(baos)) {\r\n            oos.writeObject(original);\r\n            try (var bais = new ByteArrayInputStream(baos.toByteArray()); var ois = new ObjectInputStream(bais)) {\r\n                return (T) ois.readObject();\r\n            }\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(e);\r\n        }\r\n    }\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3296/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3291","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3291/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3291/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3291/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3291","id":1012373385,"node_id":"I_kwDOAC5e2c48V5eJ","number":3291,"title":"If the class and the field have the same name, the field cannot be serialized","user":{"login":"amlyczz","id":83716611,"node_id":"MDQ6VXNlcjgzNzE2NjEx","avatar_url":"https://avatars.githubusercontent.com/u/83716611?v=4","gravatar_id":"","url":"https://api.github.com/users/amlyczz","html_url":"https://github.com/amlyczz","followers_url":"https://api.github.com/users/amlyczz/followers","following_url":"https://api.github.com/users/amlyczz/following{/other_user}","gists_url":"https://api.github.com/users/amlyczz/gists{/gist_id}","starred_url":"https://api.github.com/users/amlyczz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amlyczz/subscriptions","organizations_url":"https://api.github.com/users/amlyczz/orgs","repos_url":"https://api.github.com/users/amlyczz/repos","events_url":"https://api.github.com/users/amlyczz/events{/privacy}","received_events_url":"https://api.github.com/users/amlyczz/received_events","type":"User","site_admin":false},"labels":[{"id":439290311,"node_id":"MDU6TGFiZWw0MzkyOTAzMTE=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/lombok","name":"lombok","color":"499db7","default":false,"description":null},{"id":890728708,"node_id":"MDU6TGFiZWw4OTA3Mjg3MDg=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-30T15:30:38Z","updated_at":"2021-09-30T16:20:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"If the class and the field have the same name, the field cannot be serialized\r\n\r\n```java\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Builder\r\npublic class A {\r\n    private Integer a;\r\n    private Integer aa;\r\n    private String b;\r\n    private List<Integer> c;\r\n\r\n\r\n    public static A getA() {\r\n        A a = new A(1,11, \"s\", Arrays.asList(1, 2, 3));\r\n\r\n        return a;\r\n    }\r\n}\r\n```\r\n\r\nI invoke writeValueAsString method.Unexpectly,I get this.\r\n\r\n```json\r\n{\"aa\":11,\"b\":\"s\",\"c\":[1,2,3]}\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3291/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3291/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3289","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3289/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3289/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3289/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3289","id":1011337545,"node_id":"I_kwDOAC5e2c48R8lJ","number":3289,"title":"Deduction deserialization - add support for pojo-hierarchies such that the absence of child fields infers a supertype","user":{"login":"pakorcz","id":91383747,"node_id":"MDQ6VXNlcjkxMzgzNzQ3","avatar_url":"https://avatars.githubusercontent.com/u/91383747?v=4","gravatar_id":"","url":"https://api.github.com/users/pakorcz","html_url":"https://github.com/pakorcz","followers_url":"https://api.github.com/users/pakorcz/followers","following_url":"https://api.github.com/users/pakorcz/following{/other_user}","gists_url":"https://api.github.com/users/pakorcz/gists{/gist_id}","starred_url":"https://api.github.com/users/pakorcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pakorcz/subscriptions","organizations_url":"https://api.github.com/users/pakorcz/orgs","repos_url":"https://api.github.com/users/pakorcz/repos","events_url":"https://api.github.com/users/pakorcz/events{/privacy}","received_events_url":"https://api.github.com/users/pakorcz/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-09-29T18:55:17Z","updated_at":"2021-10-04T21:26:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently, deduction deserialization requires all values to have unique field. Because of that, there is no way to deserialize values to superclass and subclasses, when `defaultImpl` is different than superclass. \r\n\r\nExample:\r\n\r\n For  json:\r\n ```{\r\n  \"name\": \"Italy\",\r\n  \"places\": {\r\n    \"mountains\": {\r\n      \"name\": \"The Alps\"\r\n    },\r\n    \"cites\": [\r\n      {\r\n        \"name\": \"Rome\",\r\n        \"places\": {\r\n          \"colosseum\": {\r\n            \"name\": \"The Colosseum\"\r\n          },\r\n          \"romanForum\": {\r\n            \"name\": \"The Roman Forum\"\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"name\": \"Venice\",\r\n        \"places\": {\r\n          \"bridges\": []\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n \r\nand pojo-hierarchy:  \r\n\r\n```\r\npublic static class Place implements WorthSeeing {  \r\n  public String name;  \r\n}  \r\n  \r\npublic static class CompositePlace extends Place implements WorthSeeing {  \r\n  \r\n  public Map<String, WorthSeeing> places;  \r\n}  \r\n  \r\nstatic class ListOfPlaces extends ArrayList<WorthSeeing> implements WorthSeeing {  \r\n}\r\n```\r\n\r\nand deduction deserialization with `defaultImpl` differ then supertype:\r\n\r\n```\r\n@JsonTypeInfo(use = DEDUCTION, defaultImpl = ListOfPlaces.class)  \r\n@JsonSubTypes( {@Type(ListOfPlaces.class), @Type(CompositePlace.class), @Type(Place.class)})  \r\ninterface WorthSeeing {}\r\n```\r\n\r\nthe `MismatchedInputException` is thrown, because the values with only `name` fields are not classified to  `Place` .\r\n\r\nDesired behaviour: \r\n - value contains only fields from superclass -> it's mapped to an object of superclass\r\n - value contains fields from superclass and a subclass -> it's mapped to an object of the supclass\r\n - value contains fields from superclass and fields that don't exist in any of subclasses -> the `UnrecognizedPropertyException` is thrown\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3289/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3288","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3288/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3288/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3288/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3288","id":1010970240,"node_id":"I_kwDOAC5e2c48Qi6A","number":3288,"title":"Inner classes that get their generic information from an outer class lose type information","user":{"login":"jackwickham","id":8701337,"node_id":"MDQ6VXNlcjg3MDEzMzc=","avatar_url":"https://avatars.githubusercontent.com/u/8701337?v=4","gravatar_id":"","url":"https://api.github.com/users/jackwickham","html_url":"https://github.com/jackwickham","followers_url":"https://api.github.com/users/jackwickham/followers","following_url":"https://api.github.com/users/jackwickham/following{/other_user}","gists_url":"https://api.github.com/users/jackwickham/gists{/gist_id}","starred_url":"https://api.github.com/users/jackwickham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jackwickham/subscriptions","organizations_url":"https://api.github.com/users/jackwickham/orgs","repos_url":"https://api.github.com/users/jackwickham/repos","events_url":"https://api.github.com/users/jackwickham/events{/privacy}","received_events_url":"https://api.github.com/users/jackwickham/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-29T13:35:56Z","updated_at":"2021-09-29T13:35:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nIf a non-static inner class uses generics from the outer class, that generic information is lost when serializing.\r\n\r\n**Version information**\r\n2.12.5\r\n\r\n**To Reproduce**\r\n```java\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.jupiter.api.Test;\r\n\r\npublic final class JacksonPoC {\r\n\r\n    @JsonTypeInfo(use = Id.NAME)\r\n    @JsonSubTypes({@JsonSubTypes.Type(value = ConcreteValue.class, name = \"concrete-value\")})\r\n    private interface AbstractValue {}\r\n\r\n    private static class ConcreteValue implements AbstractValue {}\r\n\r\n    public interface Wrapper<T> {\r\n        T getValue();\r\n    }\r\n\r\n    private static final class Outer<T> {\r\n        private final class Inner implements Wrapper<T> {\r\n            private final T value;\r\n\r\n            Inner(T value) {\r\n                this.value = value;\r\n            }\r\n\r\n            @Override\r\n            public T getValue() {\r\n                return value;\r\n            }\r\n        }\r\n\r\n        Inner create(T value) {\r\n            return new Inner(value);\r\n        }\r\n    }\r\n\r\n    private static final class Direct<T> implements Wrapper<T> {\r\n        private final T value;\r\n\r\n        Direct(T value) {\r\n            this.value = value;\r\n        }\r\n\r\n        @Override\r\n        public T getValue() {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    private static final class Container {\r\n        private final Wrapper<AbstractValue> wrapper;\r\n\r\n        Container(Wrapper<AbstractValue> wrapper) {\r\n            this.wrapper = wrapper;\r\n        }\r\n\r\n        public Wrapper<AbstractValue> getWrapper() {\r\n            return wrapper;\r\n        }\r\n    }\r\n\r\n    private static final ObjectMapper mapper = new ObjectMapper();\r\n\r\n    @Test\r\n    void direct() throws Exception {\r\n        // This test passes because the generic information is present on the class directly\r\n        Container object = new Container(new Direct<>(new ConcreteValue()));\r\n        assertThat(mapper.writeValueAsString(object))\r\n                .isEqualTo(\"{\\\"wrapper\\\":{\\\"value\\\":{\\\"@type\\\":\\\"concrete-value\\\"}}}\");\r\n    }\r\n\r\n    @Test\r\n    void indirect() throws Exception {\r\n        // This test fails (the @type part is omitted) because the `AbstractValue` information is lost\r\n        Container object = new Container(new Outer<AbstractValue>().create(new ConcreteValue()));\r\n        assertThat(mapper.writeValueAsString(object))\r\n                .isEqualTo(\"{\\\"wrapper\\\":{\\\"value\\\":{\\\"@type\\\":\\\"concrete-value\\\"}}}\");\r\n    }\r\n}\r\n```\r\n\r\n**Additional context**\r\nThe example above does feel quite contrived, but I encountered this in practice with Guava's Multimaps.asMap on a SetMultimap, because the resulting class `AbstractMapBasedMultimap.WrappedSet` inherits the generic information from the parent.\r\n\r\nWhen debugging this, I got as far as the short-circuit in https://github.com/FasterXML/jackson-databind/blob/77e8b62fed4748d19fbd350c9fd80a7bdca75c91/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java#L487, but I'm not sure whether simply removing that is sufficient to resolve this.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3288/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3287","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3287/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3287/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3287/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3287","id":1007957765,"node_id":"I_kwDOAC5e2c48FDcF","number":3287,"title":"Extract JsonNode into a JAR artifact distinct from jackson-databind","user":{"login":"robinroos","id":13133023,"node_id":"MDQ6VXNlcjEzMTMzMDIz","avatar_url":"https://avatars.githubusercontent.com/u/13133023?v=4","gravatar_id":"","url":"https://api.github.com/users/robinroos","html_url":"https://github.com/robinroos","followers_url":"https://api.github.com/users/robinroos/followers","following_url":"https://api.github.com/users/robinroos/following{/other_user}","gists_url":"https://api.github.com/users/robinroos/gists{/gist_id}","starred_url":"https://api.github.com/users/robinroos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/robinroos/subscriptions","organizations_url":"https://api.github.com/users/robinroos/orgs","repos_url":"https://api.github.com/users/robinroos/repos","events_url":"https://api.github.com/users/robinroos/events{/privacy}","received_events_url":"https://api.github.com/users/robinroos/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-09-27T10:10:25Z","updated_at":"2021-10-15T17:44:42Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I am managing a suite of DTOs, with a dependency on jackson-annotations, but one of the DTOs represents abstract JSON content with a dependency on JsonNode.  That requires my DTO library to depend also on jackson-databind.\r\n\r\nCould JsonNode (and its dependencies) be extracted into a distinct JAR artifact, upon which jackson-databind would depend, which I could then use directly alongside jackson-annotations in support of my DTOs?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3287/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3287/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3286","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3286/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3286/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3286/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3286","id":1007440497,"node_id":"I_kwDOAC5e2c48DFJx","number":3286,"title":"Combination of @JsonIdentityInfo and @JsonValue does not work","user":{"login":"m31collision","id":24772945,"node_id":"MDQ6VXNlcjI0NzcyOTQ1","avatar_url":"https://avatars.githubusercontent.com/u/24772945?v=4","gravatar_id":"","url":"https://api.github.com/users/m31collision","html_url":"https://github.com/m31collision","followers_url":"https://api.github.com/users/m31collision/followers","following_url":"https://api.github.com/users/m31collision/following{/other_user}","gists_url":"https://api.github.com/users/m31collision/gists{/gist_id}","starred_url":"https://api.github.com/users/m31collision/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/m31collision/subscriptions","organizations_url":"https://api.github.com/users/m31collision/orgs","repos_url":"https://api.github.com/users/m31collision/repos","events_url":"https://api.github.com/users/m31collision/events{/privacy}","received_events_url":"https://api.github.com/users/m31collision/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-09-26T16:39:32Z","updated_at":"2021-09-27T05:05:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Suppose we have a simple class like this:\r\n```java\r\n@JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator)\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\r\n@TupleConstructor\r\nclass C {\r\n    int value\r\n}\r\n```\r\nArbitrary object will be serialized to:\r\n```json\r\n{\r\n  \"@class\" : \"C\",\r\n  \"@id\" : 1,\r\n  \"value\" : 1\r\n}\r\n```\r\nNote that both fields `@id` and `@class` are present.\r\nBut if you add `@JsonValue` method to class `C` like this:\r\n```java\r\n@JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator)\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\r\n@TupleConstructor\r\nclass C {\r\n    int value\r\n\r\n    @JsonValue\r\n    Map<String, String> custom() {\r\n        Map.of(\"test\", \"\" + value)\r\n    }\r\n}\r\n```\r\nJSON output will miss an `@id` field, although `@class` is still present:\r\n```json\r\n{\r\n  \"@class\" : \"C\",\r\n  \"test\" : \"1\"\r\n}\r\n```\r\nIs this a bug or documented behaviour?\r\n\r\nTested versions: 2.12.4, 2.12.5, 2.13.0-rc2","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3286/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3284","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3284/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3284/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3284/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3284","id":1004585882,"node_id":"I_kwDOAC5e2c474MOa","number":3284,"title":"Backward compatibility for timezone formats of UTC Date serialization","user":{"login":"arungitan","id":5481090,"node_id":"MDQ6VXNlcjU0ODEwOTA=","avatar_url":"https://avatars.githubusercontent.com/u/5481090?v=4","gravatar_id":"","url":"https://api.github.com/users/arungitan","html_url":"https://github.com/arungitan","followers_url":"https://api.github.com/users/arungitan/followers","following_url":"https://api.github.com/users/arungitan/following{/other_user}","gists_url":"https://api.github.com/users/arungitan/gists{/gist_id}","starred_url":"https://api.github.com/users/arungitan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arungitan/subscriptions","organizations_url":"https://api.github.com/users/arungitan/orgs","repos_url":"https://api.github.com/users/arungitan/repos","events_url":"https://api.github.com/users/arungitan/events{/privacy}","received_events_url":"https://api.github.com/users/arungitan/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-22T18:11:24Z","updated_at":"2021-09-28T02:28:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nThis is related to https://github.com/FasterXML/jackson-databind/commit/07422d34c530f6d9ad3be14315bb2922da0754ff\r\nSince the default serialization of Date is changing timezone offset from \"+00:00\" to \"Z\" (in Jackson 3.0), would it be possible to have some options in 3.x to produce the old backward compat formats \"+0000\" and \"+00:00\"?\r\nWe have some existing APIs which produce \"+0000\" and where (some) users are very sensitive to any change in the format. we were able to address this in 2.11 setting the provided colon flag to false. What would be the options to produce the same outputs in 3.x?\r\n\r\n**Describe the solution you'd like**\r\nsome flag (or other mechanism) that would allow default Date serialization to optionally produce the legacy \"+0000\"  and \"+00:00\" timezone offset formats instead of the default \"Z\"  \r\n\r\n**Usage example**\r\none possibility could be similar to the colon flag in 2.11. \r\nStdDateFormat::withLegacyTimeZoneForUTC(boolean useColon)\r\n\r\n**Additional context**\r\nAs mentioned above, this would help support backward compatibility of Date fields in existing api responses with minimal impact. \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3284/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3284/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3283","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3283/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3283/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3283/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3283","id":1003308631,"node_id":"I_kwDOAC5e2c47zUZX","number":3283,"title":"Support optional serialization/deserialization of map with non-string key type","user":{"login":"pjfanning","id":11783444,"node_id":"MDQ6VXNlcjExNzgzNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/11783444?v=4","gravatar_id":"","url":"https://api.github.com/users/pjfanning","html_url":"https://github.com/pjfanning","followers_url":"https://api.github.com/users/pjfanning/followers","following_url":"https://api.github.com/users/pjfanning/following{/other_user}","gists_url":"https://api.github.com/users/pjfanning/gists{/gist_id}","starred_url":"https://api.github.com/users/pjfanning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjfanning/subscriptions","organizations_url":"https://api.github.com/users/pjfanning/orgs","repos_url":"https://api.github.com/users/pjfanning/repos","events_url":"https://api.github.com/users/pjfanning/events{/privacy}","received_events_url":"https://api.github.com/users/pjfanning/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-21T21:24:52Z","updated_at":"2021-09-28T02:29:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nBased on https://github.com/FasterXML/jackson-module-scala/issues/316 and some other issues that have popped up where users want to work with Map<KeyClass, ValueClass> where the KeyClass can't be readily represented as a String.\r\n\r\n**Describe the solution you'd like**\r\n\r\nTypically, Maps (eg `Map(1 -> \"a\", 2-> \"b\")`) are serialized as something like:\r\n\r\n```\r\n{\r\n  \"1\": \"a\",\r\n  \"2\": \"b\"\r\n}\r\n```\r\n\r\nBut we could have a way to annotate this Map so that it gets serialized as:\r\n\r\n```\r\n[\r\n  {\r\n    \"key\": 1,\r\n    \"value\": \"a\"\r\n  },\r\n  {\r\n    \"key\": 2,\r\n    \"value\": \"b\"\r\n  }\r\n]\r\n```\r\n\r\nThe names of the JSON elements `key` and `value` could be made configurable.\r\n\r\nThis latter serialization could allow the key value to be represented as a JSON object or array.\r\n\r\nThis serialization might be useful for someone who wanted to JSON serialize a Map as opposed to using Java serialization.\r\n\r\n**Additional context**\r\nNot urgent. Just opened as a discussion topic. Users can currently write their own custom serializers and deserializers to achieve this.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3283/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3283/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3281","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3281/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3281/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3281/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3281","id":1000260523,"node_id":"I_kwDOAC5e2c47nsOr","number":3281,"title":"Auto-detect Java 17 sealed classes without manually specifying them in @JsonSubTypes","user":{"login":"AbstractCoderX","id":38766980,"node_id":"MDQ6VXNlcjM4NzY2OTgw","avatar_url":"https://avatars.githubusercontent.com/u/38766980?v=4","gravatar_id":"","url":"https://api.github.com/users/AbstractCoderX","html_url":"https://github.com/AbstractCoderX","followers_url":"https://api.github.com/users/AbstractCoderX/followers","following_url":"https://api.github.com/users/AbstractCoderX/following{/other_user}","gists_url":"https://api.github.com/users/AbstractCoderX/gists{/gist_id}","starred_url":"https://api.github.com/users/AbstractCoderX/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AbstractCoderX/subscriptions","organizations_url":"https://api.github.com/users/AbstractCoderX/orgs","repos_url":"https://api.github.com/users/AbstractCoderX/repos","events_url":"https://api.github.com/users/AbstractCoderX/events{/privacy}","received_events_url":"https://api.github.com/users/AbstractCoderX/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-19T09:25:55Z","updated_at":"2021-10-15T17:45:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Since `sealed classes` were included in the java 17 release as a stable feature, I think jackson should support them and automatically detect possible subtypes without the `@JsonSubTypes` annotation.\r\n\r\n**Usage example**\r\n```java\r\n    @JsonTypeInfo(use = JsonTypeInfo.Id.DEDUCTION)\r\n    sealed interface UserEvent permits UserCreatedEvent, UserBlockedEvent {\r\n        int getUserId();\r\n    }\r\n\r\n    @Value\r\n    final class UserCreatedEvent implements UserEvent {\r\n        LocalDateTime createdAt;\r\n        int userId;\r\n        //...\r\n    }\r\n\r\n    @Value\r\n    final class UserBlockedEvent implements UserEvent {\r\n        LocalDateTime blockedFrom;\r\n        LocalDateTime blockedTo;\r\n        int userId;\r\n        //...\r\n    }\r\n```\r\n**Additional context**\r\nSimilar issue for kotlin sealed classes:\r\nhttps://github.com/FasterXML/jackson-module-kotlin/issues/239\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3281/reactions","total_count":8,"+1":8,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3281/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3278","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3278/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3278/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3278/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3278","id":997244291,"node_id":"I_kwDOAC5e2c47cL2D","number":3278,"title":"support ObjectType - like JavaType but without dependence on Java class introspection","user":{"login":"pjfanning","id":11783444,"node_id":"MDQ6VXNlcjExNzgzNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/11783444?v=4","gravatar_id":"","url":"https://api.github.com/users/pjfanning","html_url":"https://github.com/pjfanning","followers_url":"https://api.github.com/users/pjfanning/followers","following_url":"https://api.github.com/users/pjfanning/following{/other_user}","gists_url":"https://api.github.com/users/pjfanning/gists{/gist_id}","starred_url":"https://api.github.com/users/pjfanning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjfanning/subscriptions","organizations_url":"https://api.github.com/users/pjfanning/orgs","repos_url":"https://api.github.com/users/pjfanning/repos","events_url":"https://api.github.com/users/pjfanning/events{/privacy}","received_events_url":"https://api.github.com/users/pjfanning/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-15T15:49:28Z","updated_at":"2021-09-28T02:29:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nSupport for defining type information for Jackson serialization/deserialization in Jackson 3 that is not necessarily based on introspection of Java class fields/methods. Obviously, we would continue to support Java introspection via JavaType but this is to allow alternative ways to provide type information.\r\n\r\n**Describe the solution you'd like**\r\n\r\nThere are not too many people complaining but one of the biggest weaknesses of jackson-module-scala is that it can't deserialize this class properly.\r\n\r\n```\r\ncase class OptionWrapper(opt: Option[Long])\r\n```\r\n\r\nThe problem is described in jackson-module-scala [FAQ](https://github.com/FasterXML/jackson-module-scala/wiki/FAQ#deserializing-optionint-seqint-and-other-primitive-challenges).\r\n\r\nIf you create a JavaType for this class, we end up relying on Java reflection to get the type of 'opt' field and Java reflection suffers from type erasure so the ReferenceType that we end up for 'opt' field an inner type of java.lang.Object instead of the primitive long (or as it aliased in Scala - scala.Long).\r\n\r\nThe custom deserializer we have in jackson-module-scala gets the json value and if the number is small, it converts to an Integer and if it is big, it converts to a Long. But Scala fails to unbox the Integer because it does a cast (under the hood).\r\n\r\nI was wondering if it would be possible to have a new ObjectType where you need to explicitly provide the field type information (in jackson 3). The Scala module could use Scala implicits, macros or a Scala-aware reflection library to construct such a ObjectType instance where it could say that the type of 'opt' field is ReferenceType with inner type of Long.\r\nObjectType would at its simplest be something that wraps a Map<String, BaseType> where BaseType is the super type of ObjectType, JavaType and ReferenceType (but not ResolvedType which is a superclass of JavaType but is Java class specific -- but a similar API with the Java class bits removed). The key of the map is the field name.\r\n\r\nI'd appreciate your thoughts or pointers on how this might be done with existing classes that I'm not aware of.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3278/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3277","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3277/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3277/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3277/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3277","id":996866663,"node_id":"I_kwDOAC5e2c47avpn","number":3277,"title":"Combination of JsonUnwrapped and JsonAnySetter results in BigDecimal instead of Double","user":{"login":"hjohn","id":995917,"node_id":"MDQ6VXNlcjk5NTkxNw==","avatar_url":"https://avatars.githubusercontent.com/u/995917?v=4","gravatar_id":"","url":"https://api.github.com/users/hjohn","html_url":"https://github.com/hjohn","followers_url":"https://api.github.com/users/hjohn/followers","following_url":"https://api.github.com/users/hjohn/following{/other_user}","gists_url":"https://api.github.com/users/hjohn/gists{/gist_id}","starred_url":"https://api.github.com/users/hjohn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hjohn/subscriptions","organizations_url":"https://api.github.com/users/hjohn/orgs","repos_url":"https://api.github.com/users/hjohn/repos","events_url":"https://api.github.com/users/hjohn/events{/privacy}","received_events_url":"https://api.github.com/users/hjohn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-09-15T09:35:45Z","updated_at":"2021-09-28T02:29:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen deserializing a float value to a structure nested in JsonUnwrapped and JsonAnySetter, the float value becomes a BigDecimal instead of Double (USE_BIG_DECIMAL_FOR_FLOATS is left to its default setting).\r\n\r\n**Version information**\r\n2.12.4\r\n\r\n**To Reproduce**\r\n\r\n    @Test\r\n    public void test() throws JsonParseException, JsonMappingException, IOException {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n\r\n        Holder holder = mapper.readValue(\"{\\\"value1\\\": -60.0, \\\"value2\\\": -60.0}\", Holder.class);\r\n\r\n        assertEquals(Double.class, holder.value1.getClass());\r\n        assertEquals(Double.class, holder.holder2.data.get(\"value2\").getClass());\r\n    }\r\n\r\n    public static class Holder {\r\n        private Object value1;\r\n        @JsonUnwrapped private Holder2 holder2;\r\n\r\n        public Object getValue1() {\r\n            return value1;\r\n        }\r\n\r\n        public void setValue1(Object value1) {\r\n            this.value1 = value1;\r\n        }\r\n    }\r\n\r\n    public static class Holder2 {\r\n        private Map<String, Object> data = new HashMap<>();\r\n\r\n        @JsonAnyGetter\r\n        public Map<String, Object> getData() {\r\n            return data;\r\n        }\r\n\r\n        @JsonAnySetter\r\n        public void setAny(String key, Object value) {\r\n            data.put(key, value);\r\n        }\r\n    }\r\n\r\n**Expected behavior**\r\nWould still expect a Double here.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3277/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3277/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3276","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3276/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3276/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3276/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3276","id":996767807,"node_id":"I_kwDOAC5e2c47aXg_","number":3276,"title":"JDK 16 and up / Illegal Access - Default Deny Field Access Request","user":{"login":"GedMarc","id":5367513,"node_id":"MDQ6VXNlcjUzNjc1MTM=","avatar_url":"https://avatars.githubusercontent.com/u/5367513?v=4","gravatar_id":"","url":"https://api.github.com/users/GedMarc","html_url":"https://github.com/GedMarc","followers_url":"https://api.github.com/users/GedMarc/followers","following_url":"https://api.github.com/users/GedMarc/following{/other_user}","gists_url":"https://api.github.com/users/GedMarc/gists{/gist_id}","starred_url":"https://api.github.com/users/GedMarc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GedMarc/subscriptions","organizations_url":"https://api.github.com/users/GedMarc/orgs","repos_url":"https://api.github.com/users/GedMarc/repos","events_url":"https://api.github.com/users/GedMarc/events{/privacy}","received_events_url":"https://api.github.com/users/GedMarc/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-15T07:51:11Z","updated_at":"2021-09-28T02:30:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"All Reflective Access into JDK Internal's modules have been disabled by default in JDK 16 and above,\r\nThe ability to override this in JDK 17 has been removed\r\n\r\n\r\n**Describe the solution you'd like**\r\nDeny all Field access to any classes located in the jdk.internal module library (java.base/java.util/java.logging etc, making sure the implementation is safe for JDK 8 as well), \r\n\r\nUse properties (get/set/is) *only* for all and any classes located in these closed packages \r\n* Date\r\n* LocalDateTime and the entire suite\r\n* java.sql.xxx\r\n* java.util.concurrent.atomic.xxxxx\r\n\r\nInitial thoughts are :  \r\n* Implement the auto detect function to use None for fields by default for all classes located under the java. namespace, and javax namepsace\r\n* perhaps a package-info mixin, not sure?\r\n\r\n**Usage example**\r\n```\r\nclass xMe\r\n{\r\nprivate LocalDate failOnIllegalAccessFieldAccess;\r\n}\r\n```\r\n\r\n**Additional context**\r\nThe change shouldn't impact anything backwards compatible, as the same fields used for serialization and deserialization do exists as properties in all the affected classes\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3276/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3276/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3275","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3275/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3275/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3275/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3275","id":995251241,"node_id":"MDU6SXNzdWU5OTUyNTEyNDE=","number":3275,"title":"JDK 16 Illegal reflective access for Throwable.setCause with PropertyNamingStrategy UPPER_CAMEL_CASE","user":{"login":"jsharper","id":5386601,"node_id":"MDQ6VXNlcjUzODY2MDE=","avatar_url":"https://avatars.githubusercontent.com/u/5386601?v=4","gravatar_id":"","url":"https://api.github.com/users/jsharper","html_url":"https://github.com/jsharper","followers_url":"https://api.github.com/users/jsharper/followers","following_url":"https://api.github.com/users/jsharper/following{/other_user}","gists_url":"https://api.github.com/users/jsharper/gists{/gist_id}","starred_url":"https://api.github.com/users/jsharper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jsharper/subscriptions","organizations_url":"https://api.github.com/users/jsharper/orgs","repos_url":"https://api.github.com/users/jsharper/repos","events_url":"https://api.github.com/users/jsharper/events{/privacy}","received_events_url":"https://api.github.com/users/jsharper/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-13T19:34:50Z","updated_at":"2021-09-28T02:37:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nMapping a json string to an instance of RuntimeException with JDK 16 (which defaults to denying illegal reflective access) while using UPPER_CAMEL_CASE property naming strategy, fails with:\r\n\r\n```\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Failed to call `setAccess()` on Method 'setCause' due to `java.lang.reflect.InaccessibleObjectException`, problem: Unable to make final void java.lang.Throwable.setCause(java.lang.Throwable) accessible: module java.base does not \"opens java.lang\" to unnamed module\r\n```\r\n\r\nThis manifests in parts of the AWS v1 SDK when an error is received from the AWS API endpoints.  Note example report: https://github.com/FasterXML/jackson-databind/issues/2464#issuecomment-856996757\r\n\r\nThe simplified reproduce case below is based on what the failing AWS SDK code is doing internally in `com.amazonaws.transform.JsonErrorUnmarshaller.unmarshall`.\r\n\r\n**Version information**\r\n2.12.3, 2.12.5, 2.13.0-rc2\r\n\r\n**To Reproduce**\r\nExecute this code without any `--add-opens` params and with default `--illegal-access` setting of deny.\r\n\r\n```java\r\npublic class Test {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tObjectMapper mapper = new ObjectMapper();\r\n\t\tmapper.setPropertyNamingStrategy(PropertyNamingStrategies.UPPER_CAMEL_CASE);\r\n\r\n\t\tString jsonString = \"{\\\"message\\\":\\\"This is my runtime exception message\\\"}\";\r\n\t\tJsonNode jsonContent = mapper.readTree(jsonString);\r\n\r\n\t\tthrow mapper.treeToValue(jsonContent, RuntimeException.class);\r\n\t}\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nIt is expected that the code above would throw a RuntimeException with a message of \"This is my runtime exception message\".  This is what happens when working around the issue with java parameter `--add-opens java.base/java.lang=ALL-UNNAMED`\r\n\r\n**Additional context**\r\nUsing java parameter `--illegal-access=debug` results in the following additional info:\r\n\r\n```\r\nWARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.ClassUtil (file:/xxxxxx/jackson-databind-2.13.0-rc2.jar) to method java.lang.Throwable.setCause(java.lang.Throwable)\r\n\tat com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(ClassUtil.java:994)\r\n\tat com.fasterxml.jackson.databind.introspect.AnnotatedMember.fixAccess(AnnotatedMember.java:139)\r\n\tat com.fasterxml.jackson.databind.deser.impl.MethodProperty.fixAccess(MethodProperty.java:95)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder._fixAccess(BeanDeserializerBuilder.java:522)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.build(BeanDeserializerBuilder.java:373)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer(BeanDeserializerFactory.java:455)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:112)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:415)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:350)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:642)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:4751)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:4596)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2815)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.treeToValue(ObjectMapper.java:3279)\r\n\tat Test.main(Test.java:13)\r\n```\r\n\r\nNote that the issue does not manifest without `mapper.setPropertyNamingStrategy(PropertyNamingStrategies.UPPER_CAMEL_CASE);`\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3275/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3275/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3274","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3274/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3274/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3274/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3274","id":994626418,"node_id":"MDU6SXNzdWU5OTQ2MjY0MTg=","number":3274,"title":"Type-safe record wrappers","user":{"login":"io7m","id":612494,"node_id":"MDQ6VXNlcjYxMjQ5NA==","avatar_url":"https://avatars.githubusercontent.com/u/612494?v=4","gravatar_id":"","url":"https://api.github.com/users/io7m","html_url":"https://github.com/io7m","followers_url":"https://api.github.com/users/io7m/followers","following_url":"https://api.github.com/users/io7m/following{/other_user}","gists_url":"https://api.github.com/users/io7m/gists{/gist_id}","starred_url":"https://api.github.com/users/io7m/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/io7m/subscriptions","organizations_url":"https://api.github.com/users/io7m/orgs","repos_url":"https://api.github.com/users/io7m/repos","events_url":"https://api.github.com/users/io7m/events{/privacy}","received_events_url":"https://api.github.com/users/io7m/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-13T08:52:58Z","updated_at":"2021-09-13T08:52:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nThe following example code uses a trivial wrapper record (`LocationID`) to allow some extra type-safety when working with elements declared in an existing schema:\r\n\r\n```\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\r\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\r\nimport com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Objects;\r\nimport java.util.UUID;\r\n\r\npublic final class SerialDemo2\r\n{\r\n  private SerialDemo2()\r\n  {\r\n\r\n  }\r\n\r\n  record LocationID(UUID id) {\r\n    LocationID {\r\n      Objects.requireNonNull(id, \"id\");\r\n    }\r\n  }\r\n\r\n  @JacksonXmlRootElement(namespace = \"urn:com.io7m.cardant.inventory:1\")\r\n  record Location(\r\n    @JsonProperty(required = true)\r\n    @JacksonXmlProperty(isAttribute = true, localName = \"id\")\r\n    LocationID id,\r\n\r\n    @JsonProperty(required = false)\r\n    @JacksonXmlProperty(isAttribute = true, localName = \"parent\")\r\n    LocationID parent\r\n  ) {\r\n    Location {\r\n      Objects.requireNonNull(id, \"id\");\r\n    }\r\n  }\r\n\r\n  public static void main(\r\n    final String[] args)\r\n    throws IOException\r\n  {\r\n    final var mapper =\r\n      XmlMapper.builder()\r\n        .build();\r\n\r\n    System.out.println(\"Expected: \");\r\n    System.out.println();\r\n    System.out.println(\"\"\"\r\n<Location xmlns=\"urn:com.io7m.cardant.inventory:1\" \r\n  id=\"6e3f4213-db36-4ea3-91ba-1ce6917cbcbb\" \r\n  parent=\"265f34b3-8c86-4a1f-b23a-bb104238bfc6\"/>    \r\n\"\"\");\r\n\r\n    System.out.println(\"Received: \");\r\n    System.out.println();\r\n    mapper.writeValue(\r\n      System.out,\r\n      new Location(\r\n        new LocationID(UUID.randomUUID()),\r\n        new LocationID(UUID.randomUUID())\r\n      )\r\n    );\r\n    System.out.println();\r\n  }\r\n}\r\n```\r\n\r\nThe output of the program ends up as:\r\n\r\n```\r\nExpected: \r\n\r\n<Location xmlns=\"urn:com.io7m.cardant.inventory:1\"\r\n  id=\"6e3f4213-db36-4ea3-91ba-1ce6917cbcbb\"\r\n  parent=\"265f34b3-8c86-4a1f-b23a-bb104238bfc6\"/>\r\n\r\nReceived: \r\n\r\n<Location xmlns=\"urn:com.io7m.cardant.inventory:1\"><id xmlns=\"\"><id>c09fb552-e36c-4213-b56a-7729cd5b7999</id></id><parent xmlns=\"\"><id>58c399ae-0256-4dbd-a00e-0c1c01189559</id></parent></Location>\r\n```\r\n\r\nThe desired output _can_ be produced with the following definitions instead:\r\n\r\n```\r\n  final class CA1LocationID\r\n  {\r\n    private final UUID id;\r\n\r\n    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\r\n    public CA1LocationID(\r\n      final UUID inId)\r\n    {\r\n      this.id = Objects.requireNonNull(inId, \"id\");\r\n    }\r\n\r\n    @JsonValue\r\n    @Override\r\n    public UUID id()\r\n    {\r\n      return this.id;\r\n    }\r\n  }\r\n```\r\n\r\nBut it's slightly unfortunate that the definitions have to be declared in this way, because we lose a lot of the nice properties of `record` classes in the process.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI'd like to be able to use records instead of POJOs in the above example.\r\n\r\n**Usage example**\r\n\r\nSee above. :slightly_smiling_face: \r\n\r\n**Additional context**\r\n\r\nSee this thread on the mailing list:  https://groups.google.com/d/msgid/jackson-user/20210911172814.62fd2925%40sunflower.int.arc7.info\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3274/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3270","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3270/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3270/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3270/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3270","id":988167080,"node_id":"MDU6SXNzdWU5ODgxNjcwODA=","number":3270,"title":"Block 2 more gadget types","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":776337784,"node_id":"MDU6TGFiZWw3NzYzMzc3ODQ=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/CVE","name":"CVE","color":"e0577c","default":false,"description":"Issues related to public CVEs (security vuln reports)"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-04T00:13:32Z","updated_at":"2021-10-15T17:45:49Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Another gadget type(s) reported regarding class(es) of [library to include on publish] library.\r\n(see https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062 for description of the general problem).\r\n\r\nThe current criteria for considering a block is specified as follows:\r\n\r\nhttps://github.com/FasterXML/jackson/wiki/Jackson-Polymorphic-Deserialization-CVE-Criteria\r\n\r\nand the reported type(s) fulfill the criteria.\r\n\r\nReporter(s): \r\nMitre id(s): \r\n\r\n* Not (yet?) requested\r\n\r\nFix would be included in:\r\n\r\n* 2.9.10.9 (usable via `jackson-bom` version ---) if fix is released\r\n* Not considered valid CVE for Jackson 2.10.0 and later (see https://medium.com/@cowtowncoder/jackson-2-10-safe-default-typing-2d018f0ce2ba)\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3270/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3270/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3268","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3268/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3268/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3268/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3268","id":987371807,"node_id":"MDU6SXNzdWU5ODczNzE4MDc=","number":3268,"title":"Jackson deserialization using JsonParser is skipping the first key value pair @context","user":{"login":"Aravinda93","id":29374160,"node_id":"MDQ6VXNlcjI5Mzc0MTYw","avatar_url":"https://avatars.githubusercontent.com/u/29374160?v=4","gravatar_id":"","url":"https://api.github.com/users/Aravinda93","html_url":"https://github.com/Aravinda93","followers_url":"https://api.github.com/users/Aravinda93/followers","following_url":"https://api.github.com/users/Aravinda93/following{/other_user}","gists_url":"https://api.github.com/users/Aravinda93/gists{/gist_id}","starred_url":"https://api.github.com/users/Aravinda93/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Aravinda93/subscriptions","organizations_url":"https://api.github.com/users/Aravinda93/orgs","repos_url":"https://api.github.com/users/Aravinda93/repos","events_url":"https://api.github.com/users/Aravinda93/events{/privacy}","received_events_url":"https://api.github.com/users/Aravinda93/received_events","type":"User","site_admin":false},"labels":[{"id":890728708,"node_id":"MDU6TGFiZWw4OTA3Mjg3MDg=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-09-03T03:57:53Z","updated_at":"2021-09-09T03:09:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am building a Jackson deserialization application that can handle the deserialization of `CustomerList` and `Customer`. Users can provide any input and based on the input the code will make the decision whether the provided input JSON is `CustomerList` or `Single Customer`.\r\n\r\nEverything is working as expected apart from one small thing. When I provide the `CustomerList` JSON then it would skip the first `key value` pair. In my case, it's skipping the `@Context`.\r\n\r\nFollowing is the `JSON` i am trying to deserialize:\r\n```\r\n{\r\n  \"@context\": [\r\n    \"https://stackoverflow.com\",\r\n    {\r\n      \"example\": \"https://example.com\"\r\n    }\r\n  ],\r\n  \"isA\": \"CustomerDocument\",\r\n  \"customerList\": [\r\n    {\r\n      \"isA\": \"Customer\",\r\n      \"name\": \"Batman\",\r\n      \"age\": \"2008\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nFollowing is my Customer POJO class:\r\n```\r\n@Data\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, visible = true, property = \"isA\")\r\n@JsonInclude(JsonInclude.Include.NON_NULL)\r\npublic class Customer implements BaseResponse {\r\n    private String isA;\r\n    private String name;\r\n    private String age;\r\n}\r\n\r\n\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, visible = true, property = \"isA\")\r\n@JsonSubTypes({\r\n        @JsonSubTypes.Type(value = Customer.class, name = \"Customer\")})\r\ninterface BaseResponse {\r\n}\r\n```\r\n\r\nFollowing is the Main:\r\n```\r\npublic class JacksonMain {\r\n    public static void main(String[] args) throws IOException {\r\n        final InputStream jsonStream = JacksonMain.class.getClassLoader().getResourceAsStream(\"Customer.json\");\r\n        final JsonParser jsonParser = new JsonFactory().createParser(jsonStream);\r\n        final ObjectMapper objectMapper = new ObjectMapper();\r\n        jsonParser.setCodec(objectMapper);\r\n\r\n        //Goto the start of the document\r\n        jsonParser.nextToken();\r\n\r\n        try {\r\n            BaseResponse baseResponse = objectMapper.readValue(jsonParser, BaseResponse.class);\r\n            System.out.println(\"SINGLE EVENT INPUT\" + baseResponse.toString());\r\n        } catch (Exception e) {\r\n            System.out.println(\"LIST OF CUSTOMER INPUT\");\r\n            //Go until the customerList has been reached\r\n            while (!jsonParser.getText().equals(\"customerList\")) {\r\n                System.out.println(\"Current Token Name : \" + jsonParser.getCurrentName());\r\n                if (jsonParser.getCurrentName() != null && jsonParser.getCurrentName().equalsIgnoreCase(\"@context\")) {\r\n                    System.out.println(\"WITHIN CONTEXT\");\r\n                }\r\n                jsonParser.nextToken();\r\n            }\r\n            jsonParser.nextToken();\r\n\r\n            //Loop through each object within the customerList and deserilize them\r\n            while (jsonParser.nextToken() != JsonToken.END_ARRAY) {\r\n                final JsonNode customerNode = jsonParser.readValueAsTree();\r\n                final String eventType = customerNode.get(\"isA\").asText();\r\n                Object event = objectMapper.treeToValue(customerNode, BaseResponse.class);\r\n                System.out.println(event.toString());\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhen I run the application I get the following response:\r\n```\r\nLIST OF CUSTOMER INPUT\r\nCurrent Token Name : isA\r\nCustomer(isA=Customer, name=Batman, age=2008)\r\n```\r\n\r\nAs we can see it's printing only `Current Token Name: isA` I would expect it to print `isA and @Context` because it's present before the `isA`. \r\n\r\nThe weird thing that I am seeing is that if I switch the places of `isA` and `@context` in my `JSON` something like this:\r\n```\r\n{\r\n  \"isA\": \"CustomerDocument\",\r\n  \"@context\": [\r\n    \"https://stackoverflow.com\",\r\n    {\r\n      \"example\": \"https://example.com\"\r\n    }\r\n  ],\r\n  \"customerList\": [\r\n    {\r\n      \"isA\": \"Customer\",\r\n      \"name\": \"Batman\",\r\n      \"age\": \"2008\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThen I get the output like this, As you can see now it's reading the `@context` and `isA` both.\r\n```\r\nLIST OF CUSTOMER INPUT\r\nCurrent Token Name : isA\r\nCurrent Token Name : @context\r\nWITHIN CONTEXT\r\nCurrent Token Name : @context\r\nWITHIN CONTEXT\r\nCurrent Token Name : null\r\nCurrent Token Name : null\r\nCurrent Token Name : example\r\nCurrent Token Name : example\r\nCurrent Token Name : null\r\nCurrent Token Name : @context\r\nWITHIN CONTEXT\r\nCustomer(isA=Customer, name=Batman, age=2008)\r\n```\r\n\r\nSince it's working in the second case I am thinking it's not an issue with my code. But I am not sure what's causing the issue for it to not read in the `firstcase` (with `@context` first and `isA` second).  Can someone please help me understand this issue and provide some workaround as I am trying since yesterday to figure out the problem? Is this a bug in Jackson?\r\n\r\nPlease note:\r\nThe JSON is out of my control as it's coming from another application. Provided JSON is a replica of my actual application JSON.\r\n\r\nThe second JSON that I can feed to the application is the direct customer rather than a list: (with the current code this is working perfectly)\r\n```\r\n{\r\n  \"@context\": [\r\n    \"https://stackoverflow.com\",\r\n    {\r\n      \"example\": \"https://example.com\"\r\n    }\r\n  ],\r\n  \"isA\": \"Customer\",\r\n  \"name\": \"Batman\",\r\n  \"age\": \"2008\"\r\n}\r\n\r\n```\r\n\r\nCan someone please help me understand why Jackson is skipping the `@context` when provided first and provide some workaround as I am trying since yesterday to figure out the problem? Is this a bug in Jackson?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3268/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3268/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3264","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3264/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3264/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3264/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3264","id":983826332,"node_id":"MDU6SXNzdWU5ODM4MjYzMzI=","number":3264,"title":"JSON parse error when API request object contains a single private final field","user":{"login":"yoavikz","id":19560524,"node_id":"MDQ6VXNlcjE5NTYwNTI0","avatar_url":"https://avatars.githubusercontent.com/u/19560524?v=4","gravatar_id":"","url":"https://api.github.com/users/yoavikz","html_url":"https://github.com/yoavikz","followers_url":"https://api.github.com/users/yoavikz/followers","following_url":"https://api.github.com/users/yoavikz/following{/other_user}","gists_url":"https://api.github.com/users/yoavikz/gists{/gist_id}","starred_url":"https://api.github.com/users/yoavikz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yoavikz/subscriptions","organizations_url":"https://api.github.com/users/yoavikz/orgs","repos_url":"https://api.github.com/users/yoavikz/repos","events_url":"https://api.github.com/users/yoavikz/events{/privacy}","received_events_url":"https://api.github.com/users/yoavikz/received_events","type":"User","site_admin":false},"labels":[{"id":439290311,"node_id":"MDU6TGFiZWw0MzkyOTAzMTE=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/lombok","name":"lombok","color":"499db7","default":false,"description":null},{"id":890728708,"node_id":"MDU6TGFiZWw4OTA3Mjg3MDg=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-31T12:52:01Z","updated_at":"2021-09-02T10:05:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen trying to parse an API request with a single private final field such as this:\r\n\r\n``` java \r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.ToString;\r\n\r\n@ToString\r\n@AllArgsConstructor\r\npublic class ExampleRequest {\r\n\r\n    private final String string1;\r\n}\r\n```\r\n\r\nI am getting this exception:\r\n\r\n`Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot construct instance of `ExampleRequest` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator); nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `ExampleRequest` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: (PushbackInputStream); line: 2, column: 5]]`\r\n\r\nHowever,  when adding another field to the request object so that my code looks like this:\r\n\r\n``` java \r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.ToString;\r\n\r\n@ToString\r\n@AllArgsConstructor\r\npublic class ExampleRequest {\r\n\r\n    private final String string1;\r\n    private final String string2;\r\n}\r\n```\r\n\r\nI am getting a sucessfull parse and response (without changing the request itself):\r\n\r\n` received a request to update files state: 'ExampleRequest(string1=hello, string2=null)'`\r\n\r\n\r\nThis is the controller:\r\n\r\n``` java \r\n@PostMapping(\"/update-state\")\r\n    public String updateFilesState(@Valid @RequestBody ExampleRequest request) {\r\n        log.info(\"received a request to update files state: '{}'\", request);\r\n\r\n        return \"OK\";\r\n    }\r\n```\r\n\r\n**Version information**\r\n2.12.4\r\n\r\n**To Reproduce**\r\nIf you have a way to reproduce this with:\r\n\r\n1. Create a request object with 1 private final field (see example above)\r\n2. Call the API.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3264/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3262","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3262/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3262/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3262/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3262","id":981388671,"node_id":"MDU6SXNzdWU5ODEzODg2NzE=","number":3262,"title":"`InvalidDefinitionException: Java 8 date/time type java.time.LocalDateTime...` when calling `mapper.createObjectNode().putPOJO`","user":{"login":"jebbench","id":1029732,"node_id":"MDQ6VXNlcjEwMjk3MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1029732?v=4","gravatar_id":"","url":"https://api.github.com/users/jebbench","html_url":"https://github.com/jebbench","followers_url":"https://api.github.com/users/jebbench/followers","following_url":"https://api.github.com/users/jebbench/following{/other_user}","gists_url":"https://api.github.com/users/jebbench/gists{/gist_id}","starred_url":"https://api.github.com/users/jebbench/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jebbench/subscriptions","organizations_url":"https://api.github.com/users/jebbench/orgs","repos_url":"https://api.github.com/users/jebbench/repos","events_url":"https://api.github.com/users/jebbench/events{/privacy}","received_events_url":"https://api.github.com/users/jebbench/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-08-27T16:03:24Z","updated_at":"2021-09-28T02:40:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nWhen running the code below I get the exception:\r\n```\r\nException in thread \"main\" java.lang.RuntimeException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\" to enable handling\r\n\tat com.fasterxml.jackson.databind.node.InternalNodeMapper.nodeToPrettyString(InternalNodeMapper.java:40)\r\n\tat com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString(BaseJsonNode.java:141)\r\n\tat Main.main(Main.java:16)\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\" to enable handling\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\" to enable handling\r\n\r\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)\r\n\tat com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1300)\r\n\tat com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)\r\n\tat com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(SerializerProvider.java:1142)\r\n\tat com.fasterxml.jackson.databind.node.POJONode.serialize(POJONode.java:115)\r\n\tat com.fasterxml.jackson.databind.node.ObjectNode.serialize(ObjectNode.java:328)\r\n\tat com.fasterxml.jackson.databind.ser.std.SerializableSerializer.serialize(SerializableSerializer.java:39)\r\n\tat com.fasterxml.jackson.databind.ser.std.SerializableSerializer.serialize(SerializableSerializer.java:20)\r\n\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)\r\n\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)\r\n\tat com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1518)\r\n\tat com.fasterxml.jackson.databind.ObjectWriter._writeValueAndClose(ObjectWriter.java:1219)\r\n\tat com.fasterxml.jackson.databind.ObjectWriter.writeValueAsString(ObjectWriter.java:1086)\r\n\tat com.fasterxml.jackson.databind.node.InternalNodeMapper.nodeToPrettyString(InternalNodeMapper.java:38)\r\n\t... 2 more\r\n```\r\n2.11.4 works as expected.\r\n2.13.0-rc2 fails with the same error.\r\n\r\nMain.java\r\n```java\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        ObjectMapper mapper = JsonMapper.builder()\r\n            .addModule(new JavaTimeModule())\r\n            .build();\r\n\r\n        ObjectNode node = mapper.createObjectNode().putPOJO(\"test\", LocalDateTime.now());\r\n        System.out.println(node.toPrettyString());\r\n    }\r\n\r\n}\r\n```\r\n\r\nbuild.gradle\r\n```groovy\r\nplugins {\r\n    id 'java'\r\n}\r\n\r\ngroup 'org.example'\r\nversion '1.0-SNAPSHOT'\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation platform(\"com.fasterxml.jackson:jackson-bom:2.12.5\")\r\n    implementation \"com.fasterxml.jackson.core:jackson-databind\"\r\n    implementation \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\"\r\n}\r\n```\r\n\r\nI've tried using AdoptOpenJDK (OpenJ9) 11.0.11 and AdoptOpenJDK (Hotspot) 14.0.2 and I get the same result on both.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3262/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3262/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3255","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3255/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3255/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3255/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3255","id":977891950,"node_id":"MDU6SXNzdWU5Nzc4OTE5NTA=","number":3255,"title":"A conversion that worked before doesn't anymore:serviceInstanceRequest]]: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Conflicting getter definitions for property \"organization_guid\"","user":{"login":"TerryHuang91","id":2155487,"node_id":"MDQ6VXNlcjIxNTU0ODc=","avatar_url":"https://avatars.githubusercontent.com/u/2155487?v=4","gravatar_id":"","url":"https://api.github.com/users/TerryHuang91","html_url":"https://github.com/TerryHuang91","followers_url":"https://api.github.com/users/TerryHuang91/followers","following_url":"https://api.github.com/users/TerryHuang91/following{/other_user}","gists_url":"https://api.github.com/users/TerryHuang91/gists{/gist_id}","starred_url":"https://api.github.com/users/TerryHuang91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TerryHuang91/subscriptions","organizations_url":"https://api.github.com/users/TerryHuang91/orgs","repos_url":"https://api.github.com/users/TerryHuang91/repos","events_url":"https://api.github.com/users/TerryHuang91/events{/privacy}","received_events_url":"https://api.github.com/users/TerryHuang91/received_events","type":"User","site_admin":false},"labels":[{"id":890728708,"node_id":"MDU6TGFiZWw4OTA3Mjg3MDg=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2021-08-24T09:21:22Z","updated_at":"2021-09-19T01:05:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nA conversion that worked before doesn't anymore: serviceInstanceRequest]]: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Conflicting getter definitions for property \"organization_guid\"\r\n\r\n**Version information**\r\nWhich Jackson version(s) was this for?\r\nupgrade from 2.11.4 to 2.12.4\r\n\r\n**To Reproduce**\r\nIf you have a way to reproduce this with:\r\n\r\nHere is the pojo class:\r\nhttps://github.com/spring-cloud/spring-cloud-open-service-broker/blob/main/spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/model/instance/CreateServiceInstanceRequest.java\r\n\r\nConvert this class will return this error log:\r\n**_com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Conflicting getter definitions for property \"organization_guid\": org.springframework.cloud.servicebroker.model.instance.CreateServiceInstanceRequest#getOrganizationGuid() vs  org.springframework.cloud.servicebroker.model.instance.CreateServiceInstanceRequest#getOrganizationGuidToSerialize()_**\r\n\r\n**Expected behavior**\r\nConversion should succeed.\r\n\r\n**Additional context**\r\nspring-cloud-starter-open-service-broker 3.3.0","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3255/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3251","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3251/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3251/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3251/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3251","id":974564819,"node_id":"MDU6SXNzdWU5NzQ1NjQ4MTk=","number":3251,"title":"Generic class with generic field of runtime type Double is deserialized as BigDecimal when used with @JsonTypeInfo and JsonTypeInfo.As.EXISTING_PROPERTY","user":{"login":"BaesKevin","id":26406179,"node_id":"MDQ6VXNlcjI2NDA2MTc5","avatar_url":"https://avatars.githubusercontent.com/u/26406179?v=4","gravatar_id":"","url":"https://api.github.com/users/BaesKevin","html_url":"https://github.com/BaesKevin","followers_url":"https://api.github.com/users/BaesKevin/followers","following_url":"https://api.github.com/users/BaesKevin/following{/other_user}","gists_url":"https://api.github.com/users/BaesKevin/gists{/gist_id}","starred_url":"https://api.github.com/users/BaesKevin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BaesKevin/subscriptions","organizations_url":"https://api.github.com/users/BaesKevin/orgs","repos_url":"https://api.github.com/users/BaesKevin/repos","events_url":"https://api.github.com/users/BaesKevin/events{/privacy}","received_events_url":"https://api.github.com/users/BaesKevin/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-19T11:29:40Z","updated_at":"2021-08-26T23:17:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nBug appears when deserializing a generic class with a generic field with runtime type double, and the generic class \r\nis annotated with @JsonTypeInfo with @JsonTypeInfo with JsonTypeInfo.As.EXISTING_PROPERTY.\r\nThe bug does not occur when using @JsonTypeInfo with JsonTypeInfo.As.PROPERTY.\r\n\r\n**Version information**\r\n\r\n* bug exists in 2.12.4\r\n* bug does not exist in 2.11.3\r\n* Java version: 16\r\n\r\n**To Reproduce**\r\n\r\nTest with 1 succeeding and 1 failing case, expecting both to succeed.\r\n\r\n```\r\npackage com.test;\r\n\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonProperty;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\r\nimport org.junit.Test;\r\n\r\npublic class JacksonMapperDeserializesDoubleAsDoubleTest {\r\n\r\n    private final ObjectMapper objectMapper = new MyObjectMapper();\r\n\r\n    static class MyObjectMapper extends ObjectMapper {\r\n        public MyObjectMapper() {\r\n            registerModule(new Jdk8Module());\r\n            // this is default, set it to be sure\r\n            configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, false);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void deserializesDoubleToDouble_givenJsonTypeInfoUsingNewProperty() throws JsonProcessingException {\r\n        GenericWrapperWithNewProperty<?> wrapper = new GenericWrapperWithNewProperty<>(123.45);\r\n\r\n        String json = objectMapper.writeValueAsString(wrapper);\r\n        GenericWrapperWithNewProperty<?> actualWrapper = objectMapper.readValue(json, GenericWrapperWithNewProperty.class);\r\n\r\n        assertThat(actualWrapper).satisfies(it -> assertThat(it.getValue()).isEqualTo(123.45));\r\n        assertThat(json).contains(\"\\\"value\\\":123.45\");\r\n    }\r\n\r\n    @Test\r\n    public void deserializesDoubleToDouble_givenJsonTypeInfoUsingExistingProperty() throws JsonProcessingException {\r\n        GenericWrapperWithExistingProperty<?> wrapper = new GenericWrapperWithExistingProperty<>(123.45);\r\n\r\n        String json = objectMapper.writeValueAsString(wrapper);\r\n        GenericWrapperWithExistingProperty<?> actualWrapper = objectMapper.readValue(json, GenericWrapperWithExistingProperty.class);\r\n\r\n        assertThat(actualWrapper).satisfies(it -> assertThat(it.getValue()).isEqualTo(123.45));\r\n        assertThat(json).contains(\"\\\"value\\\":123.45\");\r\n    }\r\n\r\n    @JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        property = \"type_alias\"\r\n    )\r\n    static class GenericWrapperWithNewProperty<T> {\r\n        private final T value;\r\n\r\n        @JsonCreator\r\n        public GenericWrapperWithNewProperty(@JsonProperty(\"value\") T value) {\r\n            this.value = value;\r\n        }\r\n\r\n        public T getValue() {\r\n            return value;\r\n        }\r\n    }\r\n\r\n// @JsonSubtypes or using abstract classes and such is not required to reproduce the issue\r\n    @JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        include = JsonTypeInfo.As.EXISTING_PROPERTY,\r\n        property = \"fieldType\",\r\n        visible = true,\r\n        defaultImpl = GenericWrapperWithExistingProperty.class\r\n    )\r\n    static class GenericWrapperWithExistingProperty<T> {\r\n        private String fieldType;\r\n        private final T value;\r\n\r\n        @JsonCreator\r\n        public GenericWrapperWithExistingProperty(@JsonProperty(\"value\") T value) {\r\n            this.value = value;\r\n        }\r\n\r\n        public T getValue() {\r\n            return value;\r\n        }\r\n\r\n        public String getFieldType() {\r\n            return fieldType;\r\n        }\r\n\r\n        public void setFieldType(String fieldType) {\r\n            this.fieldType = fieldType;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n**Additional context**\r\n\r\nThis bug started happening when upgrading Spring Boot from 2.4.1 to 2.5.3. \r\nAs we don't manage Jackson version ourselves, Jackson was upgraded to 2.12.4, \r\nI have not tried to reproduce this issue with a project that has only Jackson dependencies, managed \r\nby jackson BOM 2.12.4.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3251/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3241","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3241/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3241/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3241/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3241","id":968759174,"node_id":"MDU6SXNzdWU5Njg3NTkxNzQ=","number":3241,"title":"constructorDetector seems to invalidate defaultSetterInfo for nullability","user":{"login":"joca-bt","id":1297942,"node_id":"MDQ6VXNlcjEyOTc5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1297942?v=4","gravatar_id":"","url":"https://api.github.com/users/joca-bt","html_url":"https://github.com/joca-bt","followers_url":"https://api.github.com/users/joca-bt/followers","following_url":"https://api.github.com/users/joca-bt/following{/other_user}","gists_url":"https://api.github.com/users/joca-bt/gists{/gist_id}","starred_url":"https://api.github.com/users/joca-bt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joca-bt/subscriptions","organizations_url":"https://api.github.com/users/joca-bt/orgs","repos_url":"https://api.github.com/users/joca-bt/repos","events_url":"https://api.github.com/users/joca-bt/events{/privacy}","received_events_url":"https://api.github.com/users/joca-bt/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"},{"id":2457821256,"node_id":"MDU6TGFiZWwyNDU3ODIxMjU2","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/has-failing-test","name":"has-failing-test","color":"4e8a16","default":false,"description":"Indicates that there exists a test case (under `failing/`) to reproduce the issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-12T12:47:20Z","updated_at":"2021-08-25T04:05:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Was trying out the new constructor detector feature (https://cowtowncoder.medium.com/jackson-2-12-most-wanted-3-5-246624e2d3d0/) and stumbled upon the following issue.\r\n\r\nI had this code which forbids nulls on deserialization:\r\n\r\n```\r\nimport com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonSetter;\r\nimport com.fasterxml.jackson.annotation.Nulls;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\r\n\r\npublic class Input {\r\n    private final Boolean field;\r\n\r\n    @JsonCreator\r\n    public Input(Boolean field) {\r\n        this.field = field;\r\n    }\r\n}\r\n\r\nObjectMapper objectMapper = JsonMapper.builder()\r\n    .addModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))\r\n    .defaultSetterInfo(JsonSetter.Value.construct(Nulls.FAIL, Nulls.FAIL))\r\n    .build();\r\n\r\nobjectMapper.readValue(\"{ \\\"field\\\": null }\", Input.class); // throws InvalidNullException, as expected\r\n```\r\n\r\nand was trying to get rid of `@JsonCreator` with the following\r\n\r\n```\r\nimport com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.annotation.JsonSetter;\r\nimport com.fasterxml.jackson.annotation.Nulls;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.cfg.ConstructorDetector;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\r\n\r\npublic class Input {\r\n    private final Boolean field;\r\n\r\n    // @JsonCreator gone!\r\n    public Input(Boolean field) {\r\n        this.field = field;\r\n    }\r\n\r\n    public Boolean field() {\r\n      return field;\r\n    }\r\n}\r\n\r\nObjectMapper objectMapper = JsonMapper.builder()\r\n    .addModule(new ParameterNamesModule(JsonCreator.Mode.PROPERTIES))\r\n    .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED) // new!\r\n    .defaultSetterInfo(JsonSetter.Value.construct(Nulls.FAIL, Nulls.FAIL))\r\n    .build();\r\n\r\nobjectMapper.readValue(\"{ \\\"field\\\": null }\", Input.class); // no error, field is assigned to null\r\n```\r\n\r\nAlthough I no longer need to annotate my class with `@JsonCreator`, my settings for nullability are ignored, which means I can't really use the new feature.\r\n\r\n(Might be related with https://github.com/FasterXML/jackson-databind/issues/3227?)","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3241/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3241/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3240","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3240/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3240/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3240/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3240","id":968679401,"node_id":"MDU6SXNzdWU5Njg2Nzk0MDE=","number":3240,"title":"The default String deserializer does not enforce coercion configs","user":{"login":"joca-bt","id":1297942,"node_id":"MDQ6VXNlcjEyOTc5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1297942?v=4","gravatar_id":"","url":"https://api.github.com/users/joca-bt","html_url":"https://github.com/joca-bt","followers_url":"https://api.github.com/users/joca-bt/followers","following_url":"https://api.github.com/users/joca-bt/following{/other_user}","gists_url":"https://api.github.com/users/joca-bt/gists{/gist_id}","starred_url":"https://api.github.com/users/joca-bt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joca-bt/subscriptions","organizations_url":"https://api.github.com/users/joca-bt/orgs","repos_url":"https://api.github.com/users/joca-bt/repos","events_url":"https://api.github.com/users/joca-bt/events{/privacy}","received_events_url":"https://api.github.com/users/joca-bt/received_events","type":"User","site_admin":false},"labels":[{"id":2123541415,"node_id":"MDU6TGFiZWwyMTIzNTQxNDE1","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/coercion-config","name":"coercion-config","color":"c3b8f2","default":false,"description":"Issue related to 2.12 added \"CoercionConfig\""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-12T11:58:34Z","updated_at":"2021-08-12T23:59:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The default String deserializer does not enforce coercion configs (or feature [ALLOW_COERCION_OF_SCALARS](https://fasterxml.github.io/jackson-databind/javadoc/2.12/com/fasterxml/jackson/databind/MapperFeature.html#ALLOW_COERCION_OF_SCALARS)).\r\n\r\n```\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.cfg.CoercionAction;\r\nimport com.fasterxml.jackson.databind.cfg.CoercionInputShape;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\n\r\nObjectMapper objectMapper = JsonMapper.builder().build();\r\nobjectMapper.coercionConfigDefaults()\r\n    .setCoercion(CoercionInputShape.Boolean, CoercionAction.Fail)\r\n    .setCoercion(CoercionInputShape.Integer, CoercionAction.Fail)\r\n    .setCoercion(CoercionInputShape.Float, CoercionAction.Fail)\r\n    .setCoercion(CoercionInputShape.String, CoercionAction.Fail)\r\n    .setCoercion(CoercionInputShape.Array, CoercionAction.Fail)\r\n    .setCoercion(CoercionInputShape.Object, CoercionAction.Fail);\r\n\r\nobjectMapper.readValue(\"true\", String.class); // should throw MismatchedInputException but doesn't\r\nobjectMapper.readValue(\"1\", String.class); // should throw MismatchedInputException but doesn't\r\nobjectMapper.readValue(\"1.0\", String.class); // should throw MismatchedInputException but doesn't\r\nobjectMapper.readValue(\"[]\", String.class); // throws MismatchedInputException\r\nobjectMapper.readValue(\"{}\", String.class); // throws MismatchedInputException\r\n```\r\n\r\nWhen the source is a scalar value, coercion configs seem to be ignored\r\nhttps://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3240/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3240/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3233","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3233/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3233/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3233/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3233","id":962683252,"node_id":"MDU6SXNzdWU5NjI2ODMyNTI=","number":3233,"title":"Help me migrating, JsonPath","user":{"login":"palexdev","id":16880178,"node_id":"MDQ6VXNlcjE2ODgwMTc4","avatar_url":"https://avatars.githubusercontent.com/u/16880178?v=4","gravatar_id":"","url":"https://api.github.com/users/palexdev","html_url":"https://github.com/palexdev","followers_url":"https://api.github.com/users/palexdev/followers","following_url":"https://api.github.com/users/palexdev/following{/other_user}","gists_url":"https://api.github.com/users/palexdev/gists{/gist_id}","starred_url":"https://api.github.com/users/palexdev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/palexdev/subscriptions","organizations_url":"https://api.github.com/users/palexdev/orgs","repos_url":"https://api.github.com/users/palexdev/repos","events_url":"https://api.github.com/users/palexdev/events{/privacy}","received_events_url":"https://api.github.com/users/palexdev/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-06T12:14:33Z","updated_at":"2021-08-06T12:14:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm currently using Gson in my project, but due to a bug during Long values deserialization I would like to migrate to Jackson.  \r\nThe thing is I don't really know how to do it because I also use JsonPath with a custom annotation.  \r\nThis is the `TypeAdapterFactory` I use: [TypeAdapterFactory](https://pastebin.com/LkTXtwj1)\r\n\r\nThis is the custom annotation I use: [Annotation](https://pastebin.com/YhJ0cfTM)\r\n\r\nAnd finally the configuration I use for Gson: [GsonConfig](https://pastebin.com/24R4Tjps)  \r\nThis allows me to do something like this for deserialization:  \r\n```java\r\npublic class User {\r\n    //================================================================================\r\n    // Properties\r\n    //================================================================================\r\n    @JsonPathExpression(\"data.prop_a\")\r\n    private int propA;\r\n\r\n    @JsonPathExpression(\"data.prop_b\")\r\n    private int propB;\r\n\r\n    @JsonPathExpression(\"data.a_list\")\r\n    private List<AnObj> aList;\r\n}\r\n```\r\n\r\nAs you can guess I'm pretty lazy, writing serializers and deserializers for every class is too much time-consuming, but using JsonPath simplifies the process a lot, I almost have to do nothing.  \r\nCan I do the same thing in Jackson, it would be great","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3233/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3233/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3229","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3229/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3229/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3229/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3229","id":957981254,"node_id":"MDU6SXNzdWU5NTc5ODEyNTQ=","number":3229,"title":"Existing object of local/anonymous class cannot be updated","user":{"login":"avshenuk","id":4578760,"node_id":"MDQ6VXNlcjQ1Nzg3NjA=","avatar_url":"https://avatars.githubusercontent.com/u/4578760?v=4","gravatar_id":"","url":"https://api.github.com/users/avshenuk","html_url":"https://github.com/avshenuk","followers_url":"https://api.github.com/users/avshenuk/followers","following_url":"https://api.github.com/users/avshenuk/following{/other_user}","gists_url":"https://api.github.com/users/avshenuk/gists{/gist_id}","starred_url":"https://api.github.com/users/avshenuk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/avshenuk/subscriptions","organizations_url":"https://api.github.com/users/avshenuk/orgs","repos_url":"https://api.github.com/users/avshenuk/repos","events_url":"https://api.github.com/users/avshenuk/events{/privacy}","received_events_url":"https://api.github.com/users/avshenuk/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-02T10:08:35Z","updated_at":"2021-09-04T00:31:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using `readerForUpdating` with an existing object, Jackson fails with:\r\n```\r\nCannot deserialize Class mypackage.MyClass$1 (of type local/anonymous) as a Bean\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType(BeanDeserializerFactory.java:883)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:137)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:414)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)\r\n```\r\n\r\n**Version information**\r\n2.10.3\r\n\r\n**To Reproduce**\r\n```\r\npackage mypackage;\r\npublic class MyClass {\r\n   public static void main(int[] args) {\r\n       Object resultObject = new Object() {\r\n           int value;\r\n       }\r\n       new ObjectMapper().readerForUpdating(resultObject).readValue(\"{\\\"value\\\": 2}\");\r\n   }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nSince Jackson is not required to construct an instance of the anonymous class, it should be able to populate the fields on the existing object.\r\nInvestigation shows that the method \r\n```\r\npublic Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException\r\n```\r\nin `com.fasterxml.jackson.databind.deser.BeanDeserializer` doesn't use `ValueInstantiator _valueInstantiator` field.\r\n\r\nSo can it be made optional when you're updating an existing instance? \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3229/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3228","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3228/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3228/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3228/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3228","id":957960973,"node_id":"MDU6SXNzdWU5NTc5NjA5NzM=","number":3228,"title":"[BUG] Inconsistent Parsing of JsonArray while reading multiple values from a source","user":{"login":"the-codinator","id":4411711,"node_id":"MDQ6VXNlcjQ0MTE3MTE=","avatar_url":"https://avatars.githubusercontent.com/u/4411711?v=4","gravatar_id":"","url":"https://api.github.com/users/the-codinator","html_url":"https://github.com/the-codinator","followers_url":"https://api.github.com/users/the-codinator/followers","following_url":"https://api.github.com/users/the-codinator/following{/other_user}","gists_url":"https://api.github.com/users/the-codinator/gists{/gist_id}","starred_url":"https://api.github.com/users/the-codinator/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/the-codinator/subscriptions","organizations_url":"https://api.github.com/users/the-codinator/orgs","repos_url":"https://api.github.com/users/the-codinator/repos","events_url":"https://api.github.com/users/the-codinator/events{/privacy}","received_events_url":"https://api.github.com/users/the-codinator/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-08-02T09:44:51Z","updated_at":"2021-08-13T16:53:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nBased on how the values are read, which intuitively seem identical, behave differently and produce different results\r\n\r\n**Version information**\r\n\r\nJava 11.0.11\r\nJackson 2.12.4\r\n\r\n**To Reproduce**\r\n\r\nI ran the following code snippet:\r\n\r\n```java\r\nclass Scratch {\r\n\r\n    private static final ObjectMapper om = new ObjectMapper().enable(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)\r\n        .enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        variations(\"{}\");\r\n        variations(\"1\");\r\n        variations(\"\\\"1\\\"\");\r\n        variations(\"true\");\r\n        variations(\"[1,2,3]\");\r\n        variations(\"1 [1,2,3] {} true\");\r\n        variations(\"[1,2,3] 1 {} true\");\r\n    }\r\n\r\n    private static void variations(String s) throws IOException {\r\n        System.out.println(\"\\n-------------------\\ninput = \" + s);\r\n        printAll(\"Parser\", om.readValues(om.getFactory().createParser(new ByteArrayInputStream(s.getBytes())), Object.class));\r\n        printAll(\"Reader Object\", om.readerFor(Object.class).readValues(new ByteArrayInputStream(s.getBytes())));\r\n        printAll(\"Reader JsonNode\", om.readerFor(JsonNode.class).readValues(new ByteArrayInputStream(s.getBytes())));\r\n    }\r\n\r\n    private static void printAll(String type, MappingIterator<?> iterator) throws IOException {\r\n        System.out.println(\"\\ntype = \" + type);\r\n        int line = 1;\r\n        while (iterator.hasNextValue()) {\r\n            Object o = iterator.nextValue();\r\n            System.out.println(line++ + \"> \" + o.getClass().getSimpleName() + \" = \" + o);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHas the following output (jump to the end for a tldr of the problem):\r\n\r\n```\r\n-------------------\r\ninput = {}\r\n\r\ntype = Parser\r\n1> LinkedHashMap = {}\r\n\r\ntype = Reader Object\r\n1> LinkedHashMap = {}\r\n\r\ntype = Reader JsonNode\r\n1> ObjectNode = {}\r\n\r\n-------------------\r\ninput = 1\r\n\r\ntype = Parser\r\n1> Integer = 1\r\n\r\ntype = Reader Object\r\n1> Integer = 1\r\n\r\ntype = Reader JsonNode\r\n1> IntNode = 1\r\n\r\n-------------------\r\ninput = \"1\"\r\n\r\ntype = Parser\r\n1> String = 1\r\n\r\ntype = Reader Object\r\n1> String = 1\r\n\r\ntype = Reader JsonNode\r\n1> TextNode = \"1\"\r\n\r\n-------------------\r\ninput = true\r\n\r\ntype = Parser\r\n1> Boolean = true\r\n\r\ntype = Reader Object\r\n1> Boolean = true\r\n\r\ntype = Reader JsonNode\r\n1> BooleanNode = true\r\n\r\n-------------------\r\ninput = [1,2,3]\r\n\r\ntype = Parser\r\n1> ArrayList = [1, 2, 3]\r\n\r\ntype = Reader Object\r\n1> Integer = 1\r\n2> Integer = 2\r\n3> Integer = 3\r\n\r\ntype = Reader JsonNode\r\n1> IntNode = 1\r\n2> IntNode = 2\r\n3> IntNode = 3\r\n\r\n-------------------\r\ninput = 1 [1,2,3] {} true\r\n\r\ntype = Parser\r\n1> Integer = 1\r\n2> ArrayList = [1, 2, 3]\r\n3> LinkedHashMap = {}\r\n4> Boolean = true\r\n\r\ntype = Reader Object\r\n1> Integer = 1\r\n2> ArrayList = [1, 2, 3]\r\n3> LinkedHashMap = {}\r\n4> Boolean = true\r\n\r\ntype = Reader JsonNode\r\n1> IntNode = 1\r\n2> ArrayNode = [1,2,3]\r\n3> ObjectNode = {}\r\n4> BooleanNode = true\r\n\r\n-------------------\r\ninput = [1,2,3] 1 {} true\r\n\r\ntype = Parser\r\n1> ArrayList = [1, 2, 3]\r\n2> Integer = 1\r\n3> LinkedHashMap = {}\r\n4> Boolean = true\r\n\r\ntype = Reader Object\r\n1> Integer = 1\r\n2> Integer = 2\r\n3> Integer = 3\r\n\r\ntype = Reader JsonNode\r\n1> IntNode = 1\r\n2> IntNode = 2\r\n3> IntNode = 3\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe problem is very simply showcased in the output of the input `[1,2,3]`\r\n\r\nI would've have expected the last input (`[1,2,3] 1 {} true`) to provide consistent results with the behavior of the penultimate input (`1 [1,2,3] {} true`). But that does not seem to be the case. Instead of reading them as 3 integers, and magically ignoring the remaining tokens (Note: FAIL_ON_TRAILING_TOKENS is enabled, but we got no error), it should have continued to read the data as a JsonArray and produced an ArrayList or ArrayNode.\r\n\r\nThe ObjectReader seems to have inconsistent configuration during creation. Hence creating this weird behavior.\r\n\r\nExpected Output for the last input:\r\n\r\n```\r\n-------------------\r\ninput = [1,2,3] 1 {} true\r\n\r\ntype = Parser\r\n1> ArrayList = [1, 2, 3]\r\n2> Integer = 1\r\n3> LinkedHashMap = {}\r\n4> Boolean = true\r\n\r\ntype = Reader Object\r\n1> ArrayList = [1, 2, 3]\r\n2> Integer = 1\r\n3> LinkedHashMap = {}\r\n4> Boolean = true\r\n\r\ntype = Reader JsonNode\r\n1> ArrayNode = [1, 2, 3]\r\n2> IntNode = 1\r\n3> ObjectNode = {}\r\n4> BooleanNode = true\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3228/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3227","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3227/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3227/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3227/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3227","id":957930700,"node_id":"MDU6SXNzdWU5NTc5MzA3MDA=","number":3227,"title":"Content `null` handling not working for root values","user":{"login":"joca-bt","id":1297942,"node_id":"MDQ6VXNlcjEyOTc5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1297942?v=4","gravatar_id":"","url":"https://api.github.com/users/joca-bt","html_url":"https://github.com/joca-bt","followers_url":"https://api.github.com/users/joca-bt/followers","following_url":"https://api.github.com/users/joca-bt/following{/other_user}","gists_url":"https://api.github.com/users/joca-bt/gists{/gist_id}","starred_url":"https://api.github.com/users/joca-bt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joca-bt/subscriptions","organizations_url":"https://api.github.com/users/joca-bt/orgs","repos_url":"https://api.github.com/users/joca-bt/repos","events_url":"https://api.github.com/users/joca-bt/events{/privacy}","received_events_url":"https://api.github.com/users/joca-bt/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/milestones/126","html_url":"https://github.com/FasterXML/jackson-databind/milestone/126","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/milestones/126/labels","id":6339120,"node_id":"MDk6TWlsZXN0b25lNjMzOTEyMA==","number":126,"title":"2.13.0","description":null,"creator":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"open_issues":2,"closed_issues":38,"state":"open","created_at":"2021-01-22T02:20:01Z","updated_at":"2021-10-15T17:32:21Z","due_on":null,"closed_at":null},"comments":2,"created_at":"2021-08-02T09:08:58Z","updated_at":"2021-08-25T03:42:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am trying to build an ObjectMapper which doesn't allow nulls. I noticed some slight discrepancy in behaviour depending on whether I am deserializing to a custom class representing a JSON object or something else.\r\n\r\n```\r\npublic class Input {\r\n    public Boolean field;\r\n}\r\n\r\nObjectMapper objectMapper = JsonMapper.builder()\r\n    .defaultSetterInfo(JsonSetter.Value.construct(Nulls.FAIL, Nulls.FAIL))\r\n    .build();\r\n\r\nobjectMapper.readValue(\"null\", Boolean.class); // 1) returns null\r\nobjectMapper.readValue(\"null\", boolean.class); // 2) returns null\r\nobjectMapper.readValue(\"{ \\\"field\\\": null }\", Map.class); // 3) returns Map.of(\"field\", null)\r\nobjectMapper.readValue(\"{ \\\"field\\\": null }\", Input.class); // 4) throws error\r\n```\r\n\r\nI was trying to generate an error for all cases but only getting for 4). Is this expected?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3227/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3223","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3223/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3223/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3223/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3223","id":953283203,"node_id":"MDU6SXNzdWU5NTMyODMyMDM=","number":3223,"title":"Ability to globally reject strings containing time information for LocalDate","user":{"login":"mjustin","id":1580571,"node_id":"MDQ6VXNlcjE1ODA1NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1580571?v=4","gravatar_id":"","url":"https://api.github.com/users/mjustin","html_url":"https://github.com/mjustin","followers_url":"https://api.github.com/users/mjustin/followers","following_url":"https://api.github.com/users/mjustin/following{/other_user}","gists_url":"https://api.github.com/users/mjustin/gists{/gist_id}","starred_url":"https://api.github.com/users/mjustin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjustin/subscriptions","organizations_url":"https://api.github.com/users/mjustin/orgs","repos_url":"https://api.github.com/users/mjustin/repos","events_url":"https://api.github.com/users/mjustin/events{/privacy}","received_events_url":"https://api.github.com/users/mjustin/received_events","type":"User","site_admin":false},"labels":[{"id":2287574271,"node_id":"MDU6TGFiZWwyMjg3NTc0Mjcx","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/to-evaluate","name":"to-evaluate","color":"fbca04","default":false,"description":"Issue that has been received but not yet evaluated"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-07-26T21:00:34Z","updated_at":"2021-08-09T22:18:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nI recently ran across a bug in code I was working on that was due to the client code passing across a date/time value for a different time zone than the server into a `LocalDate` property.  Due to this, the date portion of the string was a different date than was intended.  This would have been prevented had the backend code rejected the date/time value, and only accepted a value in `yyyy-MM-dd` format.  I can configure that for each individual property using `@JsonFormat(pattern = \"yyyy-MM-dd\")`, but I would rather be able to configure something like this globally.\r\n\r\n**Describe the solution you'd like**\r\nI would like a feature that could be configured on `ObjectMapper` that causes a date with temporal information to be rejected when deserializing to a `LocalDate`.  Two ways I could see this being done are by globally specifying the exact format to use (`yyyy-MM-dd`), or by having some sort of global flag telling Jackson to be strict about date formats that contain extra temporal information.\r\n\r\nHere are some related Stack Overflow questions regarding this same situation:\r\n\r\n1. https://stackoverflow.com/q/68513802\r\n2. https://stackoverflow.com/q/57367013","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3223/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3223/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3216","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3216/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3216/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3216/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3216","id":946165003,"node_id":"MDU6SXNzdWU5NDYxNjUwMDM=","number":3216,"title":"Delegating `@JsonCreator` does not prevent unnecessary introspection of properties, leading to bogus failure","user":{"login":"awildturtok","id":1553491,"node_id":"MDQ6VXNlcjE1NTM0OTE=","avatar_url":"https://avatars.githubusercontent.com/u/1553491?v=4","gravatar_id":"","url":"https://api.github.com/users/awildturtok","html_url":"https://github.com/awildturtok","followers_url":"https://api.github.com/users/awildturtok/followers","following_url":"https://api.github.com/users/awildturtok/following{/other_user}","gists_url":"https://api.github.com/users/awildturtok/gists{/gist_id}","starred_url":"https://api.github.com/users/awildturtok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/awildturtok/subscriptions","organizations_url":"https://api.github.com/users/awildturtok/orgs","repos_url":"https://api.github.com/users/awildturtok/repos","events_url":"https://api.github.com/users/awildturtok/events{/privacy}","received_events_url":"https://api.github.com/users/awildturtok/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-07-16T10:39:55Z","updated_at":"2021-07-19T17:19:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nI am trying to Serialize a class that has weird map-Types (eg. String[] as key), instead of implementing a Map(De)Serializer, I went the way of a @JsonValue and @JsonCreator, using an intermediate Container class as intermediary. This does work, however Jackson is giving me Errors about not finding appropriate Key-Deserializers (Which of course is true, but shouldn't happen as I am explicitly forgoing them). When I mark the Map field with @JsonIgnore, the Objects are properly (de)serialized.\r\n\r\n```\r\ncom.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot find a (Map) Key deserializer for type [array type, component type: [simple type, class java.lang.String]]\r\n at [Source: (String)\"{\"keys\":[[\"a\",\"b\"]],\"values\":[\"c\"]}\"; line: 1, column: 1]\r\n\r\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1592)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._handleUnknownKeyDeserializer(DeserializerCache.java:602)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache.findKeyDeserializer(DeserializerCache.java:168)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer(DeserializationContext.java:502)\r\n\tat com.fasterxml.jackson.databind.deser.std.MapDeserializer.createContextual(MapDeserializer.java:248)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(DeserializationContext.java:653)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(BeanDeserializerBase.java:489)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:293)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)\r\n\tat com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:479)\r\n\tat com.fasterxml.jackson.databind.ObjectReader._findRootDeserializer(ObjectReader.java:2050)\r\n\tat com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1714)\r\n\tat com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1261)\r\n\tat com.bakdata.conquery.models.identifiable.mapping.EntityIdMapTest.test(EntityIdMapTest.java:70)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\r\n\r\n```\r\n\r\n**Version information**\r\n\r\n2.10.5\r\n\r\n**To Reproduce**\r\n\r\n```{java}\r\n\r\nimport java.util.*;\r\n\r\nimport com.fasterxml.jackson.annotation.*\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nclass Test {\r\n\r\n\tpublic static class Container {\r\n\r\n\t\tpublic List<String[]> keys;\r\n\t\tpublic List<String> values;\r\n\r\n\t\tpublic Container() {}\r\n\r\n\t\tpublic Container(List<String[]> keys, List<String> values) {\r\n\t\t\tthis.keys = keys;\r\n\t\t\tthis.values = values;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic static class Data {\r\n\t\t@JsonIgnore // Without this, deserialization will fail\r\n\t\tpublic Map<String[], String> map = new HashMap<>();\r\n\r\n\t\tpublic Data() {\r\n\r\n\t\t}\r\n\r\n\t\t@JsonValue\r\n\t\tpublic Container getContainer() {\r\n\t\t\tList<String[]> keys = new ArrayList<>();\r\n\t\t\tList<String> values = new ArrayList<>();\r\n\r\n\t\t\tmap.forEach((key, value) -> {\r\n\t\t\t\tkeys.add(key);\r\n\t\t\t\tvalues.add(value);\r\n\t\t\t});\r\n\r\n\t\t\treturn new Container(keys,values);\r\n\t\t}\r\n\r\n\t\t@JsonCreator\r\n\t\tpublic Data(Container container) {\r\n\t\t\tfor (int index = 0; index < container.keys.size(); index++) {\r\n\t\t\t\tmap.put(container.keys.get(index), container.values.get(index));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void test() throws JsonProcessingException {\r\n\t\tfinal ObjectMapper mapper = new ObjectMapper();\r\n\r\n\t\tfinal Data data = new Data();\r\n\t\tdata.map = Map.of(new String[]{\"a\", \"b\"}, \"c\");\r\n\r\n\t\tfinal String serialized = mapper.writeValueAsString(data);\r\n\r\n\t\tfinal Object data2 = mapper.readerFor(Data.class).readValue(serialized);\r\n\t}\r\n\r\n}\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nI would expect that a class annotated with @JsonCreator will not try to find deserializers for it's fields, or at least only for those properties not covered by the @JsonCreator (ie after the fact).\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3216/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3216/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3213","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3213/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3213/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3213/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3213","id":945696545,"node_id":"MDU6SXNzdWU5NDU2OTY1NDU=","number":3213,"title":"deserialze map values based on key name","user":{"login":"sabareeshkkanan","id":663640,"node_id":"MDQ6VXNlcjY2MzY0MA==","avatar_url":"https://avatars.githubusercontent.com/u/663640?v=4","gravatar_id":"","url":"https://api.github.com/users/sabareeshkkanan","html_url":"https://github.com/sabareeshkkanan","followers_url":"https://api.github.com/users/sabareeshkkanan/followers","following_url":"https://api.github.com/users/sabareeshkkanan/following{/other_user}","gists_url":"https://api.github.com/users/sabareeshkkanan/gists{/gist_id}","starred_url":"https://api.github.com/users/sabareeshkkanan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sabareeshkkanan/subscriptions","organizations_url":"https://api.github.com/users/sabareeshkkanan/orgs","repos_url":"https://api.github.com/users/sabareeshkkanan/repos","events_url":"https://api.github.com/users/sabareeshkkanan/events{/privacy}","received_events_url":"https://api.github.com/users/sabareeshkkanan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-15T19:41:11Z","updated_at":"2021-08-12T03:53:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was trying make use of custom deserializer to do this but i am not sure how to iterate through the Json node to get the key and serialized value. \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3213/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3213/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3212","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3212/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3212/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3212/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3212","id":944902523,"node_id":"MDU6SXNzdWU5NDQ5MDI1MjM=","number":3212,"title":"Provide method ObjectMapper.copyWith(JsonFactory)","user":{"login":"quaff","id":143040,"node_id":"MDQ6VXNlcjE0MzA0MA==","avatar_url":"https://avatars.githubusercontent.com/u/143040?v=4","gravatar_id":"","url":"https://api.github.com/users/quaff","html_url":"https://github.com/quaff","followers_url":"https://api.github.com/users/quaff/followers","following_url":"https://api.github.com/users/quaff/following{/other_user}","gists_url":"https://api.github.com/users/quaff/gists{/gist_id}","starred_url":"https://api.github.com/users/quaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/quaff/subscriptions","organizations_url":"https://api.github.com/users/quaff/orgs","repos_url":"https://api.github.com/users/quaff/repos","events_url":"https://api.github.com/users/quaff/events{/privacy}","received_events_url":"https://api.github.com/users/quaff/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-07-15T00:58:28Z","updated_at":"2021-07-15T03:40:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It's a valid use case that reuse the same configuration over different data formats\r\n```java\r\nObjectMapper jsonObjectMapper = new ObjectMapper();\r\n// do some configuration ...\r\nObjectMapper cborObjectMapper = jsonObjectMapper.copyWith(new SmileFactory());\r\n```\r\nSpring Boot configuration take affect only json format, this will make it possible to all format, for example\r\n```java\r\n @Bean \r\n @ConditionalOnMissingBean(value = MappingJackson2CborHttpMessageConverter.class) \r\n// other conditions\r\n MappingJackson2CborHttpMessageConverter mappingJackson2CborHttpMessageConverter(ObjectMapper objectMapper) { \r\n \treturn new MappingJackson2CborHttpMessageConverter(objectMapper.copyWith(new CBORFactory())); \r\n } \r\n```\r\nhttps://github.com/spring-projects/spring-boot/issues/27319#issuecomment-879760468","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3212/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3212/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3210","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3210/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3210/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3210/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3210","id":944232683,"node_id":"MDU6SXNzdWU5NDQyMzI2ODM=","number":3210,"title":"@JsonCreator annotated factory method not used when wrapping value object","user":{"login":"wimdeblauwe","id":1115823,"node_id":"MDQ6VXNlcjExMTU4MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1115823?v=4","gravatar_id":"","url":"https://api.github.com/users/wimdeblauwe","html_url":"https://github.com/wimdeblauwe","followers_url":"https://api.github.com/users/wimdeblauwe/followers","following_url":"https://api.github.com/users/wimdeblauwe/following{/other_user}","gists_url":"https://api.github.com/users/wimdeblauwe/gists{/gist_id}","starred_url":"https://api.github.com/users/wimdeblauwe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wimdeblauwe/subscriptions","organizations_url":"https://api.github.com/users/wimdeblauwe/orgs","repos_url":"https://api.github.com/users/wimdeblauwe/repos","events_url":"https://api.github.com/users/wimdeblauwe/events{/privacy}","received_events_url":"https://api.github.com/users/wimdeblauwe/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-14T09:31:00Z","updated_at":"2021-07-14T19:29:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am using Jackson 2.12.3 and it seems that Jackson will sometimes take preference for a private constructor over a public static factory method that is annotated with `@JsonCreator`.\r\n\r\nThis example showcases the problem:\r\n\r\n```\r\nimport com.fasterxml.jackson.annotation.JsonCreator;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.module.paramnames.ParameterNamesModule;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) throws IOException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.registerModule(new ParameterNamesModule());\r\n        ValueObject valueObject = objectMapper.readValue(\"{\\\"value\\\":\\\"ABC-123\\\"}\", ValueObject.class);\r\n        System.out.println(\"valueObject = \" + valueObject);\r\n        System.out.println(\"----\");\r\n        WrapperObject wrapperObject = objectMapper.readValue(\"{\\\"valueObject\\\":\\\"ABC-123\\\"}\", WrapperObject.class);\r\n        System.out.println(\"wrapperObject = \" + wrapperObject);\r\n    }\r\n\r\n    public static class ValueObject {\r\n        private final String value;\r\n\r\n        private ValueObject(String value) {\r\n            System.out.println(\"constructor: \" + value);\r\n            this.value = value;\r\n        }\r\n\r\n        @JsonCreator\r\n        public static ValueObject of(String value) {\r\n            System.out.println(\"factory: \" + value);\r\n            return new ValueObject(value);\r\n        }\r\n\r\n        public String getValue() {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    public static class WrapperObject {\r\n        private final ValueObject valueObject;\r\n\r\n        @JsonCreator\r\n        public WrapperObject(ValueObject valueObject) {\r\n            this.valueObject = valueObject;\r\n        }\r\n\r\n        public ValueObject getValueObject() {\r\n            return valueObject;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRunning this (on Java 11) outputs:\r\n\r\n```\r\nfactory: ABC-123\r\nconstructor: ABC-123\r\nvalueObject = be.fodjustitie.inventaris.inventarisbackend.Test$ValueObject@2a3b5b47\r\n----\r\nconstructor: ABC-123\r\nwrapperObject = be.fodjustitie.inventaris.inventarisbackend.Test$WrapperObject@799f10e1\r\n```\r\n\r\nSo you can see when deserializing `WrapperObject`, the factory is not used which I would not expect given the factory method is annotated with `@JsonCreator`.\r\n\r\nThis might be related to #660 and/or #2135, not sure.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3210/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3209","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3209/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3209/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3209/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3209","id":942876338,"node_id":"MDU6SXNzdWU5NDI4NzYzMzg=","number":3209,"title":"Polymorphism with aliases fails to utilize alias fields","user":{"login":"Dragas","id":6078508,"node_id":"MDQ6VXNlcjYwNzg1MDg=","avatar_url":"https://avatars.githubusercontent.com/u/6078508?v=4","gravatar_id":"","url":"https://api.github.com/users/Dragas","html_url":"https://github.com/Dragas","followers_url":"https://api.github.com/users/Dragas/followers","following_url":"https://api.github.com/users/Dragas/following{/other_user}","gists_url":"https://api.github.com/users/Dragas/gists{/gist_id}","starred_url":"https://api.github.com/users/Dragas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dragas/subscriptions","organizations_url":"https://api.github.com/users/Dragas/orgs","repos_url":"https://api.github.com/users/Dragas/repos","events_url":"https://api.github.com/users/Dragas/events{/privacy}","received_events_url":"https://api.github.com/users/Dragas/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-13T07:08:07Z","updated_at":"2021-07-14T19:29:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"As per thread in the mailing list:\r\n\r\nI'm trying to migrate a makeshift polymorphic custom deserializer (which i spawned because I hadn't read the docs). The deserializer originally worked like the following annotation combo as per Polymorphic Deserialization usage\r\n\r\n```java\r\npublic class Container {\r\n    private String id;\r\n    @JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = \"id\")\r\n    @JsonSubTypes({\r\n            @Type(name = \"FOO\", value = Foo.class),\r\n            @Type(name = \"NAR\", value = Nar.class)\r\n    })\r\n    private Object target;\r\n}\r\n```\r\nGetters and setters omitted for brevity.\r\n\r\nBasically original implementation could set the target field value as particular type depending on id field. But in addition to that, it could determine which field to read from, since the input source (sadly) only has one constant field (id) and target field's name would change depending on id field. If I was not using typeinfo and subtypes annotation combo, the annotation for aliases would be\r\n\r\n```java\r\n@JsonAlias({\"fooValue\", \"narValue\"})\r\n```\r\nOn their own, the two features work fine, but when you would try to use the two together, polymorphic deserializer is incapable of determining the source value field via aliases. As a result, the following exception is thrown\r\n\r\n```\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"narValue\" (class asdf.Main$Container), not marked as ignorable (one known property: \"id\"])\r\n at [Source: (String)\"{ \"id\": \"NAR\", \"narValue\": {}}\"; line: 1, column: 29] (through reference chain: asdf.Main$Container[\"narValue\"])\r\n\tat com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:987)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1974)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1701)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithExternalTypeId(BeanDeserializer.java:998)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(BeanDeserializer.java:950)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(BeanDeserializer.java:943)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:360)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3516)\r\n\tat asdf.Main.main(Main.java:17)\r\n```\r\n\r\nIt would be nice if I could specify field name per id type that would deserialize from, but I'm willing to sacrifice that in order to get this working to begin with.\r\n\r\nIn this minimal working sample I'm using jackson 2.12.3 with Oracle JDK 11.0.10u8.\r\nIn the project that would be affected I'm using jackson 2.9.8 with Oracle JDK 11.0.10u8.\r\n\r\nBelow is the minimum working snippet to replicate my issue\r\n\r\n```java\r\nimport com.fasterxml.jackson.annotation.JsonAlias;\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes.Type;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        String json = \"{ \\\"id\\\": \\\"NAR\\\", \\\"narValue\\\": {}}\";\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        Container container = mapper.readValue(json, Container.class);\r\n        System.out.println(container.getTarget()); // expected value is Nar@[hashcode]\r\n    }\r\n\r\n    public static class Nar {\r\n\r\n        private String dar;\r\n        private String zar;\r\n\r\n        public String getDar() {\r\n            return dar;\r\n        }\r\n\r\n        public void setDar(String dar) {\r\n            this.dar = dar;\r\n        }\r\n\r\n        public String getZar() {\r\n            return zar;\r\n        }\r\n\r\n        public void setZar(String zar) {\r\n            this.zar = zar;\r\n        }\r\n    }\r\n\r\n    public static class Foo {\r\n        private String bar;\r\n        private String zar;\r\n\r\n        public String getBar() {\r\n            return bar;\r\n        }\r\n\r\n        public void setBar(String bar) {\r\n            this.bar = bar;\r\n        }\r\n\r\n        public String getZar() {\r\n            return zar;\r\n        }\r\n\r\n        public void setZar(String zar) {\r\n            this.zar = zar;\r\n        }\r\n    }\r\n\r\n    public static class Container {\r\n\r\n        private String id;\r\n        @JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = \"id\")\r\n        @JsonSubTypes({\r\n                @Type(name = \"FOO\", value = Foo.class),\r\n                @Type(name = \"NAR\", value = Nar.class)\r\n        })\r\n        @JsonAlias({\r\n                \"fooValue\",\r\n                \"narValue\"\r\n        })\r\n        private Object target;\r\n\r\n        public String getId() {\r\n            return id;\r\n        }\r\n\r\n        public void setId(String id) {\r\n            this.id = id;\r\n        }\r\n\r\n        public Object getTarget() {\r\n            return target;\r\n        }\r\n\r\n        public void setTarget(Object target) {\r\n            this.target = target;\r\n        }\r\n    }\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3209/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3208","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3208/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3208/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3208/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3208","id":942661944,"node_id":"MDU6SXNzdWU5NDI2NjE5NDQ=","number":3208,"title":"Provide a way for @JsonView only works on specific nested field","user":{"login":"quaff","id":143040,"node_id":"MDQ6VXNlcjE0MzA0MA==","avatar_url":"https://avatars.githubusercontent.com/u/143040?v=4","gravatar_id":"","url":"https://api.github.com/users/quaff","html_url":"https://github.com/quaff","followers_url":"https://api.github.com/users/quaff/followers","following_url":"https://api.github.com/users/quaff/following{/other_user}","gists_url":"https://api.github.com/users/quaff/gists{/gist_id}","starred_url":"https://api.github.com/users/quaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/quaff/subscriptions","organizations_url":"https://api.github.com/users/quaff/orgs","repos_url":"https://api.github.com/users/quaff/repos","events_url":"https://api.github.com/users/quaff/events{/privacy}","received_events_url":"https://api.github.com/users/quaff/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-13T03:28:57Z","updated_at":"2021-07-13T03:28:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm implementing REST api using spring boot, I wish `@JsonView` only works on `Paged::result`\r\n```java\r\n@GetMapping\r\n@JsonView(List.class)\r\npublic Paged<Product> list(@RequestParam int pageNo, @RequestParam int pageSize) {\r\n // expecting {\"result\": JsonArrayWithView,\"pageNo\":1,\"pageSize\":10}\r\n}\r\n\r\npublic class Paged<T> { // third-party class\r\n\tprivate List<T> result;\r\n\tprivate int pageNo = 1;\r\n\t// other fields and getter/setter    \r\n}\r\n```\r\n\r\nhere is a simple test case\r\n```java\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonView;\r\nimport com.fasterxml.jackson.databind.MapperFeature;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\n\r\npublic class JsonViewTests {\r\n\r\n\tprivate ObjectMapper mapper = new ObjectMapper().configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false);\r\n\t// spring.jackson.mapper.default-view-inclusion default false in spring boot\r\n\r\n\t@Test\r\n\tpublic void testList() throws Exception {\r\n\t\tList<Product> products = Arrays.asList(new Product(\"name\", 12, \"description\"));\r\n\t\tString json = mapper.writerWithView(List.class).writeValueAsString(products);\r\n\t\tassertEquals(\"[{\\\"name\\\":\\\"name\\\",\\\"stock\\\":12}]\", json);\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testPaged() throws Exception {\r\n\t\tList<Product> products = Arrays.asList(new Product(\"name\", 12, \"description\"));\r\n\t\tPaged<Product> paged = new Paged<>();\r\n\t\tpaged.setResult(products);\r\n\t\tpaged.setTotalPages(1);\r\n\t\tpaged.setTotalElements(1);\r\n\t\tString json = mapper.writerWithView(List.class).writeValueAsString(paged);\r\n\t\tassertEquals(\r\n\t\t\t\t\"{\\\"result\\\":[{\\\"name\\\":\\\"name\\\",\\\"stock\\\":12}],\\\"pageNo\\\":1,\\\"pageSize\\\":10,\\\"totalPages\\\":1,\\\"totalElements\\\":1}\",\r\n\t\t\t\tjson);\r\n\t\t// actually {}\r\n\t}\r\n\r\n\t@Data\r\n\t@AllArgsConstructor\r\n\tpublic static class Product {\r\n\r\n\t\t@JsonView(List.class)\r\n\t\tprivate String name;\r\n\t\t@JsonView(List.class)\r\n\t\tprivate int stock;\r\n\t\tprivate String description;\r\n\t}\r\n\r\n\t@Data\r\n\tpublic class Paged<T> {\r\n\r\n\t\tprivate List<T> result;\r\n\r\n\t\tprivate int pageNo = 1;\r\n\r\n\t\tprivate int pageSize = 10;\r\n\r\n\t\tprivate int totalPages = -1;\r\n\r\n\t\tprivate long totalElements = -1;\r\n\r\n\t}\r\n}\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3208/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3208/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3206","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3206/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3206/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3206/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3206","id":941635124,"node_id":"MDU6SXNzdWU5NDE2MzUxMjQ=","number":3206,"title":"getOutputContext().getCurrentName() Persists the previous property name when called on @ JsonAnyGetter","user":{"login":"Aravinda93","id":29374160,"node_id":"MDQ6VXNlcjI5Mzc0MTYw","avatar_url":"https://avatars.githubusercontent.com/u/29374160?v=4","gravatar_id":"","url":"https://api.github.com/users/Aravinda93","html_url":"https://github.com/Aravinda93","followers_url":"https://api.github.com/users/Aravinda93/followers","following_url":"https://api.github.com/users/Aravinda93/following{/other_user}","gists_url":"https://api.github.com/users/Aravinda93/gists{/gist_id}","starred_url":"https://api.github.com/users/Aravinda93/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Aravinda93/subscriptions","organizations_url":"https://api.github.com/users/Aravinda93/orgs","repos_url":"https://api.github.com/users/Aravinda93/repos","events_url":"https://api.github.com/users/Aravinda93/events{/privacy}","received_events_url":"https://api.github.com/users/Aravinda93/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-12T03:36:10Z","updated_at":"2021-07-15T03:51:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was asked to file this issue against `Jackson-Databind` based on the discussion on the [Google-Forum](https://groups.google.com/g/jackson-user/c/3nEe6Fopk64/m/vDcllBmSCAAJ?utm_medium=email&utm_source=footer).\r\n\r\nBasically, the problem is that when `Jackson Custom Serializer` is called against 2 fields 1. (Field1) Normal field 2. (Field2) annotated with `@JsonAnyGetter` then on the 2nd call (Field2 call) we get the field name of the 1st within the `Custom Searlizer` for `gen.getOutputContext().getCurrentName()`.\r\n\r\nI believe on the 2nd call (Field2 call) either we should get `Empty String` or we should get the name of the field (Field2).\r\n\r\nThe following code samples provide more clarity on this issue:\r\n\r\n`Customer` POJO class used for serializing the JSON:\r\n```\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, visible = true, property = \"isA\")\r\n@JsonInclude(JsonInclude.Include.NON_NULL)\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\n@Data\r\n@NoArgsConstructor\r\npublic class Customer {\r\n    private String isA;\r\n    private String name;\r\n\r\n    @JsonSerialize(using = CustomSerializer.class)\r\n    private Map<String, Object> extensions = new HashMap<>();\r\n\r\n    private Map<String, Object> withoutExtensions = new HashMap<>();\r\n\r\n    @JsonAnyGetter\r\n    @JsonSerialize(using = CustomSerializer.class)\r\n    public Map<String, Object> getWithoutExtensions() {\r\n        return withoutExtensions;\r\n    }\r\n\r\n}\r\n```\r\n\r\nFollowing is my `CustomSerializer` which will be called by 2 fields (extensions and withoutExtensions) during the creation of JSON:\r\n```\r\npublic class CustomSerializer extends JsonSerializer<Map<String, Object>> {\r\n\r\n    @Override\r\n    public void serialize(Map<String, Object> value, JsonGenerator gen, SerializerProvider serializers) {\r\n\r\n         System.out.println(gen.getOutputContext().getCurrentName());\r\n\r\n        //In my case for both \"Extensions\" and \"WithoutExtensions\" i get the \"currentName\" as \"Extensions\"\r\n    }\r\n}\r\n```\r\n\r\nFollowing is my `Main` class which will create a JSON:\r\n```\r\npublic class Main {\r\n    public static void main(String[] args) throws JsonProcessingException {\r\n        final ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.enable(SerializationFeature.INDENT_OUTPUT);\r\n        final Customer customer = new Customer();\r\n\r\n        customer.setName(\"Jackson\");\r\n\r\n        Map<String, Object> extensions = new HashMap<>();\r\n        extensions.put(\"WithObject\", \"With\");\r\n        customer.setExtensions(extensions);\r\n\r\n        Map<String, Object> withoutExtensions = new HashMap<>();\r\n        extensions.put(\"WithoutObject\", \"Without\");\r\n        customer.setWithoutExtensions(withoutExtensions);\r\n\r\n        final String eventAsJson = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(customer);\r\n        System.out.println(eventAsJson);\r\n    }\r\n}\r\n```\r\n\r\nAs we can see when I run the application the `CustomSerializer` would print `extensions` in both cases. I believe it should print `extensions` only once and in the next case either it should provide `withoutExtensions` or empty string.\r\n\r\nCan some expert here confirm if this is bug on the Jackson side?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3206/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3206/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3205","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3205/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3205/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3205/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3205","id":941480732,"node_id":"MDU6SXNzdWU5NDE0ODA3MzI=","number":3205,"title":"ConfigOverrides for merging are not applied for items inside containers","user":{"login":"dgerhardt","id":3731006,"node_id":"MDQ6VXNlcjM3MzEwMDY=","avatar_url":"https://avatars.githubusercontent.com/u/3731006?v=4","gravatar_id":"","url":"https://api.github.com/users/dgerhardt","html_url":"https://github.com/dgerhardt","followers_url":"https://api.github.com/users/dgerhardt/followers","following_url":"https://api.github.com/users/dgerhardt/following{/other_user}","gists_url":"https://api.github.com/users/dgerhardt/gists{/gist_id}","starred_url":"https://api.github.com/users/dgerhardt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dgerhardt/subscriptions","organizations_url":"https://api.github.com/users/dgerhardt/orgs","repos_url":"https://api.github.com/users/dgerhardt/repos","events_url":"https://api.github.com/users/dgerhardt/events{/privacy}","received_events_url":"https://api.github.com/users/dgerhardt/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-11T15:47:59Z","updated_at":"2021-07-15T03:50:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently, there is no way to specify different merge behaviors for array-like types and `Map`s if one of the types is used as a container and the other one for the nested items. If either a `ConfigOverride` for merging is set for the type of the container class or `@JsonMerge` is set directly on the container property, the merge behavior for the container type is always applied to its items as well.\r\n\r\n## Expected behavior\r\n`ConfigOverride`s should apply to container items as long as there is no other config with precedence.\r\n\r\n## Example (List inside Map)\r\n```java\r\nclass SomePojo {\r\n  Map<String, List<Integer>> someMap;\r\n}\r\n```\r\n```java\r\n// serialization config\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.setDefaultMergeable(false); // default\r\nmapper.configOverride(Map.class).setMergeable(true);\r\nmapper.configOverride(List.class).setMergeable(false); // this has no effect for Lists inside Maps\r\n```\r\n\r\nExpected result:\r\n  `{\"someMap: {\"list\": [1, 2, 3]}}` + `{\"someMap: {\"list\": [4, 5, 6]}}` => `{\"someMap: {\"list\": [4, 5, 6]}}`  \r\nActual result:\r\n`{\"someMap: {\"list\": [1, 2, 3]}}` + `{\"someMap: {\"list\": [4, 5, 6]}}` => `{\"someMap: {\"list\": [1, 2, 3, 4, 5, 6]}}`  \r\n\r\nThe override for `List` is not applied to nested items. Merging is still enabled for the them despite of using `configOverride(List.class).setMergeable(false)`.\r\n\r\n## Test case\r\nhttps://github.com/dgerhardt/test-case-jackson-jsonmerge/blob/master/src/test/java/JacksonJsonMergeNested.java\r\n\r\n## Related discussion\r\nhttps://gitter.im/FasterXML/jackson-databind?at=60e6fef482dd9050f5dd3008","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3205/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3205/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3202","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3202/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3202/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3202/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3202","id":939875241,"node_id":"MDU6SXNzdWU5Mzk4NzUyNDE=","number":3202,"title":"Buffering needed for `@JsonTypeInfo` property breaks parsing of Floats (depending on property order)","user":{"login":"lost-carrier","id":3090579,"node_id":"MDQ6VXNlcjMwOTA1Nzk=","avatar_url":"https://avatars.githubusercontent.com/u/3090579?v=4","gravatar_id":"","url":"https://api.github.com/users/lost-carrier","html_url":"https://github.com/lost-carrier","followers_url":"https://api.github.com/users/lost-carrier/followers","following_url":"https://api.github.com/users/lost-carrier/following{/other_user}","gists_url":"https://api.github.com/users/lost-carrier/gists{/gist_id}","starred_url":"https://api.github.com/users/lost-carrier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lost-carrier/subscriptions","organizations_url":"https://api.github.com/users/lost-carrier/orgs","repos_url":"https://api.github.com/users/lost-carrier/repos","events_url":"https://api.github.com/users/lost-carrier/events{/privacy}","received_events_url":"https://api.github.com/users/lost-carrier/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-08T13:43:24Z","updated_at":"2021-07-09T00:46:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We're using a class structure similar to the following one using the `@JsonTypeInfo` to determine various SubTypes possible for that JSON:\r\n\r\n```java\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY,\r\n        property = \"classType\", visible = true)\r\n@JsonSubTypes({\r\n        @JsonSubTypes.Type(value = ClassA.class, name = \"a\"),\r\n        @JsonSubTypes.Type(value = ClassB.class, name = \"b\")\r\n})\r\ninterface ClassInterface {\r\n    String getClassType();\r\n}\r\n\r\n\r\nabstract class AbstractClass implements ClassInterface {\r\n    private String classType;\r\n\r\n    @Override\r\n    public String getClassType() {\r\n        return classType;\r\n    }\r\n\r\n    public void setClassType(String classType) {\r\n        this.classType = classType;\r\n    }\r\n}\r\n\r\n\r\nclass ClassA extends AbstractClass {\r\n\r\n    private Object testA;\r\n\r\n    public Object getTestA() {\r\n        return testA;\r\n    }\r\n\r\n    public void setTestA(Object testA) {\r\n        this.testA = testA;\r\n    }\r\n}\r\n\r\n\r\nclass ClassB extends AbstractClass {\r\n    private Object testB;\r\n\r\n    public Object getTestB() {\r\n        return testB;\r\n    }\r\n\r\n    public void setTestB(Object testB) {\r\n        this.testB = testB;\r\n    }\r\n}\r\n```\r\n\r\nNow we were facing problems because we cannot ensure the order of the properties of the incoming JSONs. Unfortunately it turned out that Jackson would parse Doubles as BigDecimals depending of the order of the type info. E.g.: \r\n\r\n```java\r\n    @Test\r\n    public void testJsonSubtypes() throws JsonProcessingException {\r\n\r\n        ClassA classA = new ObjectMapper()\r\n                .configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, false)\r\n                .readerFor(ClassInterface.class)\r\n                .readValue(\"\"\"\r\n                        {\r\n                            \"classType\": \"a\",\r\n                            \"testA\": 47.11\r\n                        }\r\n                        \"\"\"); // IMPORTANT: classType goes first\r\n        assertFalse(classA.getTestA() instanceof BigDecimal); // ...works!\r\n        assertTrue(classA.getTestA() instanceof Double);\r\n\r\n        ClassB classB = new ObjectMapper()\r\n                .configure(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS, false)\r\n                .readerFor(ClassInterface.class)\r\n                .readValue(\"\"\"\r\n                        {\r\n                            \"testB\": 47.11,\r\n                            \"classType\": \"b\"\r\n                        }\r\n                        \"\"\"); // IMPORTANT: classType goes second\r\n        assertFalse(classB.getTestB() instanceof BigDecimal); // ...doesen't!\r\n        assertTrue(classB.getTestB() instanceof Double);\r\n    }\r\n```\r\n\r\nDuring my diggings I found that https://github.com/FasterXML/jackson-databind/blob/0e231952a5611bc56f948c7d23f70cb8299f5ebb/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java#L105 ... the `_deserializeTypedForId(p, ctxt, tb, p.getText());` which then somehow triggers a `ParserBase.resetFloats()`, which sets `this._numTypesValid = 0;` where I'd say this then causes `_parseSlowFloat(16)` then to parse everything as BigDecimal. (...but I'm certainly no expert there...)\r\n\r\nAbout the context: we're using Java 15 with the current Spring Boot V 2.5.2 which contains Jackson V 2.12.3. (...and I consciously used `new ObjectMapper()` to bypass the Spring wirings...)\r\n ","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3202/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3202/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3198","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3198/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3198/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3198/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3198","id":937291093,"node_id":"MDU6SXNzdWU5MzcyOTEwOTM=","number":3198,"title":"Curious issue in Eclipse debugging","user":{"login":"marcieldeg","id":14255958,"node_id":"MDQ6VXNlcjE0MjU1OTU4","avatar_url":"https://avatars.githubusercontent.com/u/14255958?v=4","gravatar_id":"","url":"https://api.github.com/users/marcieldeg","html_url":"https://github.com/marcieldeg","followers_url":"https://api.github.com/users/marcieldeg/followers","following_url":"https://api.github.com/users/marcieldeg/following{/other_user}","gists_url":"https://api.github.com/users/marcieldeg/gists{/gist_id}","starred_url":"https://api.github.com/users/marcieldeg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcieldeg/subscriptions","organizations_url":"https://api.github.com/users/marcieldeg/orgs","repos_url":"https://api.github.com/users/marcieldeg/repos","events_url":"https://api.github.com/users/marcieldeg/events{/privacy}","received_events_url":"https://api.github.com/users/marcieldeg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-07-05T13:28:04Z","updated_at":"2021-07-21T16:31:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Please check this code:\r\n\r\n```\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBoolean bool = Boolean.FALSE;\r\n\t\tif (bool.booleanValue())\r\n\t\t\tnew ObjectMapper().readValue(\"{\\\"stringVal\\\":\\\"aaa\\\",\\\"longVal\\\":123,\\\"boolVal\\\":true}\", Test.class);\r\n\t}\r\n\r\n\tpublic static class Test {\r\n\t\tpublic String stringVal;\r\n\t\tpublic Long longVal;\r\n\t\tpublic Boolean boolVal;\r\n\r\n\t\tpublic Test() {\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n1. Put a breakpoint on line `if (bool.booleanValue())` and run in debug mode on eclipse.\r\n2. Using the tab \"Variables\" from Eclipse, change internal value from variable \"bool\" to \"true\":\r\n![image](https://user-images.githubusercontent.com/14255958/124477672-a8a3fc80-dd7a-11eb-9351-02440a0a80f1.png)\r\n3. Click \"Resume\" (F8). It will cause a Jackson error: \r\n`Exception in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `testes.Main$Test` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)`.\r\nIt's not right as there is a constructor in the \"Test\" class.\r\n\r\n4. Repeat the test, changing the variable \"bool\" value using the option \"Change Value...\" (Right click), as in the image below:\r\n![image](https://user-images.githubusercontent.com/14255958/124478417-8b236280-dd7b-11eb-9d11-9887249cc92e.png)\r\n5. In this case, it works well.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3198/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3196","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3196/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3196/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3196/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3196","id":936344289,"node_id":"MDU6SXNzdWU5MzYzNDQyODk=","number":3196,"title":"Add serialization support for `@JsonUnwrapped` with `ObjectNode`","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-03T23:45:05Z","updated_at":"2021-07-03T23:50:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Currently `@JsonUnwrapped` has no effect on `ObjectNode` (or `JsonNode`) valued property.\r\nAlthough in general `JsonNode` is to be handled as-is, with minimal changes (unlike POJOs), this seems like one case where property-annotation would sometimes make sense.\r\n\r\nSpecifically, it'd be great to allow sort \"any-getter\" alternative, where entries of an `ObjectNode` were written as if they were the properties to include without wrapper. Something like, say,\r\n\r\n```\r\npublic class Root {\r\n   @JsonUnwrapped\r\n   public ObjectNode values; // having values of: { \"a\" : 1, \"b\" : 3 }\r\n}\r\n```\r\n\r\nwould get serialized as\r\n\r\n```json\r\n{\"a\":1,\"b\":3}\r\n```\r\n\r\ninstead of what happens currently\r\n\r\n```\r\n{  \"values\":{\"a\":1, \"b\":3}}\r\n```\r\n\r\nNOTE: this issue is specifically for allowing serialization -- supporting deserialization side would have separate challenges.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3196/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3196/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3194","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3194/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3194/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3194/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3194","id":933519390,"node_id":"MDU6SXNzdWU5MzM1MTkzOTA=","number":3194,"title":"Deserialization of 2D arrays of final types, when using `DefaultTyping.NON_FINAL`","user":{"login":"klaasdellschaft","id":28892848,"node_id":"MDQ6VXNlcjI4ODkyODQ4","avatar_url":"https://avatars.githubusercontent.com/u/28892848?v=4","gravatar_id":"","url":"https://api.github.com/users/klaasdellschaft","html_url":"https://github.com/klaasdellschaft","followers_url":"https://api.github.com/users/klaasdellschaft/followers","following_url":"https://api.github.com/users/klaasdellschaft/following{/other_user}","gists_url":"https://api.github.com/users/klaasdellschaft/gists{/gist_id}","starred_url":"https://api.github.com/users/klaasdellschaft/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/klaasdellschaft/subscriptions","organizations_url":"https://api.github.com/users/klaasdellschaft/orgs","repos_url":"https://api.github.com/users/klaasdellschaft/repos","events_url":"https://api.github.com/users/klaasdellschaft/events{/privacy}","received_events_url":"https://api.github.com/users/klaasdellschaft/received_events","type":"User","site_admin":false},"labels":[{"id":2457821256,"node_id":"MDU6TGFiZWwyNDU3ODIxMjU2","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/has-failing-test","name":"has-failing-test","color":"4e8a16","default":false,"description":"Indicates that there exists a test case (under `failing/`) to reproduce the issue"},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-30T10:02:07Z","updated_at":"2021-08-14T21:07:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hi,\r\n\r\nI'm currently trying to serialize and deserialize a two-dimensional array of final types that are stored in a two-dimensional array of a non-final superclass (in the example below: storing a value of `String[][]` in a field of type `Object[][]`). In order to be able to reconstruct the type information, I activated default typing with `DefaultTyping.NON_FINAL`. However, during deserialization Jackson fails with `com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type 'java.lang.String' from Array value (token 'JsonToken.START_ARRAY')`.\r\n\r\nFollowing test case:\r\n\r\n```\r\nprivate static final class SomeBean {\r\n    public Object[][] value;\r\n}\r\n\r\npublic void testTwoDimensionalArrayMapping() throws JsonProcessingException {\r\n    PolymorphicTypeValidator typeValidator = BasicPolymorphicTypeValidator.builder()\r\n            .allowIfSubTypeIsArray()\r\n            .allowIfSubType(Object.class)\r\n            .build();\r\n\r\n    ObjectMapper mapper = JsonMapper\r\n            .builder()\r\n            .activateDefaultTyping(typeValidator, NON_FINAL)\r\n            .build();\r\n\r\n    SomeBean instance = new SomeBean();\r\n\r\n    // case 1 - successful\r\n    instance.value = new Object[][]{new String[]{\"1.1\", \"1.2\"}, new String[]{\"2.1\", \"2.2\"}};\r\n    String serialized = mapper.writeValueAsString(instance);\r\n    SomeBean deserialized = mapper.readValue(serialized, SomeBean.class); // successful\r\n    assertEquals(Object[][].class, deserialized.value.getClass());\r\n    assertEquals(String[].class, deserialized.value[0].getClass());\r\n\r\n    // case 2 - successful\r\n    instance.value = new Object[][]{{\"1.1\", \"1.2\"}, {\"2.1\", \"2.2\"}};\r\n    serialized = mapper.writeValueAsString(instance);\r\n    deserialized = mapper.readValue(serialized, SomeBean.class); // successful\r\n    assertEquals(Object[][].class, deserialized.value.getClass());\r\n    assertEquals(Object[].class, deserialized.value[0].getClass());\r\n\r\n    // case 3 (handcrafted JSON) - successful\r\n    String handcrafted = \"{\\\"value\\\":[\\\"[[Ljava.lang.String;\\\",[[\\\"1.1\\\",\\\"1.2\\\"],[\\\"2.1\\\",\\\"2.2\\\"]]]}\";\r\n    deserialized = mapper.readValue(handcrafted, SomeBean.class); // successful\r\n    assertEquals(String[][].class, deserialized.value.getClass());\r\n    assertEquals(String[].class, deserialized.value[0].getClass());\r\n\r\n    // case 4 - fails\r\n    instance.value = new String[][]{{\"1.1\", \"1.2\"}, {\"2.1\", \"2.2\"}};\r\n    serialized = mapper.writeValueAsString(instance);\r\n    deserialized = mapper.readValue(serialized, SomeBean.class); // fails\r\n    assertEquals(String[][].class, deserialized.value.getClass());\r\n    assertEquals(String[].class, deserialized.value[0].getClass());\r\n}\r\n```\r\n\r\nThe serialized strings are as follows:\r\n1. Successful: `{\"value\":[\"[[Ljava.lang.Object;\",[[\"[Ljava.lang.String;\",[\"1.1\",\"1.2\"]],[\"[Ljava.lang.String;\",[\"2.1\",\"2.2\"]]]]}`\r\n2. Successful: `{\"value\":[\"[[Ljava.lang.Object;\",[[\"[Ljava.lang.Object;\",[\"1.1\",\"1.2\"]],[\"[Ljava.lang.Object;\",[\"2.1\",\"2.2\"]]]]}`\r\n3. Successful (handcrafted JSON): `{\"value\":[\"[[Ljava.lang.String;\",[[\"1.1\",\"1.2\"],[\"2.1\",\"2.2\"]]]}`\r\n4. Fails: `{\"value\":[\"[[Ljava.lang.String;\",[[\"[Ljava.lang.String;\",[\"1.1\",\"1.2\"]],[\"[Ljava.lang.String;\",[\"2.1\",\"2.2\"]]]]}`\r\n\r\nAs far as I understand it, the problem is that the serializer and the deserializer are looking at different types in order to find out whether they are currently handling a non-final type:\r\n* In case of the **serializer**, it looks at the **declared type** of the variable (i.e. `Object[][]`) for the outer array as well as the inner array. Thus, it is adding the type id for outer and inner array, even if the **actual type** of the outer array is final, and thus also the inner array must be final.\r\n* In case of the **deserializer**, it looks at the **actual type** of the outer array (i.e. `String[][]`) in order to find out that the inner array must also be final. Thus, it is failing when it actually encounters the type id / the actual inner string array added by the serializer. This is also confirmed by the handcrafted JSON, where I removed the type information from the inner array. In that case, the deserialization is successful.\r\n\r\nFurther information:\r\n* The problem not only exists for `String[][]` but also for other two-dimensional arrays of final types.\r\n* Using `DefaultTyping.EVERYTHING` is a successful workaround.\r\n\r\nFull stack trace of the error:\r\n\r\n```\r\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `java.lang.String` from Array value (token `JsonToken.START_ARRAY`)\r\n at [Source: (String)\"{\"value\":[\"[[Ljava.lang.String;\",[[\"[Ljava.lang.String;\",[\"1.1\",\"1.2\"]],[\"[Ljava.lang.String;\",[\"2.1\",\"2.2\"]]]]}\"; line: 1, column: 58] (through reference chain: com.fasterxml.jackson.databind.introspect.TwoDimensionalGenericArraysTest$SomeBean[\"value\"]->java.lang.Object[][0]->java.lang.Object[][1])\r\n\r\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1741)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1515)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1420)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseString(StdDeserializer.java:1299)\r\n\tat com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.deserialize(StringArrayDeserializer.java:166)\r\n\tat com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.deserialize(StringArrayDeserializer.java:25)\r\n\tat com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer.deserialize(ObjectArrayDeserializer.java:214)\r\n\tat com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer.deserialize(ObjectArrayDeserializer.java:24)\r\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:120)\r\n\tat com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray(AsArrayTypeDeserializer.java:53)\r\n\tat com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer.deserializeWithType(ObjectArrayDeserializer.java:246)\r\n\tat com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer.deserializeWithType(ObjectArrayDeserializer.java:24)\r\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:147)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:313)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:176)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4620)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3575)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3543)\r\n\tat com.fasterxml.jackson.databind.introspect.TwoDimensionalGenericArraysTest.testTwoDimensionalArrayMapping(TwoDimensionalGenericArraysTest.java:56)\r\n\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3194/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3188","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3188/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3188/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3188/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3188","id":930506338,"node_id":"MDU6SXNzdWU5MzA1MDYzMzg=","number":3188,"title":"Skip unknown `Enum` keys in [Enum]Map deserialization","user":{"login":"matthias-mueller","id":4289185,"node_id":"MDQ6VXNlcjQyODkxODU=","avatar_url":"https://avatars.githubusercontent.com/u/4289185?v=4","gravatar_id":"","url":"https://api.github.com/users/matthias-mueller","html_url":"https://github.com/matthias-mueller","followers_url":"https://api.github.com/users/matthias-mueller/followers","following_url":"https://api.github.com/users/matthias-mueller/following{/other_user}","gists_url":"https://api.github.com/users/matthias-mueller/gists{/gist_id}","starred_url":"https://api.github.com/users/matthias-mueller/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matthias-mueller/subscriptions","organizations_url":"https://api.github.com/users/matthias-mueller/orgs","repos_url":"https://api.github.com/users/matthias-mueller/repos","events_url":"https://api.github.com/users/matthias-mueller/events{/privacy}","received_events_url":"https://api.github.com/users/matthias-mueller/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-25T21:14:03Z","updated_at":"2021-10-12T04:03:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"(Transferred from https://github.com/FasterXML/jackson-dataformats-text/issues/277)\r\n\r\nWhen serializing to `Map` or `EnumMap` it is impossible to skip unknown keys. This is hardly an issue with vanilla String keys, but it becomes relevant with custom KeyDeserializers that map the original String keys to a smaller key universe, such as an Enum. If the source has String keys for which no mapping exists deserialization will throw an exception.\r\n\r\nThere are some options to work around this (e.g. `DeserilizationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL`) but these are not very clean and will not cover all situations. It also gives way to NULL keys in Maps, which is mostly harmless, but questionable (https://stackoverflow.com/a/45210670). Newer map implementations, including Guava's, do not allow NULL keys.\r\n\r\nThe other workaround is to define a default value, that will serve as a Map key, if the key could not be deserialized. This approach leads to situations, where clients may wish to clean up the default element from the deserialized Map in a post-processing step.\r\n\r\nThe cleanest solution, that we do not have yet, is to tell Jackson to skip unknown Map keys entirely. Since Map keys usually have the semantics of (JSON) properties, a mechanism like `@JsonIgnoreProperties` or `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES=true|false` would be desirable\r\n\r\nThe latest (endorsed) proposal in the other issue introduced a new `DeserializationFeature.SKIP_UNKNOWN_MAP_KEYS=true|false` feature that should trigger the skipping logic in the Map deserialization process.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3188/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3188/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3186","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3186/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3186/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3186/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3186","id":929983471,"node_id":"MDU6SXNzdWU5Mjk5ODM0NzE=","number":3186,"title":"Deserialization failure with JsonTypeInfo and concrete subclass","user":{"login":"rupert-madden-abbott","id":459011,"node_id":"MDQ6VXNlcjQ1OTAxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/459011?v=4","gravatar_id":"","url":"https://api.github.com/users/rupert-madden-abbott","html_url":"https://github.com/rupert-madden-abbott","followers_url":"https://api.github.com/users/rupert-madden-abbott/followers","following_url":"https://api.github.com/users/rupert-madden-abbott/following{/other_user}","gists_url":"https://api.github.com/users/rupert-madden-abbott/gists{/gist_id}","starred_url":"https://api.github.com/users/rupert-madden-abbott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rupert-madden-abbott/subscriptions","organizations_url":"https://api.github.com/users/rupert-madden-abbott/orgs","repos_url":"https://api.github.com/users/rupert-madden-abbott/repos","events_url":"https://api.github.com/users/rupert-madden-abbott/events{/privacy}","received_events_url":"https://api.github.com/users/rupert-madden-abbott/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-25T09:02:23Z","updated_at":"2021-06-25T19:29:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This is using jackson-databind 2.11.4.\r\n\r\nHere is a simple example:\r\n\r\n```java\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport java.io.UncheckedIOException;\r\n\r\nclass Scratch {\r\n\r\n    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"type\")\r\n    interface Base { }\r\n\r\n    static class Foo implements Base {\r\n        private String foobar;\r\n\r\n        public String getFoobar() {\r\n            return foobar;\r\n        }\r\n\r\n        public void setFoobar(String foobar) {\r\n            this.foobar = foobar;\r\n        }\r\n    }\r\n\r\n    static class Bar {\r\n        private Foo foo;\r\n\r\n        public Foo getFoo() {\r\n            return foo;\r\n        }\r\n\r\n        public void setFoo(Foo foo) {\r\n            this.foo = foo;\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Bar bar = new ObjectMapper().readValue(\"{ \\\"foo\\\": { \\\"foobar\\\": \\\"Hello, world!\\\" } }\", Bar.class);\r\n        } catch (JsonProcessingException ex) {\r\n            throw new UncheckedIOException(ex);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis gives the following error:\r\n\r\n```\r\nException in thread \"main\" java.io.UncheckedIOException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class Scratch$Foo]: missing type id property 'type' (for POJO property 'foo')\r\n at [Source: (String)\"{ \"foo\": { \"foobar\": \"Hello, world!\" } }\"; line: 1, column: 38] (through reference chain: Scratch$Bar[\"foo\"])\r\n\tat Scratch.main(scratch_17.java:40)\r\nCaused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class Scratch$Foo]: missing type id property 'type' (for POJO property 'foo')\r\n at [Source: (String)\"{ \"foo\": { \"foobar\": \"Hello, world!\" } }\"; line: 1, column: 38] (through reference chain: Scratch$Bar[\"foo\"])\r\n```\r\n \r\nThis error would make sense to me if the type of the `foo` property was `Base`. Jackson would then not have enough information to know how to deserialize the nested object. However, since it is `Foo`, is it possible to avoid needing to supply the type property?\r\n\r\nIn other contexts, I do want to deserialize using `Base` so I don't want to remove `JsonTypeInfo` entirely.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3186/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3185","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3185/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3185/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3185/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3185","id":929874198,"node_id":"MDU6SXNzdWU5Mjk4NzQxOTg=","number":3185,"title":"JsonIdentityInfo with JsonCreator incorrectly sets a field","user":{"login":"auke-","id":7162870,"node_id":"MDQ6VXNlcjcxNjI4NzA=","avatar_url":"https://avatars.githubusercontent.com/u/7162870?v=4","gravatar_id":"","url":"https://api.github.com/users/auke-","html_url":"https://github.com/auke-","followers_url":"https://api.github.com/users/auke-/followers","following_url":"https://api.github.com/users/auke-/following{/other_user}","gists_url":"https://api.github.com/users/auke-/gists{/gist_id}","starred_url":"https://api.github.com/users/auke-/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/auke-/subscriptions","organizations_url":"https://api.github.com/users/auke-/orgs","repos_url":"https://api.github.com/users/auke-/repos","events_url":"https://api.github.com/users/auke-/events{/privacy}","received_events_url":"https://api.github.com/users/auke-/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-25T06:27:26Z","updated_at":"2021-06-25T06:27:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using Jackson `2.12.3` I experience some unexpected behavior when using @JsonIdentityInfo in combination with an immutable class with a @JsonCreator annotated constructor. Jackson correctly uses the constructor in order to create the instance of the object, but then uses the field directly to set the value.\r\n\r\nThis poses a problem in GraalVM native images, where final fields aren't writeable by default. The behavior is also visible on a regular JVM and can be reproduced with the following code:\r\n\r\n```\r\npublic class JacksonIssue {\r\n\r\n  public static class PojoWithoutIdentityInfo {\r\n    private final String fieldForId;\r\n\r\n    @JsonCreator\r\n    public PojoWithoutIdentityInfo(@JsonProperty(\"id\") String fieldForId) {\r\n      // Add a suffix to the given value in order to detect if the fields value has been altered\r\n      this.fieldForId = fieldForId + \"-from-constructor\";\r\n    }\r\n\r\n    @JsonGetter(\"id\")\r\n    public String getFieldForId() {\r\n      return fieldForId;\r\n    }\r\n  }\r\n\r\n  @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\r\n  public static class PojoWithIdentityInfo {\r\n    private final String fieldForId;\r\n\r\n    @JsonCreator\r\n    public PojoWithIdentityInfo(@JsonProperty(\"id\") String fieldForId) {\r\n      // Add a suffix to the given value in order to detect if the fields value has been altered\r\n      this.fieldForId = fieldForId + \"-from-constructor\";\r\n    }\r\n\r\n    @JsonGetter(\"id\")\r\n    public String getFieldForId() {\r\n      return fieldForId;\r\n    }\r\n  }\r\n\r\n  public static void main(String[] args) throws JsonProcessingException {\r\n    String json = \"{\\\"id\\\": \\\"valueFromJson\\\"}\";\r\n\r\n    PojoWithIdentityInfo pojoWithIdentityInfo = new ObjectMapper().readValue(json, PojoWithIdentityInfo.class);\r\n    PojoWithoutIdentityInfo pojoWithoutIdentityInfo = new ObjectMapper().readValue(json, PojoWithoutIdentityInfo.class);\r\n\r\n    System.out.println(\"pojo with identity info = \" + pojoWithIdentityInfo.getFieldForId());\r\n    System.out.println(\"pojo without identity info = \" + pojoWithoutIdentityInfo.getFieldForId());\r\n  }\r\n```\r\n\r\nRunning this sample gives the following output:\r\n```\r\npojo with identity info = valueFromJson\r\npojo without identity info = valueFromJson-from-constructor\r\n```\r\n\r\nIt is clear that the value for the pojo with identity info is wrong and the field has been altered after it has been created using the constructor.\r\n\r\nThe issue seems originate from https://github.com/FasterXML/jackson-databind/blob/cc1a04bf0e1d93196cd36adca15b1a76425a133a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.java#L256\r\nor maybe from https://github.com/FasterXML/jackson-databind/blob/cc1a04bf0e1d93196cd36adca15b1a76425a133a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java#L293 where the field is set.\r\n\r\nNote that my real world issue isn't the changed value which was set in the constructor but the unnecessary reflective field access which poses a problem in GraalVM native images. ","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3185/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3184","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3184/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3184/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3184/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3184","id":928987860,"node_id":"MDU6SXNzdWU5Mjg5ODc4NjA=","number":3184,"title":"RFE: Add duplicate detection at databind level","user":{"login":"the-codinator","id":4411711,"node_id":"MDQ6VXNlcjQ0MTE3MTE=","avatar_url":"https://avatars.githubusercontent.com/u/4411711?v=4","gravatar_id":"","url":"https://api.github.com/users/the-codinator","html_url":"https://github.com/the-codinator","followers_url":"https://api.github.com/users/the-codinator/followers","following_url":"https://api.github.com/users/the-codinator/following{/other_user}","gists_url":"https://api.github.com/users/the-codinator/gists{/gist_id}","starred_url":"https://api.github.com/users/the-codinator/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/the-codinator/subscriptions","organizations_url":"https://api.github.com/users/the-codinator/orgs","repos_url":"https://api.github.com/users/the-codinator/repos","events_url":"https://api.github.com/users/the-codinator/events{/privacy}","received_events_url":"https://api.github.com/users/the-codinator/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-24T08:38:23Z","updated_at":"2021-06-25T05:40:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Jackson contains the following controllable features for checking duplicate keys in Json:\r\n\r\n- `JsonParser` has the `JsonParser.Feature.STRICT_DUPLICATE_DETECTION` feature config to check for duplicate keys when parsing the json input into `JsonToken`s\r\n- `JsonParser` / `ObjectMapper` has the `DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY` feature config to check for duplicate keys when deserializing to the Jackson `JsonNode` tree\r\n\r\nBoth these operate at the low level parsing and deserialization tree.\r\n\r\nThe same feature could be ported over to the databind layer.\r\n\r\nIf a POJO has a field \"x\" with and alias \"y\" and both these properties are present in the parsed Json, then Jackson should throw a `JsonMappingException` with a controllable feature (something like `MapperFeature.FAIL_ON_DUPLICATE_PROPERTY_ASSIGN`, which defaults to `false` for backward compatibility).\r\n\r\n```java\r\n// Sample POJO\r\n@lombok.Data\r\npublic class A {\r\n    @com.fasterxml.jackson.annotation.JsonAlias(\"y\")\r\n    private int x; // Field name \"x\" with alias \"y\"\r\n}\r\n\r\n// Executed code\r\nvar om = new ObjectMapper();\r\nSystem.out.println(om.readValue(\"{\\\"x\\\": 1}\", A.class));\r\nSystem.out.println(om.readValue(\"{\\\"y\\\": 1}\", A.class));\r\nSystem.out.println(om.readValue(\"{\\\"x\\\": 1, \\\"y\\\": 1}\", A.class));\r\nSystem.out.println(om.readValue(\"{\\\"x\\\": 1, \\\"y\\\": 2}\", A.class));\r\nSystem.out.println(om.readValue(\"{\\\"y\\\": 1, \\\"x\\\": 2}\", A.class));\r\n\r\n// Output\r\nA(x=1)\r\nA(x=1)\r\nA(x=1)\r\nA(x=2)\r\nA(x=2)\r\n```\r\n\r\nThe last 3 `readValue` should throw a `JsonMappingException` when we enable this new `MapperFeature`. There could be another feature `MapperFeature.ALLOW_DUPLICATE_PROPERTY_ASSIGN_IF_EQUAL` which does not throw an error on the 3rd case, since `Objects.equals(value1, value2)` is true.\r\n\r\nAdditional description / context: https://stackoverflow.com/questions/68054902/multiple-aliases-present-in-json-during-jackson-deserialization","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3184/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3184/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3183","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3183/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3183/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3183/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3183","id":927284121,"node_id":"MDU6SXNzdWU5MjcyODQxMjE=","number":3183,"title":"Polymorphic subtype deduction behaves differently based on order of fields","user":{"login":"thanaParis","id":83840862,"node_id":"MDQ6VXNlcjgzODQwODYy","avatar_url":"https://avatars.githubusercontent.com/u/83840862?v=4","gravatar_id":"","url":"https://api.github.com/users/thanaParis","html_url":"https://github.com/thanaParis","followers_url":"https://api.github.com/users/thanaParis/followers","following_url":"https://api.github.com/users/thanaParis/following{/other_user}","gists_url":"https://api.github.com/users/thanaParis/gists{/gist_id}","starred_url":"https://api.github.com/users/thanaParis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thanaParis/subscriptions","organizations_url":"https://api.github.com/users/thanaParis/orgs","repos_url":"https://api.github.com/users/thanaParis/repos","events_url":"https://api.github.com/users/thanaParis/events{/privacy}","received_events_url":"https://api.github.com/users/thanaParis/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-06-22T14:15:52Z","updated_at":"2021-07-15T04:09:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI'm using @JsonTypeInfo(use = Id.DEDUCTION) and have created a scenario where the mapper behaves differently depending on how I order my fields, which I think should be undesirable behavior.\r\n\r\n**Version information**\r\n2.12.3\r\n\r\n**To Reproduce**\r\nJUnit 5 test:\r\n\r\n```\r\nimport static org.junit.jupiter.api.Assertions.assertTrue;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonMappingException;\r\nimport com.fasterxml.jackson.databind.json.JsonMapper;\r\n\r\npublic class DeductionBasedPolymorphismFieldOrderTest {\r\n\r\n    @Test\r\n    public void test1() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"{\\\"kingdom\\\":\\\"animal\\\",\\\"woof\\\": \\\"woof.wav\\\",\\\"meow\\\": \\\"meow.wav\\\",\\\"arf\\\": \\\"arf.wav\\\",\\\"bark\\\": \\\"bark.wav\\\"}\";\r\n        Animal animal = new JsonMapper().readValue(json, Animal.class); // Succeeds!\r\n        assertTrue(animal.getClass().getName().contains(\"CatDog\"));\r\n    }\r\n\r\n    @Test\r\n    public void test2() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"{\\\"kingdom\\\":\\\"animal\\\",\\\"meow\\\": \\\"meow.wav\\\",\\\"woof\\\": \\\"woof.wav\\\",\\\"arf\\\": \\\"arf.wav\\\",\\\"bark\\\": \\\"bark.wav\\\"}\";\r\n        Animal animal = new JsonMapper().readValue(json, Animal.class);\r\n        // Throws: UnrecognizedPropertyException: Unrecognized field \"woof\" (class\r\n        // DeductionBasedPolymorphismFieldOrderTest$Cat)\r\n        assertTrue(animal.getClass().getName().contains(\"CatDog\"));\r\n    }\r\n\r\n    @Test\r\n    public void test3() throws JsonMappingException, JsonProcessingException {\r\n        String json = \"{\\\"kingdom\\\":\\\"animal\\\",\\\"arf\\\": \\\"arf.wav\\\",\\\"meow\\\": \\\"meow.wav\\\",\\\"woof\\\": \\\"woof.wav\\\",\\\"bark\\\": \\\"bark.wav\\\"}\";\r\n        Animal animal = new JsonMapper().readValue(json, Animal.class);\r\n        // Throws: UnrecognizedPropertyException: Unrecognized field \"meow\" (class\r\n        // DeductionBasedPolymorphismFieldOrderTest$Dog2)\r\n        assertTrue(animal.getClass().getName().contains(\"CatDog\"));\r\n    }\r\n\r\n    @JsonTypeInfo(use = Id.DEDUCTION, defaultImpl = CatDog.class)\r\n    @JsonSubTypes({ @JsonSubTypes.Type(value = Cat.class), @JsonSubTypes.Type(value = Dog1.class),\r\n            @JsonSubTypes.Type(value = Dog2.class) })\r\n    public static class Animal {\r\n        public String kingdom;\r\n    }\r\n\r\n    public static class Cat extends Animal {\r\n        public String meow;\r\n    }\r\n\r\n    public static class Dog1 extends Animal {\r\n        public String woof;\r\n        public String bark;\r\n    }\r\n\r\n    public static class Dog2 extends Animal {\r\n        public String woof;\r\n        public String arf;\r\n    }\r\n\r\n    public static class CatDog extends Animal {\r\n        public String meow;\r\n        public String woof;\r\n        public String bark;\r\n        public String arf;\r\n    }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nThis situation should always trigger the use of defaultImpl as it does in test 1, or, failing that, throw an InvalidTypeIdException referencing \"Cannot deduce unique subtype\" (but the behavior should be the same across examples).\r\n\r\n**Additional context**\r\nThe order of fields should not be what decides subtyping, as it is unintuitive and cannot always be controlled for.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3183/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3182","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3182/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3182/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3182/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3182","id":926968297,"node_id":"MDU6SXNzdWU5MjY5NjgyOTc=","number":3182,"title":"Suggestion: Support value deduplication for enumeration like values","user":{"login":"CodingFabian","id":176132,"node_id":"MDQ6VXNlcjE3NjEzMg==","avatar_url":"https://avatars.githubusercontent.com/u/176132?v=4","gravatar_id":"","url":"https://api.github.com/users/CodingFabian","html_url":"https://github.com/CodingFabian","followers_url":"https://api.github.com/users/CodingFabian/followers","following_url":"https://api.github.com/users/CodingFabian/following{/other_user}","gists_url":"https://api.github.com/users/CodingFabian/gists{/gist_id}","starred_url":"https://api.github.com/users/CodingFabian/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/CodingFabian/subscriptions","organizations_url":"https://api.github.com/users/CodingFabian/orgs","repos_url":"https://api.github.com/users/CodingFabian/repos","events_url":"https://api.github.com/users/CodingFabian/events{/privacy}","received_events_url":"https://api.github.com/users/CodingFabian/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-06-22T08:21:54Z","updated_at":"2021-06-25T05:35:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"There are many use cases where the json to be deserialized contains pseudo enumeration values as string.\r\nTake a look at these examples\r\n```\r\n{ \"type\": \"cat\", \"name\": \"Toby\"} \r\n```\r\n\r\nor \r\n```\r\n{ \"categories\": [\"food\", \"vegetables\", \"green\"], \"name\": \"beans\" }\r\n```\r\n\r\nif you build anything that wants to keep the deserialized Java objects in memory, you end up keeping multiple copies of the same string in memory.\r\nWhat you could then manually do is to deduplicate the values after you have deserialized the object:\r\n\r\n```\r\n  private static final ConcurrentHashMap<String, String> values = new ConcurrentHashMap<>();\r\n\r\n  public static String deduplicateValue(String value) {\r\n    return technologies.computeIfAbsent(value, v -> v);\r\n  }\r\n  \r\n  public static deduplicateAnimal(Animal a) {\r\n    a.setType(deduplicateValue(a.getType));\r\n  }\r\n```\r\n\r\nit would be really sweet if Jackson would have an ability to be told that specific fields contain a (limited) number of enumeration like values and it would then deduplicate the string automatically.\r\n\r\nWe have processes where this saves gigabytes of memory and thus a lot of money too.\r\n\r\nAlternative solution would be to use StringDeduplication feature of G1GC, but that might not be available. Also it comes with some extra cost.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3182/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3182/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3180","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3180/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3180/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3180/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3180","id":926384367,"node_id":"MDU6SXNzdWU5MjYzODQzNjc=","number":3180,"title":"Support `@JsonCreator` annotation on record classes","user":{"login":"markelliot","id":685891,"node_id":"MDQ6VXNlcjY4NTg5MQ==","avatar_url":"https://avatars.githubusercontent.com/u/685891?v=4","gravatar_id":"","url":"https://api.github.com/users/markelliot","html_url":"https://github.com/markelliot","followers_url":"https://api.github.com/users/markelliot/followers","following_url":"https://api.github.com/users/markelliot/following{/other_user}","gists_url":"https://api.github.com/users/markelliot/gists{/gist_id}","starred_url":"https://api.github.com/users/markelliot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/markelliot/subscriptions","organizations_url":"https://api.github.com/users/markelliot/orgs","repos_url":"https://api.github.com/users/markelliot/repos","events_url":"https://api.github.com/users/markelliot/events{/privacy}","received_events_url":"https://api.github.com/users/markelliot/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-21T16:14:55Z","updated_at":"2021-06-26T16:01:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using Jackson 2.12.\r\n\r\nOne common pattern in code on my teams is to use 'alias' types to decorate otherwise primitive value types in APIs and/or for dimensional units to gain compiler support for detecting otherwise subtle programming errors (such as using the wrong unit or passing parameters in the wrong order).\r\n\r\nToday, to do this with Java records, we need to write classes like\r\n```java\r\npublic record Watts(@JsonValue double value) {\r\n    @JsonCreator\r\n    public static Watts of(double value) {\r\n        return new Watts(value);\r\n    }\r\n}\r\n```\r\nWithout the `@JsonCreator` annotated static method (or similarly trivial but verbose constructor), Jackson produces the error\r\n```\r\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `...Watts` \r\n  (although at least one Creator exists): no double/Double-argument constructor/factory method to \r\n  deserialize from Number value (<value>)\r\n```\r\n\r\n\r\nIf we could place `@JsonCreator` on record classes and infer use of the single argument default constructor I think it'd cut the boilerplate even more. Alternatively, or in addition, it might be interesting to infer that a record class with a single labeled `@JsonValue` parameter should use the default constructor, allowing us to write either:\r\n```java\r\n@JsonCreator\r\npublic record Watts(@JsonValue int value) {}\r\n```\r\n\r\nor\r\n```java\r\npublic record Watts(@JsonValue int value) {}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3180/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3178","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3178/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3178/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3178/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3178","id":924364991,"node_id":"MDU6SXNzdWU5MjQzNjQ5OTE=","number":3178,"title":"@JsonUnwrapped - deserialization results in empty nested object when using prefix","user":{"login":"chimmi","id":3124852,"node_id":"MDQ6VXNlcjMxMjQ4NTI=","avatar_url":"https://avatars.githubusercontent.com/u/3124852?v=4","gravatar_id":"","url":"https://api.github.com/users/chimmi","html_url":"https://github.com/chimmi","followers_url":"https://api.github.com/users/chimmi/followers","following_url":"https://api.github.com/users/chimmi/following{/other_user}","gists_url":"https://api.github.com/users/chimmi/gists{/gist_id}","starred_url":"https://api.github.com/users/chimmi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chimmi/subscriptions","organizations_url":"https://api.github.com/users/chimmi/orgs","repos_url":"https://api.github.com/users/chimmi/repos","events_url":"https://api.github.com/users/chimmi/events{/privacy}","received_events_url":"https://api.github.com/users/chimmi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-17T21:49:55Z","updated_at":"2021-06-24T19:39:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Here are some modified tests that I borrowed from `TestUnwrappedWithPrefix` to illustrate the issue:\r\n\r\n    public class Main extends TestCase {\r\n\r\n        private static final ObjectMapper MAPPER = new ObjectMapper();\r\n\r\n        //passes\r\n        public void testUnwrappingDeserialize() throws Exception {\r\n            WithoutPrefix source = new WithoutPrefix(\"Bubba\", 2, 3);\r\n            String json = MAPPER.writeValueAsString(source);\r\n            assertEquals(json, \"{\\\"name\\\":\\\"Bubba\\\",\\\"location\\\":{\\\"x\\\":2,\\\"y\\\":3}}\");\r\n            WithoutPrefix bean = MAPPER.readValue(json, WithoutPrefix.class);\r\n            assertNotNull(bean.unwrapped);\r\n            assertNotNull(bean.unwrapped.location);\r\n            assertEquals(source.unwrapped.name, bean.unwrapped.name);\r\n            assertEquals(source.unwrapped.location.x, bean.unwrapped.location.x);\r\n            assertEquals(source.unwrapped.location.y, bean.unwrapped.location.y);\r\n        }\r\n\r\n        //fails\r\n        public void testPrefixedUnwrappingDeserialize() throws Exception {\r\n            WithPrefix source = new WithPrefix(\"Bubba\", 2, 3);\r\n            String json = MAPPER.writeValueAsString(source);\r\n            assertEquals(json, \"{\\\"_name\\\":\\\"Bubba\\\",\\\"_location\\\":{\\\"x\\\":2,\\\"y\\\":3}}\");\r\n            WithPrefix bean = MAPPER.readValue(json, WithPrefix.class);\r\n            assertNotNull(bean.unwrapped);\r\n            assertNotNull(bean.unwrapped.location);\r\n            assertEquals(source.unwrapped.name, bean.unwrapped.name);\r\n            //fails here\r\n            assertEquals(source.unwrapped.location.x, bean.unwrapped.location.x);\r\n            assertEquals(source.unwrapped.location.y, bean.unwrapped.location.y);\r\n        }\r\n\r\n        static class WithoutUnwrap {\r\n            public String name;\r\n            public Location location;\r\n\r\n            public WithoutUnwrap() {\r\n            }\r\n\r\n            public WithoutUnwrap(String str, int x, int y) {\r\n                name = str;\r\n                location = new Location(x, y);\r\n            }\r\n        }\r\n\r\n        static class Location {\r\n            public int x;\r\n            public int y;\r\n\r\n            public Location() {\r\n            }\r\n\r\n            public Location(int x, int y) {\r\n                this.x = x;\r\n                this.y = y;\r\n            }\r\n        }\r\n\r\n        static class WithPrefix {\r\n            @JsonUnwrapped(prefix = \"_\")\r\n            public WithoutUnwrap unwrapped;\r\n\r\n            public WithPrefix() {\r\n            }\r\n\r\n            public WithPrefix(String str, int x, int y) {\r\n                unwrapped = new WithoutUnwrap(str, x, y);\r\n            }\r\n        }\r\n\r\n        static class WithoutPrefix {\r\n            @JsonUnwrapped\r\n            public WithoutUnwrap unwrapped;\r\n\r\n            public WithoutPrefix() {\r\n            }\r\n\r\n            public WithoutPrefix(String str, int x, int y) {\r\n                unwrapped = new WithoutUnwrap(str, x, y);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\nThe main difference from the original is that I would like to keep nested `location` property as JSON object, rather than unwrap it. And it only works without prefix, if I setup a prefix deserialization results in an empty object for `location`.\r\n\r\nThis was tested with the latest version of Jackson atm - 2.12.3\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3178/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3175","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3175/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3175/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3175/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3175","id":918975930,"node_id":"MDU6SXNzdWU5MTg5NzU5MzA=","number":3175,"title":" can not deserializate the superclass field with JsonDeserialize in Builder model","user":{"login":"JaeCoding","id":38941444,"node_id":"MDQ6VXNlcjM4OTQxNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/38941444?v=4","gravatar_id":"","url":"https://api.github.com/users/JaeCoding","html_url":"https://github.com/JaeCoding","followers_url":"https://api.github.com/users/JaeCoding/followers","following_url":"https://api.github.com/users/JaeCoding/following{/other_user}","gists_url":"https://api.github.com/users/JaeCoding/gists{/gist_id}","starred_url":"https://api.github.com/users/JaeCoding/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JaeCoding/subscriptions","organizations_url":"https://api.github.com/users/JaeCoding/orgs","repos_url":"https://api.github.com/users/JaeCoding/repos","events_url":"https://api.github.com/users/JaeCoding/events{/privacy}","received_events_url":"https://api.github.com/users/JaeCoding/received_events","type":"User","site_admin":false},"labels":[{"id":439290311,"node_id":"MDU6TGFiZWw0MzkyOTAzMTE=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/lombok","name":"lombok","color":"499db7","default":false,"description":null},{"id":2413522096,"node_id":"MDU6TGFiZWwyNDEzNTIyMDk2","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/builder-related","name":"builder-related","color":"8880cc","default":false,"description":"Issue related to handling of Builder-style deserialization"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-06-11T14:16:47Z","updated_at":"2021-07-15T04:08:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I had a superclass and its subclass, use @JsonDeserialize and builer model but it can not deserializate the superclass fied, I konw the reason is the Constructor of subclass doesn't has the parameters of superclass.\r\n\r\n```java\r\n// superclass\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic abstract class Parent1 {\r\n    private String parentName;\r\n    private int parentAge;\r\n}\r\n\r\n\r\n// subclass\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Data\r\n@Builder\r\n@EqualsAndHashCode(callSuper = false)\r\n@JsonDeserialize(builder = Child1.Child1Builder.class)\r\npublic final class Child1 extends Parent1 {\r\n    private String childName;\r\n    private int childAge;\r\n\r\n    @JsonPOJOBuilder(withPrefix = \"\")\r\n    public static class Child1Builder {\r\n    }\r\n}\r\n\r\n// test\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\r\n\r\nString json = \"{\\\"parentName\\\":\\\"fatherName\\\",\\\"parentAge\\\":0,\\\"childName\\\":\\\"3123\\\",\\\"childAge\\\":15}\";\r\nChild1 child11 = mapper.readValue(json, Child1.class);\r\nSystem.out.println(mapper.writeValueAsString(child11)); //{\"parentName\":null,\"parentAge\":0,\"childName\":\"3123\",\"childAge\":15}\r\nSystem.out.println(child11.getParentName()); // null\r\n```\r\n\r\nif I add a customized Constractor, it can help problem out but will make a lot boilerplate code and hard to expand(I have lots of subclass).\r\n\r\n```\r\n    @Builder\r\n    Child1(String parentName, int parentAge, String childName, int childAge) {\r\n        super(parentName, parentAge);\r\n        this.childName = childName;\r\n        this.childAge = childAge;\r\n    }\r\n```\r\n\r\nSo I wonder if there someway can deserializate the superclass field in Buider model ? Thanks!","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3175/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3172","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3172/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3172/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3172/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3172","id":915156746,"node_id":"MDU6SXNzdWU5MTUxNTY3NDY=","number":3172,"title":"`MapperFeature.ALLOW_COERCION_OF_SCALARS = false` should not coerce to String","user":{"login":"driverpt","id":1164534,"node_id":"MDQ6VXNlcjExNjQ1MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1164534?v=4","gravatar_id":"","url":"https://api.github.com/users/driverpt","html_url":"https://github.com/driverpt","followers_url":"https://api.github.com/users/driverpt/followers","following_url":"https://api.github.com/users/driverpt/following{/other_user}","gists_url":"https://api.github.com/users/driverpt/gists{/gist_id}","starred_url":"https://api.github.com/users/driverpt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/driverpt/subscriptions","organizations_url":"https://api.github.com/users/driverpt/orgs","repos_url":"https://api.github.com/users/driverpt/repos","events_url":"https://api.github.com/users/driverpt/events{/privacy}","received_events_url":"https://api.github.com/users/driverpt/received_events","type":"User","site_admin":false},"labels":[{"id":890728708,"node_id":"MDU6TGFiZWw4OTA3Mjg3MDg=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-06-08T15:08:58Z","updated_at":"2021-06-25T05:55:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"If we set `MapperFeature.ALLOW_COERCION_OF_SCALARS = false` Jackson will still try to coerce to String\r\nFor consistency, this should not happen.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3172/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3172/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3169","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3169/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3169/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3169/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3169","id":909566764,"node_id":"MDU6SXNzdWU5MDk1NjY3NjQ=","number":3169,"title":"@JsonIncludeProperties does not work together with @JsonIdentityInfo","user":{"login":"chtinnes","id":17828327,"node_id":"MDQ6VXNlcjE3ODI4MzI3","avatar_url":"https://avatars.githubusercontent.com/u/17828327?v=4","gravatar_id":"","url":"https://api.github.com/users/chtinnes","html_url":"https://github.com/chtinnes","followers_url":"https://api.github.com/users/chtinnes/followers","following_url":"https://api.github.com/users/chtinnes/following{/other_user}","gists_url":"https://api.github.com/users/chtinnes/gists{/gist_id}","starred_url":"https://api.github.com/users/chtinnes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chtinnes/subscriptions","organizations_url":"https://api.github.com/users/chtinnes/orgs","repos_url":"https://api.github.com/users/chtinnes/repos","events_url":"https://api.github.com/users/chtinnes/events{/privacy}","received_events_url":"https://api.github.com/users/chtinnes/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-02T14:30:38Z","updated_at":"2021-07-15T03:51:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In version 2.12.3, using `@JsonIncludeProperties `in combination with `@JsonIdentityInfo `at the nested class returns only the identity field instead of the selected properties that should be included.\r\n\r\n```java\r\n@JsonIdentityInfo(generator= ObjectIdGenerators.PropertyGenerator.class, property=\"deviceId\")\r\npublic class Device{\r\n    private UUID deviceId;\r\n\r\n    private String name;\r\n}\r\n\r\npublic class Config {\r\n    @JsonIncludeProperties({\"name\"})\r\n    private Device device;\r\n}\r\n```\r\n\r\nreturns, for example, \r\n\r\n`{\"device\": \"b16c3254-ee2e-11e7-8c3f-fa085a82f01f\"}`\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3169/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3169/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3168","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3168/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3168/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3168/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3168","id":907563923,"node_id":"MDU6SXNzdWU5MDc1NjM5MjM=","number":3168,"title":"JDK17 compatibility","user":{"login":"nmandrescu","id":17854915,"node_id":"MDQ6VXNlcjE3ODU0OTE1","avatar_url":"https://avatars.githubusercontent.com/u/17854915?v=4","gravatar_id":"","url":"https://api.github.com/users/nmandrescu","html_url":"https://github.com/nmandrescu","followers_url":"https://api.github.com/users/nmandrescu/followers","following_url":"https://api.github.com/users/nmandrescu/following{/other_user}","gists_url":"https://api.github.com/users/nmandrescu/gists{/gist_id}","starred_url":"https://api.github.com/users/nmandrescu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nmandrescu/subscriptions","organizations_url":"https://api.github.com/users/nmandrescu/orgs","repos_url":"https://api.github.com/users/nmandrescu/repos","events_url":"https://api.github.com/users/nmandrescu/events{/privacy}","received_events_url":"https://api.github.com/users/nmandrescu/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-05-31T15:28:11Z","updated_at":"2021-09-21T23:35:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"#### Problem\r\n[JEP 403](https://openjdk.java.net/jeps/403) targeted for JDK 17 (release planned for [Sept 2021](https://openjdk.java.net/projects/jdk/17/)) will remove `--illegal-access` flag. That will be equivalent to `--illegal-access=deny`.\r\n\r\nRunning with `--illegal-access=warn` apps using jackson-databind and other jackson modules reported here https://github.com/FasterXML/jackson-databind/issues/2856#issuecomment-700581797 can discover [issues](https://github.com/FasterXML/jackson-databind/issues?q=is%3Aissue+Illegal+reflective+access+is%3Aopen) like\r\n`WARNING: Illegal reflective access by com.fasterxml.jackson.databind.util.ClassUtil` \r\n \r\n#### Workaround\r\nFor illegal reflective access pointing to jackson use [--add-open](https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-12F945EB-71D6-46AF-8C3D-D354FD0B1781) for the package containing the restricted field.\r\n\r\n_Update_\r\nNot related to jackson library, since JDK 9 a number of [standard replacements](https://wiki.openjdk.java.net/display/JDK8/Java+Dependency+Analysis+Tool#JavaDependencyAnalysisTool-ReplaceusesoftheJDK'sinternalAPIs) are provided for the most commonly used internal elements of the JDK.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3168/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3166","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3166/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3166/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3166/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3166","id":905854667,"node_id":"MDU6SXNzdWU5MDU4NTQ2Njc=","number":3166,"title":"Ability to specify array (de)serialization order of sets","user":{"login":"mjustin","id":1580571,"node_id":"MDQ6VXNlcjE1ODA1NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1580571?v=4","gravatar_id":"","url":"https://api.github.com/users/mjustin","html_url":"https://github.com/mjustin","followers_url":"https://api.github.com/users/mjustin/followers","following_url":"https://api.github.com/users/mjustin/following{/other_user}","gists_url":"https://api.github.com/users/mjustin/gists{/gist_id}","starred_url":"https://api.github.com/users/mjustin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjustin/subscriptions","organizations_url":"https://api.github.com/users/mjustin/orgs","repos_url":"https://api.github.com/users/mjustin/repos","events_url":"https://api.github.com/users/mjustin/events{/privacy}","received_events_url":"https://api.github.com/users/mjustin/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-28T18:24:19Z","updated_at":"2021-05-28T20:38:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a POJO with an array of `Comparable` types ([`DayOfWeek`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/DayOfWeek.html) in my case).  This is logically a set, an it is therefore represented as such in the object.  When serialized using an unordered set (such as a `HashSet`), the elements are written to JSON in the set's arbitrary iteration order, and not in a logical sorted order.  This makes the data more annoying to work with: it's harder to see what elements are present at a visual glance, and any tests on the JSON structure itself need to make sure they're ignoring the ordering of the resulting array.\r\n\r\n```java\r\nSet<DayOfWeek> unorderedSet = new HashSet<>(EnumSet.allOf(DayOfWeek.class));\r\nJsonMapper jsonMapper = JsonMapper.builder().build();\r\nSystem.out.println(jsonMapper.writeValueAsString(unorderedSet));\r\n// [\"WEDNESDAY\",\"MONDAY\",\"THURSDAY\",\"SUNDAY\",\"FRIDAY\",\"TUESDAY\",\"SATURDAY\"]\r\n\r\nSet<DayOfWeek> orderedSet = EnumSet.allOf(DayOfWeek.class);\r\nSystem.out.println(jsonMapper.writeValueAsString(orderedSet));\r\n// [\"MONDAY\",\"TUESDAY\",\"WEDNESDAY\",\"THURSDAY\",\"FRIDAY\",\"SATURDAY\",\"SUNDAY\"]\r\n```\r\n\r\nWhat I would like is the ability to use the natural order of the `Set` elements when outputting the array to JSON, i.e. something equivalent to [`ORDER_MAP_ENTRIES_BY_KEYS`](https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/SerializationFeature.html#ORDER_MAP_ENTRIES_BY_KEYS), but for collection entries, not map entries.  In a perfect world, I guess it would be nice to be able to specify it globally for the `ObjectMapper`, as well as locally per property, but either would work.  `null` values in the set should ideally be supported as well, even though they're not comparable, though this isn't a showstopper for my use case.\r\n\r\nThis might be a separate issue, but I'd like to be able to the inverse as well: when deserializing from a JSON array, produce a set with the desired order (e.g. with a `LinkedHashSet`).\r\n\r\n## Workaround\r\n\r\nA simple custom `Converter` can be created to sort the elements on (de)serialization:\r\n\r\n```java\r\nprivate static class MyPojo {\r\n    // Constructors, getters, setters\r\n\r\n    @JsonSerialize(converter = OrderedSetConverter.class)\r\n    @JsonDeserialize(converter = OrderedSetConverter.class)\r\n    private Set<DayOfWeek> daysOfWeek;\r\n}\r\n\r\nprivate static class OrderedSetConverter extends StdConverter<Set<DayOfWeek>, Set<DayOfWeek>> {\r\n    @Override\r\n    public Set<DayOfWeek> convert(Set<DayOfWeek> value) {\r\n        return value == null ? null : value.stream()\r\n                .sorted(Comparator.nullsLast(Comparator.naturalOrder()))\r\n                .collect(Collectors.toCollection(LinkedHashSet::new));\r\n    }\r\n}\r\n```\r\n\r\nThere's probably a way to make it generic on `<E extends Comparable<? super E>>`, but the naive approach ran into some Jackson type issues, and I haven't yet taken the time to dig deeper to figure out the proper Jackson way to handle it.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3166/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3163","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3163/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3163/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3163/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3163","id":899957373,"node_id":"MDU6SXNzdWU4OTk5NTczNzM=","number":3163,"title":"Huge performance problem deserializing java.nio.file.Path with existing Windows Samba/CIFS mounts","user":{"login":"Gaibhne","id":24731712,"node_id":"MDQ6VXNlcjI0NzMxNzEy","avatar_url":"https://avatars.githubusercontent.com/u/24731712?v=4","gravatar_id":"","url":"https://api.github.com/users/Gaibhne","html_url":"https://github.com/Gaibhne","followers_url":"https://api.github.com/users/Gaibhne/followers","following_url":"https://api.github.com/users/Gaibhne/following{/other_user}","gists_url":"https://api.github.com/users/Gaibhne/gists{/gist_id}","starred_url":"https://api.github.com/users/Gaibhne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Gaibhne/subscriptions","organizations_url":"https://api.github.com/users/Gaibhne/orgs","repos_url":"https://api.github.com/users/Gaibhne/repos","events_url":"https://api.github.com/users/Gaibhne/events{/privacy}","received_events_url":"https://api.github.com/users/Gaibhne/received_events","type":"User","site_admin":false},"labels":[{"id":2074436048,"node_id":"MDU6TGFiZWwyMDc0NDM2MDQ4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/performance","name":"performance","color":"FFA060","default":false,"description":"Issue related to performance problems or enhancements"},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-24T19:53:00Z","updated_at":"2021-07-15T03:52:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nDeserializing a `Path` element uses `File.listRoots()`, which is very costly when the current user has any network mounts.\r\n\r\nThis bug is amplified by a large factor when the current user has *failing* network mounts (the cost of simply deserializing a `Path` object with a failing network mount is an insane ~10 seconds per failing mount), but I would expect (without having the setup to measure it) that there is still a considerable cost due to how `NioPathDeserializer` is set up.\r\n\r\nNote that this happens when deserializing **any** `Path` elements, they don't need to be on the/a network share. Even deserializing 'C:\\' will suffer this bug.\r\n\r\n**Version information**\r\nNoticed it in 2.11.1, still present in latest as of reporting, 2.12.3.\r\n\r\n**To Reproduce**\r\nDue to the nature of this bug, it is only reproducible on a Windows system, and only when the user has network mounts - I'm not sure how one would go about adding one that later fails without a second system in the network to use.\r\n\r\n1. Code sample:\r\n\r\nTestCase.java:\r\n```\r\npublic class TestCase {\r\n    public Path error;\r\n}\r\n```\r\n\r\nRandom App class:\r\n```\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        ObjectMapper mapper = new ObjectMapper(new YAMLFactor());\r\n        TestCase test = mapper.readValue(\"erro: c:\\\\\", TestCase.class);\r\n    }\r\n}\r\n```\r\n\r\n2. Short snippet is enough to demonstrate the problem\r\n3. A Windows network mount needs to be set up, ideally a failing one (as in one where the mapped resource is unavailable)\r\n\r\n**Expected behavior**\r\nCode execution should be near instant.\r\n\r\n**Additional context**\r\nThe problem exists in the JDK itself (tested up to 16), NioPathDeserializer line 30 (in my version; the line in question is `for (File file : File.listRoots()) {`) triggers the problem. I'm not sure the call is needed at that point, if I am reading the code correctly, in the case of attempting to resolve something like `C:` on a Windows system will always work, and on a non-Windows system will always result in an error, even without the check and special conditional branch for `areWindowsFilePathsSupported`.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3163/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3163/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3155","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3155/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3155/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3155/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3155","id":892585405,"node_id":"MDU6SXNzdWU4OTI1ODU0MDU=","number":3155,"title":"Allow use of `@JsonValue` on Creator methods as alias to `@JsonCreator(mode=DELEGATING)`","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-16T03:23:32Z","updated_at":"2021-07-15T04:10:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"It seems useful (if redundant) to allow use of `@JsonValue` as a sort of alias for existing `@JsonCreator` (with `mode = DELEGATING`). Doing this makes sense for the common case of `@JsonValue` already being used to indicate serialization, like:\r\n\r\n```java\r\npublic class StringBean {\r\n    private String value;\r\n\r\n    // Instead of this, allow @JsonValue\r\n    @JsonCreator(mode = Mode.DELEGATING)\r\n    public StringBean(String v) {\r\n      value = v;\r\n    }\r\n\r\n    @JsonValue\r\n    public String getValue() { return value; }\r\n}\r\n```\r\n\r\nWhile this may be a minor thing for Java usage, this could be particularly helpful for Kotlin module.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3155/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3152","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3152/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3152/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3152/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3152","id":890986413,"node_id":"MDU6SXNzdWU4OTA5ODY0MTM=","number":3152,"title":"Type ClassLoader causes a stackoverflow","user":{"login":"xenoterracide","id":5517,"node_id":"MDQ6VXNlcjU1MTc=","avatar_url":"https://avatars.githubusercontent.com/u/5517?v=4","gravatar_id":"","url":"https://api.github.com/users/xenoterracide","html_url":"https://github.com/xenoterracide","followers_url":"https://api.github.com/users/xenoterracide/followers","following_url":"https://api.github.com/users/xenoterracide/following{/other_user}","gists_url":"https://api.github.com/users/xenoterracide/gists{/gist_id}","starred_url":"https://api.github.com/users/xenoterracide/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xenoterracide/subscriptions","organizations_url":"https://api.github.com/users/xenoterracide/orgs","repos_url":"https://api.github.com/users/xenoterracide/repos","events_url":"https://api.github.com/users/xenoterracide/events{/privacy}","received_events_url":"https://api.github.com/users/xenoterracide/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-05-13T12:09:12Z","updated_at":"2021-05-27T00:00:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The error (took me a minute to figure out what it was complaining about due to the stackoverflow)\r\n\r\n```\r\n.ClassLoaders$PlatformClassLoader[\"unnamedModule\"]->java.lang.Module[\"classLoader\"])\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:4236)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:4167)\r\n\tat com.xenoterracide.brix.configloader.spi.ConfigValueProcessor.getContext(ConfigValueProcessor.java:80)\r\n\tat com.xenoterracide.brix.configloader.spi.ConfigValueProcessor.from(ConfigValueProcessor.java:64)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1655)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n\tat com.xenoterracide.brix.configloader.spi.ConfigValueProcessor.from(ConfigValueProcessor.java:56)\r\n\tat com.xenoterracide.brix.configloader.yaml.YamlConfigLoader.load(YamlConfigLoader.java:57)\r\n\tat com.xenoterracide.brix.configloader.yaml.YamlConfigLoaderTest.load(YamlConfigLoaderTest.java:28)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\n\tat com.sun.proxy.$Proxy2.stop(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:135)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\r\n\tat java.base/java.lang.Thread.run(Thread.java:829)\r\nCaused by: com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: jdk.internal.loader.ClassLoaders$PlatformClassLoader[\"unnamedModule\"]->java.lang.Module[\"classLoader\"]->jdk.internal.loader.ClassLoaders$PlatformClassLoader[\"unnamedModule\"]->java.lang.Module[\"classLoader\"]->jdk.internal.loader.ClassLoaders$PlatformClassLoader[\"unnamedModule\"]->java.lang.Module[\"classLoader\"]->jdk.internal.loader\r\n```\r\nThe class\r\n\r\n```java\r\n@SuppressWarnings(\"checkstyle:HiddenField\")\r\npublic class TestCliConfiguration implements CliConfiguration {\r\n  private final @MonotonicNonNull String name;\r\n\r\n  private final @MonotonicNonNull ClassLoader classLoader;\r\n\r\n  private final String moduleType;\r\n\r\n  private final String language;\r\n\r\n  private final String project;\r\n\r\n  TestCliConfiguration(\r\n    @MonotonicNonNull String name,\r\n    @MonotonicNonNull ClassLoader classLoader,\r\n    String moduleType,\r\n    String language,\r\n    String project\r\n  ) {\r\n    this.name = name;\r\n    this.classLoader = classLoader;\r\n    this.moduleType = moduleType;\r\n    this.language = language;\r\n    this.project = project;\r\n  }\r\n\r\n  @Override\r\n  public Optional<Path> getConfigDir() {\r\n    return Try.ofSupplier( this::getClassLoader )\r\n      .filter( Objects::nonNull )\r\n      .mapTry( cl -> cl.getResource( \"config\" ) )\r\n      .filter( Objects::nonNull, t -> new IOException( \"unable to find resource 'config'\" ) )\r\n      .mapTry( URL::toURI )\r\n      .map( Path::of )\r\n      .map( Optional::of )\r\n      .getOrElse( Optional.empty() );\r\n  }\r\n  ```\r\n  \r\nI don't really expect `ClassLoader` to be serializable, but I decided to report this because it might be possible to stop the stackoverflow as I didn't see the exception in the middle of all the noise at first.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3152/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3153","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3153/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3153/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3153/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3153","id":891188903,"node_id":"MDU6SXNzdWU4OTExODg5MDM=","number":3153,"title":"Improve creator exceptions","user":{"login":"xenoterracide","id":5517,"node_id":"MDQ6VXNlcjU1MTc=","avatar_url":"https://avatars.githubusercontent.com/u/5517?v=4","gravatar_id":"","url":"https://api.github.com/users/xenoterracide","html_url":"https://github.com/xenoterracide","followers_url":"https://api.github.com/users/xenoterracide/followers","following_url":"https://api.github.com/users/xenoterracide/following{/other_user}","gists_url":"https://api.github.com/users/xenoterracide/gists{/gist_id}","starred_url":"https://api.github.com/users/xenoterracide/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xenoterracide/subscriptions","organizations_url":"https://api.github.com/users/xenoterracide/orgs","repos_url":"https://api.github.com/users/xenoterracide/repos","events_url":"https://api.github.com/users/xenoterracide/events{/privacy}","received_events_url":"https://api.github.com/users/xenoterracide/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-13T11:49:05Z","updated_at":"2021-07-15T03:56:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I already figured [this](https://stackoverflow.com/q/67513192/206466) out, but it took hours when it could have taken minutes. The issue wasn't very googleable, as most results don't even say that you can do constructor injection without `@JsonProperty`, and the others are using spring-boot and don't mention that you need to register `ParameterNamesModule`.\r\n\r\nThe first error message, without `@JsonCreator` is annoying because it's something like \"Unable to find Creator\" blah blah, \"no default constructor\" blah blah. I suspect it could find its way to the next exception if it checked that I only had one constructor with arguments. That might be hard though, so I forgive it. At least it might help to suggest annotating with `@JsonCreator` in that message.\r\n\r\nWhen you do annotate with that, the message seems like a lie\r\n\r\n>  Argument #0 has no property name, is not Injectable: can not use as Creator\r\n\r\nI realize reading this now that it means that it has no `@JsonProperty`, I originally assumed that it meant that the parameter name was missing, and thus I didn't have `-parameters` which didn't make sense. The simplest solution in my mind would be to expand this message to say something like\r\n\r\n> Argument #0 has no property name, is not Injectable: can not use as Creator. Add @JsonProperty or compile with -parameters and register ParameterNamesModule\r\n\r\n```\r\n ./gradlew -q :config-loader:yaml:dependencyInsight --configuration runtimeClasspath --dependency jackson-core                                                                                                     # brix -> ccushing/copy-5\r\ncom.fasterxml.jackson.core:jackson-core:2.11.4\r\n   variant \"runtime\" [\r\n      org.gradle.status              = release (not requested)\r\n      org.gradle.usage               = java-runtime\r\n      org.gradle.libraryelements     = jar\r\n      org.gradle.category            = library\r\n\r\n      Requested attributes not found in the selected variant:\r\n         org.gradle.dependency.bundling = external\r\n         org.gradle.jvm.environment     = standard-jvm\r\n         org.gradle.jvm.version         = 11\r\n   ]\r\n   Selection reasons:\r\n      - By constraint : dependency was locked to version '2.11.4'\r\n      - By ancestor\r\n\r\ncom.fasterxml.jackson.core:jackson-core:{strictly 2.11.4} -> 2.11.4\r\n\\--- runtimeClasspath\r\n\r\ncom.fasterxml.jackson.core:jackson-core:2.11.4\r\n+--- com.fasterxml.jackson.core:jackson-databind:2.11.4\r\n|    +--- runtimeClasspath (requested com.fasterxml.jackson.core:jackson-databind)\r\n|    +--- project :config-loader:spi (requested com.fasterxml.jackson.core:jackson-databind)\r\n|    |    \\--- runtimeClasspath\r\n|    +--- project :config-loader:api (requested com.fasterxml.jackson.core:jackson-databind)\r\n|    |    +--- runtimeClasspath\r\n|    |    \\--- project :config-loader:spi (*)\r\n|    +--- org.springframework.boot:spring-boot-starter-parent:2.4.5\r\n|    |    +--- runtimeClasspath (requested org.springframework.boot:spring-boot-starter-parent:2.+)\r\n|    |    +--- project :config-loader:spi (requested org.springframework.boot:spring-boot-starter-parent:2.+) (*)\r\n|    |    +--- project :config-loader:api (requested org.springframework.boot:spring-boot-starter-parent:2.+) (*)\r\n|    |    \\--- project :cli:api (requested org.springframework.boot:spring-boot-starter-parent:2.+)\r\n|    |         +--- runtimeClasspath\r\n|    |         \\--- project :config-loader:spi (*)\r\n|    +--- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.4\r\n|    |    +--- runtimeClasspath (requested com.fasterxml.jackson.dataformat:jackson-dataformat-yaml)\r\n|    |    \\--- org.springframework.boot:spring-boot-starter-parent:2.4.5 (*)\r\n|    \\--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.11.4\r\n|         +--- runtimeClasspath (requested com.fasterxml.jackson.module:jackson-module-parameter-names)\r\n|         \\--- org.springframework.boot:spring-boot-starter-parent:2.4.5 (*)\r\n+--- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.4 (*)\r\n+--- com.fasterxml.jackson.module:jackson-module-parameter-names:2.11.4 (*)\r\n\\--- org.springframework.boot:spring-boot-starter-parent:2.4.5 (*)\r\n\r\ncom.fasterxml.jackson.core:jackson-core -> 2.11.4\r\n\\--- runtimeClasspath\r\n\r\n(*) - dependencies omitted (listed previously)\r\n\r\nA web-based, searchable dependency report is available by adding the --scan option.\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3153/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3145","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3145/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3145/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3145/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3145","id":877858006,"node_id":"MDU6SXNzdWU4Nzc4NTgwMDY=","number":3145,"title":"`@JsonDeserialize` on a super class pointing to a sibling class makes Jackson deserialize using that sibling class","user":{"login":"nikita2206","id":1030688,"node_id":"MDQ6VXNlcjEwMzA2ODg=","avatar_url":"https://avatars.githubusercontent.com/u/1030688?v=4","gravatar_id":"","url":"https://api.github.com/users/nikita2206","html_url":"https://github.com/nikita2206","followers_url":"https://api.github.com/users/nikita2206/followers","following_url":"https://api.github.com/users/nikita2206/following{/other_user}","gists_url":"https://api.github.com/users/nikita2206/gists{/gist_id}","starred_url":"https://api.github.com/users/nikita2206/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nikita2206/subscriptions","organizations_url":"https://api.github.com/users/nikita2206/orgs","repos_url":"https://api.github.com/users/nikita2206/repos","events_url":"https://api.github.com/users/nikita2206/events{/privacy}","received_events_url":"https://api.github.com/users/nikita2206/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-06T18:44:17Z","updated_at":"2021-05-16T02:58:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This at first sounds like a configuration issue on my end. But then I think Jackson could be a bit more clever here, or in fact in this case maybe it'd be less clever.\r\n\r\nSuppose we have an interface with `@JsonDeserialize`:\r\n```java\r\n@JsonDeserialize(as = DataShapeImpl.class)\r\ninterface DataShape {\r\n    String getSomething();\r\n}\r\n```\r\nand its implementation\r\n```java\r\nclass DataShapeImpl implements DataShape { ... }\r\n```\r\n\r\nAnd now if we happen to have another implementation of the same interface:\r\n```java\r\nclass ApiDataShape implements DataShape { ... }\r\n```\r\n\r\nthen when I invoke deserialization pointing Jackson to the second implementation:\r\n```java\r\nApiDataShape shape = objectMapper\r\n        .readerFor(ApiDataShape.class)\r\n        .readValue(\"{\\\"something\\\": \\\"foo\\\"}\");\r\n```\r\n\r\nI'll get an exception saying `Failed to narrow type ApiDataShape with annotation (value DataShapeImpl)`. Meaning that Jackson decides to deserialize the given JSON to `DataShapeImpl` because it follows the `JsonDeserialize` annotation on the super-type, even though I asked it for `ApiDataShape` instance and those classes are not compatible with each other.\r\n\r\n**Version information**\r\n2.13 / master\r\n\r\n**Expected behavior**\r\nWhat I'd propose is that when Jackson reads the `JsonDeserialize(as = ...)` annotation on a super-type, that it tries to be more lenient with regards to the `JsonDeserialize` annotation on a super-type. There's actually a [comment in the code](https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java#L531) that leads to that exception, about whether Jackson should handle this a bit differently.\r\nI think if `refineDeserializationType()` behaved differently when called from `modifyTypeByAnnotation()`, as the comment suggests, maybe that would work more in line with what is expected. Specifically, if `modifyTypeByAnnotation()` wouldn't fail like that and ignored the `JsonDeserialize(as = ...)` if types are not compatible.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3145/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3141","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3141/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3141/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3141/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3141","id":875085062,"node_id":"MDU6SXNzdWU4NzUwODUwNjI=","number":3141,"title":"MapperFeature.ALLOW_COERCION_OF_SCALARS map a number in Boolean type to true not an exception","user":{"login":"qunv","id":47111976,"node_id":"MDQ6VXNlcjQ3MTExOTc2","avatar_url":"https://avatars.githubusercontent.com/u/47111976?v=4","gravatar_id":"","url":"https://api.github.com/users/qunv","html_url":"https://github.com/qunv","followers_url":"https://api.github.com/users/qunv/followers","following_url":"https://api.github.com/users/qunv/following{/other_user}","gists_url":"https://api.github.com/users/qunv/gists{/gist_id}","starred_url":"https://api.github.com/users/qunv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qunv/subscriptions","organizations_url":"https://api.github.com/users/qunv/orgs","repos_url":"https://api.github.com/users/qunv/repos","events_url":"https://api.github.com/users/qunv/events{/privacy}","received_events_url":"https://api.github.com/users/qunv/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-05-04T04:09:57Z","updated_at":"2021-07-15T03:56:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nBy default, *ALLOW_COERCION_OF_SCALARS* is enabled and String \"true\" is allowed as equivalent of JSON boolean token `true`, But with input is a number, it will map a number to `true` not an exception\r\n\r\n**To Reproduce**\r\nI created a project that reproduces this behavior: [https://github.com/puertigris/quarkus-issue](https://github.com/puertigris/quarkus-issue)\r\nFor simple: \r\nI have controller in a REST project\r\nUsing `json-databind` to map json to object.\r\n```java\r\npackage org.acme.getting.started;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\r\nimport com.fasterxml.jackson.databind.PropertyNamingStrategy;\r\nimport com.fasterxml.jackson.databind.annotation.JsonNaming;\r\nimport io.smallrye.common.constraint.NotNull;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport lombok.ToString;\r\n\r\n@Getter\r\n@Setter\r\n@ToString(callSuper = true)\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\n@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\r\npublic class Issue {\r\n    \r\n    @NotNull\r\n    private Boolean alive;\r\n}\r\n```\r\nand input here\r\n```json\r\n{\r\n    \"data\": {\r\n        \"alive\": 5\r\n    }\r\n}\r\n```\r\nResult by capturing image(Postman): \r\n[Issue image](https://github.com/puertigris/quarkus-issue/blob/main/Screenshot%20from%202021-04-28%2022-11-05.png)\r\n\r\n**Expected behavior**\r\nI expect this feature will return an exception such as `InvalidParamException` or something. \r\n\r\nHope to hear the explanation from you guys.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3141/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3133","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3133/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3133/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3133/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3133","id":869966206,"node_id":"MDU6SXNzdWU4Njk5NjYyMDY=","number":3133,"title":"Map deserialization results in different numeric classes based on json ordering (BigDecimal / Double) when used in combination with @JsonSubTypes","user":{"login":"mreiterer","id":6702234,"node_id":"MDQ6VXNlcjY3MDIyMzQ=","avatar_url":"https://avatars.githubusercontent.com/u/6702234?v=4","gravatar_id":"","url":"https://api.github.com/users/mreiterer","html_url":"https://github.com/mreiterer","followers_url":"https://api.github.com/users/mreiterer/followers","following_url":"https://api.github.com/users/mreiterer/following{/other_user}","gists_url":"https://api.github.com/users/mreiterer/gists{/gist_id}","starred_url":"https://api.github.com/users/mreiterer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mreiterer/subscriptions","organizations_url":"https://api.github.com/users/mreiterer/orgs","repos_url":"https://api.github.com/users/mreiterer/repos","events_url":"https://api.github.com/users/mreiterer/events{/privacy}","received_events_url":"https://api.github.com/users/mreiterer/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-04-28T13:44:47Z","updated_at":"2021-10-09T18:33:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen deserializing a jsonSubTye which contains a map with numeric values (floats) the order of the json string results in different classes constructed. \r\n\r\nI have pasted a complete Junit5 Test which can easily be used to reproduce the issue.\r\n\r\n\r\n**Version information**\r\nHappens from 2.12.0 onwards, in 2.11.x its ok. \r\n\r\n**To Reproduce**\r\nIf you have a way to reproduce this with:\r\n\r\n```\r\npackage test;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.BeforeAll;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes;\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes.Type;\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\r\nimport com.fasterxml.jackson.databind.DeserializationFeature;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\n@TestInstance(Lifecycle.PER_CLASS)\r\npublic class JacksonSubTypeBehaviourTest {\r\n\r\n\tprivate static final Logger log = LoggerFactory.getLogger(JacksonSubTypeBehaviourTest.class);\r\n\r\n\tprivate ObjectMapper mapper;\r\n\r\n\t@BeforeAll\r\n\tpublic void before() {\r\n\t\tmapper = new ObjectMapper();\r\n\t\tmapper.disable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\r\n\t}\r\n\r\n\t@Test \r\n\tpublic void testDeserializeWithDifferentOrdering() throws Exception {\r\n\t\t\r\n\t\tString ordering1 = \"{\\n\"\r\n\t\t\t\t+ \"\t\t\t\\\"type\\\": \\\"MAP\\\",\\n\"\r\n\t\t\t\t+ \"\t\t\t\\\"map\\\": {\\n\"\r\n\t\t\t\t+ \"\t\t\t\t\\\"doubleValue\\\": 0.1\\n\"\r\n\t\t\t\t+ \"\t\t\t}\\n\"\r\n\t\t\t\t+ \"}\";\r\n\t\t\t\t\r\n\t\tTestMapContainer model1 = mapper.readValue(ordering1, TestMapContainer.class);\r\n\t\tlog.info(\"clazz: {}\",  model1.getMap().get(\"doubleValue\").getClass());\r\n\t\tAssertions.assertTrue(model1.getMap().get(\"doubleValue\") instanceof Double);\r\n\t\t\r\n\t\t\r\n\t\tString ordering2 = \"{\\n\"\r\n\t\t\t\t+ \"\t\\\"map\\\": {\\n\"\r\n\t\t\t\t+ \"\t\t\\\"doubleValue\\\": 0.1\\n\"\r\n\t\t\t\t+ \"\t},\\n\"\r\n\t\t\t\t+ \"\t\\\"type\\\": \\\"MAP\\\"\\n\"\r\n\t\t\t\t+ \"\t\\n\"\r\n\t\t\t\t+ \"}\";\r\n\t\t\r\n\t\tTestMapContainer model2 = mapper.readValue(ordering2, TestMapContainer.class);\r\n\t\t\r\n\t\tlog.info(\"clazz: {}\",  model2.getMap().get(\"doubleValue\").getClass());\r\n\t\tAssertions.assertTrue(model2.getMap().get(\"doubleValue\") instanceof Double);\r\n\t\t\r\n\t}\r\n\t\r\n\t@JsonTypeInfo(  \r\n\t\t    use = JsonTypeInfo.Id.NAME,  \r\n\t\t    include = JsonTypeInfo.As.PROPERTY,  \r\n\t\t    property = \"type\")\r\n\r\n\t@JsonSubTypes({  \r\n\t    @Type(value = TestMapContainer.class, name = \"MAP\"),\r\n\t     })  \t\r\n\tprivate static interface TestJsonTypeInfoInterface {\r\n\t\t\r\n\t}\r\n\t\r\n\tprivate static class TestMapContainer implements TestJsonTypeInfoInterface {\r\n\t\t\r\n\t\tprivate Map<String, ? extends Object> map = new HashMap<>();\r\n\r\n\t\tpublic Map<String, ? extends Object> getMap() {\r\n\t\t\treturn map;\r\n\t\t}\r\n\r\n\t\tpublic void setMap(Map<String, ? extends Object> map) {\r\n\t\t\tthis.map = map;\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nNumeric values (point numbers) should always be created as Double unless stated otherwise with DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3133/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3127","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3127/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3127/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3127/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3127","id":864035453,"node_id":"MDU6SXNzdWU4NjQwMzU0NTM=","number":3127,"title":"@JsonUnwrapped incorrectry rewrites field defined by @JsonCreator","user":{"login":"vananiev","id":11336712,"node_id":"MDQ6VXNlcjExMzM2NzEy","avatar_url":"https://avatars.githubusercontent.com/u/11336712?v=4","gravatar_id":"","url":"https://api.github.com/users/vananiev","html_url":"https://github.com/vananiev","followers_url":"https://api.github.com/users/vananiev/followers","following_url":"https://api.github.com/users/vananiev/following{/other_user}","gists_url":"https://api.github.com/users/vananiev/gists{/gist_id}","starred_url":"https://api.github.com/users/vananiev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vananiev/subscriptions","organizations_url":"https://api.github.com/users/vananiev/orgs","repos_url":"https://api.github.com/users/vananiev/repos","events_url":"https://api.github.com/users/vananiev/events{/privacy}","received_events_url":"https://api.github.com/users/vananiev/received_events","type":"User","site_admin":false},"labels":[{"id":890728708,"node_id":"MDU6TGFiZWw4OTA3Mjg3MDg=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-04-21T15:52:51Z","updated_at":"2021-04-21T21:16:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"For version 2.11.4 `BeanDeserializer.java:835` line\r\n```java\r\nreturn _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\r\n```\r\nrewrites `@JsonUnwrapped` annotated field value by object containing nulls. Originally correct field value defined by `@JsonCreator` constructor.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3127/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3126","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3126/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3126/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3126/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3126","id":862981023,"node_id":"MDU6SXNzdWU4NjI5ODEwMjM=","number":3126,"title":"ObjectMapper.convertValue/readValue ignore requested JsonNode subclass for scalar types","user":{"login":"martin-sladecek","id":12947846,"node_id":"MDQ6VXNlcjEyOTQ3ODQ2","avatar_url":"https://avatars.githubusercontent.com/u/12947846?v=4","gravatar_id":"","url":"https://api.github.com/users/martin-sladecek","html_url":"https://github.com/martin-sladecek","followers_url":"https://api.github.com/users/martin-sladecek/followers","following_url":"https://api.github.com/users/martin-sladecek/following{/other_user}","gists_url":"https://api.github.com/users/martin-sladecek/gists{/gist_id}","starred_url":"https://api.github.com/users/martin-sladecek/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/martin-sladecek/subscriptions","organizations_url":"https://api.github.com/users/martin-sladecek/orgs","repos_url":"https://api.github.com/users/martin-sladecek/repos","events_url":"https://api.github.com/users/martin-sladecek/events{/privacy}","received_events_url":"https://api.github.com/users/martin-sladecek/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-20T16:11:52Z","updated_at":"2021-07-15T03:56:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen requesting specific JsonNode subclass in readValue/convertValue, a different subclass is provided.\r\n\r\n**Version information**\r\n2.12.3\r\n\r\n**To Reproduce**\r\nAll the following lines fail with ClassCastException at Runtime:\r\n```\r\nBigIntegerNode value = m.readValue(\"1234\", BigIntegerNode.class); //return IntNode\r\n\r\nTextNode value = m.readValue(\"1234\", TextNode.class); //returns IntNode\r\n\r\nTextNode value = m.convertValue(1234, TextNode.class); //returns IntNode\r\n\r\n```\r\n\r\n**Expected behavior**\r\nAt least in the first case, I would expect to get BigIntegerNode instead of IntNode.\r\n\r\nThe other two cases are questionable, but I would expect some JsonProcessingException instead of ClassCastException. Reading an integer value to TextNode is probably wrong, but convertValue works when converting to String.class, so why not to TextNode.class?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3126/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3119","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3119/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3119/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3119/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3119","id":858826742,"node_id":"MDU6SXNzdWU4NTg4MjY3NDI=","number":3119,"title":"Map Key interface not serialized with both type serializer or keyUsing","user":{"login":"lorthirk","id":8140139,"node_id":"MDQ6VXNlcjgxNDAxMzk=","avatar_url":"https://avatars.githubusercontent.com/u/8140139?v=4","gravatar_id":"","url":"https://api.github.com/users/lorthirk","html_url":"https://github.com/lorthirk","followers_url":"https://api.github.com/users/lorthirk/followers","following_url":"https://api.github.com/users/lorthirk/following{/other_user}","gists_url":"https://api.github.com/users/lorthirk/gists{/gist_id}","starred_url":"https://api.github.com/users/lorthirk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lorthirk/subscriptions","organizations_url":"https://api.github.com/users/lorthirk/orgs","repos_url":"https://api.github.com/users/lorthirk/repos","events_url":"https://api.github.com/users/lorthirk/events{/privacy}","received_events_url":"https://api.github.com/users/lorthirk/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-15T12:22:19Z","updated_at":"2021-07-15T04:16:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nIn my application I have a `Map<KapuaId, Boolean>` where `KapuaId` is an interface, and has its own serializer (since I also use this type in other parts as a standalone object):\r\n\r\n```\r\npublic class KapuaIdSerializer extends JsonSerializer<KapuaId> {\r\n\r\n    @Override\r\n    public void serialize(KapuaId value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\r\n        gen.writeString(value.toCompactId());\r\n    }\r\n\r\n}\r\n```\r\n\r\nSo, I first thought that registering the mixin for the standalone type would have also worked when serializing the `Map<KapuaId, Boolean>`:\r\n\r\n```\r\nobjectMapper = new ObjectMapper();\r\nobjectMapper.addMixIn(KapuaId.class, KapuaIdMixin.class);\r\n```\r\n\r\n```\r\n@JsonDeserialize(using = KapuaIdDeserializer.class)\r\n@JsonSerialize(using = KapuaIdSerializer.class)\r\npublic interface KapuaIdMixin { }\r\n```\r\n\r\nBut unfortunately it's not, since the `toString()` of the concrete type is returning:\r\n\r\n```\r\n{\r\n  \"1\": null,\r\n  \"5667511473135966782\": false,\r\n  \"8466406404189434576\": false\r\n}\r\n```\r\n\r\nSo I built a container object, where I used `@JsonValue` and `@JsonSerialize(keyUsing = KapuaIdSerializer.class)`, but nothing changed:\r\n\r\n```\r\npublic class IsJobRunningMapResponse {\r\n\r\n    private final Map<KapuaId, Boolean> map;\r\n\r\n    public IsJobRunningMapResponse(Map<KapuaId, Boolean> map) {\r\n        this.map = map;\r\n    }\r\n\r\n    @JsonValue\r\n    @JsonSerialize(keyUsing = KapuaIdSerializer.class)\r\n    public Map<KapuaId, Boolean> getMap() {\r\n        return map;\r\n    }\r\n\r\n}\r\n```\r\n\r\nBut the result was the same. In the end I had to use a Converter for the whole container type, basically duplicating what `KapuaIdSerializer` was already doing:\r\n\r\n```\r\npublic class IsJobRunningMapResponseSerializer extends JsonSerializer<IsJobRunningMapResponse> {\r\n\r\n    @Override\r\n    public void serialize(IsJobRunningMapResponse value, JsonGenerator gen, SerializerProvider serializers) throws IOException {\r\n        gen.writeStartObject();\r\n        for (Map.Entry<KapuaId, Boolean> entry : value.getMap().entrySet()) {\r\n            if (entry.getValue() == null) {\r\n                gen.writeNullField(entry.getKey().toCompactId());\r\n            } else {\r\n                gen.writeBooleanField(entry.getKey().toCompactId(), entry.getValue());\r\n            }\r\n        }\r\n        gen.writeEndObject();\r\n    }\r\n```\r\n\r\nAnd in the end the response was the one I expected, with `KapuaId` serialized correctly:\r\n\r\n```\r\n// KapuaId value coming from KapuaId.toCompactId()\r\n\r\n{\r\n  \"AQ\": null,\r\n  \"TqcLqDS4Wj4\": false,\r\n  \"dX63xIXNstA\": false\r\n}\r\n```\r\n\r\nSo... I found a workaround, but I think that something is not ok with the key type serialization.\r\n\r\n**Version information**\r\n2.12.2\r\n\r\n**To Reproduce**\r\nIf you have a way to reproduce this with:\r\n\r\nSteps reproduced above. Full repository at https://github.com/lorthirk/kapua/tree/feature-multipleJobIsRunning/job-engine/app/resources/src/main/java/org/eclipse/kapua/job/engine/app\r\n\r\n**Expected behavior**\r\n`KapuaId` should have been serialized with its own serializer, or at least `keyUsing` should not have been ignored\r\n\r\n**Additional context**\r\nUsing together with Jersey 2.23.2","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3119/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3118","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3118/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3118/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3118/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3118","id":858481955,"node_id":"MDU6SXNzdWU4NTg0ODE5NTU=","number":3118,"title":"Consider using `AccessibleObject.trySetAccess()` instead of `setAccess()` in `ClassUtil.checkAndFixAccess()`","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":2294665508,"node_id":"MDU6TGFiZWwyMjk0NjY1NTA4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.13","name":"2.13","color":"c2e0c6","default":false,"description":"For issues planned for 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-15T04:57:05Z","updated_at":"2021-04-17T03:33:13Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"With Java 9 and later, addition of Module system (JPMS) causes a new type of failure when attempting to call `setAccessible()` on Classes and accessors (Fields, Methods, Constructors). While we cannot directly refer to the type we should be able to match it by name and include a bit more information on underlying problem.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3118/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3116","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3116/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3116/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3116/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3116","id":857035906,"node_id":"MDU6SXNzdWU4NTcwMzU5MDY=","number":3116,"title":"how to disable ACCEPT_CASE_INSENSITIVE_PROPERTIES for some class","user":{"login":"it-sugar","id":31034879,"node_id":"MDQ6VXNlcjMxMDM0ODc5","avatar_url":"https://avatars.githubusercontent.com/u/31034879?v=4","gravatar_id":"","url":"https://api.github.com/users/it-sugar","html_url":"https://github.com/it-sugar","followers_url":"https://api.github.com/users/it-sugar/followers","following_url":"https://api.github.com/users/it-sugar/following{/other_user}","gists_url":"https://api.github.com/users/it-sugar/gists{/gist_id}","starred_url":"https://api.github.com/users/it-sugar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/it-sugar/subscriptions","organizations_url":"https://api.github.com/users/it-sugar/orgs","repos_url":"https://api.github.com/users/it-sugar/repos","events_url":"https://api.github.com/users/it-sugar/events{/privacy}","received_events_url":"https://api.github.com/users/it-sugar/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-04-13T14:45:28Z","updated_at":"2021-04-15T00:52:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nthere is one ObjectMapper for servlet,we use \r\n\r\n    objectMapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\r\n\r\nto support history code.\r\nnow we have two classes\r\n\r\n```\r\n@Data\r\n    private static class TestA extends TestB {\r\n\r\n        private String roomType;\r\n\r\n    }\r\n@Data\r\n    private static class TestB {\r\n        private String roomtype;\r\n    }\r\n```\r\n\r\nif i have JSON string as {\"roomType\":\"testA roomType\"}\r\nUnexpected,roomtype get the content and roomType is null.\r\n\r\ni try to use @JsonFormat(without = {JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES}) but it does not work.\r\nis there a way to disable ACCEPT_CASE_INSENSITIVE_PROPERTIES just for this class?\r\n\r\n**Version information**\r\n\r\n2.11.2\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3116/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3116/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3102","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3102/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3102/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3102/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3102","id":849472683,"node_id":"MDU6SXNzdWU4NDk0NzI2ODM=","number":3102,"title":"@JsonNaming does not work with Java 16 record types","user":{"login":"dain","id":58298,"node_id":"MDQ6VXNlcjU4Mjk4","avatar_url":"https://avatars.githubusercontent.com/u/58298?v=4","gravatar_id":"","url":"https://api.github.com/users/dain","html_url":"https://github.com/dain","followers_url":"https://api.github.com/users/dain/followers","following_url":"https://api.github.com/users/dain/following{/other_user}","gists_url":"https://api.github.com/users/dain/gists{/gist_id}","starred_url":"https://api.github.com/users/dain/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dain/subscriptions","organizations_url":"https://api.github.com/users/dain/orgs","repos_url":"https://api.github.com/users/dain/repos","events_url":"https://api.github.com/users/dain/events{/privacy}","received_events_url":"https://api.github.com/users/dain/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-04-02T20:40:42Z","updated_at":"2021-07-15T04:16:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nJsonNaming does not seem to be applied to Java 16 record types for deserialization.\r\n\r\n**Version information**\r\n2.12.2\r\n\r\n**To Reproduce**\r\nSimple unit test:\r\n```java\r\npublic class RecordTest\r\n{\r\n    @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\r\n    public record TestRecord(int id, String toSnakeCase) {}\r\n\r\n    @Test\r\n    public void testSerializeJsonTestRecord()\r\n            throws JsonProcessingException\r\n    {\r\n        JsonMapper jsonMapper = new JsonMapper();\r\n\r\n        TestRecord expectedRecord = new TestRecord(123, \"Bob\");\r\n\r\n        String actualJson = jsonMapper.writeValueAsString(expectedRecord);\r\n        assertEquals(\"{\\\"id\\\":123,\\\"to_snake_case\\\":\\\"Bob\\\"}\", actualJson);\r\n\r\n        TestRecord actualValue = jsonMapper.readValue(\"{\\\"id\\\":123,\\\"to_snake_case\\\":\\\"Bob\\\"}\", TestRecord.class);\r\n        assertEquals(new TestRecord(123, \"Bob\"), actualValue);\r\n    }\r\n}\r\n```\r\n\r\nFailure stack:\r\n```\r\n\r\ncom.fasterxml.jackson.databind.JsonMappingException: Can not set final java.lang.String field io.starburst.stargate.portal.security.client.RecordTest$TestRecord.toSnakeCase to java.lang.String\r\n\r\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:274)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:623)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:611)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:634)\r\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:193)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyValue$Regular.assign(PropertyValue.java:62)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:211)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:520)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:362)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3516)\r\n\tat io.starburst.stargate.portal.security.client.RecordTest.testSerializeJsonTestRecord(RecordTest.java:29)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\r\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field io.starburst.stargate.portal.security.client.RecordTest$TestRecord.toSnakeCase to java.lang.String\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76)\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80)\r\n\tat java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79)\r\n\tat java.base/java.lang.reflect.Field.set(Field.java:793)\r\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:190)\r\n\t... 74 more\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3102/reactions","total_count":6,"+1":6,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3102/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3097","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3097/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3097/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3097/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3097","id":846319976,"node_id":"MDU6SXNzdWU4NDYzMTk5NzY=","number":3097,"title":"com.fasterxml.jackson.databind.exc.MismatchedInputException 2.12 for Java record ","user":{"login":"dkubicki","id":6486339,"node_id":"MDQ6VXNlcjY0ODYzMzk=","avatar_url":"https://avatars.githubusercontent.com/u/6486339?v=4","gravatar_id":"","url":"https://api.github.com/users/dkubicki","html_url":"https://github.com/dkubicki","followers_url":"https://api.github.com/users/dkubicki/followers","following_url":"https://api.github.com/users/dkubicki/following{/other_user}","gists_url":"https://api.github.com/users/dkubicki/gists{/gist_id}","starred_url":"https://api.github.com/users/dkubicki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkubicki/subscriptions","organizations_url":"https://api.github.com/users/dkubicki/orgs","repos_url":"https://api.github.com/users/dkubicki/repos","events_url":"https://api.github.com/users/dkubicki/events{/privacy}","received_events_url":"https://api.github.com/users/dkubicki/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-31T09:52:40Z","updated_at":"2021-07-15T04:16:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"_Given:_\r\n\r\n**Version information**\r\n\r\nversion 2.11.3 which works properly\r\nopenjdk 15.0.2 \r\n\r\n```\r\npublic record UserId(String raw){ }\r\n\r\njsonBody -> {\"userId\": \"123456\" }\r\n\r\nObjectMapper objectMapper = new ObjectMapper()\r\nobjectMapper.readValue(jsonBody, UserId.class)\r\n\r\nnoThrowsException()\r\n\r\n```\r\n\r\n**Version information**\r\nversion 2.12 which not works properly\r\nopenjdk 15.0.2 \r\n\r\n```\r\npublic record UserId(String raw){ }\r\n\r\njsonBody -> {\"userId\":  \"123456\" }\r\n\r\nObjectMapper objectMapper = new ObjectMapper()\r\nobjectMapper.readValue(jsonBody, UserId.class)\r\n\r\nthrows `Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `user.model.UserId` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('123456')\r\n```\r\n\r\n**Version information**\r\nversion 2.12 which works properly\r\nopenjdk 15.0.2 \r\n\r\n```\r\npublic record UserId(String raw) {\r\n  @JsonCreator(mode = Mode.DELEGATING)\r\n  public UserId {}\r\n}\r\n\r\njsonBody -> {\"userId\": \"123456\" }\r\n\r\nObjectMapper objectMapper = new ObjectMapper()\r\nobjectMapper.readValue(jsonBody, UserId.class)\r\n\r\nnoThrowsException()\r\n```\r\n\r\nI am expecting Jackson to serialize String value to UserId record **without using extra annotations** as before. \r\nWhat can I do to have a pure approach? Maybe some global configuration on object mapper can be set?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3097/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3095","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3095/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3095/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3095/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3095","id":845568783,"node_id":"MDU6SXNzdWU4NDU1Njg3ODM=","number":3095,"title":"Problem deserializing Java 8 `Optional` with Polymorphic Deserialization with Jackson-databind 2.12 vs 2.8","user":{"login":"coriedai","id":16091220,"node_id":"MDQ6VXNlcjE2MDkxMjIw","avatar_url":"https://avatars.githubusercontent.com/u/16091220?v=4","gravatar_id":"","url":"https://api.github.com/users/coriedai","html_url":"https://github.com/coriedai","followers_url":"https://api.github.com/users/coriedai/followers","following_url":"https://api.github.com/users/coriedai/following{/other_user}","gists_url":"https://api.github.com/users/coriedai/gists{/gist_id}","starred_url":"https://api.github.com/users/coriedai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coriedai/subscriptions","organizations_url":"https://api.github.com/users/coriedai/orgs","repos_url":"https://api.github.com/users/coriedai/repos","events_url":"https://api.github.com/users/coriedai/events{/privacy}","received_events_url":"https://api.github.com/users/coriedai/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2021-03-31T00:59:16Z","updated_at":"2021-07-15T04:07:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWe recently tried to upgrade our application's Jackson dependencies from 2.8.x to 2.12.x. After the upgrade though, we noticed some incompatible behaviors regarding the serialization and de-serialization results.\r\n\r\n#### Code Setup\r\nWe have a POJO called RequestParameter, and it contains a metadata field:\r\n```\r\nprivate final Optional<Map<String, Object>> metadata;\r\n```\r\nThis field is initialized in the constructor like the following:\r\n```\r\nthis.metadata = Optional.of(ImmutableMap.copyOf(metadata.get()));\r\n```\r\n(The ImmutableMap here is the Guava ImmutableMap).\r\n\r\n\r\nWe use Mixins with the following configurations to specify the default type resolving behavior for the Map interface:\r\n(This might not be the best way to specify the default resolving behaviors for polymorphic fields, but our code was already setup this way..)\r\n```\r\n    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE, defaultImpl = HashMap.class)\r\n    public static class MapMixin {}\r\n```\r\nNote that we are using `JsonTypeInfo.Id.NONE` here to drop the type information for Map.\r\n\r\nHow we create our ObjectMapper:\r\n```\r\n        ObjectMapper mapper = new ObjectMapper()\r\n                  .setSerializationInclusion(JsonInclude.Include.NON_NULL)\r\n                  .enableDefaultTyping(DefaultTyping.NON_FINAL, As.PROPERTY)\r\n                  .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)\r\n                  .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\r\n\r\n        mapper.addMixInAnnotations(ServerMessage.class, FrameworkMessageMixin.class);\r\n        mapper.addMixInAnnotations(ClientMessage.class, FrameworkMessageMixin.class);\r\n        mapper.registerSubtypes(...);\r\n\r\n        // some more configurations\r\n        objectMapper.enableDefaultTypingAsProperty(DefaultTyping.NON_CONCRETE_AND_ARRAYS,\r\n                JsonCoderSpecification.TYPE_PROPERTY);\r\n        objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\r\n        objectMapper.setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE);\r\n        objectMapper.setVisibility(PropertyAccessor.IS_GETTER, JsonAutoDetect.Visibility.NONE);\r\n        objectMapper.registerModule(new Jdk8Module());\r\n        objectMapper.addMixIn(Map.class, MapMixin.class);\r\n        objectMapper.addMixIn(List.class, ListMixin.class);\r\n        objectMapper.addMixIn(Set.class, SetMixin.class);\r\n```\r\n\r\n#### Observed Behaviors\r\nLet's say we have a RequestParameter POJO, and it's metadata field has one entry in it: `\"testKey\":\"testValue\"`. Below are the serialization and deserialization results for this POJO under different Jackson versions:\r\n\r\nWith 2.8.x\r\n```\r\n// Serialized result\r\n{\"__type__\":\"RequestParameter\", \"metadata\":[\"java.util.Optional\",{\"testKey\":\"testValue\"}]}\r\n\r\n// Deserialized result for the metadata field (based on POJO toString)\r\nmetadata=Optional[{testKey=testValue}]\r\n```\r\n\r\nWith 2.12.x (and even 2.10.x)\r\n```\r\n// Serialized result\r\n{\"__type__\":\"RequestParameter\", \"metadata\":{\"__type__\":\"com.google.common.collect.SingletonImmutableBiMap\",\"testKey\":\"testValue\"}}\r\n\r\n// Deserialized result for the metadata field (based on POJO toString)\r\nmetadata=Optional[{__type__=com.google.common.collect.SingletonImmutableBiMap, testKey=testValue}]\r\n```\r\nAs we can see, with 2.12.x, the `JsonTypeInfo.Id.NONE` specified in the Mixin is not really working, as the class/type info is still somehow added during the serialization process. The Optional wrapper for the metadata field is also somehow missing in the serialized result. As a result, when we try to deserialize the String back to the RequestParameter POJO, we end up having a Map with 2 entries, which is inaccurate.\r\n\r\nPlease help look into this incompatible behavior. Thank you!\r\n\r\n**Version information**\r\nOld:\r\nJackson-databind = 2.8.x;\r\nJackson-datatype-jdk8 = 2.8.x;\r\n\r\nNew:\r\nJackson-databind = 2.12.x;\r\nJackson-datatype-jdk8 = 2.12.x;\r\n\r\n**Issues that are related\r\n- https://github.com/FasterXML/jackson-modules-java8/issues/59\r\n- https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.10#changes-compatibility","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3095/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3088","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3088/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3088/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3088/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3088","id":839901617,"node_id":"MDU6SXNzdWU4Mzk5MDE2MTc=","number":3088,"title":"LICENSE file is missing copyright owner and year","user":{"login":"mkdaly","id":949226,"node_id":"MDQ6VXNlcjk0OTIyNg==","avatar_url":"https://avatars.githubusercontent.com/u/949226?v=4","gravatar_id":"","url":"https://api.github.com/users/mkdaly","html_url":"https://github.com/mkdaly","followers_url":"https://api.github.com/users/mkdaly/followers","following_url":"https://api.github.com/users/mkdaly/following{/other_user}","gists_url":"https://api.github.com/users/mkdaly/gists{/gist_id}","starred_url":"https://api.github.com/users/mkdaly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkdaly/subscriptions","organizations_url":"https://api.github.com/users/mkdaly/orgs","repos_url":"https://api.github.com/users/mkdaly/repos","events_url":"https://api.github.com/users/mkdaly/events{/privacy}","received_events_url":"https://api.github.com/users/mkdaly/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-24T16:25:27Z","updated_at":"2021-03-24T16:26:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was trying to find the copyright holder and year in order to properly attribute some changes we made for internal use. However, I couldn't find any in the LICENSE file; it appears that LICENSE was just copied but not applied in the manner ASF suggests (https://www.apache.org/licenses/LICENSE-2.0#apply). \r\n\r\nhttps://github.com/FasterXML/jackson-databind/blob/614361bf4af8cee27db55b82efbe9b8db4c428a6/LICENSE#L190","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3088/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3088/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3086","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3086/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3086/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3086/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3086","id":838649072,"node_id":"MDU6SXNzdWU4Mzg2NDkwNzI=","number":3086,"title":"`SORT_PROPERTIES_ALPHABETICALLY` is case-sensitive: capital letters sorted before lower-case","user":{"login":"flyinghawker","id":13193798,"node_id":"MDQ6VXNlcjEzMTkzNzk4","avatar_url":"https://avatars.githubusercontent.com/u/13193798?v=4","gravatar_id":"","url":"https://api.github.com/users/flyinghawker","html_url":"https://github.com/flyinghawker","followers_url":"https://api.github.com/users/flyinghawker/followers","following_url":"https://api.github.com/users/flyinghawker/following{/other_user}","gists_url":"https://api.github.com/users/flyinghawker/gists{/gist_id}","starred_url":"https://api.github.com/users/flyinghawker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/flyinghawker/subscriptions","organizations_url":"https://api.github.com/users/flyinghawker/orgs","repos_url":"https://api.github.com/users/flyinghawker/repos","events_url":"https://api.github.com/users/flyinghawker/events{/privacy}","received_events_url":"https://api.github.com/users/flyinghawker/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null},{"id":1158622988,"node_id":"MDU6TGFiZWwxMTU4NjIyOTg4","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/documentation","name":"documentation","color":"e0f27b","default":true,"description":"Documentation-related task"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-23T11:57:50Z","updated_at":"2021-03-24T16:48:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Background: For signature verification, I need all fields sorted in absolute order from server to client.\r\n\r\nHere is the basic code\r\n\r\n```\r\n    ObjectMapper mapper = new ObjectMapper();  \r\n    mapper.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);\r\n    mapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\r\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n    mapper.setDateFormat(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss SSS\"));\r\n    String bodyString = mapper.writeValueAsString(data);\r\n```\r\n\r\nInside my custom class, there is one boolean field called topped,  but it seems not placed in right place after sorting.\r\nFor example:\r\n\r\n> {\"chatPair\":{\"createdAt\":\"2021-03-23 16:53:43 825\",\"id\":19,\"pairUser\":{\"createdAt\":\"2021-03-23 16:53:43 875\",\"fromUserId\":4,\"id\":\"6059ac979aad5b48e05dfaa2\",\"muted\":false,\"pairId\":19,\"relationType0\":\"Unknown\",\"relationType1\":\"Unknown\",\"screened\":false,**\"toUserId\":5,\"topped\":false**,\"updatedAt\":\"2021-03-23 16:53:43 875\"},\"updatedAt\":\"2021-03-23 16:53:43 709\"}}\r\n\r\nfield **topped** is supposed to sit before field **toUserId**.\r\nField topped was declared as \"boolean topped = false;\" in my class, and no @JsonPropertyOrder set.\r\n\r\n\r\n**Version information**\r\n2.10.2\r\n \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3086/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3084","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3084/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3084/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3084/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3084","id":835892030,"node_id":"MDU6SXNzdWU4MzU4OTIwMzA=","number":3084,"title":"Nulls.AS_EMPTY doesn't work for collections containing records","user":{"login":"krzyk","id":105730,"node_id":"MDQ6VXNlcjEwNTczMA==","avatar_url":"https://avatars.githubusercontent.com/u/105730?v=4","gravatar_id":"","url":"https://api.github.com/users/krzyk","html_url":"https://github.com/krzyk","followers_url":"https://api.github.com/users/krzyk/followers","following_url":"https://api.github.com/users/krzyk/following{/other_user}","gists_url":"https://api.github.com/users/krzyk/gists{/gist_id}","starred_url":"https://api.github.com/users/krzyk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krzyk/subscriptions","organizations_url":"https://api.github.com/users/krzyk/orgs","repos_url":"https://api.github.com/users/krzyk/repos","events_url":"https://api.github.com/users/krzyk/events{/privacy}","received_events_url":"https://api.github.com/users/krzyk/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-19T11:44:41Z","updated_at":"2021-07-15T04:15:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen deserializating an empty JSON object `{}` into a record that contains a list of another record results in:\r\n```\r\njava.lang.IllegalStateException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot create empty instance of [collection type; class java.util.List, contains [simple type, class com.example.Test$Foo$Bar]], no default Creator\r\n at [Source: (String)\"{}\"; line: 1, column: 1]\r\n```\r\n\r\n\r\n**Version information**\r\n2.12.2\r\n\r\n**To Reproduce**\r\n```\r\n   record Foo(List<Bar> list) {\r\n\r\n        record Bar(String name, String value) {}\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        ObjectMapper mapper = new ObjectMapper().setDefaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.AS_EMPTY));\r\n        try {\r\n            mapper.readValue(\"{}\", Foo.class);\r\n        } catch (JsonProcessingException e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n```\r\n\r\nThe above fails with:\r\n```\r\njava.lang.IllegalStateException: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot create empty instance of [collection type; class java.util.List, contains [simple type, class com.example.Test$Foo$Bar]], no default Creator\r\n at [Source: (String)\"{}\"; line: 1, column: 1]\r\n```\r\n\r\n**Expected behavior**\r\nI would expect the deserialization give me an empty list.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3084/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3084/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3083","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3083/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3083/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3083/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3083","id":835123445,"node_id":"MDU6SXNzdWU4MzUxMjM0NDU=","number":3083,"title":"@JsonIncludeProperties and @JsonPropertyOrder could be combined","user":{"login":"marceloverdijk","id":197004,"node_id":"MDQ6VXNlcjE5NzAwNA==","avatar_url":"https://avatars.githubusercontent.com/u/197004?v=4","gravatar_id":"","url":"https://api.github.com/users/marceloverdijk","html_url":"https://github.com/marceloverdijk","followers_url":"https://api.github.com/users/marceloverdijk/followers","following_url":"https://api.github.com/users/marceloverdijk/following{/other_user}","gists_url":"https://api.github.com/users/marceloverdijk/gists{/gist_id}","starred_url":"https://api.github.com/users/marceloverdijk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marceloverdijk/subscriptions","organizations_url":"https://api.github.com/users/marceloverdijk/orgs","repos_url":"https://api.github.com/users/marceloverdijk/repos","events_url":"https://api.github.com/users/marceloverdijk/events{/privacy}","received_events_url":"https://api.github.com/users/marceloverdijk/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-18T18:25:28Z","updated_at":"2021-07-15T03:57:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was experimenting a bit with the `@JsonIncludeProperties` introduced [recently](https://github.com/FasterXML/jackson-databind/pull/2771).\r\n\r\nIt would be nice if it would automatically apply the property order instead of having to include `@JsonPropertyOrder` as well.\r\n\r\nNow we need:\r\n\r\n```\r\n@JsonIncludeProperties({\r\n        \"id\",\r\n        \"code\",\r\n        \"name\"\r\n})\r\n@JsonPropertyOrder({\r\n        \"id\",\r\n        \"code\",\r\n        \"name\"\r\n})\r\npublic class Continent {\r\n\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3083/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3083/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3079","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3079/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3079/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3079/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3079","id":831112668,"node_id":"MDU6SXNzdWU4MzExMTI2Njg=","number":3079,"title":"Record class support for ObjectMapper#updateValue","user":{"login":"dodie","id":1114220,"node_id":"MDQ6VXNlcjExMTQyMjA=","avatar_url":"https://avatars.githubusercontent.com/u/1114220?v=4","gravatar_id":"","url":"https://api.github.com/users/dodie","html_url":"https://github.com/dodie","followers_url":"https://api.github.com/users/dodie/followers","following_url":"https://api.github.com/users/dodie/following{/other_user}","gists_url":"https://api.github.com/users/dodie/gists{/gist_id}","starred_url":"https://api.github.com/users/dodie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dodie/subscriptions","organizations_url":"https://api.github.com/users/dodie/orgs","repos_url":"https://api.github.com/users/dodie/repos","events_url":"https://api.github.com/users/dodie/events{/privacy}","received_events_url":"https://api.github.com/users/dodie/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-03-14T09:35:35Z","updated_at":"2021-07-15T04:09:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"`updateValue` is a convenient way to update the fields of a POJO and it even supports changing hierarchical values.\r\n\r\nCurrently when the object to be updated is an instance of a Record class it throws an exception, rightfully because the fields of the record are immutable:\r\n\r\n```java\r\nrecord Person(String name, Integer age);\r\nPerson original = new Person(\"John\", 15);\r\nnew ObjectMapper().updateValue(originalRecord, Map.of(\"name\", \"Jane\"));\r\n// ↑ JsonMappingException: Can not set final java.lang.String field a.b.c.Person.name to java.lang.String \r\n```\r\n\r\nWould it be feasible for the `updateValue` to support Record classes in such a way that it would not update the object in place, but instead it would return a new object with the updated values? \r\n\r\nFor example:\r\n\r\n```java\r\nrecord Person(String name, Integer age);\r\nPerson original = new Person(\"John\", 25);\r\nPerson updated = new ObjectMapper().updateValue(originalRecord, Map.of(\"name\", \"Jane\"));\r\n\r\n// the values of `original` would remain unchanged\r\n// Person[name=\"John\", age=25]\r\n\r\n// the data of the `updated` record would be based on the `original` record and the updates\r\n// Person[name=\"Jane\", age=25] \r\n```\r\n\r\nBased on its [signature](https://github.com/FasterXML/jackson-databind/blob/d5250a53b6c8b4f5567b8e70f2a5c22202d62686/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java#L2390) this behavior is already in place for arrays.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3079/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3079/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3072","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3072/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3072/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3072/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3072","id":824133068,"node_id":"MDU6SXNzdWU4MjQxMzMwNjg=","number":3072,"title":"Make @JacksonInject not fail when there's no corresponding value","user":{"login":"retrodaredevil","id":13205600,"node_id":"MDQ6VXNlcjEzMjA1NjAw","avatar_url":"https://avatars.githubusercontent.com/u/13205600?v=4","gravatar_id":"","url":"https://api.github.com/users/retrodaredevil","html_url":"https://github.com/retrodaredevil","followers_url":"https://api.github.com/users/retrodaredevil/followers","following_url":"https://api.github.com/users/retrodaredevil/following{/other_user}","gists_url":"https://api.github.com/users/retrodaredevil/gists{/gist_id}","starred_url":"https://api.github.com/users/retrodaredevil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/retrodaredevil/subscriptions","organizations_url":"https://api.github.com/users/retrodaredevil/orgs","repos_url":"https://api.github.com/users/retrodaredevil/repos","events_url":"https://api.github.com/users/retrodaredevil/events{/privacy}","received_events_url":"https://api.github.com/users/retrodaredevil/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-08T03:36:51Z","updated_at":"2021-07-15T03:57:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When something is annotated with `@JacksonInject`, if the `ObjectMapper` doesn't have injectable values set, it will fail with `Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No 'injectableValues' configured, cannot inject value with id [<name of injectable value>]`. And there's a different error if the value doesn't exist on the injectable values object.\r\n\r\nI'd like to be able to annotation things with `@JacksonInject` like so:\r\n\r\n```java\r\n@JacksonInject(value = \"myValue\", optional = true)\r\nprivate String myValue;\r\n```\r\n\r\nAdditionally, there could also be a `DeserializationFeature` called something like `FAIL_ON_UNKNOWN_INJECT_VALUE` that defaults to true.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3072/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3070","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3070/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3070/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3070/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3070","id":821299093,"node_id":"MDU6SXNzdWU4MjEyOTkwOTM=","number":3070,"title":"Consider changing default setting of `FAIL_ON_EMPTY_BEANS` from true to false","user":{"login":"gregorriegler","id":5053662,"node_id":"MDQ6VXNlcjUwNTM2NjI=","avatar_url":"https://avatars.githubusercontent.com/u/5053662?v=4","gravatar_id":"","url":"https://api.github.com/users/gregorriegler","html_url":"https://github.com/gregorriegler","followers_url":"https://api.github.com/users/gregorriegler/followers","following_url":"https://api.github.com/users/gregorriegler/following{/other_user}","gists_url":"https://api.github.com/users/gregorriegler/gists{/gist_id}","starred_url":"https://api.github.com/users/gregorriegler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gregorriegler/subscriptions","organizations_url":"https://api.github.com/users/gregorriegler/orgs","repos_url":"https://api.github.com/users/gregorriegler/repos","events_url":"https://api.github.com/users/gregorriegler/events{/privacy}","received_events_url":"https://api.github.com/users/gregorriegler/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-03T16:57:06Z","updated_at":"2021-05-18T15:48:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I would expect an empty Object without any field to be rendered as `{}`\r\n\r\nWhen I drove a Spring Boot Rest API with an Acceptance Test step by step, I tried to respond with an empty Object at one point, expecting an empty Json Object as a response.\r\nHowever, Spring noticed that Jackson would not serialize this Object, and instead jumped to the next Converter which caused unrelated Issues. It took me about 1 hour of analyzing at the wrong end, to figure out the real cause.\r\n\r\nI think it would be beneficial for developers, if the default of `FAIL_ON_EMPTY_BEANS` was `false`, and an empty Json Object would be created in that case.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3070/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3070/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3067","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3067/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3067/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3067/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3067","id":814084639,"node_id":"MDU6SXNzdWU4MTQwODQ2Mzk=","number":3067,"title":" `@JsonIgnoreProperties(ignoreUnknown=false)` can not override `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES=false`","user":{"login":"noschang","id":709553,"node_id":"MDQ6VXNlcjcwOTU1Mw==","avatar_url":"https://avatars.githubusercontent.com/u/709553?v=4","gravatar_id":"","url":"https://api.github.com/users/noschang","html_url":"https://github.com/noschang","followers_url":"https://api.github.com/users/noschang/followers","following_url":"https://api.github.com/users/noschang/following{/other_user}","gists_url":"https://api.github.com/users/noschang/gists{/gist_id}","starred_url":"https://api.github.com/users/noschang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/noschang/subscriptions","organizations_url":"https://api.github.com/users/noschang/orgs","repos_url":"https://api.github.com/users/noschang/repos","events_url":"https://api.github.com/users/noschang/events{/privacy}","received_events_url":"https://api.github.com/users/noschang/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null},{"id":2457821256,"node_id":"MDU6TGFiZWwyNDU3ODIxMjU2","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/has-failing-test","name":"has-failing-test","color":"4e8a16","default":false,"description":"Indicates that there exists a test case (under `failing/`) to reproduce the issue"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-23T04:16:44Z","updated_at":"2021-03-01T12:16:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Description**\r\n\r\nI'm not sure if this is a bug or a desired behavior, but in my opinion it's a bug. Here's what happens:\r\n\r\nWhen you set ```DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES``` to ```false``` in an object mapper, the observed behavior is the expected, no exceptions are thrown, even if the JSON contains unknown properties.\r\n\r\nHowever, if in combination with this config you annotate a bean with ```@JsonIgnoreProperties(ignoreUnknown = false)```, the behavior should change (in my opinion), since the annotation takes precedence over the configuration in the object mapper.\r\n\r\nThe annotation clearly states that the unknown properties should not be ignored, so, the expected behavior is that an excpetion is thrown.\r\n\r\nI've searched the repository issues, but couldn't find this problem reported anywhere. Maybe, the only issue related to this is #1523, but it needs further investigation to confirm.\r\n\r\n**Version information**\r\n\r\nTested with jackson-databind 2.12.1\r\n\r\n**To Reproduce**\r\n\r\nIt's kinda hard to explain here how to reproduce. So, I created a project with some test that you can run to verify the behavior:\r\n[JacksonBugTest.zip](https://github.com/FasterXML/jackson-databind/files/6026808/JacksonBugTest.zip)\r\n\r\nImport the project on your IDE (Gradle support/plugins must be enabled) or run the tests with:\r\n\r\n**Linux:** ```./gradlew test -i```\r\n**Windows:** ```gradlew.bat test -i```\r\n\r\nAlternatively, you can view the report generated by my test run:\r\n[test-report.zip](https://github.com/FasterXML/jackson-databind/files/6026827/test-report.zip)\r\n\r\n\r\n\r\nFeel free to contact me if you have any doubts: noschang@univali.br\r\nThank you for your attention and congratulations for the excellent work you have been doing for the community!\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3067/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3067/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3064","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3064/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3064/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3064/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3064","id":812901911,"node_id":"MDU6SXNzdWU4MTI5MDE5MTE=","number":3064,"title":"@JsonPropertyOrder(alphabetic=true) is ignored in case indices are defined for @JsonProperty","user":{"login":"perdurabo476","id":6799561,"node_id":"MDQ6VXNlcjY3OTk1NjE=","avatar_url":"https://avatars.githubusercontent.com/u/6799561?v=4","gravatar_id":"","url":"https://api.github.com/users/perdurabo476","html_url":"https://github.com/perdurabo476","followers_url":"https://api.github.com/users/perdurabo476/followers","following_url":"https://api.github.com/users/perdurabo476/following{/other_user}","gists_url":"https://api.github.com/users/perdurabo476/gists{/gist_id}","starred_url":"https://api.github.com/users/perdurabo476/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/perdurabo476/subscriptions","organizations_url":"https://api.github.com/users/perdurabo476/orgs","repos_url":"https://api.github.com/users/perdurabo476/repos","events_url":"https://api.github.com/users/perdurabo476/events{/privacy}","received_events_url":"https://api.github.com/users/perdurabo476/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-21T17:09:24Z","updated_at":"2021-07-15T04:06:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"After upgrading from 2.10.4 to 2.12.1 I noticed that the serialization property order has changed when serializing POJOs to JSON which are annotated with JsonProperty including an index.\r\n\r\nThis is a new feature that was added with\r\n\r\nhttps://github.com/FasterXML/jackson-databind/issues/2555\r\n\r\nand is definitely a very welcome addition.\r\n\r\nHowever, in case a JsonPropertyOrder(alphabetic=true) annotation is present on type level I would expect that the properties are still ordered alphabetically even though Properties with indices defined are present.\r\n\r\nThe reason is that we do not only serialize our objects to JSON but to Protobuf as well, which forces us to define indices on properties as this is required by the Protobuf serializer.\r\n\r\nThe way this feature is implemented now makes it impossible (unless there is a workaround) to support serialization to JSON and Protobuf while using alphabetic ordering for JSON format.\r\n\r\nSince JsonPropertyOrder is defined on a type level and explicit ordering using property names still has precedence over property indices I'm wondering why this is not the case for alphabetic ordering - when I use this annotation I clearly state my intention just as if I would explicitly define the property order by name.\r\n\r\nOn the other hand, if the JsonPropertyOrder annotation is absent, using the defined indices as default order makes a lot of sense, because otherwise the order would not be clearly defined at all.\r\n\r\nHowever, to improve compatibility it might even be better to add an additional property (e.g. JsonPropertyOrder(index=true)) - in this way an absent annotation would default to the legacy behavior (no well defined order) and if the annotation is present, the intended order is always explicitly defined, making it possible to extend the ordering strategy with additional options in the future.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3064/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3064/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3063","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3063/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3063/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3063/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3063","id":812897748,"node_id":"MDU6SXNzdWU4MTI4OTc3NDg=","number":3063,"title":"@JsonValue fails for Java Record","user":{"login":"cowwoc","id":633348,"node_id":"MDQ6VXNlcjYzMzM0OA==","avatar_url":"https://avatars.githubusercontent.com/u/633348?v=4","gravatar_id":"","url":"https://api.github.com/users/cowwoc","html_url":"https://github.com/cowwoc","followers_url":"https://api.github.com/users/cowwoc/followers","following_url":"https://api.github.com/users/cowwoc/following{/other_user}","gists_url":"https://api.github.com/users/cowwoc/gists{/gist_id}","starred_url":"https://api.github.com/users/cowwoc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowwoc/subscriptions","organizations_url":"https://api.github.com/users/cowwoc/orgs","repos_url":"https://api.github.com/users/cowwoc/repos","events_url":"https://api.github.com/users/cowwoc/events{/privacy}","received_events_url":"https://api.github.com/users/cowwoc/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-21T16:49:51Z","updated_at":"2021-07-15T03:58:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Version information**\r\n2.12.1\r\nOpenJDK 15.0.1\r\n\r\n**To Reproduce**\r\n\r\nGiven:\r\n\r\n```\r\npublic final record GetLocations(@JsonValue Map<String, URI> nameToLocation)\r\n{\r\n\t@JsonCreator\r\n\tpublic GetLocations(Map<String, URI> nameToLocation)\r\n\t{\r\n\t\tassertThat(nameToLocation, \"nameToLocation\").isNotNull();\r\n\t\tthis.nameToLocation = new HashMap<>(nameToLocation);\r\n\t}\r\n}\r\n```\r\n\r\nI am expecting Jackson to serialize the `Map` to JSON but instead I get the following exception:\r\n\r\n`Problem with definition of [AnnotedClass GetLocations]: Multiple 'as-value' properties defined ([field GetLocations#nameToLocation] vs [method GetLocations#nameToLocation()])`","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3063/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3061","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3061/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3061/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3061/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3061","id":811946474,"node_id":"MDU6SXNzdWU4MTE5NDY0NzQ=","number":3061,"title":"Breaking change between in handling enums with @JsonCreator","user":{"login":"skuhnert","id":18574806,"node_id":"MDQ6VXNlcjE4NTc0ODA2","avatar_url":"https://avatars.githubusercontent.com/u/18574806?v=4","gravatar_id":"","url":"https://api.github.com/users/skuhnert","html_url":"https://github.com/skuhnert","followers_url":"https://api.github.com/users/skuhnert/followers","following_url":"https://api.github.com/users/skuhnert/following{/other_user}","gists_url":"https://api.github.com/users/skuhnert/gists{/gist_id}","starred_url":"https://api.github.com/users/skuhnert/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/skuhnert/subscriptions","organizations_url":"https://api.github.com/users/skuhnert/orgs","repos_url":"https://api.github.com/users/skuhnert/repos","events_url":"https://api.github.com/users/skuhnert/events{/privacy}","received_events_url":"https://api.github.com/users/skuhnert/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-19T11:31:06Z","updated_at":"2021-05-20T06:46:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am facing an error after updating from Version 2.10.1 to 2.11.3:\r\n\r\n> com.fasterxml.jackson.databind.exc.ValueInstantiationException: Cannot construct instance of `NumberEnum`, problem: argument type mismatch\r\n>  at [Source: (String)\"{\r\n>   \"myNumber\" : 2\r\n> }\"; line: 2, column: 16] (through reference chain: Demo[\"myNumber\"])\r\n> \tat com.fasterxml.jackson.databind.exc.ValueInstantiationException.from(ValueInstantiationException.java:47)\r\n> \tat com.fasterxml.jackson.databind.DeserializationContext.instantiationException(DeserializationContext.java:1758)\r\n> \tat com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(DeserializationContext.java:1128)\r\n> \tat com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer.deserialize(FactoryBasedEnumDeserializer.java:159)\r\n> \tat com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(MethodProperty.java:129)\r\n> \tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:293)\r\n> \tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:156)\r\n> \tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4526)\r\n> \tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3468)\r\n> \tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3436)\r\n> \tat EnumMapperTest.test(EnumMapperTest.java:16)\r\n\r\nIt seems there was a change in handling the datatype while deserializing an enum (in FactoryBasedEnumSererializer.java).\r\n\r\nIn my case, I annotated a factory method for an Integer-Enum like so:\r\nhttps://github.com/comlinegmbh/jackson-enum-poc/blob/master/src/main/java/NumberEnum.java\r\n\r\nUsing Integer instead of String as an argument of \"fromValue\" fixes the Problem in both V2.10.1 and V2.11.3.\r\n\r\nUnfortunately this code is generated from an openapi schema via swagger-codegen. I will create a similar issue there but want to share this finding here, so you can be beware of it.\r\n\r\nI have also created a small example-project so you can comprehend this issue easily:\r\nhttps://github.com/comlinegmbh/jackson-enum-poc\r\n\r\nSwitching the Version in the pom.xml makes the unit-test succeed.\r\n\r\nFeel free to let me know if this is no bug but the new intended behavior.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3061/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3061/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3058","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3058/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3058/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3058/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3058","id":808543131,"node_id":"MDU6SXNzdWU4MDg1NDMxMzE=","number":3058,"title":"Improve support for reactive streams parsing","user":{"login":"symposion","id":625085,"node_id":"MDQ6VXNlcjYyNTA4NQ==","avatar_url":"https://avatars.githubusercontent.com/u/625085?v=4","gravatar_id":"","url":"https://api.github.com/users/symposion","html_url":"https://github.com/symposion","followers_url":"https://api.github.com/users/symposion/followers","following_url":"https://api.github.com/users/symposion/following{/other_user}","gists_url":"https://api.github.com/users/symposion/gists{/gist_id}","starred_url":"https://api.github.com/users/symposion/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/symposion/subscriptions","organizations_url":"https://api.github.com/users/symposion/orgs","repos_url":"https://api.github.com/users/symposion/repos","events_url":"https://api.github.com/users/symposion/events{/privacy}","received_events_url":"https://api.github.com/users/symposion/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-15T13:31:52Z","updated_at":"2021-07-15T04:14:46Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Spring's WebFlux client uses Reactive Streams to support a non-blocking approach to web requests. There's a default Codec  that will parse JSON objects from the stream using Jackson, but it has some important (and non-obvious) limitations. In particular, it breaks object id resolution in Jackson. This is because reactive streams uses a push rather than a pull model, and Jackson provides no good support for this. The current implementation (https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/codec/json/AbstractJackson2Decoder.java) uses ObjectReader.readValue for each new JSON object, which works, but loses all the context - including previously resolved ids. \r\n\r\nObjectReader has \"readValues\" which returns an iterator to support this sort of streaming use case, but it doesn't work for Reactive Streams which need to be able to push data into the reader rather than pull data from it.\r\n\r\nThe most obvious solution (to me) - which I believe would serve quite a few other uses cases as well - would be to allow callers to maintain and provide externalised context information that can optionally be passed in to calls to readValue. In this way the caller could control the scope of parser state rather than it always being scoped to the method calls on ObjectReader/ObjectMapper.\r\n\r\nAlternatively, ObjectMapper/ObjectReader could have methods specifically designed to support the push stream use case; these could return some sort of callback interface that allowed clients to push new values in (as  JsonParser built on a TokenBuffer) but maintained state across calls.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3058/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3058/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3053","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3053/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3053/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3053/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3053","id":807221415,"node_id":"MDU6SXNzdWU4MDcyMjE0MTU=","number":3053,"title":"Serialize enums to lowercase","user":{"login":"knyttl","id":401107,"node_id":"MDQ6VXNlcjQwMTEwNw==","avatar_url":"https://avatars.githubusercontent.com/u/401107?v=4","gravatar_id":"","url":"https://api.github.com/users/knyttl","html_url":"https://github.com/knyttl","followers_url":"https://api.github.com/users/knyttl/followers","following_url":"https://api.github.com/users/knyttl/following{/other_user}","gists_url":"https://api.github.com/users/knyttl/gists{/gist_id}","starred_url":"https://api.github.com/users/knyttl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knyttl/subscriptions","organizations_url":"https://api.github.com/users/knyttl/orgs","repos_url":"https://api.github.com/users/knyttl/repos","events_url":"https://api.github.com/users/knyttl/events{/privacy}","received_events_url":"https://api.github.com/users/knyttl/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-02-12T13:08:30Z","updated_at":"2021-07-15T03:54:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nJava enums are usually defined as `UPPER_CASE_WITH_UNDERSCORE`. This is not a standard in endpoints, as these rather use `lower_case_with_underscore`. There is already feature for `ACCEPT_CASE_INSENSITIVE_ENUMS`, which helps with deserialization, the feature for serialization is however currently missing. Only option is using `@JsonProperty` or `toString()` serialization.\r\n\r\n**Describe the solution you'd like**\r\nI would like to have `SerializationFeature.WRITE_ENUM_LOWERCASED`.\r\n\r\n**Usage example**\r\nAny API endpoint.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3053/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3053/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3052","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3052/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3052/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3052/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3052","id":806866423,"node_id":"MDU6SXNzdWU4MDY4NjY0MjM=","number":3052,"title":"Instant precision should be retained in ObjectMapper#readTree","user":{"login":"jzheaux","id":3627351,"node_id":"MDQ6VXNlcjM2MjczNTE=","avatar_url":"https://avatars.githubusercontent.com/u/3627351?v=4","gravatar_id":"","url":"https://api.github.com/users/jzheaux","html_url":"https://github.com/jzheaux","followers_url":"https://api.github.com/users/jzheaux/followers","following_url":"https://api.github.com/users/jzheaux/following{/other_user}","gists_url":"https://api.github.com/users/jzheaux/gists{/gist_id}","starred_url":"https://api.github.com/users/jzheaux/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jzheaux/subscriptions","organizations_url":"https://api.github.com/users/jzheaux/orgs","repos_url":"https://api.github.com/users/jzheaux/repos","events_url":"https://api.github.com/users/jzheaux/events{/privacy}","received_events_url":"https://api.github.com/users/jzheaux/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-12T00:59:01Z","updated_at":"2021-07-15T04:15:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\n`ObjectMapper#readValue(String)` seems to preserve all nine digits of an `Instant`'s decimal, but `ObjectMapper#readTree(JsonParser)` does not.\r\n\r\n**Version information**\r\n\r\nJackson 2.12.1\r\n\r\n**To Reproduce**\r\n\r\n```java\r\nObjectMapper mapper = new ObjectMapper();\r\n{\r\n\tmapper.registerModule(new JavaTimeModule());\r\n}\r\n\r\nInstant issuedAt = Instant.ofEpochSecond(1234567890).plusNanos(123456789);\r\nMap<String, Instant> attributes = new HashMap<>();\r\n{\r\n\tattributes.put(\"iat\", issuedAt);\r\n}\r\n\r\n@Test\r\nvoid passes() throws Exception {\r\n\tString serialized = mapper.writeValueAsString(attributes);\r\n\tMap<String, Instant> deserialized = mapper.readValue(serialized, new TypeReference<>() {});\r\n\tassertThat(deserialized.get(\"iat\")).isEqualTo(issuedAt);\r\n}\r\n\r\n@Test\r\nvoid fails() throws Exception {\r\n\tString serialized = mapper.writeValueAsString(attributes);\r\n\tJsonParser parser = mapper.createParser(serialized);\r\n\tJsonNode mapNode = mapper.readTree(parser);\r\n\tMap<String, Object> deserialized = new LinkedHashMap<>();\r\n\tIterable<Map.Entry<String, JsonNode>> fields = mapNode::fields;\r\n\tfor (Map.Entry<String, JsonNode> field : fields) {\r\n\t\tdeserialized.put(field.getKey(), mapper.readValue(field.getValue().traverse(mapper), Instant.class));\r\n\t}\r\n\tassertThat(deserialized.get(\"iat\")).isEqualTo(issuedAt);\r\n}\r\n```\r\n\r\nThe second test fails with:\r\n\r\n```text\r\nExpecting:\r\n <2009-02-13T23:31:30.123456700Z>\r\nto be equal to:\r\n <2009-02-13T23:31:30.123456789Z>\r\nbut was not.\r\nExpected :2009-02-13T23:31:30.123456789Z\r\nActual   :2009-02-13T23:31:30.123456700Z\r\n```\r\n\r\n**Additional context**\r\n\r\nThe failure case is derived from [a custom deserializer](https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/jackson2/UnmodifiableMapDeserializer.java) in our project.\r\n\r\nIdeally, I'd like `readTree` to retain the `Instant`'s precision in the same way that `ObjectMapper#readValue` does when it deserializes a `Map` that contains `Instant`s, though I'd be happy with advice on how to change my approach in my deserializer instead.\r\n\r\nI realize also that `USE_BIG_DECIMAL_FOR_FLOATS` addresses this issue, but I'd prefer to avoid that, since others import [our module](https://github.com/spring-projects/spring-security/blob/master/oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/jackson2/OAuth2ClientJackson2Module.java).","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3052/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3052/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3043","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3043/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3043/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3043/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3043","id":800842799,"node_id":"MDU6SXNzdWU4MDA4NDI3OTk=","number":3043,"title":"Rename `SerializerProvider` as `SerializationContext` (for 3.0)","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-04T01:22:18Z","updated_at":"2021-02-04T01:22:18Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Something that should have been done during 1.x->2.0 major version upgrade but better late than never: due to historical reasons (serialization implemented before deserialization), context object naming is inconsistent. We have:\r\n\r\n* `DeseralizationContext` for deserialization\r\n* `SerializerProvider` for serialization\r\n\r\nLatter may have made sense in 0.9.4 since the primary reason was access to child serializers (and this is still an importan use case); but conceptually it is a context object, and has expanded a lot in functionality.\r\nSo let's fix this naming discrepancy in 3.0.\r\n(yes, this will result in lots of changes across the whole codebase)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3043/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3041","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3041/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3041/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3041/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3041","id":799653346,"node_id":"MDU6SXNzdWU3OTk2NTMzNDY=","number":3041,"title":"Deserialization: add support for choosing from multiple constructors based on the input json","user":{"login":"pjfanning","id":11783444,"node_id":"MDQ6VXNlcjExNzgzNDQ0","avatar_url":"https://avatars.githubusercontent.com/u/11783444?v=4","gravatar_id":"","url":"https://api.github.com/users/pjfanning","html_url":"https://github.com/pjfanning","followers_url":"https://api.github.com/users/pjfanning/followers","following_url":"https://api.github.com/users/pjfanning/following{/other_user}","gists_url":"https://api.github.com/users/pjfanning/gists{/gist_id}","starred_url":"https://api.github.com/users/pjfanning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pjfanning/subscriptions","organizations_url":"https://api.github.com/users/pjfanning/orgs","repos_url":"https://api.github.com/users/pjfanning/repos","events_url":"https://api.github.com/users/pjfanning/events{/privacy}","received_events_url":"https://api.github.com/users/pjfanning/received_events","type":"User","site_admin":false},"labels":[{"id":455264793,"node_id":"MDU6TGFiZWw0NTUyNjQ3OTM=","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/3.x","name":"3.x","color":"20aa61","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-02T20:24:51Z","updated_at":"2021-02-04T01:16:47Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nhttps://github.com/FasterXML/jackson-databind/pull/3034 provides a test case with a class that has multiple constructors.\r\nSome of the constructors default the values that appear in the main constructor.\r\n\r\nAny JSON that does not provide all the fields for the class needs to use one of the specialised constructors with the in-built defaulting.\r\n\r\nJackson currently chooses one constructor and does not iterate over the constructors to find the one that works best for a given input.\r\n\r\n**Describe the solution you'd like**\r\nI guess there is an overhead to iterating over constructors for each input - so this behaviour would need to be configurable (annotations or mapper features).\r\n\r\n**Usage example**\r\nhttps://github.com/FasterXML/jackson-databind/pull/3034 (will be closed to avoid noise but the example will still be visible).\r\n\r\n**Additional context**\r\nProbably an edge case that may not really need to be supported.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3041/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3041/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3030","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3030/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3030/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3030/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3030","id":795950168,"node_id":"MDU6SXNzdWU3OTU5NTAxNjg=","number":3030,"title":"Correctly deserialize forward `@JsonIdentityInfo` references when using `@JsonCreator`","user":{"login":"benediktsatalia","id":78143735,"node_id":"MDQ6VXNlcjc4MTQzNzM1","avatar_url":"https://avatars.githubusercontent.com/u/78143735?v=4","gravatar_id":"","url":"https://api.github.com/users/benediktsatalia","html_url":"https://github.com/benediktsatalia","followers_url":"https://api.github.com/users/benediktsatalia/followers","following_url":"https://api.github.com/users/benediktsatalia/following{/other_user}","gists_url":"https://api.github.com/users/benediktsatalia/gists{/gist_id}","starred_url":"https://api.github.com/users/benediktsatalia/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benediktsatalia/subscriptions","organizations_url":"https://api.github.com/users/benediktsatalia/orgs","repos_url":"https://api.github.com/users/benediktsatalia/repos","events_url":"https://api.github.com/users/benediktsatalia/events{/privacy}","received_events_url":"https://api.github.com/users/benediktsatalia/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-01-28T12:12:36Z","updated_at":"2021-07-15T03:42:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nCurrently we cannot use forward references together with a `@JsonCreator`. See the following example:\r\n\r\n```\r\nclass A1 {\r\n  public List<B> bs;\r\n  public List<C1> cs;\r\n}\r\n\r\n@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\r\nclass B {\r\n  public String id;\r\n}\r\n\r\nclass C1 {\r\n  private B b;\r\n\r\n  @JsonCreator\r\n  public C1(@JsonProperty(\"b\") B b) {\r\n    this.b = b;\r\n  }\r\n\r\n  @JsonGetter(\"b\")\r\n  public B getB() {\r\n    return b;\r\n  }\r\n}\r\n\r\nclass C2 {\r\n  public B b;\r\n}\r\n\r\nclass A2 {\r\n  public List<B> bs;\r\n  public List<C2> cs;\r\n}\r\n\r\npublic class Main {\r\n\r\n  public static void main(final String[] args) throws IOException {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    A1 a2 = mapper.readValue(\"{\\\"bs\\\":[{\\\"id\\\":\\\"b1\\\"},{\\\"id\\\":\\\"b2\\\"}],\\\"cs\\\":[{\\\"b\\\":\\\"b1\\\"},{\\\"b\\\":\\\"b2\\\"}]}\", A1.class);\r\n    System.out.println(\"Using correct ordered data (no forward references) with JsonCreator works\");\r\n    A2 a3 = mapper.readValue(\"{\\\"cs\\\":[{\\\"b\\\":\\\"b1\\\"},{\\\"b\\\":\\\"b2\\\"}],\\\"bs\\\":[{\\\"id\\\":\\\"b1\\\"},{\\\"id\\\":\\\"b2\\\"}]}\", A2.class);\r\n    System.out.println(\"Using incorrect ordered data (with forward references) with no JsonCreator works\");\r\n    A1 a4 = mapper.readValue(\"{\\\"cs\\\":[{\\\"b\\\":\\\"b1\\\"},{\\\"b\\\":\\\"b2\\\"}],\\\"bs\\\":[{\\\"id\\\":\\\"b1\\\"},{\\\"id\\\":\\\"b2\\\"}]}\", A1.class);\r\n  }\r\n}\r\n```\r\n\r\nThe first two deserializations work as expected but the third one, where we use forward references and the `@JsonCreator` throws an exception.\r\n\r\nThis is the output when running the above code snippet:\r\n\r\n```\r\nUsing correct ordered data (no forward references) with JsonCreator works\r\nUsing incorrect ordered data (with forward references) with no JsonCreator works\r\nException in thread \"main\" com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: Could not resolve Object Id [b1] (for [simple type, class B]).\r\n at [Source: (String)\"{\"cs\":[{\"b\":\"b1\"},{\"b\":\"b2\"}],\"bs\":[{\"id\":\"b1\"},{\"id\":\"b2\"}]}\"; line: 1, column: 17] (through reference chain: A1[\"cs\"]->java.util.ArrayList[0]->C1[\"b\"])\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectId(BeanDeserializerBase.java:1292)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1381)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:176)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:166)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(SettableBeanProperty.java:542)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(BeanDeserializer.java:535)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:419)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1310)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:331)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:164)\r\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:285)\r\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:244)\r\n\tat com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(CollectionDeserializer.java:27)\r\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:138)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:293)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:156)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4482)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3434)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3402)\r\n\tat Main.main(Main.java:52)\r\n```\r\n\r\n**Describe the solution you'd like**\r\nLazily call `@JsonCreator` for such objects only after the whole json (and all objects with ids) got read.\r\n\r\n**Usage example**\r\nSee my example above.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3030/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3030/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3013","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3013/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3013/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3013/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3013","id":784343796,"node_id":"MDU6SXNzdWU3ODQzNDM3OTY=","number":3013,"title":"Disable Integer to String coercion","user":{"login":"emilkostadinov","id":67648970,"node_id":"MDQ6VXNlcjY3NjQ4OTcw","avatar_url":"https://avatars.githubusercontent.com/u/67648970?v=4","gravatar_id":"","url":"https://api.github.com/users/emilkostadinov","html_url":"https://github.com/emilkostadinov","followers_url":"https://api.github.com/users/emilkostadinov/followers","following_url":"https://api.github.com/users/emilkostadinov/following{/other_user}","gists_url":"https://api.github.com/users/emilkostadinov/gists{/gist_id}","starred_url":"https://api.github.com/users/emilkostadinov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/emilkostadinov/subscriptions","organizations_url":"https://api.github.com/users/emilkostadinov/orgs","repos_url":"https://api.github.com/users/emilkostadinov/repos","events_url":"https://api.github.com/users/emilkostadinov/events{/privacy}","received_events_url":"https://api.github.com/users/emilkostadinov/received_events","type":"User","site_admin":false},"labels":[{"id":2123541415,"node_id":"MDU6TGFiZWwyMTIzNTQxNDE1","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/coercion-config","name":"coercion-config","color":"c3b8f2","default":false,"description":"Issue related to 2.12 added \"CoercionConfig\""},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-01-12T15:31:07Z","updated_at":"2021-08-12T23:58:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nI am experiencing issues with the new coercion settings that were released in v2.12.0. I would like to disable coercion between `String` and `Integer`.\r\n\r\n\r\n**Version information**\r\n\r\nv2.12.1\r\n\r\n\r\n**To Reproduce**\r\n\r\nI have **class Example** (using Lombok annotations):\r\n\r\n```\r\n@Getter\r\n@Setter\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class Example {\r\n    private String type;\r\n}\r\n```\r\nThe **ObjectMapper** setup:\r\n```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.coercionConfigFor(LogicalType.Textual)\r\n        .setCoercion(CoercionInputShape.Integer, CoercionAction.Fail);\r\n```\r\nHow I try to deserialize:\r\n```\r\nExample example = mapper.readValue(\"{\\\"type\\\": 123}\", Example.class);\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nI expect an exception to be thrown saying that `Integer` cannot be converted to `String`. But what happens is that `example` is successfully created with `type` set to `\"123\"` which means there was conversion.\r\n\r\nIs there anything wrong I do (maybe with the coercion configuration)?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3013/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3013/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3007","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3007/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3007/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3007/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/3007","id":778586964,"node_id":"MDU6SXNzdWU3Nzg1ODY5NjQ=","number":3007,"title":"@JsonUnwrapped does not work with a custom Serializer (StdSerializer<T>)","user":{"login":"MJ-DEV91","id":38212539,"node_id":"MDQ6VXNlcjM4MjEyNTM5","avatar_url":"https://avatars.githubusercontent.com/u/38212539?v=4","gravatar_id":"","url":"https://api.github.com/users/MJ-DEV91","html_url":"https://github.com/MJ-DEV91","followers_url":"https://api.github.com/users/MJ-DEV91/followers","following_url":"https://api.github.com/users/MJ-DEV91/following{/other_user}","gists_url":"https://api.github.com/users/MJ-DEV91/gists{/gist_id}","starred_url":"https://api.github.com/users/MJ-DEV91/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MJ-DEV91/subscriptions","organizations_url":"https://api.github.com/users/MJ-DEV91/orgs","repos_url":"https://api.github.com/users/MJ-DEV91/repos","events_url":"https://api.github.com/users/MJ-DEV91/events{/privacy}","received_events_url":"https://api.github.com/users/MJ-DEV91/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-01-05T05:04:15Z","updated_at":"2021-09-08T15:35:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I need to write a custom Serializer for one of my entities \"Payment\" and I have to implement it by extending `StdSerializer`:\r\n```\r\nclass Payment {\r\n}\r\n\r\nclass PaymentSerializer extends StdSerializer<Payment> {\r\n\r\n    public PaymentSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public PaymentSerializer(Class<Payment> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(Payment value, JsonGenerator gen, SerializerProvider provider) throws IOException {\r\n        // some logics\r\n    }\r\n\r\n}\r\n```\r\nSince I use Spring, I register this Serializer so Spring could identify it:\r\n```\r\n@Bean\r\npublic Jackson2ObjectMapperBuilder serializersObjectMapperBuilder() {\r\n    SimpleModule module = new SimpleModule();\r\n    module.addSerializer(Payment.class, applicationContext.getBean(PaymentSerializer.class));\r\n    return new Jackson2ObjectMapperBuilder().modules(module);\r\n}\r\n```\r\nNow I have a controller that returns data back to the client and it uses this Serializer without any problem:\r\n```\r\n@RestController\r\n@RequestMapping(\"/payment\")\r\nclass PaymentController {\r\n\r\n    @GetMapping\r\n    public List<Payment> getAll() {\r\n        return Arrays.asList(new Payment());\r\n    }\r\n\r\n}\r\n```\r\nSince now, my Serializer works fine and everything is good.\r\n\r\nThe problem is with another entity \"Order\" which has Payment as a property with `@JsonUnwrapped`:\r\n```\r\nclass Order {\r\n\r\n    @JsonUnwrapped\r\n    private Payment payment;\r\n\r\n}\r\n```\r\n\r\nI need to unwrap the `Payment` inside the `Order` and I want to use **the same PaymentSerializer** but the problem is when I use this custom Serializer, the `@JsonUnwrapped` annotation will be ignored and the output will be something like this:\r\n```\r\n{\r\n  \"payment\": {\r\n    .....\r\n  }\r\n}\r\n```\r\nAs I mentioned, I want to eliminate the \"payment\" field and unwrap it.\r\nI know that for emulating `@JsonUnwrapped` for a custom Serializer I need to extend `UnwrappingBeanSerializer` class, but as I mentioned at first, I need the standard Serializer too.\r\n\r\nChanging my entity models is not an option for me.\r\n\r\nIs there any way to accomplish this?\r\n\r\nI use `Spring Boot 2.1.3.RELEASE` which I believe uses `Jackson 2.9`\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/3007/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2992","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2992/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2992/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2992/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/2992","id":770991692,"node_id":"MDU6SXNzdWU3NzA5OTE2OTI=","number":2992,"title":"Properties naming strategy do not work with Record","user":{"login":"GregoireW","id":24318548,"node_id":"MDQ6VXNlcjI0MzE4NTQ4","avatar_url":"https://avatars.githubusercontent.com/u/24318548?v=4","gravatar_id":"","url":"https://api.github.com/users/GregoireW","html_url":"https://github.com/GregoireW","followers_url":"https://api.github.com/users/GregoireW/followers","following_url":"https://api.github.com/users/GregoireW/following{/other_user}","gists_url":"https://api.github.com/users/GregoireW/gists{/gist_id}","starred_url":"https://api.github.com/users/GregoireW/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GregoireW/subscriptions","organizations_url":"https://api.github.com/users/GregoireW/orgs","repos_url":"https://api.github.com/users/GregoireW/repos","events_url":"https://api.github.com/users/GregoireW/events{/privacy}","received_events_url":"https://api.github.com/users/GregoireW/received_events","type":"User","site_admin":false},"labels":[{"id":2711043529,"node_id":"MDU6TGFiZWwyNzExMDQzNTI5","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/Record","name":"Record","color":"D4C5F9","default":false,"description":"Issue related to JDK14 java.lang.Record support"},{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2020-12-18T15:54:35Z","updated_at":"2021-07-15T03:53:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nWhen I try to use a `@JsonNaming`  annotation on a record, I cannot unmarshall json to an object because a mapping exception occurs. \r\n\r\nI use jackson 2.12.0 with JDK 15.\r\n\r\nA Test example can be something like: \r\n\r\n```\r\n    @Test\r\n    void tryJsonNamingOnRecord() throws Exception{\r\n        ObjectMapper mapper=new ObjectMapper();\r\n\r\n        @JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\r\n                record Test(String myId, String myValue){}\r\n\r\n        var src=new Test(\"id\", \"value\");\r\n        String json=mapper.writeValueAsString(src);\r\n        assertThat(json).contains(\"\\\"my_id\\\":\\\"id\\\"\", \"\\\"my_value\\\":\\\"value\\\"\");\r\n        var after=mapper.readValue(json, Test.class);\r\n        assertThat(after).isEqualTo(src);\r\n    }\r\n```\r\n\r\nThe json String is generated correctly, but when unmarshalling, I got an exception  \r\n\r\n```\r\ncom.fasterxml.jackson.databind.JsonMappingException: Can not set final java.lang.String field test.Tests$1Test.myValue to java.lang.String\r\n\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:274)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:623)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:611)\r\n\tat com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(SettableBeanProperty.java:634)\r\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:193)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyValue$Regular.assign(PropertyValue.java:62)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:211)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:520)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1390)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:362)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4591)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3546)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3514)\r\n\tat test.Tests.tryJsonNamingOnRecord(Tests.java:100)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\t...\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n...\r\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field test.Tests$1Test.myValue to java.lang.String\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76)\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80)\r\n\tat java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79)\r\n\tat java.base/java.lang.reflect.Field.set(Field.java:793)\r\n\tat com.fasterxml.jackson.databind.deser.impl.FieldProperty.set(FieldProperty.java:190)\r\n\t... 76 more\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2992/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2992/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2977","repository_url":"https://api.github.com/repos/FasterXML/jackson-databind","labels_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2977/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2977/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2977/events","html_url":"https://github.com/FasterXML/jackson-databind/issues/2977","id":761310993,"node_id":"MDU6SXNzdWU3NjEzMTA5OTM=","number":2977,"title":"Incompatible FAIL_ON_MISSING_PRIMITIVE_PROPERTIES and field level @JsonProperty","user":{"login":"GeorgiPetkov","id":4419977,"node_id":"MDQ6VXNlcjQ0MTk5Nzc=","avatar_url":"https://avatars.githubusercontent.com/u/4419977?v=4","gravatar_id":"","url":"https://api.github.com/users/GeorgiPetkov","html_url":"https://github.com/GeorgiPetkov","followers_url":"https://api.github.com/users/GeorgiPetkov/followers","following_url":"https://api.github.com/users/GeorgiPetkov/following{/other_user}","gists_url":"https://api.github.com/users/GeorgiPetkov/gists{/gist_id}","starred_url":"https://api.github.com/users/GeorgiPetkov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GeorgiPetkov/subscriptions","organizations_url":"https://api.github.com/users/GeorgiPetkov/orgs","repos_url":"https://api.github.com/users/GeorgiPetkov/repos","events_url":"https://api.github.com/users/GeorgiPetkov/events{/privacy}","received_events_url":"https://api.github.com/users/GeorgiPetkov/received_events","type":"User","site_admin":false},"labels":[{"id":3040124230,"node_id":"MDU6TGFiZWwzMDQwMTI0MjMw","url":"https://api.github.com/repos/FasterXML/jackson-databind/labels/2.14","name":"2.14","color":"27FE5B","default":false,"description":"Issues possibly planned for 2.14"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2020-12-10T14:56:07Z","updated_at":"2021-07-15T03:53:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nThe FAIL_ON_MISSING_PRIMITIVE_PROPERTIES is not working properly with field level @JsonProperty annotation. The @JsonProperty annotation is simply ignored.\r\n\r\n**Version information**\r\nCurrently latest 2.12, Java 15.0.1\r\n\r\n**To Reproduce**\r\nIf you have a way to reproduce this with:\r\n\r\n1. You can use the JUnit 5 test below to reproduce the issue:\r\n```java\r\nclass JsonPropertyAndFailOnNullForPrimitivesTest {\r\n\r\n    @Test\r\n    void test() throws JsonProcessingException {\r\n        assertEquals(\r\n                JsonMapper.builder()\r\n                        .addModules(new ParameterNamesModule())\r\n                        .constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)\r\n                        .enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)\r\n                        .build()\r\n                        .readValue(\"{\\\"aa\\\": 8}\", TestClass.class)\r\n                        .a,\r\n                8);\r\n    }\r\n\r\n    private static class TestClass {\r\n\r\n        @JsonProperty(\"aa\")\r\n        private final int a;\r\n\r\n        TestClass(int a) {\r\n            this.a = a;\r\n        }\r\n    }\r\n}\r\n```\r\n2. The test fails with the following error:\r\n```\r\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot map `null` into type int (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)\r\n at [Source: (String)\"{\"aa\": 8}\"; line: 1, column: 9] (through reference chain: jackson.test.JsonPropertyAndFailOnNullForPrimitivesTest$TestClass[\"a\"])\r\n\r\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1577)\r\n\tat com.fasterxml.jackson.databind.deser.std.NumberDeserializers$PrimitiveOrWrapperDeserializer.getNullValue(NumberDeserializers.java:175)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer._findMissing(PropertyValueBuffer.java:204)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer.getParameters(PropertyValueBuffer.java:160)\r\n\tat com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromObjectWith(ValueInstantiator.java:288)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:520)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1390)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:362)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)\r\n\tat com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4591)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3546)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3514)\r\n\tat jackson.test.JsonPropertyAndFailOnNullForPrimitivesTest.test(JsonPropertyAndFailOnNullForPrimitivesTest.java:23)\r\n```\r\n3. Note that other combinations work - not using a primitive type, moving the annotation on the constructor parameter or disabling the FAIL_ON_NULL_FOR_PRIMITIVES feature.\r\n  The issue seems to be unrelated to the fact that I use a single argument constructor, I used single property for simlicity in the test. In other words, the new `.constructorDetector(ConstructorDetector.USE_PROPERTIES_BASED)` appears to be irrelevant for this bug.\r\n\r\n**Expected behavior**\r\nThe FAIL_ON_MISSING_PRIMITIVE_PROPERTIES feature should be aware of property names mapping through @JsonProperty when used on fields.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2977/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-databind/issues/2977/timeline","performed_via_github_app":null}],"issuesCount":91,"contributors":212,"pullRequests":16,"projectUrl":"https://github.com/FasterXML/jackson-databind","issuesUrl":"https://github.com/FasterXML/jackson-databind/issues","stars":2912,"watchers":2912,"forks":1152,"githubLicenseName":"Apache-2.0","openIssues":388,"createdAt":"2011-12-23T07:17:41Z","updatedAt":"2021-10-15T17:37:05Z","monthsSinceUpdated":0},{"id":"jackson-module-kotlin@2.11.2","groupId":"com.fasterxml.jackson.module","artifactId":"jackson-module-kotlin","version":"2.11.2","name":"jackson-module-kotlin","description":"Module that adds support for serialization/deserialization of Kotlin (http://kotlinlang.org) classes and data classes.","github":"https://github.com/FasterXML/jackson-module-kotlin","latestVersion":"2.13.0","issues":[{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/503","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/503/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/503/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/503/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/503","id":1006402007,"node_id":"I_kwDOAWUeM847_HnX","number":503,"title":"Failed deserialization of fields where only the first character is lowercase ","user":{"login":"junkdog","id":804039,"node_id":"MDQ6VXNlcjgwNDAzOQ==","avatar_url":"https://avatars.githubusercontent.com/u/804039?v=4","gravatar_id":"","url":"https://api.github.com/users/junkdog","html_url":"https://github.com/junkdog","followers_url":"https://api.github.com/users/junkdog/followers","following_url":"https://api.github.com/users/junkdog/following{/other_user}","gists_url":"https://api.github.com/users/junkdog/gists{/gist_id}","starred_url":"https://api.github.com/users/junkdog/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/junkdog/subscriptions","organizations_url":"https://api.github.com/users/junkdog/orgs","repos_url":"https://api.github.com/users/junkdog/repos","events_url":"https://api.github.com/users/junkdog/events{/privacy}","received_events_url":"https://api.github.com/users/junkdog/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-24T12:14:23Z","updated_at":"2021-09-28T14:39:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nSerialization of fields starting with a single lowercase character followed by an uppercase character are serialized as all lowercase. This causes deserialization to fail as jackson tries to deserialize according to the \"original\"/camelCased field name. E.g. `pId` is serialized as `pid` but expects `pId` during deserialization.\r\n\r\n**To Reproduce**\r\n\r\n```kotlin\r\ndata class FooBar(\r\n    val id: String,\r\n    val nId: String, // expected name: nId, actual: nid\r\n)\r\n\r\nfun main() {\r\n    val fooBar = FooBar(\"bar\", \"foo\")\r\n    val json = jacksonObjectMapper().writeValueAsString(fooBar)\r\n    assert(fooBar == jacksonObjectMapper().readValue<FooBar>(json))\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n\r\nSerialized fields names should match the original field name.\r\n\r\n**Versions**\r\nKotlin: 1.5.30\r\nJackson-module-kotlin: 2.12.5\r\nJackson-databind: 2.12.5\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/503/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/503/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/498","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/498/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/498/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/498/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/498","id":985552748,"node_id":"MDU6SXNzdWU5ODU1NTI3NDg=","number":498,"title":"MismatchedInputException on single ctor paramater, but not with multiple","user":{"login":"jtdev","id":767507,"node_id":"MDQ6VXNlcjc2NzUwNw==","avatar_url":"https://avatars.githubusercontent.com/u/767507?v=4","gravatar_id":"","url":"https://api.github.com/users/jtdev","html_url":"https://github.com/jtdev","followers_url":"https://api.github.com/users/jtdev/followers","following_url":"https://api.github.com/users/jtdev/following{/other_user}","gists_url":"https://api.github.com/users/jtdev/gists{/gist_id}","starred_url":"https://api.github.com/users/jtdev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jtdev/subscriptions","organizations_url":"https://api.github.com/users/jtdev/orgs","repos_url":"https://api.github.com/users/jtdev/repos","events_url":"https://api.github.com/users/jtdev/events{/privacy}","received_events_url":"https://api.github.com/users/jtdev/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"assignees":[{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2021-09-01T19:30:20Z","updated_at":"2021-09-08T10:44:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nDeserialization fails for `data class Data(var A: Int)`, probably because of casing problems, (although I couldn't find what the default behavior should be), which can be fixed by using a lowercase for `A`, or by using different propertyNamingStrategies, like `setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)`.\r\n\r\nBut it strangely doesn't fail for `data class Data(var A: Int, var b: Int)` and for `data class Data(var A: Int, var B: Int)` and for `data class Data(var a: Int, var B: Int)`. So when a second constructor parameter is present, the behavior differs unexpectedly. So then somehow, the casing for `A` is ignored, whereas it isn't when only a single constructor parameter is present.\r\n\r\n**To Reproduce**\r\n```\r\ninternal class ObjectMapperTests {\r\n    private val mapper = ObjectMapper()\r\n        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n        .registerModule(KotlinModule())\r\n    val json = \"\"\"{\"A\":1,\"B\":2}\"\"\"\r\n\r\n    @Test // succeeds\r\n    fun upperAUpperB() {\r\n        data class Data(var A: Int, var B: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n    @Test // succeeds\r\n    fun upperALowerB() {\r\n        data class Data(var A: Int, var b: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // succeeds\r\n    fun lowerAUpperB() {\r\n        data class Data(var a: Int, var B: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // succeeds\r\n    fun lowerA() {\r\n        data class Data(var a: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // succeeds\r\n    fun lowerB() {\r\n        data class Data(var b: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // fails\r\n    fun upperA() {\r\n        data class Data(var A: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // Fails\r\n    fun upperB() {\r\n        data class Data(var B: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n}\r\n```\r\n\r\n**Versions**\r\nKotlin: 1.5.10\r\nJackson-module-kotlin: 2.12.5\r\n\r\n**Expected behavior**\r\nIf `data class Data(var A: Int)` would fail (which it does), I would expect  `data class Data(var A: Int, var B: Int)` to also fail, but it does not. So somehow the propertyNamingStrategy seems to differ when a second parameter is present.\r\n\r\n\r\n**Update:**\r\nHere some more examples of different behavior:\r\n\r\n```\r\n    val mapper = ObjectMapper()\r\n        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n        .registerKotlinModule()\r\n\r\n    @Test // ok\r\n    fun lowercaseJsonStringProperty() {\r\n        val json = \"\"\"{\"abc\":\"hi\"}\"\"\"\r\n        data class Data(val abc: String)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // fails\r\n    fun uppercaseJsonStringProperty() {\r\n        val json = \"\"\"{\"Abc\":\"hi\"}\"\"\"\r\n        data class Data(val abc: String)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n\r\n    @Test // ok\r\n    fun uppercaseJsonIntProperty() {\r\n        val json = \"\"\"{\"Abc\":1}\"\"\"\r\n        data class Data(var abc: Int)\r\n        mapper.readValue<Data>(json)\r\n    }\r\n```\r\nIf `lowercaseJsonStringProperty` succeeds and `uppercaseJsonStringProperty` fails, then you would expect `uppercaseJsonIntProperty` to also fail, but it does not.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/498/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/498/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/487","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/487/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/487/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/487/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/487","id":973520495,"node_id":"MDU6SXNzdWU5NzM1MjA0OTU=","number":487,"title":"Unexpected behavior of @get:JsonAnyGetter","user":{"login":"Saoqq","id":52101448,"node_id":"MDQ6VXNlcjUyMTAxNDQ4","avatar_url":"https://avatars.githubusercontent.com/u/52101448?v=4","gravatar_id":"","url":"https://api.github.com/users/Saoqq","html_url":"https://github.com/Saoqq","followers_url":"https://api.github.com/users/Saoqq/followers","following_url":"https://api.github.com/users/Saoqq/following{/other_user}","gists_url":"https://api.github.com/users/Saoqq/gists{/gist_id}","starred_url":"https://api.github.com/users/Saoqq/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Saoqq/subscriptions","organizations_url":"https://api.github.com/users/Saoqq/orgs","repos_url":"https://api.github.com/users/Saoqq/repos","events_url":"https://api.github.com/users/Saoqq/events{/privacy}","received_events_url":"https://api.github.com/users/Saoqq/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-18T10:33:03Z","updated_at":"2021-08-18T10:38:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n`@get:JsonAnyGetter` triggers behavior of `@JsonAnySetter`\r\n\r\n**To Reproduce**\r\nFollowing code executes successfully\r\n```kotlin\r\nfun test() {\r\n        data class MapContainer(\r\n            @get:JsonAnyGetter val storage: Map<String, Any>\r\n        )\r\n\r\n        val mapper = jacksonObjectMapper()\r\n        val content = \"\"\"\r\n            {\r\n                \"bad\": \"json\",\r\n                \"test\": [1,2,3]\r\n            }\r\n        \"\"\".trimIndent()\r\n        val result = mapper.readValue<MapContainer>(content)\r\n\r\n        val deserialized = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result)\r\n        println(deserialized)\r\n    }\r\n\r\n```\r\n**Expected behavior**\r\n```kotlin\r\nfun test() {\r\n        data class MapContainer(\r\n            @get:JsonAnyGetter val storage: Map<String, Any>\r\n        )\r\n\r\n        val mapper = jacksonObjectMapper()\r\n        val content = \"\"\"\r\n            {\r\n                \"bad\": \"json\",\r\n                \"test\": [1,2,3]\r\n            }\r\n        \"\"\".trimIndent()\r\n        val result = mapper.readValue<MapContainer>(content) // SHOULD FAIL HERE\r\n\r\n        val deserialized = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result)\r\n        println(deserialized)\r\n    }\r\n\r\n```\r\n\r\n**Versions**\r\nKotlin: 1.4.31\r\nJackson-module-kotlin: 2.11.4\r\nJackson-databind: 2.11.4\r\n\r\n**Additional context**\r\nI love this bug, it allows to make unknow property storages with one line of code 🙂 ","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/487/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/487/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/504","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/504/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/504/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/504/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/504","id":1009052116,"node_id":"MDU6SXNzdWUxMDA5MDUyMTE2","number":504,"title":"After upgrading from 2.12.3 to 2.13.3, conversion fails in Kotlin","user":{"login":"MrBuddyCasino","id":3044875,"node_id":"MDQ6VXNlcjMwNDQ4NzU=","avatar_url":"https://avatars.githubusercontent.com/u/3044875?v=4","gravatar_id":"","url":"https://api.github.com/users/MrBuddyCasino","html_url":"https://github.com/MrBuddyCasino","followers_url":"https://api.github.com/users/MrBuddyCasino/followers","following_url":"https://api.github.com/users/MrBuddyCasino/following{/other_user}","gists_url":"https://api.github.com/users/MrBuddyCasino/gists{/gist_id}","starred_url":"https://api.github.com/users/MrBuddyCasino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MrBuddyCasino/subscriptions","organizations_url":"https://api.github.com/users/MrBuddyCasino/orgs","repos_url":"https://api.github.com/users/MrBuddyCasino/repos","events_url":"https://api.github.com/users/MrBuddyCasino/events{/privacy}","received_events_url":"https://api.github.com/users/MrBuddyCasino/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-08-14T11:20:28Z","updated_at":"2021-09-28T02:41:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nA conversion that worked before doesn't anymore: `Conflicting getter definitions for property \"fSRI\": com.example.ModelRow#getFSRI-SECTION() vs com.example.ModelRow#getFSRI-ID()`\r\n\r\n**Version information**\r\nupgrade from 2.12.3 to 2.13.3\r\n\r\n**To Reproduce**\r\n\r\n```\r\nimport com.fasterxml.jackson.databind.DeserializationFeature\r\nimport com.fasterxml.jackson.databind.MapperFeature\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.datatype.jdk8.Jdk8Module\r\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\nimport com.fasterxml.jackson.module.kotlin.convertValue\r\nimport org.junit.jupiter.api.Test\r\n\r\nclass JacksonTest {\r\n\r\n    @Test\r\n    fun doTest() {\r\n        val map = mapOf( \"FSRI-SECTION\" to \"1\", \"FSRI-ID\" to \"1234\")\r\n        objectMapper().convertValue<MyModel>(map)\r\n    }\r\n\r\n    data class MyModel(\r\n        val `FSRI-ID`: String?,\r\n        val `FSRI-SECTION`: Int?\r\n    )\r\n\r\n    private fun objectMapper(): ObjectMapper {\r\n        // defaults largely as specified in Jackson2ObjectMapperBuilder\r\n        return ObjectMapper()\r\n            .registerModule(KotlinModule(nullToEmptyCollection = true, nullIsSameAsDefault = true))\r\n            .registerModule(JavaTimeModule())\r\n            .registerModule(Jdk8Module())\r\n            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n            .configure(MapperFeature.DEFAULT_VIEW_INCLUSION, false)\r\n    }\r\n\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nConversion should succeed.\r\n\r\n**Additional context**\r\nKotlin version: 1.5.21\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/504/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/504/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/486","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/486/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/486/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/486/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/486","id":969368283,"node_id":"MDU6SXNzdWU5NjkzNjgyODM=","number":486,"title":"Module com.fasterxml.jackson.kotlin cannot be found in the module graph","user":{"login":"miasma","id":2247811,"node_id":"MDQ6VXNlcjIyNDc4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/2247811?v=4","gravatar_id":"","url":"https://api.github.com/users/miasma","html_url":"https://github.com/miasma","followers_url":"https://api.github.com/users/miasma/followers","following_url":"https://api.github.com/users/miasma/following{/other_user}","gists_url":"https://api.github.com/users/miasma/gists{/gist_id}","starred_url":"https://api.github.com/users/miasma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/miasma/subscriptions","organizations_url":"https://api.github.com/users/miasma/orgs","repos_url":"https://api.github.com/users/miasma/repos","events_url":"https://api.github.com/users/miasma/events{/privacy}","received_events_url":"https://api.github.com/users/miasma/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-12T18:49:31Z","updated_at":"2021-08-12T19:20:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI'm trying to use Jackson in a Kotlin/Gradle project. The library works just fine without module-info.java, but once I add one, the compilation fails. I suspect it can't find the Jackson libraries' module-info.class files from sub-folders in multi-release jars.\r\n\r\n**To Reproduce**\r\nSet up Gradle:\r\n```\r\nplugins {\r\n    java\r\n    kotlin(\"jvm\") version \"1.5.30-RC\"\r\n    application\r\n}\r\n\r\ndependencies {\r\n    implementation(\"com.fasterxml.jackson.module\", \"jackson-module-kotlin\", \"2.13.+\")\r\n}\r\n...\r\n```\r\nProject's module-info.java:\r\n```\r\nmodule mytest.test {\r\n    requires java.base;\r\n    requires kotlin.stdlib;\r\n    requires com.fasterxml.jackson.core;\r\n    requires com.fasterxml.jackson.kotlin;\r\n    ...\r\n}\r\n```\r\nUse Jackson in the main class:\r\n```\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\n```\r\nBuild the project:\r\n```\r\n$ gradle build\r\n...\r\n> Task :compileKotlin FAILED\r\ne: Module com.fasterxml.jackson.core cannot be found in the module graph\r\ne: Module com.fasterxml.jackson.kotlin cannot be found in the module graph\r\n```\r\n\r\n**Expected behavior**\r\nShould compile without issues.\r\n\r\n**Versions**\r\nKotlin: 1.5.30-RC\r\nJackson-module-kotlin: 2.13.+\r\nJackson-databind: 2.13.0-rc1\r\nGradle: 7.1.1\r\nJava: OpenJDK 16\r\n\r\n**Additional context**\r\nAlso tried the older versions of toolchain without any luck.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/486/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/486/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/483","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/483/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/483/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/483/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/483","id":965709621,"node_id":"MDU6SXNzdWU5NjU3MDk2MjE=","number":483,"title":"Deserialize YML ignoring properties with lists","user":{"login":"marcantoine-beauvais-bruker","id":70987381,"node_id":"MDQ6VXNlcjcwOTg3Mzgx","avatar_url":"https://avatars.githubusercontent.com/u/70987381?v=4","gravatar_id":"","url":"https://api.github.com/users/marcantoine-beauvais-bruker","html_url":"https://github.com/marcantoine-beauvais-bruker","followers_url":"https://api.github.com/users/marcantoine-beauvais-bruker/followers","following_url":"https://api.github.com/users/marcantoine-beauvais-bruker/following{/other_user}","gists_url":"https://api.github.com/users/marcantoine-beauvais-bruker/gists{/gist_id}","starred_url":"https://api.github.com/users/marcantoine-beauvais-bruker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcantoine-beauvais-bruker/subscriptions","organizations_url":"https://api.github.com/users/marcantoine-beauvais-bruker/orgs","repos_url":"https://api.github.com/users/marcantoine-beauvais-bruker/repos","events_url":"https://api.github.com/users/marcantoine-beauvais-bruker/events{/privacy}","received_events_url":"https://api.github.com/users/marcantoine-beauvais-bruker/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":2983730364,"node_id":"MDU6TGFiZWwyOTgzNzMwMzY0","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.13","name":"2.13","color":"2CCA53","default":false,"description":"Issue affecting version 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-11T02:04:09Z","updated_at":"2021-08-12T19:24:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWeird behavior when deserialize YML ignoring properties and having lists. When a list of values is in YML file, it stops deserialization of values that are defined after that.\r\nI tried the same code in Java and there was no problem.\r\n\r\n**To Reproduce**\r\n```\r\nval objectMapper = ObjectMapper(YAMLFactory()).registerKotlinModule()\r\nval testYml: TestYml = objectMapper.readValue(\r\n      File(this.javaClass.classLoader.getResource(\"test_yml.yml\").toURI()),\r\n      TestYml::class.java\r\n)\r\n\r\nprintln(testYml.name)\r\n```\r\n```\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\ndata class TestYml(\r\n      val name: String?\r\n)\r\n```\r\n\r\nWhen having test_yml.yml like:\r\n```\r\nname: containerNameTest\r\nports:\r\n  - 3306\r\n```\r\nThis works fine, we can see the value of \"name\".\r\n\r\nWhen having test_yml.yml like:\r\n```\r\nports:\r\n  - 3306\r\nname: containerNameTest\r\n```\r\nThis doesn't work, \"name\" is null.\r\n\r\n**Expected behavior**\r\nWe should see value of \"name\" in both case.\r\n\r\n**Versions**\r\nKotlin: 1.4.20\r\nJackson-module-kotlin: 2.13.0-rc1\r\nJackson-databind: 2.13.0-rc1\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/483/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/483/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/480","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/480/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/480/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/480/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/480","id":950786497,"node_id":"MDU6SXNzdWU5NTA3ODY0OTc=","number":480,"title":"The ObjectMapper.readValue extension methods need the type param to be bound to Any","user":{"login":"ragnese","id":7927565,"node_id":"MDQ6VXNlcjc5Mjc1NjU=","avatar_url":"https://avatars.githubusercontent.com/u/7927565?v=4","gravatar_id":"","url":"https://api.github.com/users/ragnese","html_url":"https://github.com/ragnese","followers_url":"https://api.github.com/users/ragnese/followers","following_url":"https://api.github.com/users/ragnese/following{/other_user}","gists_url":"https://api.github.com/users/ragnese/gists{/gist_id}","starred_url":"https://api.github.com/users/ragnese/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ragnese/subscriptions","organizations_url":"https://api.github.com/users/ragnese/orgs","repos_url":"https://api.github.com/users/ragnese/repos","events_url":"https://api.github.com/users/ragnese/events{/privacy}","received_events_url":"https://api.github.com/users/ragnese/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-07-22T15:23:41Z","updated_at":"2021-08-11T12:23:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nOne can violate the type system by deserializing null where it was not intended\r\n\r\n**To Reproduce**\r\n```\r\nclass Foo(val value: Int) // any class\r\n\r\nval mapper = ObjectMapper().registerKotlinModule()\r\n\r\nval deserialized = mapper.readValue<Foo>(\"null\") // succeeds\r\nprintln(deserialized) // null\r\n```\r\n\r\n**Expected behavior**\r\nDeserialization should fail when the declared type parameter is not explicitly nullable\r\n\r\n**Versions**\r\nKotlin: 1.4\r\nJackson-module-kotlin: 2.13\r\nJackson-databind: 2.13\r\n\r\n**Additional context**\r\nThe fix is to add a type bound to the current methods and to add a new set of nullable methods:\r\n\r\n```\r\ninline fun <reified T: Any> ObjectMapper.readValue(content: String): T = readNullableValue(content)) ?:  throw SomeMappingException()\r\n\r\ninline fun <reified T: Any> ObjectMapper.readNullableValue(content: String): T? = readValue(content, jacksonTypeRef<T>())\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/480/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/479","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/479/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/479/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/479/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/479","id":950665855,"node_id":"MDU6SXNzdWU5NTA2NjU4NTU=","number":479,"title":"Can't figure out strictNullCheck option","user":{"login":"ragnese","id":7927565,"node_id":"MDQ6VXNlcjc5Mjc1NjU=","avatar_url":"https://avatars.githubusercontent.com/u/7927565?v=4","gravatar_id":"","url":"https://api.github.com/users/ragnese","html_url":"https://github.com/ragnese","followers_url":"https://api.github.com/users/ragnese/followers","following_url":"https://api.github.com/users/ragnese/following{/other_user}","gists_url":"https://api.github.com/users/ragnese/gists{/gist_id}","starred_url":"https://api.github.com/users/ragnese/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ragnese/subscriptions","organizations_url":"https://api.github.com/users/ragnese/orgs","repos_url":"https://api.github.com/users/ragnese/repos","events_url":"https://api.github.com/users/ragnese/events{/privacy}","received_events_url":"https://api.github.com/users/ragnese/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-22T13:24:54Z","updated_at":"2021-07-22T14:40:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nnull values can still sneak into a deserialized collection-of-non-nullables if you use the inline-reified ObjectMapper.readValue extension methods, among others. \r\n\r\n**To Reproduce**\r\n```\r\nval mapper = ObjectMapper().registerModule(KotlinModule(strictNullChecks = true))\r\nval tf = mapper.typeFactory // less typing below\r\nval json = \"[1, 2, 3, null]\"\r\n\r\n// Every one of the following succeed\r\n\r\nval l1 = mapper.readValue<List<Int>>(json) // This is the inline reified extension. \r\nval l2 = mapper.readValue<List<Int>>(json, jacksonTypeRef<List<Int>>()) // This is what the inline reified really calls. \r\nval l3 = mapper.readValue<List<Int>>(json, tf.constructCollectionLikeType(List::class.java, tf.constructType(jacksonTypeRef<Int>())) \r\nval l4 = mapper.readValue<List<Int>>(json, tf.constructCollectionLikeType(List::class.java, Int::class.java))\r\nval l5 = mapper.readValue<List<Int>>(json, tf.constructCollectionType(List::class.java, tf.constructType(jacksonTypeRef<Int>()))\r\nval l6 = mapper.readValue<List<Int>>(json, tf.constructCollectionType(List::class.java, Int::class.java))\r\n\r\nprintln(l1) // [1, 2, 3, null]\r\nprintln(l2) // [1, 2, 3, null]\r\nprintln(l3) // [1, 2, 3, null]\r\nprintln(l4) // [1, 2, 3, 0]\r\nprintln(l5) // [1, 2, 3, null]\r\nprintln(l6) // [1, 2, 3, 0]\r\n```\r\n\r\n**Expected behavior**\r\nAll of the above mapper calls should fail\r\n\r\nNOTE: The ones that use Int::class.java (`l4` and `l6`) **do** fail if I also enable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES`. But, in that case, it doesn't even matter if `strictNullChecks` is enabled or not.\r\n\r\nIn fact, none of the above results seem to care if I enable `strictNullChecks`. \r\n\r\n**Versions**\r\nKotlin: 1.4.something\r\nJackson-module-kotlin: 2.12.3+\r\nJackson-databind: 2.12.3+\r\n\r\n**Additional context**\r\nI have no idea why this doesn't seem to work for me. I must be doing something wrong, but I don't know what. \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/479/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/479/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/478","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/478/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/478/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/478/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/478","id":947751171,"node_id":"MDU6SXNzdWU5NDc3NTExNzE=","number":478,"title":"Unexpected behavior when using `NON_DEFAULT` with `data class`","user":{"login":"Quantum64","id":3969183,"node_id":"MDQ6VXNlcjM5NjkxODM=","avatar_url":"https://avatars.githubusercontent.com/u/3969183?v=4","gravatar_id":"","url":"https://api.github.com/users/Quantum64","html_url":"https://github.com/Quantum64","followers_url":"https://api.github.com/users/Quantum64/followers","following_url":"https://api.github.com/users/Quantum64/following{/other_user}","gists_url":"https://api.github.com/users/Quantum64/gists{/gist_id}","starred_url":"https://api.github.com/users/Quantum64/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Quantum64/subscriptions","organizations_url":"https://api.github.com/users/Quantum64/orgs","repos_url":"https://api.github.com/users/Quantum64/repos","events_url":"https://api.github.com/users/Quantum64/events{/privacy}","received_events_url":"https://api.github.com/users/Quantum64/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2021-07-19T15:06:46Z","updated_at":"2021-07-21T17:18:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n```kotlin\r\ndata class Data(val flag: Boolean = true)\r\n```\r\nThe documentation for NON_DEFAULT suggests to me that the serializer will create a new instance of this class using the zero-argument constructor and retrieve default values. From the documentation: \r\n\r\n```When used for a POJO, definition is that only values that differ from the default values of POJO properties are included. This is done by creating an instance of POJO using zero-argument constructor, and accessing property values: value is used as the default value by using equals() method, except for the case where property has `null` value in which straight null check is used.```\r\n\r\nThis class data class has default values specified for all fields, so it has a zero-argument constructor (at least from the perspective of the Kotlin language). However, this class is serialized as if the default value for `flag` is false rather than true. This causes the below roundtrip to fail.\r\n\r\n**To Reproduce**\r\n```kotlin\r\nimport com.fasterxml.jackson.annotation.JsonInclude\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport com.fasterxml.jackson.module.kotlin.registerKotlinModule\r\n\r\nfun main() {\r\n    data class Data (val flag: Boolean = true)\r\n\r\n    val mapper = ObjectMapper()\r\n        .registerKotlinModule()\r\n        .setSerializationInclusion(JsonInclude.Include.NON_DEFAULT)\r\n\r\n    val initial = Data(flag = false)\r\n    val serialized = mapper.writeValueAsString(initial)\r\n    println(serialized)\r\n    val deserialized = mapper.readValue<Data>(serialized)\r\n    println(initial)\r\n    println(deserialized)\r\n    println(initial == deserialized)\r\n}\r\n```\r\n\r\nOutput\r\n```\r\n{}\r\nData(flag=false)\r\nData(flag=true)\r\nfalse\r\n```\r\n\r\n**Expected behavior**\r\nI would expect NON_DEFAULT to utilize the Kotlin default values when serializing, preventing roundtrip inconsistency. At minimum, this behavior should be documented.\r\n\r\n**Versions**\r\nKotlin: 1.5.2\r\nJackson-module-kotlin: 2.12.4\r\nJackson-databind: 2.12.4\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/478/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/478/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/475","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/475/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/475/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/475/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/475","id":939106781,"node_id":"MDU6SXNzdWU5MzkxMDY3ODE=","number":475,"title":"Field names are being lowercased automatically when the first word of the camel-case is too short","user":{"login":"hanzo2001","id":2978880,"node_id":"MDQ6VXNlcjI5Nzg4ODA=","avatar_url":"https://avatars.githubusercontent.com/u/2978880?v=4","gravatar_id":"","url":"https://api.github.com/users/hanzo2001","html_url":"https://github.com/hanzo2001","followers_url":"https://api.github.com/users/hanzo2001/followers","following_url":"https://api.github.com/users/hanzo2001/following{/other_user}","gists_url":"https://api.github.com/users/hanzo2001/gists{/gist_id}","starred_url":"https://api.github.com/users/hanzo2001/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hanzo2001/subscriptions","organizations_url":"https://api.github.com/users/hanzo2001/orgs","repos_url":"https://api.github.com/users/hanzo2001/repos","events_url":"https://api.github.com/users/hanzo2001/events{/privacy}","received_events_url":"https://api.github.com/users/hanzo2001/received_events","type":"User","site_admin":false},"labels":[{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-07T16:15:31Z","updated_at":"2021-07-08T19:20:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I don't know if this is a feature or a bug but a quick search didn't return anything (or I didn't see it), or if this is something that only happens for Kotlin users.\r\n\r\nI am using 2.12.4 but just in case, my POM has\r\n\r\n```xml\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>2.12.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-annotations</artifactId>\r\n            <version>2.12.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>2.12.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.module</groupId>\r\n            <artifactId>jackson-module-kotlin</artifactId>\r\n            <version>2.12.4</version>\r\n        </dependency>\r\n    </dependencies>\r\n```\r\n\r\nThe following may be run in a `scratch.kt`\r\n\r\n```kotlin\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\n\r\nval m = ObjectMapper()\r\nval j = jacksonObjectMapper()\r\n\r\ndata class A(val someValue: String = \"\")\r\ndata class B(val sValue: String = \"\")\r\ndata class C(val rPoi: String = \"\")\r\n\r\nm.writeValueAsString(A(\"cow\").also(::println)).also(::println)\r\nm.writeValueAsString(B(\"cow\").also(::println)).also(::println)\r\nm.writeValueAsString(C(\"cow\").also(::println)).also(::println)\r\n```\r\n\r\nThe output shows that the fields with short first word in the camel-case are being lowercased\r\n\r\n```\r\nA(someValue=cow)\r\n{\"someValue\":\"cow\"}\r\nB(sValue=cow)\r\n{\"svalue\":\"cow\"}\r\nC(rPoi=cow)\r\n{\"rpoi\":\"cow\"}\r\n```\r\n\r\nI currently don't have an issue with this but it stumped me for a while because some of my Apache Camel routes started failing. I fixed it simply by using longer first names and it just works as expected.\r\n\r\nPlease let me know if I should try some other version. This is very easy to test as all I have to do is spin up a scratch (IntelliJ/IDEA) file and run it.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/475/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/474","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/474/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/474/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/474/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/474","id":937072710,"node_id":"MDU6SXNzdWU5MzcwNzI3MTA=","number":474,"title":"`@JsonProperty` not honored in superclass fields","user":{"login":"marshallpierce","id":575695,"node_id":"MDQ6VXNlcjU3NTY5NQ==","avatar_url":"https://avatars.githubusercontent.com/u/575695?v=4","gravatar_id":"","url":"https://api.github.com/users/marshallpierce","html_url":"https://github.com/marshallpierce","followers_url":"https://api.github.com/users/marshallpierce/followers","following_url":"https://api.github.com/users/marshallpierce/following{/other_user}","gists_url":"https://api.github.com/users/marshallpierce/gists{/gist_id}","starred_url":"https://api.github.com/users/marshallpierce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marshallpierce/subscriptions","organizations_url":"https://api.github.com/users/marshallpierce/orgs","repos_url":"https://api.github.com/users/marshallpierce/repos","events_url":"https://api.github.com/users/marshallpierce/events{/privacy}","received_events_url":"https://api.github.com/users/marshallpierce/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"},{"id":2983730364,"node_id":"MDU6TGFiZWwyOTgzNzMwMzY0","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.13","name":"2.13","color":"2CCA53","default":false,"description":"Issue affecting version 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9","html_url":"https://github.com/FasterXML/jackson-module-kotlin/milestone/9","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9/labels","id":6010995,"node_id":"MDk6TWlsZXN0b25lNjAxMDk5NQ==","number":9,"title":"2.13.0","description":"Issues to be included in release 2.13","creator":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"open_issues":9,"closed_issues":3,"state":"open","created_at":"2020-10-20T09:52:18Z","updated_at":"2021-09-06T17:02:33Z","due_on":"2021-07-01T07:00:00Z","closed_at":null},"comments":5,"created_at":"2021-07-05T13:05:29Z","updated_at":"2021-07-06T20:16:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nControlling the serialized field name with `@JsonProperty` doesn't appear to be working for fields in a superclass.\r\n\r\n**To Reproduce**\r\n```\r\nopen class Parent(@JsonProperty(\"parent-prop\") val parent: String)\r\nclass Child(@JsonProperty(\"child-prop\") val child: String) : Parent(child)\r\n\r\nprintln(jacksonObjectMapper().writeValueAsString(Child(\"foo\")))\r\n```\r\n\r\nyields `{\"child-prop\":\"foo\",\"parent\":\"foo\"}`.\r\n\r\n**Expected behavior**\r\n\r\nI would expect to see `{\"child-prop\":\"foo\",\"parent-prop\":\"foo\"}`.\r\n\r\n**Versions**\r\nKotlin: 1.5.20\r\nJackson-module-kotlin: 2.12.3\r\nJackson-databind: 2.12.3","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/474/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/474/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/471","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/471/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/471/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/471/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/471","id":929146213,"node_id":"MDU6SXNzdWU5MjkxNDYyMTM=","number":471,"title":"Deserializing object to data class that contains delegated properties (inheritance with delegation) ","user":{"login":"pnuckowski","id":6205090,"node_id":"MDQ6VXNlcjYyMDUwOTA=","avatar_url":"https://avatars.githubusercontent.com/u/6205090?v=4","gravatar_id":"","url":"https://api.github.com/users/pnuckowski","html_url":"https://github.com/pnuckowski","followers_url":"https://api.github.com/users/pnuckowski/followers","following_url":"https://api.github.com/users/pnuckowski/following{/other_user}","gists_url":"https://api.github.com/users/pnuckowski/gists{/gist_id}","starred_url":"https://api.github.com/users/pnuckowski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pnuckowski/subscriptions","organizations_url":"https://api.github.com/users/pnuckowski/orgs","repos_url":"https://api.github.com/users/pnuckowski/repos","events_url":"https://api.github.com/users/pnuckowski/events{/privacy}","received_events_url":"https://api.github.com/users/pnuckowski/received_events","type":"User","site_admin":false},"labels":[{"id":125028040,"node_id":"MDU6TGFiZWwxMjUwMjgwNDA=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/question","name":"question","color":"cc317c","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-24T11:48:36Z","updated_at":"2021-07-22T15:05:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Your question**\r\nI have checked issues and docs and could not find solution.\r\n\r\nThe follwing code properly serialize object (`Component`) to string, but deserialization from string back to insgtances of `Component` doesn't work.\r\n\r\nAny suggestions how to do it, without removing delegations?\r\n\r\nThanks :)  \r\n```kotlin\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIgnore\r\nimport com.fasterxml.jackson.annotation.JsonInclude\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes.Type\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo\r\nimport com.fasterxml.jackson.core.json.JsonReadFeature\r\nimport com.fasterxml.jackson.databind.DeserializationFeature\r\nimport com.fasterxml.jackson.databind.json.JsonMapper\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\nimport org.assertj.core.api.Assertions.assertThat\r\nimport org.junit.jupiter.api.Test\r\n\r\n@JsonTypeInfo(\r\n    use = JsonTypeInfo.Id.NAME,\r\n    include = JsonTypeInfo.As.PROPERTY,\r\n    property = \"type\"\r\n)\r\n@JsonSubTypes(\r\n    value = [\r\n        Type(value = Space::class, name = Space.TYPE),\r\n        Type(value = Command::class, name = Command.TYPE),\r\n    ]\r\n)\r\ninterface Component {\r\n    var id: String\r\n\r\n    @get:JsonIgnore\r\n    val type: String\r\n}\r\n\r\ndata class Command(\r\n    val value: String,\r\n    val component: Component\r\n) : Component by component {\r\n    override val type: String\r\n        get() = TYPE\r\n\r\n    companion object {\r\n        const val TYPE = \"command\"\r\n    }\r\n}\r\n\r\ndata class Space(\r\n    val space: String,\r\n    private val component: Component\r\n) : Component by component {\r\n    override val type: String\r\n        get() = TYPE\r\n\r\n    companion object {\r\n        const val TYPE = \"space\"\r\n    }\r\n}\r\n\r\ndata class Info(\r\n    override var id: String,\r\n    override val type: String = \"\",\r\n) : Component\r\n\r\nclass FooTest {\r\n    //    private val objectMapper = ObjectMapperFactory.createObjectMapper(emptyList())\r\n    private val objectMapper = JsonMapper.builder()\r\n        .addModule(KotlinModule())\r\n        .serializationInclusion(JsonInclude.Include.NON_NULL)\r\n        .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\r\n        .enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)\r\n        .enable(JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)\r\n        .build()\r\n\r\n    @Test\r\n    fun `should deserialize`() {\r\n\r\n        val value = objectMapper.writeValueAsString(\r\n            Command(\r\n                value = \"text\",\r\n                component = Info(id = \"d\")\r\n            )\r\n        )\r\n\r\n        val obj = objectMapper.readValue(value, Component::class.java)\r\n        assertThat(value).isEqualTo(obj)\r\n    }\r\n}\r\n```\r\nError\r\n```\r\n\r\ncom.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'Info' as a subtype of `<>.<>.<>.<>.jackson.Component`: known type ids = [command, space] (for POJO property 'component')\r\n at [Source: (String)\"{\"type\":\"command\",\"value\":\"text\",\"component\":{\"type\":\"Info\",\"id\":\"d\"},\"id\":\"d\"}\"; line: 1, column: 54] (through reference chain: <>.<>.<>.<>.jackson.Command[\"component\"])\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/471/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/471/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/469","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/469/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/469/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/469/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/469","id":928267705,"node_id":"MDU6SXNzdWU5MjgyNjc3MDU=","number":469,"title":"Unbox value classes when used as map keys","user":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":2983730364,"node_id":"MDU6TGFiZWwyOTgzNzMwMzY0","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.13","name":"2.13","color":"2CCA53","default":false,"description":"Issue affecting version 2.13"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9","html_url":"https://github.com/FasterXML/jackson-module-kotlin/milestone/9","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9/labels","id":6010995,"node_id":"MDk6TWlsZXN0b25lNjAxMDk5NQ==","number":9,"title":"2.13.0","description":"Issues to be included in release 2.13","creator":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"open_issues":9,"closed_issues":3,"state":"open","created_at":"2020-10-20T09:52:18Z","updated_at":"2021-09-06T17:02:33Z","due_on":"2021-07-01T07:00:00Z","closed_at":null},"comments":0,"created_at":"2021-06-23T13:36:16Z","updated_at":"2021-06-23T13:36:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"#468 did most of the work for supporting value classes, but left the case of value classes used in map keys out. See the [Github464 test](link when #468 is merged)","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/469/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/469/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/464","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/464/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/464/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/464/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/464","id":919263751,"node_id":"MDU6SXNzdWU5MTkyNjM3NTE=","number":464,"title":"Serialization doesn't work correctly for objects parametrized by inline class","user":{"login":"sanyarnd","id":6544384,"node_id":"MDQ6VXNlcjY1NDQzODQ=","avatar_url":"https://avatars.githubusercontent.com/u/6544384?v=4","gravatar_id":"","url":"https://api.github.com/users/sanyarnd","html_url":"https://github.com/sanyarnd","followers_url":"https://api.github.com/users/sanyarnd/followers","following_url":"https://api.github.com/users/sanyarnd/following{/other_user}","gists_url":"https://api.github.com/users/sanyarnd/gists{/gist_id}","starred_url":"https://api.github.com/users/sanyarnd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sanyarnd/subscriptions","organizations_url":"https://api.github.com/users/sanyarnd/orgs","repos_url":"https://api.github.com/users/sanyarnd/repos","events_url":"https://api.github.com/users/sanyarnd/events{/privacy}","received_events_url":"https://api.github.com/users/sanyarnd/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":24,"created_at":"2021-06-11T22:21:28Z","updated_at":"2021-10-15T14:24:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```kotlin\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\n\r\ninline class A(val value: Int = 0)\r\ninline class B(val value: Int = 0)\r\ninline class C(val value: Int = 0)\r\nclass D(val inlineField: A = A())\r\n\r\nclass Pojo(\r\n    val works: A,\r\n    val alsoWorks: B,\r\n    val worksToo: Collection<D>,\r\n    val broken: Collection<C>\r\n)\r\n\r\nval om = ObjectMapper().registerModule(KotlinModule())\r\nprintln(om.writeValueAsString(Pojo(A(), B(), listOf(D(), D()), listOf(C(), C()))))\r\n```\r\nOutput:\r\n```json\r\n{\r\n  \"works\": 0,\r\n  \"alsoWorks\": 0,\r\n  \"worksToo\": [ {\"inlineField\":0}, {\"inlineField\":0} ],\r\n  \"broken\": [ {\"value\":0}, {\"value\":0} ]\r\n}\r\n```\r\n\r\nJackson version 2.12","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/464/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/464/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/461","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/461/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/461/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/461/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/461","id":913695156,"node_id":"MDU6SXNzdWU5MTM2OTUxNTY=","number":461,"title":"Unable to deserialize missing XML tag to null","user":{"login":"henrik242","id":129931,"node_id":"MDQ6VXNlcjEyOTkzMQ==","avatar_url":"https://avatars.githubusercontent.com/u/129931?v=4","gravatar_id":"","url":"https://api.github.com/users/henrik242","html_url":"https://github.com/henrik242","followers_url":"https://api.github.com/users/henrik242/followers","following_url":"https://api.github.com/users/henrik242/following{/other_user}","gists_url":"https://api.github.com/users/henrik242/gists{/gist_id}","starred_url":"https://api.github.com/users/henrik242/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henrik242/subscriptions","organizations_url":"https://api.github.com/users/henrik242/orgs","repos_url":"https://api.github.com/users/henrik242/repos","events_url":"https://api.github.com/users/henrik242/events{/privacy}","received_events_url":"https://api.github.com/users/henrik242/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-07T12:32:56Z","updated_at":"2021-06-07T16:49:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a simple parser and data structure (Kotlin):\r\n```\r\nobject XmlTool {\r\n    val xmlIn = XMLInputFactory.newInstance()\r\n    val factory = XmlFactory(xmlIn)\r\n    val xmlModule = JacksonXmlModule()\r\n    val mapper = XmlMapper(factory, xmlModule)\r\n        .registerKotlinModule()\r\n        .configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true) // Doesn't make any difference\r\n\r\n    @JvmStatic\r\n    fun parseRoot(xml: String?): Root = mapper.readValue(xml, Root::class.java)\r\n\r\n    @JvmStatic\r\n    fun parseOuter(xml: String?): Outer = mapper.readValue(xml, Outer::class.java)\r\n\r\n    data class Inner(val code: String?)\r\n    data class Outer(val inner: Inner?)\r\n    data class Root(val outer: Outer?)\r\n}\r\n```\r\n .. and a test (Java):\r\n```\r\nclass NoStringArgumentTest {\r\n\r\n    @Test\r\n    void no_string_argument() {\r\n        String xml = \"<root>\" +\r\n                     \"   <outer>\" +\r\n                     \"      <inner code=\\\"578\\\" />\" +\r\n                     \"   </outer>\" +\r\n                     \"</root>\";\r\n\r\n        Root product = XmlTool.parseRoot(xml);\r\n\r\n        assertEquals(new Root(new Outer(new Inner(\"578\"))), product); // SUCCESS\r\n    }\r\n\r\n    @Test\r\n    void no_string_argument2() {\r\n        String xml = \"<outer>\" +\r\n                     \"</outer>\";\r\n\r\n        Outer product = XmlTool.parseOuter(xml);\r\n\r\n        assertEquals(new Outer(null), product); // SUCCESS in Jackson 2.11.3, but FAIL in 2.12.3\r\n    }\r\n\r\n    @Test\r\n    void no_string_argument3() {\r\n        String xml = \"<root>\" +\r\n                     \"   <outer>\" +\r\n                     \"   </outer>\" +\r\n                     \"</root>\";\r\n\r\n        Root product = XmlTool.parseRoot(xml);\r\n\r\n        assertEquals(new Root(new Outer(new Inner(null))), product); // Always FAILS\r\n    }\r\n}\r\n```\r\nThe last test fails with the following exception:\r\n```\r\ncom.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `jackson.xml.XmlTool$Outer` (although at least one Creator exists): no default no-arguments constructor found\r\n at [Source: (StringReader); line: 1, column: 8]\r\n\r\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1588)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1213)\r\n\tat com.fasterxml.jackson.databind.deser.ValueInstantiator.createUsingDefault(ValueInstantiator.java:248)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDefault(StdValueInstantiator.java:275)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getEmptyValue(BeanDeserializerBase.java:1042)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeFromEmptyString(StdDeserializer.java:322)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeFromString(StdDeserializer.java:270)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(BeanDeserializerBase.java:1495)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:207)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:197)\r\n\tat com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(XmlDeserializationContext.java:91)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3548)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3516)\r\n\tat jackson.xml.XmlTool.parseOuter(XmlTool.kt:22)\r\n\tat jackson.xml.NoStringArgumentTest.no_string_argument2(NoStringArgumentTest.java:30)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n```\r\nWhat do I need to change to make this test pass?\r\n\r\nI have created a test project at https://github.com/henrik242/jackson-xml-problem/tree/no-string-argument","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/461/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/461/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/459","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/459/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/459/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/459/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/459","id":909572618,"node_id":"MDU6SXNzdWU5MDk1NzI2MTg=","number":459,"title":"Way to ignore properties from delegate","user":{"login":"vladokvocka","id":8994745,"node_id":"MDQ6VXNlcjg5OTQ3NDU=","avatar_url":"https://avatars.githubusercontent.com/u/8994745?v=4","gravatar_id":"","url":"https://api.github.com/users/vladokvocka","html_url":"https://github.com/vladokvocka","followers_url":"https://api.github.com/users/vladokvocka/followers","following_url":"https://api.github.com/users/vladokvocka/following{/other_user}","gists_url":"https://api.github.com/users/vladokvocka/gists{/gist_id}","starred_url":"https://api.github.com/users/vladokvocka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vladokvocka/subscriptions","organizations_url":"https://api.github.com/users/vladokvocka/orgs","repos_url":"https://api.github.com/users/vladokvocka/repos","events_url":"https://api.github.com/users/vladokvocka/events{/privacy}","received_events_url":"https://api.github.com/users/vladokvocka/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-02T14:36:34Z","updated_at":"2021-06-07T01:42:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, consider following code:\r\n\r\n```kotlin\r\ndata class Base(\r\n    @JsonProperty(\"prop1\") val prop1: String,\r\n    @JsonProperty(\"prop2\") val prop2: String\r\n)\r\n\r\ndata class Specific(\r\n    @JsonProperty(\"baseProps\") val baseProps: Base,\r\n    @JsonProperty(\"prop3\") val prop3: String\r\n) : Base by baseProps\r\n```\r\n\r\nWhen using `objectMapper.writeValueAsString(specific)`, result JSON looks like this:\r\n\r\n```json\r\n{\r\n    \"@type\": \"Specific\",\r\n    \"baseProps\": {\r\n        \"@type\": \"Base\",\r\n        \"prop1\": \"value1\",\r\n        \"prop2\": \"value2\"\r\n    },\r\n    \"prop1\": \"value1\",\r\n    \"prop2\": \"value2\",\r\n    \"prop3\": \"value3\"\r\n}\r\n```\r\n\r\nIs there a way to ignore all delegated properties from delegate `Base` without specifying every one of them using `@JsonIgnoreProperties`? Something like `@JsonIgnoreDelegates(\"baseProps\")` would be great. The result should look like this:\r\n\r\n```json\r\n{\r\n    \"@type\": \"Specific\",\r\n    \"baseProps\": {\r\n        \"@type\": \"Base\",\r\n        \"prop1\": \"value1\",\r\n        \"prop2\": \"value2\"\r\n    },\r\n    \"prop3\": \"value3\"\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/459/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/459/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/458","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/458/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/458/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/458/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/458","id":908387846,"node_id":"MDU6SXNzdWU5MDgzODc4NDY=","number":458,"title":"Deserializing string literal \"null\" as null","user":{"login":"efenderbosch","id":1494437,"node_id":"MDQ6VXNlcjE0OTQ0Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1494437?v=4","gravatar_id":"","url":"https://api.github.com/users/efenderbosch","html_url":"https://github.com/efenderbosch","followers_url":"https://api.github.com/users/efenderbosch/followers","following_url":"https://api.github.com/users/efenderbosch/following{/other_user}","gists_url":"https://api.github.com/users/efenderbosch/gists{/gist_id}","starred_url":"https://api.github.com/users/efenderbosch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/efenderbosch/subscriptions","organizations_url":"https://api.github.com/users/efenderbosch/orgs","repos_url":"https://api.github.com/users/efenderbosch/repos","events_url":"https://api.github.com/users/efenderbosch/events{/privacy}","received_events_url":"https://api.github.com/users/efenderbosch/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-01T15:00:18Z","updated_at":"2021-06-01T15:01:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We have an `Option` class, similar to Java's built-it `Optional`.\r\n\r\nI've created and registered a `TypeModifier`:\r\n\r\n```kotlin\r\nobject OptionTypeModifier : TypeModifier() {\r\n    override fun modifyType(type: JavaType, jdkType: Type, context: TypeBindings, typeFactory: TypeFactory): JavaType {\r\n        if (type.isReferenceType || type.isContainerType) {\r\n            return type\r\n        }\r\n\r\n        return when (type.rawClass) {\r\n            Option::class.java -> {\r\n                val refType = type.containedTypeOrUnknown(0)\r\n                ReferenceType.upgradeFrom(type, refType)\r\n            }\r\n            else -> type\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nA `Deserializers`:\r\n```kotlin\r\nobject OptionDeserializers : Deserializers.Base() {\r\n    override fun findReferenceDeserializer(\r\n        refType: ReferenceType,\r\n        config: DeserializationConfig,\r\n        beanDesc: BeanDescription,\r\n        contentTypeDeserializer: TypeDeserializer?,\r\n        contentDeserializer: JsonDeserializer<*>?\r\n    ): JsonDeserializer<*> = if (refType.hasRawClass(Option::class.java)) {\r\n        OptionDeserializer(refType, null, contentTypeDeserializer, contentDeserializer)\r\n    } else {\r\n        super.findReferenceDeserializer(refType, config, beanDesc, contentTypeDeserializer, contentDeserializer)\r\n    }\r\n}\r\n```\r\n\r\nAnd a `ReferenceTypeDeserializer`:\r\n```kotlin\r\nclass OptionDeserializer(\r\n    fullType: JavaType,\r\n    vi: ValueInstantiator?,\r\n    typeDeser: TypeDeserializer?,\r\n    deser: JsonDeserializer<*>?\r\n) : ReferenceTypeDeserializer<Option<Any>>(fullType, vi, typeDeser, deser) {\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    override fun getNullValue(ctxt: DeserializationContext) = Some(null) as Option<Any>\r\n\r\n    override fun getNullAccessPattern() = AccessPattern.CONSTANT\r\n\r\n    override fun withResolved(\r\n        typeDeser: TypeDeserializer?,\r\n        valueDeser: JsonDeserializer<*>\r\n    ): ReferenceTypeDeserializer<Option<Any>> {\r\n        return OptionDeserializer(\r\n            _fullType,\r\n            _valueInstantiator,\r\n            typeDeser,\r\n            valueDeser\r\n        )\r\n    }\r\n\r\n    override fun getReferenced(reference: Option<Any>): Any? {\r\n        return reference.get()\r\n    }\r\n\r\n    override fun referenceValue(contents: Any?): Option<Any> {\r\n        // ideally we'd know if this is an Option<Any> vs Option<Any?> here\r\n        // and could use that to conditionally return a None or null.some()\r\n        return contents.option()\r\n    }\r\n\r\n    override fun updateReference(reference: Option<Any>, contents: Any?): Option<Any> {\r\n        return contents.option()\r\n    }\r\n}\r\n```\r\n\r\nThese work as expected when a bean's property is something like a `Option<Foo>`, but not when the property is a `Option<Foo?>` and we want to use literal \"null\" to indicate the value is present (an `Option` holding null, instead of a `None` which means it is not present). I created a `Deserializer` that handles it property, but I'm looking for a way to update one or more of the other classes so that we don't need to annotate other usages of a `Option<Foo?>` to use the Deserializer.\r\n\r\n```kotlin\r\nclass NullableOptionDeserializer : FromStringDeserializer<Option<Uuid?>>(Option::class.java) {\r\n    override fun _deserialize(value: String?, ctxt: DeserializationContext): Option<Uuid?> = when (value) {\r\n        \"null\" -> null.some()\r\n        null -> None\r\n        else -> from(value).getOrThrow().some()\r\n    }\r\n}\r\n\r\n// usage:\r\ndata class Foo(\r\n    @JsonDeserialize(using = Uuid.NullableOptionDeserializer::class)\r\n    val barId: Option<Uuid?> = None,\r\n)\r\n```\r\n\r\nI don't think the Java Reflection metadata is rich enough to do this, but there might be some way I don't know about to get a property's Kotlin Reflection metadata to better inspect the generic signature. Any help would be appreciated. Thanks.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/458/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/458/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/455","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/455/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/455/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/455/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/455","id":905921329,"node_id":"MDU6SXNzdWU5MDU5MjEzMjk=","number":455,"title":"Update japicmp excludes after release of 2.13","user":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"assignees":[{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9","html_url":"https://github.com/FasterXML/jackson-module-kotlin/milestone/9","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9/labels","id":6010995,"node_id":"MDk6TWlsZXN0b25lNjAxMDk5NQ==","number":9,"title":"2.13.0","description":"Issues to be included in release 2.13","creator":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"open_issues":9,"closed_issues":3,"state":"open","created_at":"2020-10-20T09:52:18Z","updated_at":"2021-09-06T17:02:33Z","due_on":"2021-07-01T07:00:00Z","closed_at":null},"comments":0,"created_at":"2021-05-28T19:16:50Z","updated_at":"2021-05-28T19:16:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"japicmp should be pointed to 2.13 as the base & excludes removed.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/455/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/455/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/450","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/450/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/450/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/450/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/450","id":898946411,"node_id":"MDU6SXNzdWU4OTg5NDY0MTE=","number":450,"title":"Remove `kotlin-reflect` and replace it with `kotlinx-metadata-jvm`","user":{"login":"k163377","id":24751011,"node_id":"MDQ6VXNlcjI0NzUxMDEx","avatar_url":"https://avatars.githubusercontent.com/u/24751011?v=4","gravatar_id":"","url":"https://api.github.com/users/k163377","html_url":"https://github.com/k163377","followers_url":"https://api.github.com/users/k163377/followers","following_url":"https://api.github.com/users/k163377/following{/other_user}","gists_url":"https://api.github.com/users/k163377/gists{/gist_id}","starred_url":"https://api.github.com/users/k163377/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/k163377/subscriptions","organizations_url":"https://api.github.com/users/k163377/orgs","repos_url":"https://api.github.com/users/k163377/repos","events_url":"https://api.github.com/users/k163377/events{/privacy}","received_events_url":"https://api.github.com/users/k163377/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":1162961673,"node_id":"MDU6TGFiZWwxMTYyOTYxNjcz","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/3.x","name":"3.x","color":"a7e88d","default":false,"description":"Issue affecting Jackson 3.x"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-05-23T06:08:54Z","updated_at":"2021-06-07T10:17:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Use case\r\nIt makes it easier to use `jackson-module-kotlin` in resource-limited environments.\r\n\r\n## Describe the solution you'd like\r\nRemove `kotlin-reflect` and replace it with `kotlinx-metadata-jvm`.\r\n\r\n## Additional context\r\nThe reason for creating this issue is that, as mentioned in [this `spring-framework` issue](https://github.com/spring-projects/spring-framework/issues/21546), `kotlin-reflect` consumes a lot of resources, and there is a topic to replace it with `kotlinx-metadata-jvm`.\r\n\r\nI've started prototyping it, and I'd be happy to discuss how to implement it in this issue if it seems to work.\r\n\r\nAlso, if you are interested in this change, please send me a :+1: (I would personally like to know if there is any demand for this change).","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/450/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/450/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/444","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/444/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/444/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/444/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/444","id":882675034,"node_id":"MDU6SXNzdWU4ODI2NzUwMzQ=","number":444,"title":"@JsonValue not working for root","user":{"login":"cpdyj","id":13687964,"node_id":"MDQ6VXNlcjEzNjg3OTY0","avatar_url":"https://avatars.githubusercontent.com/u/13687964?v=4","gravatar_id":"","url":"https://api.github.com/users/cpdyj","html_url":"https://github.com/cpdyj","followers_url":"https://api.github.com/users/cpdyj/followers","following_url":"https://api.github.com/users/cpdyj/following{/other_user}","gists_url":"https://api.github.com/users/cpdyj/gists{/gist_id}","starred_url":"https://api.github.com/users/cpdyj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpdyj/subscriptions","organizations_url":"https://api.github.com/users/cpdyj/orgs","repos_url":"https://api.github.com/users/cpdyj/repos","events_url":"https://api.github.com/users/cpdyj/events{/privacy}","received_events_url":"https://api.github.com/users/cpdyj/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-05-09T03:19:42Z","updated_at":"2021-05-14T15:25:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\n@JsonValue annotation on top node work correctly during serialization but fault on deserialization.\r\n\r\n**Version information**\r\n\r\nLatest\r\n\r\n**To Reproduce**\r\n\r\n```kotlin\r\nval mapper = jacksonMapper()\r\ndata class A(@JsonValue val a: List<String>)\r\nval s=mapper.writeValueAsString(A(listOf(\"A\")) // OK: [\"A\"]\r\nmapper.readValue(s,A::class.java) // boom!\r\n```\r\n\r\n\r\n**Additional context**\r\n\r\nI use Kotlin.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/444/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/440","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/440/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/440/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/440/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/440","id":878301554,"node_id":"MDU6SXNzdWU4NzgzMDE1NTQ=","number":440,"title":"Kotlin FeatureRequest: Serialize null string to empty string","user":{"login":"MartinX3","id":4518092,"node_id":"MDQ6VXNlcjQ1MTgwOTI=","avatar_url":"https://avatars.githubusercontent.com/u/4518092?v=4","gravatar_id":"","url":"https://api.github.com/users/MartinX3","html_url":"https://github.com/MartinX3","followers_url":"https://api.github.com/users/MartinX3/followers","following_url":"https://api.github.com/users/MartinX3/following{/other_user}","gists_url":"https://api.github.com/users/MartinX3/gists{/gist_id}","starred_url":"https://api.github.com/users/MartinX3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MartinX3/subscriptions","organizations_url":"https://api.github.com/users/MartinX3/orgs","repos_url":"https://api.github.com/users/MartinX3/repos","events_url":"https://api.github.com/users/MartinX3/events{/privacy}","received_events_url":"https://api.github.com/users/MartinX3/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-05-05T14:06:46Z","updated_at":"2021-05-11T10:13:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nPlease give us an option to serialize null strings to empty strings in kotlin.\r\n\r\n**Describe the solution you'd like**\r\nIf a kotlin data class has a null string, please convert it to `\"\"` in the json.\r\n(We use nullable strings over empty strings, because the null handling is easier, than the empty string handling.\r\n\r\n**Usage example**\r\nSome option in the ObjectMapperCustomzier would be nice.\r\n\r\n**Additional context**\r\nI tried\r\n```\r\n@Singleton\r\nclass JacksonRegisterCustomObjectMapperCustomizer : ObjectMapperCustomizer {\r\n    override fun customize(mapper: ObjectMapper) {\r\n        val sp = DefaultSerializerProvider.Impl()\r\n        sp.setNullValueSerializer(NullSerializer.instance)\r\n\r\n        val stringModule = SimpleModule()\r\n        stringModule.addSerializer(String::class.javaObjectType, StringSerializer())\r\n        stringModule.addSerializer(String::class.javaPrimitiveType, StringSerializer())\r\n        stringModule.addSerializer(String::class.java, StringSerializer())\r\n\r\n        mapper.registerModule(stringModule).setSerializerProvider(sp)\r\n    }\r\n\r\n\r\n    class StringSerializer : JsonSerializer<String?>() {\r\n        override fun serialize(string: String?, jsonGenerator: JsonGenerator, serializerProvider: SerializerProvider) {\r\n            when {\r\n                string.isNullOrBlank() -> jsonGenerator.writeString(\"\")\r\n                else -> jsonGenerator.writeString(string)\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\nbut it omits null variables.\r\n\r\nI also tried\r\n`mapper.configOverride(String.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY));`\r\nwithout success.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/440/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/435","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/435/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/435/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/435/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/435","id":853456271,"node_id":"MDU6SXNzdWU4NTM0NTYyNzE=","number":435,"title":"Is it possible to allow functions *outside* of a class definition to be used as a JsonCreator or similar?","user":{"login":"ragnese","id":7927565,"node_id":"MDQ6VXNlcjc5Mjc1NjU=","avatar_url":"https://avatars.githubusercontent.com/u/7927565?v=4","gravatar_id":"","url":"https://api.github.com/users/ragnese","html_url":"https://github.com/ragnese","followers_url":"https://api.github.com/users/ragnese/followers","following_url":"https://api.github.com/users/ragnese/following{/other_user}","gists_url":"https://api.github.com/users/ragnese/gists{/gist_id}","starred_url":"https://api.github.com/users/ragnese/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ragnese/subscriptions","organizations_url":"https://api.github.com/users/ragnese/orgs","repos_url":"https://api.github.com/users/ragnese/repos","events_url":"https://api.github.com/users/ragnese/events{/privacy}","received_events_url":"https://api.github.com/users/ragnese/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-04-08T13:08:59Z","updated_at":"2021-04-10T01:37:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Use case**\r\nBasically, the idea is that I might design a class where I want to use a factory function without needing to write:\r\n\r\n```\r\ncompanion object {\r\n    @JvmStatic\r\n    @JsonCreator\r\n    private fun creator(arg1: Arg1, arg2: Arg2) = myFactoryFunction(arg1, arg2)\r\n}\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nI rather just be able to say:\r\n```\r\n@JsonDeserialize(with = ::myFactoryFunction)\r\nclass MyClass () {}\r\n```\r\n\r\nor maybe:\r\n\r\n```\r\n@JsonCreator(for = MyClass::class)\r\nfun myFactoryFunction(arg1: Arg1, arg2: Arg2): MyClass = TODO()\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nMy first option was to do:\r\n```\r\ncompanion object {\r\n    @JvmStatic\r\n    @JsonCreator\r\n    operator fun invoke(arg1: Arg1, arg2: Arg2) = TODO()\r\n}\r\n```\r\nWhich is *almost* perfectly fine. Now I can just call `MyClass(arg1, arg2)` in my regular code because of the `operator invoke` and it works as a JsonCreator just fine. However, if I have to *reference* the invoke function in other code, I have to write `MyClass.Companion::invoke` instead of `::MyClass` like you would for a true constructor or a top-level factory function. So, since I hate the ugly invoke reference, I've taken to writing the top-level factory function and then writing a private companion function as the JsonCreator that does nothing but call the true factory function. I'd like to eliminate this \"boilerplate\".\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/435/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/435/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/434","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/434/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/434/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/434/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/434","id":849802254,"node_id":"MDU6SXNzdWU4NDk4MDIyNTQ=","number":434,"title":"Field names containing hyphens are truncated when serialized","user":{"login":"ocisly","id":1496836,"node_id":"MDQ6VXNlcjE0OTY4MzY=","avatar_url":"https://avatars.githubusercontent.com/u/1496836?v=4","gravatar_id":"","url":"https://api.github.com/users/ocisly","html_url":"https://github.com/ocisly","followers_url":"https://api.github.com/users/ocisly/followers","following_url":"https://api.github.com/users/ocisly/following{/other_user}","gists_url":"https://api.github.com/users/ocisly/gists{/gist_id}","starred_url":"https://api.github.com/users/ocisly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ocisly/subscriptions","organizations_url":"https://api.github.com/users/ocisly/orgs","repos_url":"https://api.github.com/users/ocisly/repos","events_url":"https://api.github.com/users/ocisly/events{/privacy}","received_events_url":"https://api.github.com/users/ocisly/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-04T05:25:24Z","updated_at":"2021-04-05T15:40:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nHyphens are legal in Kotlin field names. #383 broke serialisation of such fields by incorrectly inferring that any such field name indicates an inline class and proceeding to truncate it before the hyphen.\r\n\r\n**To Reproduce**\r\n\r\n```kotlin\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\n\r\ndata class ReproduceBug383(val `a-b`: Int)\r\nval mapper = jacksonObjectMapper()\r\nmapper.writeValueAsString(ReproduceBug383(5)) // => {\"a\":5}\r\n```\r\n\r\n**Expected behavior**\r\n\r\n```json\r\n{\"a-b\":5}\r\n```\r\n\r\n**Versions**\r\nKotlin: 1.4.31\r\nJackson-module-kotlin: 2.12.2\r\nJackson-databind: 2.12.2\r\n\r\n**Additional context**\r\n\r\nCommit that broke it: https://github.com/FasterXML/jackson-module-kotlin/commit/6787e109fb6f76374da8fdf8d951e0c2f2889f8c#diff-5bffae78b70b8281d1cc2775149f7abe12db5a678c9163c105675ec2136183a2R165\r\n\r\nPR introducing the breaking change: https://github.com/FasterXML/jackson-module-kotlin/pull/383/files#diff-5bffae78b70b8281d1cc2775149f7abe12db5a678c9163c105675ec2136183a2R162\r\n\r\nLine of code that removes the correct field: https://github.com/FasterXML/jackson-databind/blob/e0fd026b38e9f58e78d191ba3b5f03c5a743b1b4/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java#L727","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/434/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/434/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/433","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/433/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/433/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/433/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/433","id":849641231,"node_id":"MDU6SXNzdWU4NDk2NDEyMzE=","number":433,"title":"jackson - nullIsNameAsDefault does not work when inheritance","user":{"login":"hohoins","id":3438181,"node_id":"MDQ6VXNlcjM0MzgxODE=","avatar_url":"https://avatars.githubusercontent.com/u/3438181?v=4","gravatar_id":"","url":"https://api.github.com/users/hohoins","html_url":"https://github.com/hohoins","followers_url":"https://api.github.com/users/hohoins/followers","following_url":"https://api.github.com/users/hohoins/following{/other_user}","gists_url":"https://api.github.com/users/hohoins/gists{/gist_id}","starred_url":"https://api.github.com/users/hohoins/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hohoins/subscriptions","organizations_url":"https://api.github.com/users/hohoins/orgs","repos_url":"https://api.github.com/users/hohoins/repos","events_url":"https://api.github.com/users/hohoins/events{/privacy}","received_events_url":"https://api.github.com/users/hohoins/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-04-03T11:42:42Z","updated_at":"2021-04-06T01:10:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\njackson - nullIsNameAsDefault does not work when inheritance\r\n\r\n**To Reproduce**\r\nI attached the reenactment code below.\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Versions**\r\n// android with retrofit2\r\n//  kotlin_version = '1.4.30'\r\n// implementation \"com.squareup.retrofit2:converter-jackson:2.9.0\"\r\n// implementation \"com.fasterxml.jackson.module:jackson-module-kotlin:2.12.2\"\r\n\r\n**Additional context**\r\nDid I do something wrong?\r\n\r\n**Desc**\r\njackson - nullIsNameAsDefault does not work when inheritance.\r\n\r\nIn general, nullIsNameAsDefault works well. However, if you receive inheritance, it will not work. In the example below, responseC generates an error. Did I do something wrong?\r\n\r\nThank you very much.\r\n\r\nEnvironment: android with retrofit2\r\n\r\n```\r\nimport com.fasterxml.jackson.databind.DeserializationFeature\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\n\r\nobject JacksonTest {\r\n// android with retrofit2\r\n// implementation \"com.squareup.retrofit2:converter-jackson:2.9.0\"\r\n// implementation \"com.fasterxml.jackson.module:jackson-module-kotlin:2.12.2\"\r\n\r\n    fun test() {\r\n        val objectMapper = ObjectMapper()\r\n        objectMapper.registerModule(KotlinModule(nullIsSameAsDefault = true))\r\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n    \r\n        val responseA = \"{\\\"baseData\\\":\\\"data1\\\",\\\"myData\\\":\\\"data2\\\"}\"\r\n        val responseB = \"{\\\"baseData\\\":\\\"data1\\\",\\\"myData\\\":null}\"\r\n        val responseC = \"{\\\"baseData\\\":null,\\\"myData\\\":\\\"data2\\\"}\"\r\n    \r\n        val successObjA = objectMapper.readValue(responseA, MyClass::class.java)\r\n        val successObjB = objectMapper.readValue(responseB, MyClass::class.java)\r\n        val failObjC = objectMapper.readValue(responseC, MyClass::class.java)\r\n        // Caused by: com.fasterxml.jackson.databind.JsonMappingException: Parameter specified as non-null is null:\r\n        // method kotlin.jvm.internal.Intrinsics.checkNotNullParameter, parameter <set-?>\r\n    }\r\n}\r\n\r\n\r\nopen class BaseClass(var baseData: String = \"baseDataDefault\")\r\n\r\nclass MyClass(val myData: String = \"myDataDefault\") : BaseClass()\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/433/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/433/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/432","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/432/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/432/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/432/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/432","id":844196130,"node_id":"MDU6SXNzdWU4NDQxOTYxMzA=","number":432,"title":"Cannot deserialize wrapper for simple types if their value property is public","user":{"login":"slu-it","id":8013955,"node_id":"MDQ6VXNlcjgwMTM5NTU=","avatar_url":"https://avatars.githubusercontent.com/u/8013955?v=4","gravatar_id":"","url":"https://api.github.com/users/slu-it","html_url":"https://github.com/slu-it","followers_url":"https://api.github.com/users/slu-it/followers","following_url":"https://api.github.com/users/slu-it/following{/other_user}","gists_url":"https://api.github.com/users/slu-it/gists{/gist_id}","starred_url":"https://api.github.com/users/slu-it/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/slu-it/subscriptions","organizations_url":"https://api.github.com/users/slu-it/orgs","repos_url":"https://api.github.com/users/slu-it/repos","events_url":"https://api.github.com/users/slu-it/events{/privacy}","received_events_url":"https://api.github.com/users/slu-it/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-30T07:57:49Z","updated_at":"2021-03-31T23:15:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen using single-property `BigDecimal` / `Double` (and most likely any other) wrapper (data) classes to deserialize JSON values into, that property needs to be declared `private` because otherwise an exception is thrown.\r\n\r\n**To Reproduce**\r\n\r\nSimple Example: `{ \"foo\": 42.123 }`\r\n\r\nThis: \r\n\r\n```\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport java.math.BigDecimal\r\n\r\ndata class DtoWithPublicProperty(\r\n    val foo: WrapperWithPublicValue\r\n)\r\n\r\ndata class WrapperWithPublicValue(val value: BigDecimal)\r\n\r\nval objectMapper = jacksonObjectMapper()\r\nval json = \"\"\"{\"foo\":42.123}\"\"\"\r\n\r\nobjectMapper.readValue<DtoWithPublicProperty>(json)\r\n\r\n```\r\n\r\nThrows an exception like: `com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of [..] WrapperWithPublicValue (although at least one Creator exists): no double/Double-argument constructor/factory method to deserialize from Number value (42.123)\r\n at [Source: (String)\"{\"foo\":42.123}\"; line: 1, column: 8]`\r\n\r\nChanging it to:\r\n\r\n```\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport java.math.BigDecimal\r\n\r\ndata class DtoWithPrivateProperty(\r\n    val foo: WrapperWithPrivateValue\r\n)\r\n\r\ndata class WrapperWithPrivateValue(private val value: BigDecimal) {\r\n    fun toBigDecimal() = value\r\n}\r\n\r\nval objectMapper = jacksonObjectMapper()\r\nval json = \"\"\"{\"foo\":42.123}\"\"\"\r\n\r\nobjectMapper.readValue<DtoWithPrivateProperty>(json)\r\n```\r\n\r\nWorks as expected without an exception.\r\n\r\n**Expected behavior**\r\nIt should not matter if the property is public or private when deserializing JSON into more complex object structures.\r\n\r\n**Versions**\r\nKotlin: 1.4.31 (and 1.3.x)\r\nJackson-module-kotlin: 2.12.2 (and 2.11.x)\r\nJackson-databind: 2.12.2 (and 2.11.x)\r\n\r\n**Additional context**\r\n\r\n- Does not fix the problem:\r\n  - `data class WrapperWithPublicValue @JsonCreator constructor(val value: BigDecimal)`\r\n  - `data class WrapperWithPublicValue(@JsonIgnore val value: BigDecimal)`\r\n  - Changing the wrapped data type to `Double` or adding additional constructors / static creator functions with either `BigDecimal` or `Double`\r\n- Most unexpectedly the explicit `@JsonCreator` does not help at all.\r\n- _Workaround_ - actively ignoring the logical getter of the property:\r\n  - `data class WrapperWithPublicValue(@get:JsonIgnore val value: BigDecimal)`\r\n-  Using simple classes instead of data classes does not change anything.\r\n\r\nI created a small project with tests to reproduce the issue:\r\nhttps://github.com/slu-it/bug-jackson-kotlin-wrapper-with-public-param/blob/main/src/test/kotlin/example/IssueTests.kt\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/432/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/432/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/431","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/431/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/431/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/431/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/431","id":842914021,"node_id":"MDU6SXNzdWU4NDI5MTQwMjE=","number":431,"title":"Custom methods cannot be used for map types and generics","user":{"login":"ming0804","id":17372409,"node_id":"MDQ6VXNlcjE3MzcyNDA5","avatar_url":"https://avatars.githubusercontent.com/u/17372409?v=4","gravatar_id":"","url":"https://api.github.com/users/ming0804","html_url":"https://github.com/ming0804","followers_url":"https://api.github.com/users/ming0804/followers","following_url":"https://api.github.com/users/ming0804/following{/other_user}","gists_url":"https://api.github.com/users/ming0804/gists{/gist_id}","starred_url":"https://api.github.com/users/ming0804/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ming0804/subscriptions","organizations_url":"https://api.github.com/users/ming0804/orgs","repos_url":"https://api.github.com/users/ming0804/repos","events_url":"https://api.github.com/users/ming0804/events{/privacy}","received_events_url":"https://api.github.com/users/ming0804/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-03-29T02:36:53Z","updated_at":"2021-04-06T23:17:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nCustom methods cannot be used for map types and generics\r\n**To Reproduce**\r\nTest case or steps to reproduce the behavior or.\r\n![image](https://user-images.githubusercontent.com/17372409/112779830-253b8680-907a-11eb-9572-bc882e96f14e.png)\r\n![image](https://user-images.githubusercontent.com/17372409/112779843-2c629480-907a-11eb-869b-6f01b8df297b.png)\r\n![image](https://user-images.githubusercontent.com/17372409/112779877-3daba100-907a-11eb-9fc9-000894bb825c.png)\r\n![image](https://user-images.githubusercontent.com/17372409/112779891-4603dc00-907a-11eb-8735-1b44abe740e4.png)\r\n\r\nlong to string  , So is generics\r\n![image](https://user-images.githubusercontent.com/17372409/112780162-d510f400-907a-11eb-82cc-0db34e1a8ba2.png)\r\n\r\n\r\n\r\n**Expected behavior**\r\n{\"aa\":\"324\"}\r\n\r\n**Versions**\r\nKotlin: 1.4.20\r\nJackson-module-kotlin: 2.11.3\r\nJackson-databind: 2.11.3\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/431/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/431/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/428","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/428/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/428/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/428/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/428","id":833036866,"node_id":"MDU6SXNzdWU4MzMwMzY4NjY=","number":428,"title":"Incorrect behavior of @JacksonInject when used with Jackson MixIn","user":{"login":"Sylvain-maillard","id":4624588,"node_id":"MDQ6VXNlcjQ2MjQ1ODg=","avatar_url":"https://avatars.githubusercontent.com/u/4624588?v=4","gravatar_id":"","url":"https://api.github.com/users/Sylvain-maillard","html_url":"https://github.com/Sylvain-maillard","followers_url":"https://api.github.com/users/Sylvain-maillard/followers","following_url":"https://api.github.com/users/Sylvain-maillard/following{/other_user}","gists_url":"https://api.github.com/users/Sylvain-maillard/gists{/gist_id}","starred_url":"https://api.github.com/users/Sylvain-maillard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Sylvain-maillard/subscriptions","organizations_url":"https://api.github.com/users/Sylvain-maillard/orgs","repos_url":"https://api.github.com/users/Sylvain-maillard/repos","events_url":"https://api.github.com/users/Sylvain-maillard/events{/privacy}","received_events_url":"https://api.github.com/users/Sylvain-maillard/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-16T17:24:26Z","updated_at":"2021-03-16T18:01:33Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nGiven a kotlin data class and a jackson mixin for this class, when an attribute of the class is injected using @JacksonInject, it is not used when the annotation is on the mixin. It works when the annotation is on the attribute in the class.\r\n\r\n**To Reproduce**\r\n\r\nHere is a simple test case:\r\n```kotlin\r\nclass JacksonKotlinTests {\r\n    @Test\r\n    fun mixin_jackson_inject_should_work() {\r\n\r\n        val objectMapper = ObjectMapper()\r\n        objectMapper.registerModule(KotlinModule())\r\n        objectMapper.addMixIn(TestClass::class.java, TestClassMixIn::class.java)\r\n        objectMapper.injectableValues = InjectableValues.Std().addValue(\"java.lang.String\", \"injected\")\r\n\r\n        val test = TestClass(\"value1\", \"value2_ignored\")\r\n        val asString = objectMapper.writeValueAsString(test)\r\n        println(asString)\r\n\r\n        val readValue = objectMapper.readValue(asString, TestClass::class.java)\r\n        Assertions.assertThat(readValue).isNotNull\r\n        Assertions.assertThat(readValue.someInjectedValue).isEqualTo(\"injected\")\r\n        Assertions.assertThat(readValue.someValue).isEqualTo(\"value1\")\r\n    }\r\n\r\n    data class TestClass(val someValue: String, val someInjectedValue: String)\r\n    abstract class TestClassMixIn(@JsonIgnore @JacksonInject val someInjectedValue: String)    \r\n}\r\n````\r\nthis will fail with the following error message:\r\n\r\n````\r\ncom.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class JacksonKotlinTests$TestClass] value failed for JSON property someInjectedValue due to missing (therefore NULL) value for creator parameter someInjectedValue which is a non-nullable type\r\n at [Source: (String)\"{\"someValue\":\"value1\"}\"; line: 1, column: 22] (through reference chain: JacksonKotlinTests$TestClass[\"someInjectedValue\"])\r\n\r\n\tat com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:112)\r\n\tat com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)\r\n````\r\nThis is because `someInjectedValue` is not allowed to be null and the ìnjectableValues` are not used dispite the mixin.\r\n\r\n**Expected behavior**\r\n\r\nInjectableValues should be used even if the @JacksonInject annotation is on the mixin. \r\n\r\n**Versions**\r\nKotlin: 1.4.30\r\nJackson-module-kotlin: 2.11.4\r\nJackson-databind: 2.11.4\r\n\r\n**Additional context**\r\n\r\nReason I want to do that is to keep my classes without Jackson annotation in my domain module. In Infrastructure module I use mixin to deal with serialization/deserialization of domain objects. I use @JacksonInject to inject some spring services into the domain objects.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/428/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/428/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/421","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/421/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/421/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/421/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/421","id":821099157,"node_id":"MDU6SXNzdWU4MjEwOTkxNTc=","number":421,"title":"Missing \"exports\" statement","user":{"login":"adrianw3","id":16455348,"node_id":"MDQ6VXNlcjE2NDU1MzQ4","avatar_url":"https://avatars.githubusercontent.com/u/16455348?v=4","gravatar_id":"","url":"https://api.github.com/users/adrianw3","html_url":"https://github.com/adrianw3","followers_url":"https://api.github.com/users/adrianw3/followers","following_url":"https://api.github.com/users/adrianw3/following{/other_user}","gists_url":"https://api.github.com/users/adrianw3/gists{/gist_id}","starred_url":"https://api.github.com/users/adrianw3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adrianw3/subscriptions","organizations_url":"https://api.github.com/users/adrianw3/orgs","repos_url":"https://api.github.com/users/adrianw3/repos","events_url":"https://api.github.com/users/adrianw3/events{/privacy}","received_events_url":"https://api.github.com/users/adrianw3/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-03T13:14:47Z","updated_at":"2021-03-03T19:02:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Describe the bug\r\nI can't add the kotlin module to an ObjectMapper due to the following error: `Symbol is declared in module 'com.fasterxml.jackson.kotlin' which does not export package 'com.fasterxml.jackson.module.kotlin'`\r\n\r\nModule-info has the following entries\r\n```\r\nmodule com.fasterxml.jackson.kotlin {\r\n    requires java.desktop;\r\n    requires kotlin.stdlib;\r\n    requires com.fasterxml.jackson.annotation;\r\n    requires com.fasterxml.jackson.databind;\r\n\r\n    provides com.fasterxml.jackson.databind.Module with com.fasterxml.jackson.module.kotlin.KotlinModule;\r\n}\r\n```\r\n\r\nAs a result, it is not possible to use the kotlin module in the way described in README. \r\n```\r\n// With Jackson 2.12 and later\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\n...\r\nval mapper = jacksonObjectMapper()\r\n// or\r\nimport com.fasterxml.jackson.module.kotlin.registerKotlinModule\r\n...\r\nval mapper = ObjectMapper().registerKotlinModule()\r\n// or\r\nimport com.fasterxml.jackson.module.kotlin.jsonMapper\r\nimport com.fasterxml.jackson.module.kotlin.kotlinModule\r\n...\r\nval mapper = jsonMapper {\r\n  addModule(kotlinModule())\r\n}\r\n```\r\n\r\n**To Reproduce**\r\nCreate java module, and try to use one of the methods described in README to add kotlin module.\r\n\r\n**Expected behavior**\r\nI should be able to use one of the methods described in README. \r\n\r\n**Versions**\r\nJackson-module-kotlin: 2.12.1\r\nJackson-databind: 2.12.1\r\n\r\n**Additional context**\r\nIt works if you use a classpath. In the case of java modules, it would throw an error because of the lack of exports. The only way to use it is to load Kotlin Module by ServiceLoader. I would strongly suggest adding necessary exports since SeviceLoader is not widely used and README is misleading. \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/421/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/421/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/415","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/415/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/415/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/415/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/415","id":812496829,"node_id":"MDU6SXNzdWU4MTI0OTY4Mjk=","number":415,"title":"XML: Support Kotlin's `object { ... }` as a List wrapper","user":{"login":"OndraZizka","id":644904,"node_id":"MDQ6VXNlcjY0NDkwNA==","avatar_url":"https://avatars.githubusercontent.com/u/644904?v=4","gravatar_id":"","url":"https://api.github.com/users/OndraZizka","html_url":"https://github.com/OndraZizka","followers_url":"https://api.github.com/users/OndraZizka/followers","following_url":"https://api.github.com/users/OndraZizka/following{/other_user}","gists_url":"https://api.github.com/users/OndraZizka/gists{/gist_id}","starred_url":"https://api.github.com/users/OndraZizka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OndraZizka/subscriptions","organizations_url":"https://api.github.com/users/OndraZizka/orgs","repos_url":"https://api.github.com/users/OndraZizka/repos","events_url":"https://api.github.com/users/OndraZizka/events{/privacy}","received_events_url":"https://api.github.com/users/OndraZizka/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-10T17:37:06Z","updated_at":"2021-02-20T03:02:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nWith Spring REST, I want to have this XML:\r\n\r\n    <transactions>\r\n         <transaction> ... </transaction>\r\n     <transactions>\r\n\r\nFor that, I hoped I could use some very simple construct, like this:\r\n\r\n    object { @XmlWrapper val transactions = transactions }\r\n\r\nBut as you can see, I tried a lot, but the closest I got is `<><transactions></>`\r\nwhich is, I assume, due to an empty class name Jackson sees.\r\n\r\n    ): ResponseEntity<*> {\r\n        val transactions = loadTransactions(filterType, filterValue)\r\n\r\n        val contentType = when(outputFormat) {\r\n            OutputFormat.JSON -> MediaType.APPLICATION_JSON\r\n            OutputFormat.XML -> MediaType.APPLICATION_XML\r\n        }\r\n        val body = when(outputFormat) {\r\n            OutputFormat.JSON -> transactions\r\n            //OutputFormat.XML -> transactions // <EmptyList/>\r\n            //OutputFormat.XML -> mapOf(\"transactions\" to transactions) // <SingletonMap/>\r\n            //OutputFormat.XML -> object { @field:JacksonXmlElementWrapper(name = \"transactions\") @field:XmlElementWrapper(name = \"transactions\") val transactions = transactions } // <><transactions/></>\r\n            //OutputFormat.XML -> object { @XmlElement(name = \"transactions\") val transactions = transactions } // <><transactions/></>\r\n            //OutputFormat.XML -> object { @field:XmlElement(name = \"transactions\") val transactions = transactions } // <><transactions/></>\r\n            OutputFormat.XML -> transactions(transactions) // <TxWrapper> <transactions/> </TxWrapper>\r\n        }\r\n        return ResponseEntity.status(HttpStatus.OK).contentType(contentType).body(body)\r\n\r\n**Describe the solution you'd like**\r\nMake this:\r\n\r\n    object { @field:XmlElementWrapper(name = \"transactions\") val transactions: List<Transaction> = transactions } /\r\n\r\nproduce this:\r\n\r\n    <transactions>\r\n         <transaction> ... </transaction>\r\n         <transaction> ... </transaction>\r\n     <transactions>\r\n\r\n\r\n**Usage example**\r\nSee above - brief syntax for returning a List<...> from an endpoint.\r\n\r\n**Additional context**\r\n\r\nI didn't even manage to persuade Jackson to name the wrapper as I want using annotations.\r\nIt insisted on using the class name. So I had to rename it to `class transactions`.  \r\nBut that's a different story.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/415/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/413","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/413/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/413/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/413/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/413","id":798273817,"node_id":"MDU6SXNzdWU3OTgyNzM4MTc=","number":413,"title":"[Bug] A data class that has an inline class-typed property can't be deserialized","user":{"login":"izstas","id":436789,"node_id":"MDQ6VXNlcjQzNjc4OQ==","avatar_url":"https://avatars.githubusercontent.com/u/436789?v=4","gravatar_id":"","url":"https://api.github.com/users/izstas","html_url":"https://github.com/izstas","followers_url":"https://api.github.com/users/izstas/followers","following_url":"https://api.github.com/users/izstas/following{/other_user}","gists_url":"https://api.github.com/users/izstas/gists{/gist_id}","starred_url":"https://api.github.com/users/izstas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/izstas/subscriptions","organizations_url":"https://api.github.com/users/izstas/orgs","repos_url":"https://api.github.com/users/izstas/repos","events_url":"https://api.github.com/users/izstas/events{/privacy}","received_events_url":"https://api.github.com/users/izstas/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-01T11:48:18Z","updated_at":"2021-04-21T16:21:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nA data class that has an inline class-typed property can't be deserialized.\r\n\r\n**To Reproduce**\r\nRun:\r\n```kotlin\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\n\r\ninline class MyInlineClass(val i: Int)\r\n\r\ndata class MyDataClass(val i: MyInlineClass)\r\n\r\nfun main() {\r\n    val mapper = jacksonObjectMapper()\r\n    val json = mapper.writeValueAsString(MyDataClass(MyInlineClass(1)))\r\n    println(json)\r\n    val deserialized = mapper.readValue<MyDataClass>(json)\r\n    println(deserialized)\r\n}\r\n```\r\n\r\n**Expected behavior**\r\nThe JSON is properly deserialized.\r\n\r\n**Actual behavior**\r\n```\r\n{\"i\":1}\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `MyDataClass` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: (String)\"{\"i\":1}\"; line: 1, column: 2]\r\n```\r\n\r\nOr, if there are multiple fields in the data class:\r\n```\r\n{\"i\":1,\"j\":1}\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `MyDataClass` (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\r\n at [Source: (String)\"{\"i\":1,\"j\":1}\"; line: 1, column: 2]\r\n```\r\n\r\n**Versions**\r\nKotlin: 1.4.21\r\nJackson-module-kotlin: 2.12.1\r\nJackson-databind: 2.12.1\r\n\r\n**Additional context**\r\nI've tried to dig through this and discovered that adding an inline class-typed property causes some constructor changes - the compiled data class has two constructors:\r\n\r\n```\r\n  // access flags 0x2\r\n  private <init>(I)V\r\n\r\n  // access flags 0x1001\r\n  public synthetic <init>(ILkotlin/jvm/internal/DefaultConstructorMarker;)V\r\n```\r\n\r\nThe second one is ignored by Jackson because it's synthetic. The first one is correctly discovered, however, that constructor is invisible through Kotlin reflection, so Jackson-module-kotlin fails to discover the parameter names and is not able to use that constructor.\r\n\r\nThe problem **can not** be worked around by using `@JsonProperty` because Kotlin compiler places it onto the parameters of the synthetic constructor, and no annotations appear on the private constructor.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/413/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/413/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/412","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/412/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/412/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/412/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/412","id":796792823,"node_id":"MDU6SXNzdWU3OTY3OTI4MjM=","number":412,"title":"Deserialization of Map<Enum, Int> fails with generic implementation, works with concrete? (Kotlin)","user":{"login":"stefanhendriks","id":1332066,"node_id":"MDQ6VXNlcjEzMzIwNjY=","avatar_url":"https://avatars.githubusercontent.com/u/1332066?v=4","gravatar_id":"","url":"https://api.github.com/users/stefanhendriks","html_url":"https://github.com/stefanhendriks","followers_url":"https://api.github.com/users/stefanhendriks/followers","following_url":"https://api.github.com/users/stefanhendriks/following{/other_user}","gists_url":"https://api.github.com/users/stefanhendriks/gists{/gist_id}","starred_url":"https://api.github.com/users/stefanhendriks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stefanhendriks/subscriptions","organizations_url":"https://api.github.com/users/stefanhendriks/orgs","repos_url":"https://api.github.com/users/stefanhendriks/repos","events_url":"https://api.github.com/users/stefanhendriks/events{/privacy}","received_events_url":"https://api.github.com/users/stefanhendriks/received_events","type":"User","site_admin":false},"labels":[{"id":125028040,"node_id":"MDU6TGFiZWwxMjUwMjgwNDA=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/question","name":"question","color":"cc317c","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-01-29T11:08:36Z","updated_at":"2021-02-19T11:26:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I use:\r\n\r\n```\r\nkotlin: 1.4.10\r\ncom.fasterxml.jackson.core:jackson-annotations:2.10.1\r\ncom.fasterxml.jackson.core:jackson-databind:2.10.1\r\ncom.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.10.1\r\n(spring-boot: 2.4.0)\r\n```\r\n\r\nI try to deserialize a map which has keys which should be an `enum` type (`LuggageType`). \r\n\r\nWhen writing a test, it works as expected:\r\n\r\n```\r\n@Test\r\n    fun deserializeAsMapWithEnumKey() {\r\n        val mapper = ObjectMapper()\r\n        mapper.registerModule(KotlinModule())\r\n        \r\n        // create JSON first:\r\n        var theMap: Map<LuggageType, Int> = mapOf(LuggageType.LARGE to 3, LuggageType.SMALL to 2)\r\n\r\n        var json = mapper.writeValueAsString(theMap)\r\n        System.out.println(json) // {\"LARGE\":3,\"SMALL\":2}\r\n        \r\n        // Now read the JSON:\r\n        val typeRef: TypeReference<HashMap<LuggageType, Int>> = object : TypeReference<HashMap<LuggageType, Int>>() {}\r\n        val mapRead = mapper.readValue(json, typeRef)\r\n\r\n        System.out.println(mapRead) // {LARGE=3, SMALL=2}\r\n        \r\n        Assert.assertEquals(2, mapRead.keys.size)\r\n        // Check enums are read\r\n        Assertions.assertThat(mapRead.keys).contains(LuggageType.SMALL, LuggageType.LARGE)\r\n    }\r\n```\r\n\r\nHowever, we use a util class (called `SwissKnife`) with some generics stuff in it. Which does:\r\n\r\n```\r\nobject SwissKnife {\r\n\r\n// .... bunch of more stuff ....\r\n\r\n    private val objectMapper: ObjectMapper = ObjectMapper().registerModule(KotlinModule())\r\n\r\n// .... bunch of more stuff ....\r\n\r\n    @Throws(JsonProcessingException::class)\r\n    fun <T> toJson(obj: T): String {\r\n        return objectMapper.writeValueAsString(obj)\r\n    }\r\n\r\n    @Throws(JsonProcessingException::class, JsonMappingException::class)\r\n    fun <K, V> getJsonValuesAsMapFriendly(jsonData: String?): Map<K, V> {\r\n        if (StringUtils.isEmpty(jsonData)) {\r\n            return HashMap<K, V>()\r\n        }\r\n        val typeRef: TypeReference<HashMap<K, V>> = object : TypeReference<HashMap<K, V>>() {}\r\n        return objectMapper.readValue(jsonData, typeRef)\r\n    }\r\n\r\n// .... bunch of more stuff ....\r\n}\r\n```\r\n\r\nThe only real difference is using a `K,V` for the `TypeReference`. Now using that in another test, it seems to fail:\r\n\r\n\r\n```\r\n    @Test\r\n    fun getJsonValuesAsMapFriendly_withEnumAsKey_alongWithJackson() {\r\n        val mapper = ObjectMapper()\r\n        mapper.registerModule(KotlinModule())\r\n\r\n        // create JSON first:\r\n        var theMap: Map<LuggageType, Int> = mapOf(LuggageType.LARGE to 3, LuggageType.SMALL to 2)\r\n\r\n        var json = mapper.writeValueAsString(theMap)\r\n        var swissKnifeJson = SwissKnife.toJson(theMap)\r\n        System.out.println(\"JSON: \" + json) // {\"LARGE\":3,\"SMALL\":2}\r\n        System.out.println(\"SWISSKNIFE: \" + swissKnifeJson)\r\n        Assert.assertEquals(json, swissKnifeJson)\r\n\r\n        // Now read the JSON:\r\n        val typeRef: TypeReference<HashMap<LuggageType, Int>> = object : TypeReference<HashMap<LuggageType, Int>>() {}\r\n        val mapRead = mapper.readValue(json, typeRef)\r\n        System.out.println(\"MAPREAD: \" + mapRead) // {LARGE=3, SMALL=2}\r\n        val swissKnifeMap = SwissKnife.getJsonValuesAsMapFriendly<LuggageType, Int>(swissKnifeJson)\r\n        System.out.println(\"SWISSKNIFE: \" + swissKnifeMap) // {LARGE=3, SMALL=2}\r\n\r\n        Assert.assertEquals(2, swissKnifeMap.keys.size)\r\n        // Check enums are read (FAILS!)\r\n        Assertions.assertThat(swissKnifeMap.keys).contains(LuggageType.SMALL, LuggageType.LARGE)\r\n    }\r\n```\r\n\r\nThis test basically is a copy of the first, but *also* calls the SwissKnife versions and compares them. At the end, it simply checks if the map will have 2 enum keys. However, it doesn't, it fails because of:\r\n\r\n```\r\nExpecting ArrayList:\r\n <[\"SMALL\", \"LARGE\"]>\r\nto contain:\r\n <[SMALL, LARGE]>\r\nbut could not find the following element(s):\r\n <[SMALL, LARGE]>\r\n```\r\n\r\nSo it is as if the keys are still *String*. \r\n\r\nFor reference, the `LuggageType` enum is:\r\n\r\n```\r\npackage nl.kaizenbv.trip.model\r\n\r\nimport com.fasterxml.jackson.annotation.JsonCreator\r\nimport com.fasterxml.jackson.annotation.JsonValue\r\n\r\n\r\nenum class LuggageType(@get:JsonValue val code: String) {\r\n\r\n    SMALL(\"SMALL\"),\r\n\r\n    LARGE(\"LARGE\"),\r\n    \r\n    UNKNOWN(\"UNKNOWN\");\r\n    \r\n//    companion object {\r\n//        @JsonCreator(mode=JsonCreator.Mode.DELEGATING) \r\n//        @JvmStatic fun fromString(str: String) =\r\n//                values().firstOrNull { it.toString() == str } ?: UNKNOWN\r\n//    }\r\n}\r\n```\r\n\r\nEven uncommenting the `@JsonCreator` will not make a difference (hence I don't even see it being called!?).\r\n\r\n**Your question**\r\nCan anyone elaborate/explain what is going on? Is this a bug? Or is there something I'm doing wrong?\r\n\r\nI get confused because the only real difference is changing explicit types to generics, then again the calls are the same and the resulting objects seem to be the same. Calling `toString` on the `swissKnifeMap` gives the impression it works, but since the keys are String you wont be able to tell the difference. \r\n\r\nAs you can see, the keys are truely strings:\r\n![image](https://user-images.githubusercontent.com/1332066/106267799-77069280-622a-11eb-9afe-437bbb81d890.png)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/412/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/412/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/400","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/400/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/400/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/400/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/400","id":755533677,"node_id":"MDU6SXNzdWU3NTU1MzM2Nzc=","number":400,"title":"CoercionConfig of LogicalType.EmptyString for Boolean types does not respect KotlinModule default settings","user":{"login":"jacinpoz","id":1674873,"node_id":"MDQ6VXNlcjE2NzQ4NzM=","avatar_url":"https://avatars.githubusercontent.com/u/1674873?v=4","gravatar_id":"","url":"https://api.github.com/users/jacinpoz","html_url":"https://github.com/jacinpoz","followers_url":"https://api.github.com/users/jacinpoz/followers","following_url":"https://api.github.com/users/jacinpoz/following{/other_user}","gists_url":"https://api.github.com/users/jacinpoz/gists{/gist_id}","starred_url":"https://api.github.com/users/jacinpoz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jacinpoz/subscriptions","organizations_url":"https://api.github.com/users/jacinpoz/orgs","repos_url":"https://api.github.com/users/jacinpoz/repos","events_url":"https://api.github.com/users/jacinpoz/events{/privacy}","received_events_url":"https://api.github.com/users/jacinpoz/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-02T19:01:40Z","updated_at":"2020-12-02T19:01:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI have raised this bug in jackson-databind already, but it could require changes here too. In jackson-databind StdDeserializer.java you can find the following Coercion related code:\r\n\r\n```{java}\r\n        final CoercionAction act = _checkFromStringCoercion(ctxt, text,\r\n                LogicalType.Boolean, Boolean.TYPE);\r\n        if (act == CoercionAction.AsNull) {\r\n            _verifyNullForPrimitive(ctxt);\r\n            return false;\r\n        }\r\n        if (act == CoercionAction.AsEmpty) {\r\n            return false;\r\n        }\r\n```\r\nThe problem with automatically assuming the boolean value to be \"false\" is that `KotlinModule` has a setting which allows null values to be automatically translated to property default values. See below:\r\n\r\n```{kotlin}\r\n    val kotlinModule = KotlinModule(nullIsSameAsDefault = true)\r\n```\r\nSo if you have a data class with default values such as this:\r\n\r\n```{kotlin}\r\n    enum class LogLevel {\r\n        TRACE, DEBUG, INFO, WARN, ERROR\r\n    }\r\n\r\n    data class MapperTest(\r\n        val processName: String,\r\n        val logLevel: LogLevel = LogLevel.WARN,\r\n        val datadump: Boolean = true,\r\n        val expiration: Int = 0\r\n    )\r\n```\r\nYou would expect an empty string for the \"datadump\" property to be deserialized to the default value \"true\", but instead it is deserialized to \"false\" because of the coercion logic shown above.\r\n\r\nThis works well with the \"logLevel\" enum property property though. When I pass a null value it is deserialized as the default value, which is `LogLevel.WARN`.\r\n\r\nThe coercion settings for ENUM are set like this and work as expected:\r\n```{kotlin}\r\n            objectMapper.coercionConfigFor(LogicalType.Enum)\r\n                .setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull)\r\n```\r\n\r\nThe coercion settings for Boolean are set like this and *don't work as expected*.\r\n```{kotlin}\r\n            objectMapper.coercionConfigFor(LogicalType.Boolean)\r\n                .setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull)\r\n```\r\n\r\n**Version information**\r\n2.12.0\r\n\r\n**To Reproduce**\r\nYou can reproduce this issue by adding the relevant jackson 2.12.0 dependencies (databind and kotlin module) and running the unit test below:\r\n\r\n```{kotlin}\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.databind.cfg.CoercionAction\r\nimport com.fasterxml.jackson.databind.cfg.CoercionInputShape\r\nimport com.fasterxml.jackson.databind.type.LogicalType\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\nimport org.junit.Test\r\nimport kotlin.test.assertEquals\r\nimport kotlin.test.assertTrue\r\n\r\nclass BooleanCoercionTest{\r\n    enum class LogLevel {\r\n        TRACE, DEBUG, INFO, WARN, ERROR\r\n    }\r\n\r\n    data class MapperTest(\r\n        val processName: String,\r\n        val logLevel: LogLevel = LogLevel.WARN,\r\n        val datadump: Boolean = true,\r\n        val expiration: Int = 0\r\n    )\r\n\r\n    @Test\r\n    fun testBooleanCoercion(){\r\n        val objectMapper = ObjectMapper()\r\n        objectMapper.registerModule(KotlinModule(nullIsSameAsDefault = true))\r\n        objectMapper.coercionConfigFor(LogicalType.Enum)\r\n            .setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull)\r\n        // Coercion to null/empty Boolean\r\n        objectMapper.coercionConfigFor(LogicalType.Boolean)\r\n            .setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull)\r\n        val value = objectMapper.readValue(\"\"\"{\"processName\":\"NAME\", \"logLevel\":\"\", \"datadump\":\"\"}\"\"\",MapperTest::class.java)\r\n        assertEquals(LogLevel.WARN, value.logLevel)\r\n        // Expected the value to be \"true\" but it is \"false\"\r\n        assertTrue(value.datadump)\r\n    }\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/400/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/400/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/399","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/399/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/399/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/399/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/399","id":754460236,"node_id":"MDU6SXNzdWU3NTQ0NjAyMzY=","number":399,"title":"[BUG] ObjectMapper.readValue<T>(...) breaks null safety","user":{"login":"revintec","id":8952734,"node_id":"MDQ6VXNlcjg5NTI3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/8952734?v=4","gravatar_id":"","url":"https://api.github.com/users/revintec","html_url":"https://github.com/revintec","followers_url":"https://api.github.com/users/revintec/followers","following_url":"https://api.github.com/users/revintec/following{/other_user}","gists_url":"https://api.github.com/users/revintec/gists{/gist_id}","starred_url":"https://api.github.com/users/revintec/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/revintec/subscriptions","organizations_url":"https://api.github.com/users/revintec/orgs","repos_url":"https://api.github.com/users/revintec/repos","events_url":"https://api.github.com/users/revintec/events{/privacy}","received_events_url":"https://api.github.com/users/revintec/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-12-01T14:48:10Z","updated_at":"2020-12-19T20:44:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"![image](https://user-images.githubusercontent.com/8952734/100753229-7ae18880-3424-11eb-8cc5-461b58f53798.png)\r\nJackson-module-kotlin version 2.9.7, newer version should experience the same problem\r\n\r\nchanging original source code `inline fun <reified T> ObjectMapper.readValue(content: String): T = readValue(content, jacksonTypeRef<T>())` adds trailing `... as T` would fix the problem, however this way it provides poor exception message\r\n`Exception in thread \"main\" java.lang.NullPointerException: null cannot be cast to non-null type kotlin.Any`\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/399/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/399/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/395","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/395/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/395/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/395/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/395","id":740837448,"node_id":"MDU6SXNzdWU3NDA4Mzc0NDg=","number":395,"title":"JsonTypeInfo + interface = serialization-deserialization problems","user":{"login":"graf8787","id":11409395,"node_id":"MDQ6VXNlcjExNDA5Mzk1","avatar_url":"https://avatars.githubusercontent.com/u/11409395?v=4","gravatar_id":"","url":"https://api.github.com/users/graf8787","html_url":"https://github.com/graf8787","followers_url":"https://api.github.com/users/graf8787/followers","following_url":"https://api.github.com/users/graf8787/following{/other_user}","gists_url":"https://api.github.com/users/graf8787/gists{/gist_id}","starred_url":"https://api.github.com/users/graf8787/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/graf8787/subscriptions","organizations_url":"https://api.github.com/users/graf8787/orgs","repos_url":"https://api.github.com/users/graf8787/repos","events_url":"https://api.github.com/users/graf8787/events{/privacy}","received_events_url":"https://api.github.com/users/graf8787/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-11-11T15:05:12Z","updated_at":"2020-11-12T05:27:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen you trying to serialize or deserialize something tha annotated with JsonTypeInfo, you will get a lot of strange variants of behavior. Especially with collections(part1-4), implementations(part2), T(part3), Any(part4).\r\nI attach 13 tests: 5 works and the others don't.\r\nTests devided by 4 groups that have own problems.\r\n\r\n**To Reproduce**\r\n```kotlin\r\npackage ru.sport24.hub.refresher.message\r\n\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport org.junit.jupiter.api.Assertions\r\nimport org.junit.jupiter.api.Test\r\n\r\nclass BadMappingTest {\r\n\r\n    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\r\n    interface SomeInterface {\r\n        val v : Long\r\n    }\r\n\r\n    data class SomeClass(\r\n        override val v: Long\r\n    ) : SomeInterface\r\n\r\n    data class SomeBox(\r\n        val items: List<SomeInterface>\r\n    )\r\n    private val boxWithInterface = SomeBox(listOf(SomeClass(1)))\r\n\r\n    /*\r\n    PART 1: Interface\r\n    why om doesnt print @class when write list of interfaces?\r\n     */\r\n\r\n    /**\r\n     * {\"items\":[{\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}]}\"\r\n     * will work\r\n     */\r\n    @Test\r\n    fun `boxWithInterface works nice`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithInterface)\r\n        val deserialized = objectMapper.readValue<SomeBox>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithInterface, deserialized)\r\n    }\r\n\r\n    /**\r\n     * [{\"v\":1}]\r\n     * will throw: Missing type id when trying to resolve subtype of [simple type, class ru.sport24.hub.refresher.message.BadMappingTest$SomeInterface]: missing type id property '@class'\r\n    at [Source: (String)\"[{\"v\":1}]\"; line: 1, column: 8] (through reference chain: java.util.ArrayList[0])\r\n     */\r\n    @Test\r\n    fun `boxWithInterface-list doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithInterface.items)\r\n        val deserialized = objectMapper.readValue<List<SomeInterface>>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithInterface.items, deserialized)\r\n    }\r\n\r\n    /**\r\n     * {\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}\r\n     * will work\r\n     */\r\n    @Test\r\n    fun `boxWithInterface-list-item works nice`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithInterface.items.first())\r\n        val deserialized = objectMapper.readValue<SomeInterface>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithInterface.items.first(), deserialized)\r\n    }\r\n\r\n    /*\r\n    PART 2: Class\r\n    why even om need @class when you deserialize implementation?\r\n    or\r\n    why om doesnt print @class when write list of implementations?\r\n     */\r\n\r\n    data class OtherBox(\r\n        val items: List<SomeClass>\r\n    )\r\n    private val boxWithClass = OtherBox(listOf(SomeClass(1)))\r\n\r\n    /**\r\n     * {\"items\":[{\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}]}\"\r\n     * will work\r\n     */\r\n    @Test\r\n    fun `boxWithClass works nice`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithClass)\r\n        val deserialized = objectMapper.readValue<OtherBox>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithClass, deserialized)\r\n    }\r\n\r\n    /**\r\n     * [{\"v\":1}]\r\n     * will throw: Missing type id when trying to resolve subtype of [simple type, class ru.sport24.hub.refresher.message.BadMappingTest$SomeInterface]: missing type id property '@class'\r\n    at [Source: (String)\"[{\"v\":1}]\"; line: 1, column: 8] (through reference chain: java.util.ArrayList[0])\r\n     */\r\n    @Test\r\n    fun `boxWithClass-list doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithClass.items)\r\n        val deserialized = objectMapper.readValue<List<SomeClass>>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithClass.items, deserialized)\r\n    }\r\n\r\n    /**\r\n     * {\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}\r\n     * will work\r\n     */\r\n    @Test\r\n    fun `boxWithClass-list-item works nice`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithClass.items.first())\r\n        val deserialized = objectMapper.readValue<SomeClass>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithClass.items.first(), deserialized)\r\n    }\r\n\r\n    /**\r\n     * {\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}\r\n     * will throw Missing type id when trying to resolve subtype of [simple type, class ru.sport24.hub.refresher.message.BadMappingTest$SomeClass]: missing type id property '@class'\r\n    at [Source: (String)\"{\"v\":1}\"; line: 1, column: 7]\r\n     */\r\n    @Test\r\n    fun `SomeClass without class doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val deserialized = objectMapper.readValue<SomeClass>(\"{\\\"v\\\":1}\")\r\n        Assertions.assertEquals(boxWithClass.items.first(), deserialized)\r\n    }\r\n\r\n    /*\r\n    PART 3: T\r\n    why om dont print @class here? even in \"box-tests\" like om did in part 1,2 and even(!) 4?\r\n    or\r\n    why SomeClass deeds @class?\r\n     */\r\n    data class AlmostOtherBox<T>(\r\n        val items: List<T>\r\n    )\r\n    private val boxWithT = AlmostOtherBox<SomeClass>(listOf(SomeClass(1)))\r\n\r\n    /**\r\n     * {\"items\":[{\"v\":1}]}\"\r\n     * will throw: Missing type id when trying to resolve subtype of [simple type, class ru.sport24.hub.refresher.message.BadMappingTest$SomeClass]: missing type id property '@class' (for POJO property 'items')\r\n    at [Source: (String)\"{\"items\":[{\"v\":1}]}\"; line: 1, column: 17] (through reference chain: ru.sport24.hub.refresher.message.BadMappingTest$AlmostOtherBox[\"items\"]->java.util.ArrayList[0])\r\n     */\r\n    @Test\r\n    fun `boxWithT doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithT)\r\n        val deserialized = objectMapper.readValue<AlmostOtherBox<SomeClass>>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithT, deserialized)\r\n    }\r\n\r\n    /**\r\n     * [{\"v\":1}]\r\n     * will throw: Missing type id when trying to resolve subtype of [simple type, class ru.sport24.hub.refresher.message.BadMappingTest$SomeClass]: missing type id property '@class'\r\n    at [Source: (String)\"[{\"v\":1}]\"; line: 1, column: 8] (through reference chain: java.util.ArrayList[0])\r\n     */\r\n    @Test\r\n    fun `boxWithT-list doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithT.items)\r\n        val deserialized = objectMapper.readValue<List<SomeClass>>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithT.items, deserialized)\r\n    }\r\n\r\n    /**\r\n     * {\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}\r\n     * will work\r\n     */\r\n    @Test\r\n    fun `boxWithT-list-item works nice`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithT.items.first())\r\n        val deserialized = objectMapper.readValue<SomeClass>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithT.items.first(), deserialized)\r\n    }\r\n\r\n    /*\r\n    PART 4: Any\r\n    why om print @class for Any?\r\n    or\r\n    why om doest use @class if om already printed it?\r\n     */\r\n    data class ThirdBox(\r\n        val items: List<Any>\r\n    )\r\n    private val boxWithAny = OtherBox(listOf(SomeClass(1)))\r\n\r\n    /**\r\n     * {\"items\":[{\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClass\",\"v\":1}]}\r\n     * will throw: : expected: <OtherBox(items=[SomeClass(v=1)])> but was: <ThirdBox(items=[{@class=ru.sport24.hub.refresher.message.BadMappingTest$SomeClass, v=1}])>\r\n     */\r\n    @Test\r\n    fun `boxWithAny doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithAny)\r\n        val deserialized = objectMapper.readValue<ThirdBox>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithAny, deserialized)\r\n    }\r\n\r\n    /**\r\n     * [{\"v\":1}]\r\n     * will throw: expected: <[SomeClass(v=1)]> but was: <[{v=1}]>\r\n     */\r\n    @Test\r\n    fun `boxWithAny-list doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithAny.items)\r\n        val deserialized = objectMapper.readValue<List<Any>>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithAny.items, deserialized)\r\n    }\r\n\r\n    /**\r\n     * {\"@class\":\"ru.sport24.hub.refresher.message.BadMappingTest$SomeClazz\",\"v\":1}\r\n     * will throw: expected: <SomeClass(v=1)> but was: <{@class=ru.sport24.hub.refresher.message.BadMappingTest$SomeClass, v=1}>\r\n     */\r\n    @Test\r\n    fun `boxWithAny-list-item doesnt work`() {\r\n        val objectMapper = objectMapper()\r\n        val serialized = objectMapper.writeValueAsString(boxWithAny.items.first())\r\n        val deserialized = objectMapper.readValue<Any>(serialized)\r\n        println(serialized)\r\n        Assertions.assertEquals(boxWithAny.items.first(), deserialized)\r\n    }\r\n\r\n    private fun objectMapper(): ObjectMapper {\r\n        val objectMapper = ObjectMapper()\r\n        objectMapper.registerModule(KotlinModule())\r\n        return objectMapper\r\n    }\r\n\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n1. serialized interface in any part should have @class\r\n2. deserialization of implementation (data class as minimal) shoulnt need @class\r\n3. if @class present - jackson should use it\r\n\r\n**Versions**\r\nKotlin: 1.4.0\r\nJackson-module-kotlin: 2.9.8\r\nJackson-databind: 2.9.8","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/395/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/392","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/392/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/392/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/392/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/392","id":733966750,"node_id":"MDU6SXNzdWU3MzM5NjY3NTA=","number":392,"title":"NonNull Types for Map values can contain null values","user":{"login":"Legion2","id":12752323,"node_id":"MDQ6VXNlcjEyNzUyMzIz","avatar_url":"https://avatars.githubusercontent.com/u/12752323?v=4","gravatar_id":"","url":"https://api.github.com/users/Legion2","html_url":"https://github.com/Legion2","followers_url":"https://api.github.com/users/Legion2/followers","following_url":"https://api.github.com/users/Legion2/following{/other_user}","gists_url":"https://api.github.com/users/Legion2/gists{/gist_id}","starred_url":"https://api.github.com/users/Legion2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Legion2/subscriptions","organizations_url":"https://api.github.com/users/Legion2/orgs","repos_url":"https://api.github.com/users/Legion2/repos","events_url":"https://api.github.com/users/Legion2/events{/privacy}","received_events_url":"https://api.github.com/users/Legion2/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-11-01T13:30:41Z","updated_at":"2020-11-01T13:30:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen deserializing an object into a map of a NonNull value Type, e.g. `Map<String, String>` there should be no null values in the map. But no exception is thrown when deserializing an object which contains null values into such a map, which then contains null values and cause NPEs.\r\n\r\n**To Reproduce**\r\nFollowing test demonstrates the bug:\r\n```kotlin\r\n    @Test\r\n    fun test() {\r\n        val objectMapper = ObjectMapper()\r\n        objectMapper.registerKotlinModule()\r\n        assertThrows<RuntimeException> {\r\n            objectMapper.readValue<Map<String, String>>(\"\"\"\r\n            {\r\n                \"key1\": \"value\",\r\n                \"key2\": null\r\n            }\r\n            \"\"\".trimIndent())\r\n        }\r\n    }\r\n```\r\n\r\n**Expected behavior**\r\nWhen the value type of a map declares to be non nullable there should be no null values at runtime, otherwise it breaks kotlin's Null Safety. Instead an error should be reported when there is a null value.\r\n\r\n**Versions**\r\nKotlin: 1.3.72\r\nJackson-module-kotlin: 2.11.3\r\nJackson-databind: 2.11.3\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/392/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/392/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/390","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/390/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/390/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/390/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/390","id":725422010,"node_id":"MDU6SXNzdWU3MjU0MjIwMTA=","number":390,"title":"Create performance tests for Kotlin module","user":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"assignees":[{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2020-10-20T10:05:01Z","updated_at":"2020-10-20T15:53:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"There is a [set of performance tests for Jackson](https://github.com/FasterXML/jackson-benchmarks) but none of them use the Kotlin module currently.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/390/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/390/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/389","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/389/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/389/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/389/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/389","id":725413702,"node_id":"MDU6SXNzdWU3MjU0MTM3MDI=","number":389,"title":"Replace bits of KotlinNamesAnnotationIntrospector with AccessorNamingStrategy","user":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9","html_url":"https://github.com/FasterXML/jackson-module-kotlin/milestone/9","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9/labels","id":6010995,"node_id":"MDk6TWlsZXN0b25lNjAxMDk5NQ==","number":9,"title":"2.13.0","description":"Issues to be included in release 2.13","creator":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"open_issues":9,"closed_issues":3,"state":"open","created_at":"2020-10-20T09:52:18Z","updated_at":"2021-09-06T17:02:33Z","due_on":"2021-07-01T07:00:00Z","closed_at":null},"comments":0,"created_at":"2020-10-20T09:55:20Z","updated_at":"2020-10-20T09:55:44Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We're doing some things in [KotlinNamesAnnotationIntrospector](https://github.com/FasterXML/jackson-module-kotlin/blob/2.12/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinNamesAnnotationIntrospector.kt) that would be better handled in the recently-introduced [AccessorNamingStrategy](https://github.com/FasterXML/jackson-databind/blob/2.12/src/main/java/com/fasterxml/jackson/databind/introspect/AccessorNamingStrategy.java) as [described in #356](https://github.com/FasterXML/jackson-module-kotlin/pull/383#issuecomment-708627043).","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/389/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/386","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/386/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/386/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/386/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/386","id":721542803,"node_id":"MDU6SXNzdWU3MjE1NDI4MDM=","number":386,"title":"@JsonCreator does not always work with Kotlin","user":{"login":"kostya-lnk-ms","id":12168352,"node_id":"MDQ6VXNlcjEyMTY4MzUy","avatar_url":"https://avatars.githubusercontent.com/u/12168352?v=4","gravatar_id":"","url":"https://api.github.com/users/kostya-lnk-ms","html_url":"https://github.com/kostya-lnk-ms","followers_url":"https://api.github.com/users/kostya-lnk-ms/followers","following_url":"https://api.github.com/users/kostya-lnk-ms/following{/other_user}","gists_url":"https://api.github.com/users/kostya-lnk-ms/gists{/gist_id}","starred_url":"https://api.github.com/users/kostya-lnk-ms/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kostya-lnk-ms/subscriptions","organizations_url":"https://api.github.com/users/kostya-lnk-ms/orgs","repos_url":"https://api.github.com/users/kostya-lnk-ms/repos","events_url":"https://api.github.com/users/kostya-lnk-ms/events{/privacy}","received_events_url":"https://api.github.com/users/kostya-lnk-ms/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-10-14T15:06:09Z","updated_at":"2020-10-14T15:06:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n@JsonCreator does not seem to always work for Kotlin classes\r\n\r\n**To Reproduce**\r\n\r\nimport com.fasterxml.jackson.annotation.JsonAutoDetect\r\nimport com.fasterxml.jackson.annotation.JsonCreator\r\nimport com.fasterxml.jackson.annotation.JsonProperty\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.registerKotlinModule\r\n\r\nopen class BaseClass(val a : Int, str: String)\r\n\r\n@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE,\r\n    getterVisibility = JsonAutoDetect.Visibility.NONE,\r\n    setterVisibility = JsonAutoDetect.Visibility.NONE)\r\nclass KotlinAdapter(aa: Int, str: String) :BaseClass(aa, str) {\r\n    companion object {\r\n        @JvmStatic\r\n        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\r\n        fun create(@JsonProperty(\"int prop\", required = true) ip: Int,\r\n                   @JsonProperty(\"another\", required = true) str: String) :BaseClass {\r\n            return BaseClass(ip, str)\r\n        }\r\n    }\r\n}\r\n\r\nfun main() {\r\n    val om = ObjectMapper().registerKotlinModule()\r\n    val t = om.readValue(\"\"\"\r\n        { \"int prop\": 1, \"another\": \"Hello\" }\r\n    \"\"\".trimIndent(),\r\n            KotlinAdapter::class.java\r\n    )\r\n}\r\n\r\nThrows\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Invalid definition for property `int prop` (of type `org.example.KotlinAdapter`): Could not find creator property with name 'int prop' (known Creator properties: [aa, str])\r\n at [Source: (String)\"{ \"int prop\": 1, \"another\": \"Hello\" }\"; line: 1, column: 1]\r\n\tat com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:62)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportBadPropertyDefinition(DeserializationContext.java:1610)\r\n\r\n**Expected behavior**\r\nIt should deserialize using for properties specified by the @JsonCreator\r\nThe above example, when a base class is defined in Java works.\r\n\r\n**Versions**\r\nKotlin: 1.4\r\nJackson-module-kotlin: 2.11.3\r\nJackson-databind: 2.11.3\r\n\r\n**Additional context**\r\nThe above example is an attempt to create a \"view\" class that maps properties of another class without the need to tune the ObjectMapper and change the original class\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/386/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/386/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/382","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/382/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/382/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/382/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/382","id":720109501,"node_id":"MDU6SXNzdWU3MjAxMDk1MDE=","number":382,"title":"Data class could not deserialise properly","user":{"login":"sijinhe","id":6106343,"node_id":"MDQ6VXNlcjYxMDYzNDM=","avatar_url":"https://avatars.githubusercontent.com/u/6106343?v=4","gravatar_id":"","url":"https://api.github.com/users/sijinhe","html_url":"https://github.com/sijinhe","followers_url":"https://api.github.com/users/sijinhe/followers","following_url":"https://api.github.com/users/sijinhe/following{/other_user}","gists_url":"https://api.github.com/users/sijinhe/gists{/gist_id}","starred_url":"https://api.github.com/users/sijinhe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijinhe/subscriptions","organizations_url":"https://api.github.com/users/sijinhe/orgs","repos_url":"https://api.github.com/users/sijinhe/repos","events_url":"https://api.github.com/users/sijinhe/events{/privacy}","received_events_url":"https://api.github.com/users/sijinhe/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-10-13T10:43:47Z","updated_at":"2020-10-13T10:43:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\ndata class Metadata(val metadata: Map<String, MetadataFieldProperty>?) : HashMap<String, MetadataFieldProperty>(metadata\r\n        ?: HashMap())\r\n\r\ndata class MetadataFieldProperty(val type: String, val value: String)\r\n\r\nI have two data classes, when Metadata is deserialised, the metadata field becomes null, and could not deserialise the Map<String, MetadataFieldProperty>\r\n\r\n**To Reproduce**\r\nTest case or steps to reproduce the behavior or.\r\n\r\n// in command.kt\r\ndata class UpdateVersionMetadataCommand(\r\n        @TargetAggregateIdentifier val id: VersionId,\r\n        val metadata: Metadata\r\n)\r\n\r\n    @Test\r\n    public void jacksonTest() throws IOException {\r\n        HashMap<String, MetadataFieldProperty> metadata = new HashMap<>();\r\n        metadata.put(\"keyOne\", new MetadataFieldProperty(\"metadataFieldValueOne\", \"string\"));\r\n        UpdateVersionMetadataCommand updateVersionSimpleMetadataCommand = new UpdateVersionMetadataCommand(\r\n                new VersionId(\"23234\"),\r\n                new Metadata(metadata)\r\n        );\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        objectMapper.registerModule(new KotlinModule());\r\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n        objectMapper.writeValue(byteArrayOutputStream, updateVersionSimpleMetadataCommand);\r\n        String serializedCommand = byteArrayOutputStream.toString();\r\n        UpdateVersionMetadataCommand newCommand = objectMapper.readValue(serializedCommand, UpdateVersionMetadataCommand.class);\r\n        System.out.println(\"newCommand = \" + newCommand.toString());\r\n    }\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nIt should be able to deserialise rather than null\r\n\r\n\r\n**Versions**\r\nKotlin:\r\nJackson-module-kotlin: 2.11.3\r\nJackson-databind: \r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\r\nBy removing data from data class Metadata(val metadata: Map<String, MetadataFieldProperty>?) : HashMap<String, MetadataFieldProperty>(metadata\r\n        ?: HashMap())\r\n\r\nIt will work. There must be the serialisation problem in kotlin which cause by the nested class in kotlin.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/382/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/382/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/378","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/378/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/378/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/378/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/378","id":712039983,"node_id":"MDU6SXNzdWU3MTIwMzk5ODM=","number":378,"title":"MismatchedInputException: No Object Id found for an instance of","user":{"login":"veniaminM","id":25803576,"node_id":"MDQ6VXNlcjI1ODAzNTc2","avatar_url":"https://avatars.githubusercontent.com/u/25803576?v=4","gravatar_id":"","url":"https://api.github.com/users/veniaminM","html_url":"https://github.com/veniaminM","followers_url":"https://api.github.com/users/veniaminM/followers","following_url":"https://api.github.com/users/veniaminM/following{/other_user}","gists_url":"https://api.github.com/users/veniaminM/gists{/gist_id}","starred_url":"https://api.github.com/users/veniaminM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/veniaminM/subscriptions","organizations_url":"https://api.github.com/users/veniaminM/orgs","repos_url":"https://api.github.com/users/veniaminM/repos","events_url":"https://api.github.com/users/veniaminM/events{/privacy}","received_events_url":"https://api.github.com/users/veniaminM/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-09-30T15:16:55Z","updated_at":"2020-10-20T10:11:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Bug description**\r\nWhen I pass no value for an ID field with default value I get an exception:\r\n\"com.fasterxml.jackson.databind.exc.MismatchedInputException: No Object Id found for an instance of\"\r\nwhereas *com.fasterxml.jackson.databind.ObjectMapper* sets default value.\r\n\r\n**To Reproduce**\r\n```\r\npackage testSuite\r\n\r\nimport com.fasterxml.jackson.annotation.JsonIdentityInfo\r\nimport com.fasterxml.jackson.annotation.ObjectIdGenerators\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport org.junit.Test\r\n\r\nclass ObjectId {\r\n\r\n  @JsonIdentityInfo(property = \"id\", generator = ObjectIdGenerators.PropertyGenerator::class)\r\n  class MyStateObject(\r\n    var id: String = \"0\",\r\n    var name: String? = null,\r\n    var description: String? = null\r\n  )\r\n\r\n  @Test\r\n  fun readJson() {\r\n    val mapperDataBind = ObjectMapper()\r\n    val stateDataBind1 = mapperDataBind.readValue(\"{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"abc\\\"}\", MyStateObject::class.java)\r\n    assert(stateDataBind1.id == \"1\")\r\n    val stateDataBind2 = mapperDataBind.readValue(\"{\\\"name\\\":\\\"abc\\\"}\", MyStateObject::class.java)\r\n    assert(stateDataBind2.id == \"0\")\r\n\r\n\r\n    val mapperModule = jacksonObjectMapper()\r\n    val stateModule1 = mapperModule.readValue(\"{\\\"id\\\":\\\"1\\\",\\\"name\\\":\\\"abc\\\"}\", MyStateObject::class.java)\r\n    assert(stateModule1.id == \"1\")\r\n    val stateModule2 = mapperModule.readValue(\"{\\\"name\\\":\\\"abc\\\"}\", MyStateObject::class.java) // here I get an exception\r\n    assert(stateModule2.id == \"0\")\r\n  }\r\n}\r\n```\r\n\r\n**Expected behavior**\r\n- Not to get an exception.\r\n- Default value has set.\r\n\r\n**Versions**\r\nKotlin: 1.3.72\r\nJackson-module-kotlin: 2.9.9\r\nJackson-databind: 2.9.9\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/378/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/378/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/373","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/373/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/373/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/373/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/373","id":705095944,"node_id":"MDU6SXNzdWU3MDUwOTU5NDQ=","number":373,"title":"NonNull enum property has null value","user":{"login":"rafalbednarczuk","id":14034293,"node_id":"MDQ6VXNlcjE0MDM0Mjkz","avatar_url":"https://avatars.githubusercontent.com/u/14034293?v=4","gravatar_id":"","url":"https://api.github.com/users/rafalbednarczuk","html_url":"https://github.com/rafalbednarczuk","followers_url":"https://api.github.com/users/rafalbednarczuk/followers","following_url":"https://api.github.com/users/rafalbednarczuk/following{/other_user}","gists_url":"https://api.github.com/users/rafalbednarczuk/gists{/gist_id}","starred_url":"https://api.github.com/users/rafalbednarczuk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rafalbednarczuk/subscriptions","organizations_url":"https://api.github.com/users/rafalbednarczuk/orgs","repos_url":"https://api.github.com/users/rafalbednarczuk/repos","events_url":"https://api.github.com/users/rafalbednarczuk/events{/privacy}","received_events_url":"https://api.github.com/users/rafalbednarczuk/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"assignees":[{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9","html_url":"https://github.com/FasterXML/jackson-module-kotlin/milestone/9","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/milestones/9/labels","id":6010995,"node_id":"MDk6TWlsZXN0b25lNjAxMDk5NQ==","number":9,"title":"2.13.0","description":"Issues to be included in release 2.13","creator":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"open_issues":9,"closed_issues":3,"state":"open","created_at":"2020-10-20T09:52:18Z","updated_at":"2021-09-06T17:02:33Z","due_on":"2021-07-01T07:00:00Z","closed_at":null},"comments":14,"created_at":"2020-09-20T11:47:56Z","updated_at":"2021-05-13T20:45:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nDeserializing \"null\" string as non-null enum gives null value.\r\n\r\n**To Reproduce**\r\n```\r\nenum class SocialMediaPlatform {INSTAGRAM, FACEBOOK, YOUTUBE, TWITCH}\r\nfun main() {\r\n    val json = \"null\"\r\n    val enum  : SocialMediaPlatform = ObjectMapper().readValue(json)\r\n    println(enum == null)\r\n}\r\n```\r\nthis snippet prints `true`\r\n\r\n**Expected behavior**\r\nSnippet should throw exception\r\n\r\n**Versions**\r\nKotlin: 1.3.72\r\nJackson-module-kotlin: 2.11.2\r\nJackson-databind: 2.11.0\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/373/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/373/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/368","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/368/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/368/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/368/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/368","id":698821369,"node_id":"MDU6SXNzdWU2OTg4MjEzNjk=","number":368,"title":"Change the Sequence serializer to not load elements into memory","user":{"login":"juan-palacios","id":8434418,"node_id":"MDQ6VXNlcjg0MzQ0MTg=","avatar_url":"https://avatars.githubusercontent.com/u/8434418?v=4","gravatar_id":"","url":"https://api.github.com/users/juan-palacios","html_url":"https://github.com/juan-palacios","followers_url":"https://api.github.com/users/juan-palacios/followers","following_url":"https://api.github.com/users/juan-palacios/following{/other_user}","gists_url":"https://api.github.com/users/juan-palacios/gists{/gist_id}","starred_url":"https://api.github.com/users/juan-palacios/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/juan-palacios/subscriptions","organizations_url":"https://api.github.com/users/juan-palacios/orgs","repos_url":"https://api.github.com/users/juan-palacios/repos","events_url":"https://api.github.com/users/juan-palacios/events{/privacy}","received_events_url":"https://api.github.com/users/juan-palacios/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-09-11T04:20:47Z","updated_at":"2020-10-20T10:11:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Use case**\r\nThe current implementation of the `Sequence` serializer calls `toList` on the sequence which effectively loads all elements and dumps them into an ArrayList. This doesn't work well with lazy loading sequences which are meant to prevent loading too many items into memory.\r\n\r\n**Describe the solution you'd like**\r\nChange the `SequenceSerializer` to iterate through the items in the Sequence\r\n\r\n**Describe alternatives you've considered**\r\nCalling `asIterable()` on the sequence and using the `IterableSerializer`\r\n\r\n**Additional context**\r\nUsing the `IterableSerializer` means that if `WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED` is enabled then the `Sequence` will produce the first item twice. In a \"lazy\" `Sequence` this could have different impacts based on the cost of calculating that first page.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/368/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/368/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/365","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/365/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/365/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/365/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/365","id":690223781,"node_id":"MDU6SXNzdWU2OTAyMjM3ODE=","number":365,"title":"@JsonDeserialise(contentAs=...) does not seem to work for maps ","user":{"login":"gerob311","id":8335312,"node_id":"MDQ6VXNlcjgzMzUzMTI=","avatar_url":"https://avatars.githubusercontent.com/u/8335312?v=4","gravatar_id":"","url":"https://api.github.com/users/gerob311","html_url":"https://github.com/gerob311","followers_url":"https://api.github.com/users/gerob311/followers","following_url":"https://api.github.com/users/gerob311/following{/other_user}","gists_url":"https://api.github.com/users/gerob311/gists{/gist_id}","starred_url":"https://api.github.com/users/gerob311/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gerob311/subscriptions","organizations_url":"https://api.github.com/users/gerob311/orgs","repos_url":"https://api.github.com/users/gerob311/repos","events_url":"https://api.github.com/users/gerob311/events{/privacy}","received_events_url":"https://api.github.com/users/gerob311/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-09-01T03:56:12Z","updated_at":"2020-09-01T15:08:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nIf @JsonDeserialise(contentAs=...) has been declared for a map field, when the content has been deserialised, the value is actually a HashMap. This leads to a runtime exception attempting to access members of the value.\r\n\r\n**Version information**\r\n2.11.2\r\n\r\n**To Reproduce**\r\nDeclarations:\r\n```import com.fasterxml.jackson.module.kotlin.readValue\r\n\r\nobject Parser {\r\n    val mapper: ObjectMapper = ObjectMapper(YAMLFactory()).registerKotlinModule()\r\n        .registerModule(JavaTimeModule())\r\n        .registerModule(nullMapDeserialiserModule)\r\n        .registerModule(SimpleModule().setDeserializerModifier(ValidatingDeserializerModifier()))\r\n        .disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)\r\n        .disable(DeserializationFeature.ACCEPT_FLOAT_AS_INT)\r\n        .enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)\r\n        .enable(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)\r\n        .setSerializationInclusion(JsonInclude.Include.NON_NULL)\r\n\r\n    @Throws(JsonProcessingException::class)\r\n    inline fun <reified T: Any> deserialise(yaml: String): T = mapper.readValue(yaml)\r\n\r\n}\r\n\r\ndata class ListValue (\r\n    val listValueKey: String,\r\n    val someOtherValue: Int\r\n)\r\n\r\ndata class ExpectedValue (\r\n    val expectedValueKey: String,\r\n    val list: List<ListValue>\r\n)\r\n\r\ndata class TestClass (\r\n    val testClassKey: String,\r\n    @field:JsonDeserialize(contentAs = ExpectedValue::class)\r\n    val testMap: Map<String, ExpectedValue>\r\n)\r\n```\r\n\r\nTest case:\r\n```@Test\r\nfun `map parse test`() {\r\n    val testObj: TestClass? = RuleParser.deserialise(\r\n        //language=YAML\r\n        \"\"\"\r\n          testClassKey: the-key\r\n          testMap:\r\n              key1:\r\n                expectedValueKey: subKey1\r\n                list: \r\n                  - listValueKey: someKey1\r\n                    someOtherValue: 5\r\n                  - listValueKey: anotherKey1\r\n                    someOtherValue: 6\r\n              key2:\r\n                expectedValueKey: subKey2\r\n                list: \r\n                  - listValueKey: someKey2\r\n                    someOtherValue: 7\r\n                  - listValueKey: anotherKey2\r\n                    someOtherValue: 8\r\n        \"\"\"\r\n    )\r\n\r\n    assertTrue(testObj is TestClass)\r\n    assertTrue(testObj.testMap is HashMap)\r\n    assertNotNull(testObj.testMap[\"key1\"])\r\n    assertTrue(\r\n            actual = testObj.testMap[\"key1\"] is ExpectedValue,\r\n            message = \"Expected an ExpectedValue, got ${testObj.testMap[\"key1\"]!!::class.simpleName} instead\"\r\n    )\r\n    assertEquals(\r\n        ExpectedValue(\r\n            expectedValueKey = \"subKey1\",\r\n            list = listOf(ListValue(\"someKey1\", 5), ListValue(\"anotherKey1\", 6))\r\n        ),\r\n        testObj.testMap[\"key1\"]\r\n    )\r\n}\r\n\r\n```\r\n\r\n**Expected behavior**\r\nI expect the second last assertion to pass, but it instead fails with the following message:\r\n`org.opentest4j.AssertionFailedError: Expected an ExpectedValue, got HashMap instead`\r\n\r\n**Additional context**\r\nI am unsure if this is an issue with jackson-databind or jackson-module-kotlin. I am also unsure if the `@JsonDeserialize` annotation is needed at all, since deserialising a list without it seems seems to work fine. But I get the same results without the annotation. \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/365/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/365/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/363","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/363/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/363/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/363/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/363","id":685986574,"node_id":"MDU6SXNzdWU2ODU5ODY1NzQ=","number":363,"title":"Documentation: add \"builder\"-style ObjectMapper creation in README","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":2301770104,"node_id":"MDU6TGFiZWwyMzAxNzcwMTA0","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/documentation","name":"documentation","color":"bbeef9","default":true,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-26T04:03:48Z","updated_at":"2020-08-26T04:04:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"With 2.10 jackson-databind has added `JsonMapper.builder()...` style construction for `ObjectMapper`s. This will become the only way to construct mappers in 3.0.\r\nIt would be good to add an example in README as alternative to older direct `ObjectMapper` instantiation, module registration, to help users transition to the new style over time.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/363/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/363/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/359","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/359/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/359/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/359/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/359","id":681840800,"node_id":"MDU6SXNzdWU2ODE4NDA4MDA=","number":359,"title":"Deserialization fails with 'Unrecognized field ...' for a boolean property of a class with a super class with a matching boolean property starting with 'is'","user":{"login":"AntipovAndrey","id":23316154,"node_id":"MDQ6VXNlcjIzMzE2MTU0","avatar_url":"https://avatars.githubusercontent.com/u/23316154?v=4","gravatar_id":"","url":"https://api.github.com/users/AntipovAndrey","html_url":"https://github.com/AntipovAndrey","followers_url":"https://api.github.com/users/AntipovAndrey/followers","following_url":"https://api.github.com/users/AntipovAndrey/following{/other_user}","gists_url":"https://api.github.com/users/AntipovAndrey/gists{/gist_id}","starred_url":"https://api.github.com/users/AntipovAndrey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AntipovAndrey/subscriptions","organizations_url":"https://api.github.com/users/AntipovAndrey/orgs","repos_url":"https://api.github.com/users/AntipovAndrey/repos","events_url":"https://api.github.com/users/AntipovAndrey/events{/privacy}","received_events_url":"https://api.github.com/users/AntipovAndrey/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-19T13:28:16Z","updated_at":"2020-08-19T13:28:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nThe following code works as expected with 2.9.10 version of the module.\r\n\r\n**To Reproduce**\r\n```kotlin\r\nopen class BaseResult(val isSuccess: Boolean)\r\nclass DerivedResult(val success: Boolean) : BaseResult(success)\r\n\r\nfun main() {\r\n    val json = \"\"\"\r\n        {\r\n          \"success\": true\r\n        }\r\n    \"\"\".trimIndent()\r\n\r\n    val mapper = ObjectMapper()\r\n    mapper.registerModule(KotlinModule())\r\n\r\n    assert(mapper.readValue<DerivedResult>(json).success)\r\n}\r\n```\r\n\r\n```\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"success\" (class DerivedResult), not marked as ignorable (one known property: \"isSuccess\"])\r\n at [Source: (String)\"{\r\n  \"success\": true\r\n}\"; line: 3, column: 2] (through reference chain: DerivedResult[\"success\"])\r\n\tat com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:855)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1212)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1604)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperties(BeanDeserializerBase.java:1554)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:511)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1322)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:331)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:164)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4524)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3466)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3449)\r\n\tat SampleKt.main(Sample.kt:21)\r\n```\r\n\r\n**Expected behavior**\r\nNo failure\r\n\r\n**Versions**\r\nKotlin: 1.3.72\r\nJackson-module-kotlin: 2.11.2\r\nJackson-databind: 2.11.2\r\n\r\n**Additional context**\r\nCaused by #80 \r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/359/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/359/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/355","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/355/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/355/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/355/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/355","id":670077782,"node_id":"MDU6SXNzdWU2NzAwNzc3ODI=","number":355,"title":"Jackson doesn't see companion object @JsonCreators unles they also have @JvmStatic","user":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-07-31T18:09:16Z","updated_at":"2021-02-28T19:51:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nJackson doesn't see builder methods in a companion object unless they are annotate with `@JvmStatic`.\r\n\r\n**To Reproduce**\r\nPR with repro test https://github.com/FasterXML/jackson-module-kotlin/pull/354\r\n\r\n**Expected behavior**\r\nJackson should find `@JsonCreator`-annotated methods on companion objects.\r\n\r\n**Versions**\r\nKotlin:\r\nJackson-module-kotlin: 2.11.2\r\nJackson-databind: 2.11.2","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/355/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/355/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/353","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/353/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/353/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/353/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/353","id":660048588,"node_id":"MDU6SXNzdWU2NjAwNDg1ODg=","number":353,"title":"@JsonProperty is being ignored when property name (in camelCase notation) starts with a single letter","user":{"login":"fragonib","id":3868431,"node_id":"MDQ6VXNlcjM4Njg0MzE=","avatar_url":"https://avatars.githubusercontent.com/u/3868431?v=4","gravatar_id":"","url":"https://api.github.com/users/fragonib","html_url":"https://github.com/fragonib","followers_url":"https://api.github.com/users/fragonib/followers","following_url":"https://api.github.com/users/fragonib/following{/other_user}","gists_url":"https://api.github.com/users/fragonib/gists{/gist_id}","starred_url":"https://api.github.com/users/fragonib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fragonib/subscriptions","organizations_url":"https://api.github.com/users/fragonib/orgs","repos_url":"https://api.github.com/users/fragonib/repos","events_url":"https://api.github.com/users/fragonib/events{/privacy}","received_events_url":"https://api.github.com/users/fragonib/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-07-18T09:58:00Z","updated_at":"2020-07-24T14:36:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nJackson `@JsonProperty` annotation is being ignored when property name is in _camelCase_ and first word consists in a single letter. \r\n\r\n**To Reproduce**\r\nHere is an example with two properties of same type but different name. Kotlin compiler places `@JsonProperty` on same place: constructor param. However, only `originalName` property name is replaced but `aName` is not.\r\n\r\n```kotlin\r\nclass JsonAnnotationTest {\r\n\r\n    private val mapper = ObjectMapper().registerModule(KotlinModule())\r\n\r\n    @Test\r\n    fun `JsonProperty annotation test`() {\r\n        assertThat(mapper.writeValueAsString(EntityWithJacksonAnnotation()))\r\n                .isEqualTo(\"\"\"{\"changedName1\":\"value\",\"changedName2\":\"value\"}\"\"\")\r\n    }\r\n\r\n}\r\n\r\ndata class EntityWithJacksonAnnotation(\r\n\r\n        @JsonProperty(\"changedName1\")\r\n        val originalName: String? = \"value\",\r\n\r\n        @JsonProperty(\"changedName2\")\r\n        val aName: String? = \"value\"\r\n\r\n)\r\n```\r\n\r\n**Expected behavior**\r\n```\r\nExpected :{\"changedName1\":\"value\",\"changedName2\":\"value\"}\r\nActual   :{\"changedName1\":\"value\",\"aname\":\"value\"}\r\n```\r\n\r\n**Versions**\r\nKotlin: 1.3\r\nJackson-module-kotlin: 2.11.1\r\nJackson-databind: 2.11.1","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/353/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/348","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/348/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/348/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/348/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/348","id":632098691,"node_id":"MDU6SXNzdWU2MzIwOTg2OTE=","number":348,"title":"Using a custom Annotator Introspector -- It doesn't seem like this is supported?","user":{"login":"tyrantkhan","id":107844,"node_id":"MDQ6VXNlcjEwNzg0NA==","avatar_url":"https://avatars.githubusercontent.com/u/107844?v=4","gravatar_id":"","url":"https://api.github.com/users/tyrantkhan","html_url":"https://github.com/tyrantkhan","followers_url":"https://api.github.com/users/tyrantkhan/followers","following_url":"https://api.github.com/users/tyrantkhan/following{/other_user}","gists_url":"https://api.github.com/users/tyrantkhan/gists{/gist_id}","starred_url":"https://api.github.com/users/tyrantkhan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tyrantkhan/subscriptions","organizations_url":"https://api.github.com/users/tyrantkhan/orgs","repos_url":"https://api.github.com/users/tyrantkhan/repos","events_url":"https://api.github.com/users/tyrantkhan/events{/privacy}","received_events_url":"https://api.github.com/users/tyrantkhan/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2020-06-06T00:45:30Z","updated_at":"2020-06-09T18:30:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Use case**\r\nHello -- Not sure if a bug or if i'm doing something wrong:\r\n\r\nI've created a gist to repro the issue I have you can see it here:\r\n\r\nhttps://gist.github.com/tyrantkhan/e31ef545593e0998140133115b1b4c6e\r\n\r\nBasically need to do this because I need to be able to set JsonProperty or JsonAlias in a dynamic fashion. A field in my data class (average) could be \"f_average\" or \"t_average\" based on some other value.  Unfortunately when I use setAnnotationIntrospector() it overrides the introspectors that registerKotlinmodule() sets, so I'm a bit unsure how to proceed. \r\n\r\n**Describe the solution you'd like**\r\nPerhaps the solution would be to allow inserting Introspectors to the kotlinModule via a constructor or setter, but unsure of ramifications of that would be\r\n\r\n**Describe alternatives you've considered**\r\nObviously, I can probably just hard code that variations of \"average\" (f_average, t_average) that I know of today and when that changes, I too can update that, but It feels a bit lacking because the day my json starts including a \"z_average\" then I have to change code in multiple places.\r\n\r\n**Additional context**\r\nThe additional context for my use case is I pass an enum to a REST API. That API augments certain fields to with  a prefix that represents that ENUM. It would be nice if Instead of having to update the Enum and also my JSONAlias list to just only requiring an update to the enum.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/348/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/345","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/345/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/345/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/345/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/345","id":625940322,"node_id":"MDU6SXNzdWU2MjU5NDAzMjI=","number":345,"title":"API compatibility check in pipeline","user":{"login":"viartemev","id":23705041,"node_id":"MDQ6VXNlcjIzNzA1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/23705041?v=4","gravatar_id":"","url":"https://api.github.com/users/viartemev","html_url":"https://github.com/viartemev","followers_url":"https://api.github.com/users/viartemev/followers","following_url":"https://api.github.com/users/viartemev/following{/other_user}","gists_url":"https://api.github.com/users/viartemev/gists{/gist_id}","starred_url":"https://api.github.com/users/viartemev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/viartemev/subscriptions","organizations_url":"https://api.github.com/users/viartemev/orgs","repos_url":"https://api.github.com/users/viartemev/repos","events_url":"https://api.github.com/users/viartemev/events{/privacy}","received_events_url":"https://api.github.com/users/viartemev/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":{"login":"viartemev","id":23705041,"node_id":"MDQ6VXNlcjIzNzA1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/23705041?v=4","gravatar_id":"","url":"https://api.github.com/users/viartemev","html_url":"https://github.com/viartemev","followers_url":"https://api.github.com/users/viartemev/followers","following_url":"https://api.github.com/users/viartemev/following{/other_user}","gists_url":"https://api.github.com/users/viartemev/gists{/gist_id}","starred_url":"https://api.github.com/users/viartemev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/viartemev/subscriptions","organizations_url":"https://api.github.com/users/viartemev/orgs","repos_url":"https://api.github.com/users/viartemev/repos","events_url":"https://api.github.com/users/viartemev/events{/privacy}","received_events_url":"https://api.github.com/users/viartemev/received_events","type":"User","site_admin":false},"assignees":[{"login":"viartemev","id":23705041,"node_id":"MDQ6VXNlcjIzNzA1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/23705041?v=4","gravatar_id":"","url":"https://api.github.com/users/viartemev","html_url":"https://github.com/viartemev","followers_url":"https://api.github.com/users/viartemev/followers","following_url":"https://api.github.com/users/viartemev/following{/other_user}","gists_url":"https://api.github.com/users/viartemev/gists{/gist_id}","starred_url":"https://api.github.com/users/viartemev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/viartemev/subscriptions","organizations_url":"https://api.github.com/users/viartemev/orgs","repos_url":"https://api.github.com/users/viartemev/repos","events_url":"https://api.github.com/users/viartemev/events{/privacy}","received_events_url":"https://api.github.com/users/viartemev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2020-05-27T18:44:47Z","updated_at":"2020-05-31T18:00:10Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Use case**\r\nThere are several issues related to API incompatible changes:\r\n- https://github.com/FasterXML/jackson-module-kotlin/pull/343\r\n- https://github.com/FasterXML/jackson-module-kotlin/issues/178\r\n- https://github.com/FasterXML/jackson-module-kotlin/issues/279\r\n\r\n**Describe the solution you'd like**\r\nA pipeline should check if new version of the library compatible with old versions.\r\nThere is a tool for it: https://github.com/siom79/japicmp\r\n`japicmp` is customizable and could build if a new version is incompatible.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/345/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/377","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/377/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/377/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/377/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/377","id":711538527,"node_id":"MDU6SXNzdWU3MTE1Mzg1Mjc=","number":377,"title":"Kotlin sealed class property is always last despite SORT_PROPERTIES_ALPHABETICALLY","user":{"login":"antonkushchn26","id":44204438,"node_id":"MDQ6VXNlcjQ0MjA0NDM4","avatar_url":"https://avatars.githubusercontent.com/u/44204438?v=4","gravatar_id":"","url":"https://api.github.com/users/antonkushchn26","html_url":"https://github.com/antonkushchn26","followers_url":"https://api.github.com/users/antonkushchn26/followers","following_url":"https://api.github.com/users/antonkushchn26/following{/other_user}","gists_url":"https://api.github.com/users/antonkushchn26/gists{/gist_id}","starred_url":"https://api.github.com/users/antonkushchn26/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antonkushchn26/subscriptions","organizations_url":"https://api.github.com/users/antonkushchn26/orgs","repos_url":"https://api.github.com/users/antonkushchn26/repos","events_url":"https://api.github.com/users/antonkushchn26/events{/privacy}","received_events_url":"https://api.github.com/users/antonkushchn26/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2020-05-26T12:25:19Z","updated_at":"2020-10-17T12:49:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Looks like the property from sealed class is always last despite SORT_PROPERTIES_ALPHABETICALLY is set to true.\r\n\r\n```kotlin\r\nval om = jacksonObjectMapper().apply { configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\r\n}\r\n\r\nfun main() {\r\n    om.writeValueAsString(Test(2, 1)) // {\"a\":1,\"b\":2}\r\n    val user = User.Customer(UUID.fromString(\"7c183904-63f7-40d3-936b-7f4ae7f96189\"))\r\n    om.writeValueAsString(user) // {\"userId\":\"7c183904-63f7-40d3-936b-7f4ae7f96189\",\"type\":\"customer\"}\r\n}\r\n\r\ndata class Test(\r\n    val b: Int,\r\n    val a: Int\r\n)\r\n\r\nsealed class User(val type: String) {\r\n    data class Customer(val userId: UUID) : User(\"customer\")\r\n    data class Employee(val email: String) : User(\"employee\")\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/377/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/377/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/344","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/344/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/344/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/344/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/344","id":624329607,"node_id":"MDU6SXNzdWU2MjQzMjk2MDc=","number":344,"title":"Should `@Transient` imply `@JsonIgnore` ?","user":{"login":"StephenOTT","id":1994838,"node_id":"MDQ6VXNlcjE5OTQ4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/1994838?v=4","gravatar_id":"","url":"https://api.github.com/users/StephenOTT","html_url":"https://github.com/StephenOTT","followers_url":"https://api.github.com/users/StephenOTT/followers","following_url":"https://api.github.com/users/StephenOTT/following{/other_user}","gists_url":"https://api.github.com/users/StephenOTT/gists{/gist_id}","starred_url":"https://api.github.com/users/StephenOTT/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StephenOTT/subscriptions","organizations_url":"https://api.github.com/users/StephenOTT/orgs","repos_url":"https://api.github.com/users/StephenOTT/repos","events_url":"https://api.github.com/users/StephenOTT/events{/privacy}","received_events_url":"https://api.github.com/users/StephenOTT/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-05-25T14:19:44Z","updated_at":"2020-05-25T19:22:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"working with scenarios where a class could have different forms of serialization (java vs smile, etc)\r\n\r\nIf the kotlin annotation `@Transient` is applied, should it trigger jackson to apply `@JsonIgnore`?\r\n\r\nThe javadoc for `@Transient` is:\r\n\r\n>Marks the JVM backing field of the annotated property as transient, meaning that it is not part of the default serialized form of the object.\r\n\r\nJust a thought for discussion","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/344/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/342","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/342/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/342/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/342/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/342","id":622704255,"node_id":"MDU6SXNzdWU2MjI3MDQyNTU=","number":342,"title":"Provide KotlinModule() Constructor defaults as static values in KotlinModule class","user":{"login":"StephenOTT","id":1994838,"node_id":"MDQ6VXNlcjE5OTQ4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/1994838?v=4","gravatar_id":"","url":"https://api.github.com/users/StephenOTT","html_url":"https://github.com/StephenOTT","followers_url":"https://api.github.com/users/StephenOTT/followers","following_url":"https://api.github.com/users/StephenOTT/following{/other_user}","gists_url":"https://api.github.com/users/StephenOTT/gists{/gist_id}","starred_url":"https://api.github.com/users/StephenOTT/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StephenOTT/subscriptions","organizations_url":"https://api.github.com/users/StephenOTT/orgs","repos_url":"https://api.github.com/users/StephenOTT/repos","events_url":"https://api.github.com/users/StephenOTT/events{/privacy}","received_events_url":"https://api.github.com/users/StephenOTT/received_events","type":"User","site_admin":false},"labels":[{"id":125028037,"node_id":"MDU6TGFiZWwxMjUwMjgwMzc=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-05-21T18:48:44Z","updated_at":"2020-05-21T18:48:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://github.com/FasterXML/jackson-module-kotlin/blob/master/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinModule.kt#L16-L20\r\n\r\nWhen building a config builder around this, it would be great to be able to get the default values.\r\nSo if they could be placed in the companion object that would be great!","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/342/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/341","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/341/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/341/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/341/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/341","id":621770894,"node_id":"MDU6SXNzdWU2MjE3NzA4OTQ=","number":341,"title":"Private getter with different return type hides property","user":{"login":"usulkies","id":10584010,"node_id":"MDQ6VXNlcjEwNTg0MDEw","avatar_url":"https://avatars.githubusercontent.com/u/10584010?v=4","gravatar_id":"","url":"https://api.github.com/users/usulkies","html_url":"https://github.com/usulkies","followers_url":"https://api.github.com/users/usulkies/followers","following_url":"https://api.github.com/users/usulkies/following{/other_user}","gists_url":"https://api.github.com/users/usulkies/gists{/gist_id}","starred_url":"https://api.github.com/users/usulkies/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/usulkies/subscriptions","organizations_url":"https://api.github.com/users/usulkies/orgs","repos_url":"https://api.github.com/users/usulkies/repos","events_url":"https://api.github.com/users/usulkies/events{/privacy}","received_events_url":"https://api.github.com/users/usulkies/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-05-20T13:38:59Z","updated_at":"2020-05-20T20:29:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen a data class contains a private getter `getProp` with return type TypeA and there's a class property named `prop` with type TypeB the JSON form of the class will not contain either of the properties.\r\n\r\n**To Reproduce**\r\n```\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\n\r\nfun main() {\r\n  val mapper = ObjectMapper()\r\n      .registerModule(KotlinModule())\r\n  println(\"TestMe1: \" + mapper.writeValueAsString(TestMe1(\r\n      property1 = \"prop1\",\r\n      property2 = \"prop2\"\r\n  )))\r\n}\r\n\r\ndata class TestMe1(\r\n    val property1: String,\r\n    val property2: String\r\n){\r\n  \r\n  private fun getProperty1(): Int = 3\r\n}\r\n\r\n```\r\n\r\n**Expected behavior**\r\n`TestMe1: {\"property1\": \"prop1\", \"property2\":\"prop2\"}`\r\n\r\n**Actual behavior**\r\n`TestMe1: {\"property2\":\"prop2\"}`\r\n\r\n**Versions**\r\nKotlin: 1.3.72\r\nJackson-module-kotlin: 2.10.4 (maybe before)\r\nJackson-databind: 2.10.4 (maybe before)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/341/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/341/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/340","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/340/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/340/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/340/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/340","id":619521363,"node_id":"MDU6SXNzdWU2MTk1MjEzNjM=","number":340,"title":"Regression on data binding in 2.11.0 with specific field naming","user":{"login":"geoffreywiseman","id":49935,"node_id":"MDQ6VXNlcjQ5OTM1","avatar_url":"https://avatars.githubusercontent.com/u/49935?v=4","gravatar_id":"","url":"https://api.github.com/users/geoffreywiseman","html_url":"https://github.com/geoffreywiseman","followers_url":"https://api.github.com/users/geoffreywiseman/followers","following_url":"https://api.github.com/users/geoffreywiseman/following{/other_user}","gists_url":"https://api.github.com/users/geoffreywiseman/gists{/gist_id}","starred_url":"https://api.github.com/users/geoffreywiseman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/geoffreywiseman/subscriptions","organizations_url":"https://api.github.com/users/geoffreywiseman/orgs","repos_url":"https://api.github.com/users/geoffreywiseman/repos","events_url":"https://api.github.com/users/geoffreywiseman/events{/privacy}","received_events_url":"https://api.github.com/users/geoffreywiseman/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"},{"id":3225876549,"node_id":"MDU6TGFiZWwzMjI1ODc2NTQ5","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/is-prefix","name":"is-prefix","color":"978CEE","default":false,"description":"Issues relating to is-prefixed fields"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2020-05-16T05:25:43Z","updated_at":"2021-08-03T13:44:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Dependabot suggested an upgrade from Spring Boot 2.2.7 to 2.3.0, but the build failed; I checked it out and had the same failures. It looked like a Jackson issue, so I went back to Spring Boot 2.2.7 with Jackson 2.11.0, the version used in Spring Boot 2.3.0, and had the same problem.\r\n\r\nI'm having this problem in a Kotlin project, but using Jackson-module-kotlin 2.11.0 alone doesn't seem to cause the problem.\r\n\r\nI'm having the same problem in two places, the problem seems to be about the same in each case.  It's roughly something like this: I have an API request object that can come in multiple forms, say, an `owner` that can be a person or organization.  So `OwnerRequest` has an `organization` property, but it also has a private internal val `isOrganization` that returns a boolean if the `organization` field is set.\r\n\r\ne.g.\r\n\r\n```kotlin\r\ndata class OwnerRequest(val person: Person = null, val organization: Organization = null) {\r\n    private val isOrganization = this.organization != null\r\n}\r\n```\r\n\r\nI can see how there's a risk of confusion here, since Kotlin exposes getters and setters for Vals, and by java bean standards `is<Property>` could be a boolean getter for a a property. But in Jackson 2.10.4, all behaves as desired, and there hasn't been a problem.\r\n\r\nHowever, if I replace 2.10.4 with 2.11.0, now there's a problem.  Suddenly, the server is responding as if `organization` wasn't set (triggering a validation failure).\r\n\r\nAs a reproduction, this test:\r\n```kotlin\r\nclass JacksonTest {\r\n\r\n\tprivate val jackson = ObjectMapper()\r\n\t\t.findAndRegisterModules()\r\n\r\n\t@Test\r\n\tfun testOwnerDeserialization() {\r\n\t\tval value: OwnerRequest = jackson.readValue(\r\n\t\t\t\t\"\"\"\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"org\": \"Wayne Industries\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\"\"\".trimIndent(),\r\n\t\t\t\tOwnerRequest::class.java\r\n\t\t)\r\n\t\tassertThat(value.org).isEqualTo(\"Wayne Industries\")\r\n\t\tassertThat(value.toString()).isEqualTo(\"OwnerRequest(org=Wayne Industries, isOrg=true)\")\r\n\t}\r\n}\r\n\r\nclass OwnerRequest(val org: String? = null) {\r\n\tprivate val isOrg = org != null\r\n\toverride fun toString(): String {\r\n\t\treturn \"OwnerRequest(org=$org, isOrg=$isOrg)\"\r\n\t}\r\n}\r\n```\r\npasses in 2.10.4 and fails in 2.11.0.\r\n\r\nHere's the failure:\r\n```\r\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field \"org\" (class ca.cpp.api.submitapi.OwnerRequest), not marked as ignorable (one known property: \"isOrg\"])\r\n at [Source: (String)\"{\r\n\t\"org\": \"Wayne Industries\"\r\n}\"; line: 3, column: 2] (through reference chain: ca.cpp.api.submitapi.OwnerRequest[\"org\"])\r\n\r\n\tat com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:855)\r\n\tat com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:1206)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1592)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperties(BeanDeserializerBase.java:1542)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:511)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1310)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:331)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:164)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4482)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3434)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3402)\r\n\tat ca.cpp.api.submitapi.JacksonTest.testOwnerDeserialization(JacksonTest.kt:23)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/340/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/340/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/338","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/338/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/338/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/338/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/338","id":616982278,"node_id":"MDU6SXNzdWU2MTY5ODIyNzg=","number":338,"title":"Deserialization of lists is lost under certain terminal node conditions","user":{"login":"scirner22","id":541726,"node_id":"MDQ6VXNlcjU0MTcyNg==","avatar_url":"https://avatars.githubusercontent.com/u/541726?v=4","gravatar_id":"","url":"https://api.github.com/users/scirner22","html_url":"https://github.com/scirner22","followers_url":"https://api.github.com/users/scirner22/followers","following_url":"https://api.github.com/users/scirner22/following{/other_user}","gists_url":"https://api.github.com/users/scirner22/gists{/gist_id}","starred_url":"https://api.github.com/users/scirner22/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scirner22/subscriptions","organizations_url":"https://api.github.com/users/scirner22/orgs","repos_url":"https://api.github.com/users/scirner22/repos","events_url":"https://api.github.com/users/scirner22/events{/privacy}","received_events_url":"https://api.github.com/users/scirner22/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-05-12T21:46:33Z","updated_at":"2020-05-12T23:54:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nDeserialization of lists is lost under certain conditions. When I change the terminal nodes to have fake key names, the full structure is returned with those terminal nodes having null values. When I change the terminal nodes to reference real keys in the xml, the list is not maintained and instead returns the last entry that makes up the list with the correct terminal values.\r\n\r\n**To Reproduce**\r\n\r\nSmall subset of xml data\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<feed xml:base=\"http://data.treasury.gov/Feed.svc/\" xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\" xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\" xmlns=\"http://www.w3.org/2005/Atom\">\r\n  <title type=\"text\">DailyTreasuryYieldCurveRateData</title>\r\n  <id>http://data.treasury.gov/feed.svc/DailyTreasuryYieldCurveRateData</id>\r\n  <updated>2020-05-08T22:36:11Z</updated>\r\n  <link rel=\"self\" title=\"DailyTreasuryYieldCurveRateData\" href=\"DailyTreasuryYieldCurveRateData\" />\r\n  <entry>\r\n    <id>http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(1)</id>\r\n    <title type=\"text\"></title>\r\n    <updated>2020-05-08T22:36:11Z</updated>\r\n    <author>\r\n      <name />\r\n    </author>\r\n    <link rel=\"edit\" title=\"DailyTreasuryYieldCurveRateDatum\" href=\"DailyTreasuryYieldCurveRateData(1)\" />\r\n    <category term=\"TreasuryDataWarehouseModel.DailyTreasuryYieldCurveRateDatum\" scheme=\"http://schemas.microsoft.com/ado/2007/08/dataservices/scheme\" />\r\n    <content type=\"application/xml\">\r\n      <m:properties>\r\n        <d:Id m:type=\"Edm.Int32\">1</d:Id>\r\n        <d:NEW_DATE m:type=\"Edm.DateTime\">1997-01-02T00:00:00</d:NEW_DATE>\r\n        <d:BC_1MONTH m:type=\"Edm.Double\" m:null=\"true\" />\r\n        <d:BC_2MONTH m:type=\"Edm.Double\" m:null=\"true\" />\r\n        <d:BC_3MONTH m:type=\"Edm.Double\">5.190000057220459</d:BC_3MONTH>\r\n        <d:BC_6MONTH m:type=\"Edm.Double\">5.3499999046325684</d:BC_6MONTH>\r\n        <d:BC_1YEAR m:type=\"Edm.Double\">5.630000114440918</d:BC_1YEAR>\r\n        <d:BC_2YEAR m:type=\"Edm.Double\">5.96999979019165</d:BC_2YEAR>\r\n        <d:BC_3YEAR m:type=\"Edm.Double\">6.130000114440918</d:BC_3YEAR>\r\n        <d:BC_5YEAR m:type=\"Edm.Double\">6.3000001907348633</d:BC_5YEAR>\r\n        <d:BC_7YEAR m:type=\"Edm.Double\">6.4499998092651367</d:BC_7YEAR>\r\n        <d:BC_10YEAR m:type=\"Edm.Double\">6.5399999618530273</d:BC_10YEAR>\r\n        <d:BC_20YEAR m:type=\"Edm.Double\">6.8499999046325684</d:BC_20YEAR>\r\n        <d:BC_30YEAR m:type=\"Edm.Double\">6.75</d:BC_30YEAR>\r\n        <d:BC_30YEARDISPLAY m:type=\"Edm.Double\">0</d:BC_30YEARDISPLAY>\r\n      </m:properties>\r\n    </content>\r\n  </entry>\r\n  <entry>\r\n    <id>http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(2)</id>\r\n    <title type=\"text\"></title>\r\n    <updated>2020-05-08T22:36:11Z</updated>\r\n    <author>\r\n      <name />\r\n    </author>\r\n    <link rel=\"edit\" title=\"DailyTreasuryYieldCurveRateDatum\" href=\"DailyTreasuryYieldCurveRateData(2)\" />\r\n    <category term=\"TreasuryDataWarehouseModel.DailyTreasuryYieldCurveRateDatum\" scheme=\"http://schemas.microsoft.com/ado/2007/08/dataservices/scheme\" />\r\n    <content type=\"application/xml\">\r\n      <m:properties>\r\n        <d:Id m:type=\"Edm.Int32\">2</d:Id>\r\n        <d:NEW_DATE m:type=\"Edm.DateTime\">1996-12-31T00:00:00</d:NEW_DATE>\r\n        <d:BC_1MONTH m:type=\"Edm.Double\" m:null=\"true\" />\r\n        <d:BC_2MONTH m:type=\"Edm.Double\" m:null=\"true\" />\r\n        <d:BC_3MONTH m:type=\"Edm.Double\">5.2100000381469727</d:BC_3MONTH>\r\n        <d:BC_6MONTH m:type=\"Edm.Double\">5.3299999237060547</d:BC_6MONTH>\r\n        <d:BC_1YEAR m:type=\"Edm.Double\">5.5100002288818359</d:BC_1YEAR>\r\n        <d:BC_2YEAR m:type=\"Edm.Double\">5.880000114440918</d:BC_2YEAR>\r\n        <d:BC_3YEAR m:type=\"Edm.Double\">6.0399999618530273</d:BC_3YEAR>\r\n        <d:BC_5YEAR m:type=\"Edm.Double\">6.2100000381469727</d:BC_5YEAR>\r\n        <d:BC_7YEAR m:type=\"Edm.Double\">6.3400001525878906</d:BC_7YEAR>\r\n        <d:BC_10YEAR m:type=\"Edm.Double\">6.429999828338623</d:BC_10YEAR>\r\n        <d:BC_20YEAR m:type=\"Edm.Double\">6.7300000190734863</d:BC_20YEAR>\r\n        <d:BC_30YEAR m:type=\"Edm.Double\">6.6500000953674316</d:BC_30YEAR>\r\n        <d:BC_30YEARDISPLAY m:type=\"Edm.Double\">0</d:BC_30YEARDISPLAY>\r\n      </m:properties>\r\n    </content>\r\n  </entry>\r\n  ...\r\n</feed>\r\n```\r\n\r\nWith the following data classes I receive a response like the following:\r\n```\r\nFeed(entry=[...,Entry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7591), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=null, oneMonth=null))), Entry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7592), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=null, oneMonth=null))),\r\n Entry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7593), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=null, oneMonth=null))), Entry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7594), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=null, oneMonth=null))), \r\nEntry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7595), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=null, oneMonth=null))), Entry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7596), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=null, oneMonth=null)))])\r\n```\r\n\r\n```kotlin\r\ndata class Properties(\r\n    @JacksonXmlProperty(localName = \"NEW_DATE_FAKE\")\r\n    var newDate: String?,\r\n    @JacksonXmlProperty(localName = \"BC_1MONTH_FAKE\")\r\n    var oneMonth: String?\r\n)\r\n\r\ndata class Content(\r\n    var properties: Properties\r\n)\r\n\r\ndata class Entry(\r\n    var id: String,\r\n    var updated: String,\r\n    var content: Content\r\n)\r\n\r\n@JacksonXmlRootElement(namespace = \"http://www.w3.org/2005/Atom\", localName = \"feed\")\r\ndata class Feed(\r\n    @JacksonXmlElementWrapper(useWrapping = false)\r\n    var entry: List<Entry>\r\n)\r\n```\r\n\r\n**Expected behavior**\r\nChanging the above Properties data class to the following, I would expect to see the the correct parsed structure to return. Instead the entry now only contains the last entry in the list. Notice though that the terminal nodes are parsed correctly.\r\n\r\n```kotlin\r\ndata class Properties(\r\n    @JacksonXmlProperty(localName = \"NEW_DATE\")\r\n    var newDate: String?,\r\n    @JacksonXmlProperty(localName = \"BC_1MONTH\")\r\n    var oneMonth: String?\r\n)\r\n``` \r\n\r\n```\r\nFeed(entry=[Entry(id=http://data.treasury.gov/Feed.svc/DailyTreasuryYieldCurveRateData(7596), updated=2020-05-08T22:36:11Z, content=Content(properties=Properties(newDate=2020-05-08T00:00:00, oneMonth=0.1)))])\r\n\r\n```\r\n\r\n**Versions**\r\nKotlin:1.3.61\r\nJackson-module-kotlin:2.9.7 and 2.11.0\r\nJackson-databind: 2.9.7 and 2.11.0\r\n\r\n**Additional context**\r\nI'm not really sure if this should be posted here or in one of the core jackson libraries.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/338/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/337","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/337/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/337/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/337/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/337","id":616126610,"node_id":"MDU6SXNzdWU2MTYxMjY2MTA=","number":337,"title":"Jackson skips isXXX properties with Int type","user":{"login":"imanushin","id":4425474,"node_id":"MDQ6VXNlcjQ0MjU0NzQ=","avatar_url":"https://avatars.githubusercontent.com/u/4425474?v=4","gravatar_id":"","url":"https://api.github.com/users/imanushin","html_url":"https://github.com/imanushin","followers_url":"https://api.github.com/users/imanushin/followers","following_url":"https://api.github.com/users/imanushin/following{/other_user}","gists_url":"https://api.github.com/users/imanushin/gists{/gist_id}","starred_url":"https://api.github.com/users/imanushin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/imanushin/subscriptions","organizations_url":"https://api.github.com/users/imanushin/orgs","repos_url":"https://api.github.com/users/imanushin/repos","events_url":"https://api.github.com/users/imanushin/events{/privacy}","received_events_url":"https://api.github.com/users/imanushin/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"},{"id":3225876549,"node_id":"MDU6TGFiZWwzMjI1ODc2NTQ5","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/is-prefix","name":"is-prefix","color":"978CEE","default":false,"description":"Issues relating to is-prefixed fields"}],"state":"open","locked":false,"assignee":{"login":"viartemev","id":23705041,"node_id":"MDQ6VXNlcjIzNzA1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/23705041?v=4","gravatar_id":"","url":"https://api.github.com/users/viartemev","html_url":"https://github.com/viartemev","followers_url":"https://api.github.com/users/viartemev/followers","following_url":"https://api.github.com/users/viartemev/following{/other_user}","gists_url":"https://api.github.com/users/viartemev/gists{/gist_id}","starred_url":"https://api.github.com/users/viartemev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/viartemev/subscriptions","organizations_url":"https://api.github.com/users/viartemev/orgs","repos_url":"https://api.github.com/users/viartemev/repos","events_url":"https://api.github.com/users/viartemev/events{/privacy}","received_events_url":"https://api.github.com/users/viartemev/received_events","type":"User","site_admin":false},"assignees":[{"login":"viartemev","id":23705041,"node_id":"MDQ6VXNlcjIzNzA1MDQx","avatar_url":"https://avatars.githubusercontent.com/u/23705041?v=4","gravatar_id":"","url":"https://api.github.com/users/viartemev","html_url":"https://github.com/viartemev","followers_url":"https://api.github.com/users/viartemev/followers","following_url":"https://api.github.com/users/viartemev/following{/other_user}","gists_url":"https://api.github.com/users/viartemev/gists{/gist_id}","starred_url":"https://api.github.com/users/viartemev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/viartemev/subscriptions","organizations_url":"https://api.github.com/users/viartemev/orgs","repos_url":"https://api.github.com/users/viartemev/repos","events_url":"https://api.github.com/users/viartemev/events{/privacy}","received_events_url":"https://api.github.com/users/viartemev/received_events","type":"User","site_admin":false}],"milestone":null,"comments":8,"created_at":"2020-05-11T19:29:02Z","updated_at":"2021-08-03T13:44:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nThe Kotlin properties with signature ```isXXX: Int``` omits default values even with option ```JsonInclude.Include.ALWAYS```\r\n\r\n```kotlin\r\nprivate data class ProblematicType(val id: Int, val default: Int)\r\n```\r\n\r\n**To Reproduce**\r\n1. Prepare mapper:\r\n```kotlin\r\nval mapper = jacksonObjectMapper().setSerializationInclusion(JsonInclude.Include.ALWAYS)\r\n```\r\n2. Prepare classes:\r\n```kotlin\r\nprivate data class Correct(val id: Int, val default: Int)\r\nprivate data class Problematic(val id: Int, val isDefault: Int)\r\n```\r\n3. Serialize both of them via writeValueAsString:\r\n```kotlin\r\nmapper.writeValueAsString(...)\r\n```\r\n4. Compare the results\r\n\r\n**Expected behavior**\r\nBoth classes have the same result semantic, so jsons are like this:\r\n* ```{id: 1, default: 0}```\r\n* ```{id: 1, isDefault: 0}```\r\n\r\n**Actual result**\r\n```isDefault``` is ignored when it has ```0```:\r\n* ```{id: 1, default: 0}```\r\n* ```{id: 1}``` <--- 0 is ignored for Int type\r\n\r\n**Versions**\r\nKotlin: 1.3.72\r\nJackson-module-kotlin: 2.11\r\nJackson-databind: 2.11\r\n\r\n**Additional context**\r\nThis is issue of 2.11 only. I didn't see it with previous versions (2.10.1 - 2.10.4). Version downgrading helps.\r\n\r\nSpring Boots also adds his dependencies. Probably, this is result of version conflict. Actual runtime dependencies are:\r\n\r\n```\r\n+--- com.fasterxml.jackson.core:jackson-databind:2.10.4 -> 2.11.0 (*)\r\n+--- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.10.4\r\n|    +--- com.fasterxml.jackson.core:jackson-core:2.10.4 -> 2.11.0\r\n|    \\--- com.fasterxml.jackson.core:jackson-databind:2.10.4 -> 2.11.0 (*)\r\n+--- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.4\r\n|    +--- com.fasterxml.jackson.core:jackson-annotations:2.10.4 -> 2.11.0\r\n|    +--- com.fasterxml.jackson.core:jackson-core:2.10.4 -> 2.11.0\r\n|    \\--- com.fasterxml.jackson.core:jackson-databind:2.10.4 -> 2.11.0 (*)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/337/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/337/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/327","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/327/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/327/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/327/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/327","id":606475879,"node_id":"MDU6SXNzdWU2MDY0NzU4Nzk=","number":327,"title":"Invalid JSON input: Cannot deserialize value of type","user":{"login":"mgnfcnt","id":663996,"node_id":"MDQ6VXNlcjY2Mzk5Ng==","avatar_url":"https://avatars.githubusercontent.com/u/663996?v=4","gravatar_id":"","url":"https://api.github.com/users/mgnfcnt","html_url":"https://github.com/mgnfcnt","followers_url":"https://api.github.com/users/mgnfcnt/followers","following_url":"https://api.github.com/users/mgnfcnt/following{/other_user}","gists_url":"https://api.github.com/users/mgnfcnt/gists{/gist_id}","starred_url":"https://api.github.com/users/mgnfcnt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mgnfcnt/subscriptions","organizations_url":"https://api.github.com/users/mgnfcnt/orgs","repos_url":"https://api.github.com/users/mgnfcnt/repos","events_url":"https://api.github.com/users/mgnfcnt/events{/privacy}","received_events_url":"https://api.github.com/users/mgnfcnt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2020-04-24T17:25:00Z","updated_at":"2020-04-24T20:27:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a data class as following:\r\n\r\n    @Json\r\n    data class ControlTag(val tagSource: TagSource, val tag: TagType)\r\n\r\nTagSource class:\r\n\r\n    @Json\r\n    enum class TagSource {\r\n    \r\n      EXISTING, USER\r\n    }\r\n\r\nTagType is an interface:\r\n\r\n    interface TagType {\r\n      fun getLabel(): String\r\n      fun getValue(): String\r\n    }\r\n\r\nI have several enum classes using this TagType interface:\r\n\r\n    enum class TagInformation : TagType {\r\n      TAG_INFO_YES {\r\n        override fun getLabel(): String {\r\n          return \"Tag Info - Yes\"\r\n        }\r\n    \r\n        override fun getValue(): String {\r\n          return \"t\"\r\n        }\r\n      },\r\n      TAG_INFO_NO {\r\n        override fun getLabel(): String {\r\n          return \"Tag Info - No\"\r\n        }\r\n    \r\n        override fun getValue(): String {\r\n          return \"f\"\r\n        }\r\n      };\r\n    \r\n      @JsonValue\r\n      fun value(): String {\r\n        return getLabel()\r\n      }\r\n    }\r\n\r\nEverything is ok at backend side, but when I call from ui it gives jackson error:\r\n\r\n    [\r\n    ....\r\n    {tagSource: \"EXISTING\", tag: \"Tag Info - Yes\"}\r\n    {tagSource: \"USER\", tag: \"X Enum Info - No\"}\r\n    {tagSource: \"EXISTING\", tag: \"Y Enum Info - Yes\"}\r\n    ....\r\n    ]\r\n\r\n> com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot\r\n> construct instance of `...control_tag.TagType` (no Creators, like\r\n> default construct, exist): abstract types either need to be mapped to\r\n> concrete types, have custom deserializer, or contain additional type\r\n> information  at [Source: (PushbackInputStream); line: 1, column: 378]\r\n> (through reference chain:\r\n\r\nI have fixed above issue with adding below\r\n\r\n    @JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        include = JsonTypeInfo.As.PROPERTY,\r\n        property = \"type\")\r\n    @JsonSubTypes(\r\n        JsonSubTypes.Type(value = TagInformation ::class, name = \"TagInformation \")\r\n    )\r\n    interface TagType {\r\n\r\nBut now I have mapping issue:\r\n\r\n    { tagSource: 'EXISTING', tag: { type: 'TagInformation', value: 'Tag - Yes' } }\r\n\r\nError is:\r\n\r\n> 2020-04-24 18:10:50.147  WARN 26184 --- [nio-8093-exec-5]\r\n> .w.s.m.s.DefaultHandlerExceptionResolver : Resolved\r\n> [org.springframework.http.converter.HttpMessageNotReadableException:\r\n> Invalid JSON input: Cannot deserialize value of type\r\n> `.control_tag.TagInformation` from String \"value\": not one of the\r\n> values accepted for Enum class: [Tag - Yes, Tag - No];","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/327/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/324","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/324/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/324/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/324/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/324","id":602783289,"node_id":"MDU6SXNzdWU2MDI3ODMyODk=","number":324,"title":"Class my.app.MyKeySerializer has no default (no arg) constructor ","user":{"login":"danielgindi","id":366926,"node_id":"MDQ6VXNlcjM2NjkyNg==","avatar_url":"https://avatars.githubusercontent.com/u/366926?v=4","gravatar_id":"","url":"https://api.github.com/users/danielgindi","html_url":"https://github.com/danielgindi","followers_url":"https://api.github.com/users/danielgindi/followers","following_url":"https://api.github.com/users/danielgindi/following{/other_user}","gists_url":"https://api.github.com/users/danielgindi/gists{/gist_id}","starred_url":"https://api.github.com/users/danielgindi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielgindi/subscriptions","organizations_url":"https://api.github.com/users/danielgindi/orgs","repos_url":"https://api.github.com/users/danielgindi/repos","events_url":"https://api.github.com/users/danielgindi/events{/privacy}","received_events_url":"https://api.github.com/users/danielgindi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-04-19T11:31:55Z","updated_at":"2020-04-30T13:02:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi!\r\n\r\nI have an *very* weird issue with custom `JsonSerializer<MyClass>`.\r\n\r\nLet's say I have a class defined like this:\r\n```kotlin\r\n@JsonDeserialize(keyAs = MyKeyDeserializer::class)\r\n@JsonSerialize(keyAs = MyKeySerializer::class)\r\n@Parcelize\r\ndata class MyKey(var id: Long? = null, var subId: Long: 0, var phase: Int = 0)\r\n  : Parcelable, Serializable\r\n\r\nclass MyKeyDeserializer: KeyDeserializer\r\n{\r\n    // Empty constructor required for Jackson\r\n    @Suppress(\"unused\", \"ConvertSecondaryConstructorToPrimary\")\r\n    @Keep\r\n    constructor() : super()\r\n\r\n    override fun deserializeKey(key: String?, ctxt: DeserializationContext?): Any\r\n    {\r\n        if (key == null)\r\n            return MyKey(id = null, subId = 0, phase = 0)\r\n\r\n        val keyParts = key.split(\"_\")\r\n\r\n        return MyKey(\r\n                id = if (keyParts[0] == \"\") null else keyParts[0].toLong(),\r\n                subId = keyParts[1].toLong(),\r\n                phase = keyParts[2].toInt()\r\n    }\r\n}\r\n\r\nclass MyKeySerializer: JsonSerializer<MyKey>\r\n{\r\n    // Empty constructor required for Jackson\r\n    @Suppress(\"unused\", \"ConvertSecondaryConstructorToPrimary\")\r\n    @Keep\r\n    constructor() : super()\r\n\r\n    @Throws(IOException::class, JsonProcessingException::class)\r\n    override fun serialize(value: MyKey,\r\n                           gen: JsonGenerator,\r\n                           serializers: SerializerProvider?)\r\n    {\r\n        val key = (if (value.id == null) \"\" else \"${value.id!!}\") +\r\n                \"_${value.subId}_${value.phase}\"\r\n\r\n        gen.writeFieldName(key)\r\n    }\r\n}\r\n```\r\n\r\n\r\n(I've renamed class names to reduce noise and to obfuscate ;-))\r\n\r\nNow some other class that I'm serializing has a member defined like this:\r\n\r\n```kotlin\r\n@JsonSerialize(keyUsing = MyKeySerializer::class)\r\n@JsonDeserialize(keyUsing = MyKeyDeserializer::class)\r\nvar cacheData: HashMap<MyKey, String> = HashMap()\r\n```\r\n\r\nIn `debug` mode - serializing (and deserializing) works fine.  \r\nIn `assembleRelease` mode - an apk installed on a local device - it works fine.\r\nIn `bundleRelease` mode - downloaded from play store - it crashes:\r\n\r\n```\r\nIllegalArgumentException: Class my.app.MyClassSerializer has no default (no arg) constructor (through reference chain: my.app.MyActivity$WrapperClass[\"cacheData\"])\r\nat com.fasterxml.jackson.databind.util.ClassUtil.createInstance(ClassUtil.java:557)\r\nat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance(DefaultSerializerProvider.java:135)\r\nat com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual(MapSerializer.java:407)\r\nat com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(SerializerProvider.java:976)\r\nat com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(SerializerProvider.java:651)\r\nat com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.findAndAddPrimarySerializer(PropertySerializerMap.java:72)\r\nat com.fasterxml.jackson.databind.ser.BeanPropertyWriter._findAndAddDynamic(BeanPropertyWriter.java:895)\r\nat com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:705)\r\nat com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)\r\nat com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)\r\nat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)\r\nat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)\r\nat com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(ObjectMapper.java:4094)\r\nat com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(ObjectMapper.java:3404)\r\n```\r\n\r\nNow note that:\r\n1. The constructors are annotated with `@Keep`\r\n2. I've also defined proguard rules like `-keepclassmembers my.app.MyClassSerializer { <init>(); }`\r\n3. In java there should be a default constructor auto generated by the compiler anyway\r\n4. Obfuscation is off.\r\n5. These classes are not internal classes of any class.\r\n\r\nSo I can't see any reason that it won't find a `default (no arg) constructor` in the bundle release.\r\n\r\nAnyone knows of something maybe missing in the proguard file? (Currently using [this](https://github.com/FasterXML/jackson-docs/wiki/JacksonOnAndroid))\r\n\r\nThank you very much!\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/324/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/324/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/318","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/318/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/318/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/318/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/318","id":595996639,"node_id":"MDU6SXNzdWU1OTU5OTY2Mzk=","number":318,"title":"Serialize Functions?","user":{"login":"StephenOTT","id":1994838,"node_id":"MDQ6VXNlcjE5OTQ4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/1994838?v=4","gravatar_id":"","url":"https://api.github.com/users/StephenOTT","html_url":"https://github.com/StephenOTT","followers_url":"https://api.github.com/users/StephenOTT/followers","following_url":"https://api.github.com/users/StephenOTT/following{/other_user}","gists_url":"https://api.github.com/users/StephenOTT/gists{/gist_id}","starred_url":"https://api.github.com/users/StephenOTT/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/StephenOTT/subscriptions","organizations_url":"https://api.github.com/users/StephenOTT/orgs","repos_url":"https://api.github.com/users/StephenOTT/repos","events_url":"https://api.github.com/users/StephenOTT/events{/privacy}","received_events_url":"https://api.github.com/users/StephenOTT/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-04-07T16:26:00Z","updated_at":"2020-06-04T20:18:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Consider something like:\r\n\r\nclass MyFunction(\r\n        val function: (arg1: SomeClass, arg2: SomeOtherClass) -> R\r\n) {}\r\n\r\nduring serialization with Smile, I get \r\n```\r\ncom.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `kotlin.jvm.functions.Function2` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information\r\n```\r\n\r\nIs there additional handling required for Kotlin functions?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/318/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/318/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/317","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/317/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/317/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/317/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/317","id":593176360,"node_id":"MDU6SXNzdWU1OTMxNzYzNjA=","number":317,"title":"class deserialization behaviour changes when to 2.10.1+","user":{"login":"kelvinc1024","id":13277668,"node_id":"MDQ6VXNlcjEzMjc3NjY4","avatar_url":"https://avatars.githubusercontent.com/u/13277668?v=4","gravatar_id":"","url":"https://api.github.com/users/kelvinc1024","html_url":"https://github.com/kelvinc1024","followers_url":"https://api.github.com/users/kelvinc1024/followers","following_url":"https://api.github.com/users/kelvinc1024/following{/other_user}","gists_url":"https://api.github.com/users/kelvinc1024/gists{/gist_id}","starred_url":"https://api.github.com/users/kelvinc1024/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kelvinc1024/subscriptions","organizations_url":"https://api.github.com/users/kelvinc1024/orgs","repos_url":"https://api.github.com/users/kelvinc1024/repos","events_url":"https://api.github.com/users/kelvinc1024/events{/privacy}","received_events_url":"https://api.github.com/users/kelvinc1024/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-04-03T07:25:18Z","updated_at":"2020-04-03T08:48:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"`compile \"com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9\"`\r\n\r\nchange to\r\n\r\n`compile \"com.fasterxml.jackson.module:jackson-module-kotlin:2.10.1\"`\r\n\r\ncause following test code was that originally AC become error\r\n```\r\nExpected: fieldA\r\n     but none found\r\n ; \r\nUnexpected: isFieldA\r\n\r\njava.lang.AssertionError: \r\nExpected: fieldA\r\n     but none found\r\n ; \r\nUnexpected: isFieldA\r\n```\r\n```\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.registerKotlinModule\r\nimport org.junit.Test\r\nimport org.skyscreamer.jsonassert.JSONAssert\r\n\r\nclass JsonSerializeDeserializeTest() {\r\n\r\n    val objectMapper: ObjectMapper\r\n\r\n    init {\r\n        objectMapper = ObjectMapper().registerKotlinModule()\r\n    }\r\n\r\n    @Test\r\n    fun jsonSeserializeTestSubjectA() {\r\n        JSONAssert.assertEquals(\r\n            \"\"\"\r\n                    {\r\n                        \"fieldA\" : true,\r\n                        \"fieldB\" : true,\r\n                        \"fieldC\" : \"hola mundo\"\r\n                    }\r\n                \"\"\".trimIndent(),\r\n            objectMapper.writeValueAsString(TestSubjectA(true, true, \"hola mundo\")),\r\n            true\r\n        )\r\n    }\r\n\r\n    @Test\r\n    fun jsonSeserializeTestSubjectB() {\r\n        JSONAssert.assertEquals(\r\n            \"\"\"\r\n                    {\r\n                        \"fieldA\" : true,\r\n                        \"fieldB\" : true,\r\n                        \"fieldC\" : \"hola mundo\"\r\n                    }\r\n                \"\"\".trimIndent(),\r\n            objectMapper.writeValueAsString(TestSubjectB(true, true, \"hola mundo\")),\r\n            true\r\n        )\r\n    }\r\n}\r\n```\r\n```\r\nimport kotlin.Metadata;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\n@Metadata(\r\n        mv = {1, 1, 16},\r\n        bv = {1, 0, 3},\r\n        k = 1,\r\n        d1 = {\"\\u0000\\\"\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0010\\u000b\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\f\\n\\u0002\\u0010\\b\\n\\u0002\\b\\u0002\\b\\u0087\\b\\u0018\\u00002\\u00020\\u0001B\\u001d\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\\u0012\\u0006\\u0010\\u0004\\u001a\\u00020\\u0003\\u0012\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006¢\\u0006\\u0002\\u0010\\u0007J\\t\\u0010\\f\\u001a\\u00020\\u0003HÆ\\u0003J\\t\\u0010\\r\\u001a\\u00020\\u0003HÆ\\u0003J\\t\\u0010\\u000e\\u001a\\u00020\\u0006HÆ\\u0003J'\\u0010\\u000f\\u001a\\u00020\\u00002\\b\\b\\u0002\\u0010\\u0002\\u001a\\u00020\\u00032\\b\\b\\u0002\\u0010\\u0004\\u001a\\u00020\\u00032\\b\\b\\u0002\\u0010\\u0005\\u001a\\u00020\\u0006HÆ\\u0001J\\u0013\\u0010\\u0010\\u001a\\u00020\\u00032\\b\\u0010\\u0011\\u001a\\u0004\\u0018\\u00010\\u0001HÖ\\u0003J\\t\\u0010\\u0012\\u001a\\u00020\\u0013HÖ\\u0001J\\t\\u0010\\u0014\\u001a\\u00020\\u0006HÖ\\u0001R\\u0011\\u0010\\u0004\\u001a\\u00020\\u0003¢\\u0006\\b\\n\\u0000\\u001a\\u0004\\b\\b\\u0010\\tR\\u0011\\u0010\\u0005\\u001a\\u00020\\u0006¢\\u0006\\b\\n\\u0000\\u001a\\u0004\\b\\n\\u0010\\u000bR\\u0011\\u0010\\u0002\\u001a\\u00020\\u0003¢\\u0006\\b\\n\\u0000\\u001a\\u0004\\b\\u0002\\u0010\\t¨\\u0006\\u0015\"},\r\n        d2 = {\"Ljp/paypay/clmapi/integration/helper/TestSubjectB;\", \"\", \"isFieldA\", \"\", \"fieldB\", \"fieldC\", \"\", \"(ZZLjava/lang/String;)V\", \"getFieldB\", \"()Z\", \"getFieldC\", \"()Ljava/lang/String;\", \"component1\", \"component2\", \"component3\", \"copy\", \"equals\", \"other\", \"hashCode\", \"\", \"toString\", \"clm-api.test\"}\r\n)\r\npublic final class TestSubjectA {\r\n    private final boolean isFieldA;\r\n    private final boolean fieldB;\r\n    @NotNull\r\n    private final String fieldC;\r\n\r\n    public final boolean isFieldA() {\r\n        return this.isFieldA;\r\n    }\r\n\r\n    public final boolean getFieldB() {\r\n        return this.fieldB;\r\n    }\r\n\r\n    @NotNull\r\n    public final String getFieldC() {\r\n        return this.fieldC;\r\n    }\r\n\r\n    public TestSubjectA(boolean isFieldA, boolean fieldB, @NotNull String fieldC) {\r\n        super();\r\n        this.isFieldA = isFieldA;\r\n        this.fieldB = fieldB;\r\n        this.fieldC = fieldC;\r\n    }\r\n}\r\n```\r\n```\r\ndata class TestSubjectB(\r\n    val isFieldA: Boolean,\r\n    val fieldB: Boolean,\r\n    val fieldC: String\r\n)\r\n```\r\nbuild.gradle\r\n```\r\nplugins {\r\n    id 'java'\r\n    id 'org.jetbrains.kotlin.jvm' version '1.3.60'\r\n}\r\n\r\ngroup 'org.example'\r\nversion '1.0-SNAPSHOT'\r\n\r\nsourceCompatibility = 1.8\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"\r\n    compile 'com.fasterxml.jackson.core:jackson-core:2.10.1'\r\n    compile 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'\r\n    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.1'\r\n//    compile \"com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9\"\r\n    compile \"com.fasterxml.jackson.module:jackson-module-kotlin:2.10.1\"\r\n    testCompile group: 'junit', name: 'junit', version: '4.12'\r\n    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'\r\n}\r\n\r\ncompileKotlin {\r\n    kotlinOptions.jvmTarget = \"1.8\"\r\n}\r\ncompileTestKotlin {\r\n    kotlinOptions.jvmTarget = \"1.8\"\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/317/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/315","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/315/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/315/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/315/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/315","id":589894753,"node_id":"MDU6SXNzdWU1ODk4OTQ3NTM=","number":315,"title":"Inappropriate blocking method call for serialization (2)","user":{"login":"cj848","id":5905201,"node_id":"MDQ6VXNlcjU5MDUyMDE=","avatar_url":"https://avatars.githubusercontent.com/u/5905201?v=4","gravatar_id":"","url":"https://api.github.com/users/cj848","html_url":"https://github.com/cj848","followers_url":"https://api.github.com/users/cj848/followers","following_url":"https://api.github.com/users/cj848/following{/other_user}","gists_url":"https://api.github.com/users/cj848/gists{/gist_id}","starred_url":"https://api.github.com/users/cj848/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cj848/subscriptions","organizations_url":"https://api.github.com/users/cj848/orgs","repos_url":"https://api.github.com/users/cj848/repos","events_url":"https://api.github.com/users/cj848/events{/privacy}","received_events_url":"https://api.github.com/users/cj848/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2020-03-29T21:54:19Z","updated_at":"2021-04-17T10:50:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://github.com/cj848/blockhound-kotlin-jackson-module\r\n\r\nI found an inappropriate blocking call during testing using blockhound.\r\nMore details are in the github source I attached.\r\nIf you remove the dependency of jackson-module-kotlin from the source I attached, the test of the code passes.\r\n\r\nIf you uncomment line 12 of the LoggingBlockHoundIntegration class\r\nThe exact cause below appears.\r\n\r\nI am very uncomfortable with this situation. Because I am using data class very much. please fix this issue. Thank you for always.\r\n\r\n=========================================================\r\njava.lang.Exception: java.io.RandomAccessFile#readBytes\r\n\tat kr.co.kcd.example.LoggingBlockHoundIntegration$applyTo$1.accept(LoggingBlockHoundIntegration.kt:11)\r\n\tat kr.co.kcd.example.LoggingBlockHoundIntegration$applyTo$1.accept(LoggingBlockHoundIntegration.kt:8)\r\n\tat reactor.blockhound.BlockHound$Builder.lambda$install$8(BlockHound.java:383)\r\n\tat reactor.blockhound.BlockHoundRuntime.checkBlocking(BlockHoundRuntime.java:89)\r\n\tat java.base/java.io.RandomAccessFile.readBytes(RandomAccessFile.java)\r\n\tat java.base/java.io.RandomAccessFile.read(RandomAccessFile.java:408)\r\n\tat java.base/java.util.zip.ZipFile$Source.readAt(ZipFile.java:1252)\r\n\tat java.base/java.util.zip.ZipFile$ZipFileInputStream.read(ZipFile.java:958)\r\n\tat java.base/java.util.zip.ZipFile$ZipFileInflaterInputStream.fill(ZipFile.java:460)\r\n\tat java.base/java.util.zip.InflaterInputStream.read(InflaterInputStream.java:159)\r\n\tat java.base/java.util.zip.InflaterInputStream.read(InflaterInputStream.java:123)\r\n\tat java.base/java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n\tat java.base/java.io.DataInputStream.readInt(DataInputStream.java:392)\r\n\tat kotlin.reflect.jvm.internal.impl.metadata.builtins.BuiltInsBinaryVersion$Companion.readFrom(BuiltInsBinaryVersion.kt:29)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.builtins.BuiltInsPackageFragmentImpl$Companion.create(BuiltInsPackageFragmentImpl.kt:38)\r\n\tat kotlin.reflect.jvm.internal.impl.builtins.jvm.JvmBuiltInsPackageFragmentProvider.findPackage(JvmBuiltInsPackageFragmentProvider.kt:58)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider$fragments$1.invoke(AbstractDeserializedPackageFragmentProvider.kt:34)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider$fragments$1.invoke(AbstractDeserializedPackageFragmentProvider.kt:26)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunction.invoke(LockBasedStorageManager.java:512)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.AbstractDeserializedPackageFragmentProvider.getPackageFragments(AbstractDeserializedPackageFragmentProvider.kt:41)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.CompositePackageFragmentProvider.getPackageFragments(CompositePackageFragmentProvider.kt:31)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.CompositePackageFragmentProvider.getPackageFragments(CompositePackageFragmentProvider.kt:31)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$fragments$2.invoke(LazyPackageViewDescriptorImpl.kt:37)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$fragments$2.invoke(LazyPackageViewDescriptorImpl.kt:30)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue.invoke(LockBasedStorageManager.java:355)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedNotNullLazyValue.invoke(LockBasedStorageManager.java:474)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.StorageKt.getValue(storage.kt:42)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl.getFragments(LazyPackageViewDescriptorImpl.kt)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$memberScope$1.invoke(LazyPackageViewDescriptorImpl.kt:41)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.impl.LazyPackageViewDescriptorImpl$memberScope$1.invoke(LazyPackageViewDescriptorImpl.kt:30)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue.invoke(LockBasedStorageManager.java:355)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedNotNullLazyValue.invoke(LockBasedStorageManager.java:474)\r\n\tat kotlin.reflect.jvm.internal.impl.resolve.scopes.LazyScopeAdapter.getWorkerScope(LazyScopeAdapter.kt:23)\r\n\tat kotlin.reflect.jvm.internal.impl.resolve.scopes.AbstractScopeAdapter.getContributedClassifier(AbstractScopeAdapter.kt:44)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt.findClassifierAcrossModuleDependencies(findClassInModule.kt:25)\r\n\tat kotlin.reflect.jvm.internal.impl.descriptors.FindClassInModuleKt.findClassAcrossModuleDependencies(findClassInModule.kt:40)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer.computeClassDescriptor(TypeDeserializer.kt:221)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer.access$computeClassDescriptor(TypeDeserializer.kt:23)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$classDescriptors$1.invoke(TypeDeserializer.kt:32)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer$classDescriptors$1.invoke(TypeDeserializer.kt:23)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunction.invoke(LockBasedStorageManager.java:512)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer.typeConstructor(TypeDeserializer.kt:113)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer.simpleType(TypeDeserializer.kt:75)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.TypeDeserializer.type(TypeDeserializer.kt:63)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer.valueParameters(MemberDeserializer.kt:417)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.MemberDeserializer.loadConstructor(MemberDeserializer.kt:342)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.computePrimaryConstructor(DeserializedClassDescriptor.kt:122)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.access$computePrimaryConstructor(DeserializedClassDescriptor.kt:34)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$primaryConstructor$1.invoke(DeserializedClassDescriptor.kt:65)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$primaryConstructor$1.invoke(DeserializedClassDescriptor.kt:34)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue.invoke(LockBasedStorageManager.java:355)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.getUnsubstitutedPrimaryConstructor(DeserializedClassDescriptor.kt:126)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.computeConstructors(DeserializedClassDescriptor.kt:129)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.access$computeConstructors(DeserializedClassDescriptor.kt:34)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$constructors$1.invoke(DeserializedClassDescriptor.kt:66)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor$constructors$1.invoke(DeserializedClassDescriptor.kt:34)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue.invoke(LockBasedStorageManager.java:355)\r\n\tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedNotNullLazyValue.invoke(LockBasedStorageManager.java:474)\r\n\tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.getConstructors(DeserializedClassDescriptor.kt:137)\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.getConstructorDescriptors(KClassImpl.kt:200)\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2.invoke(KClassImpl.kt:91)\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2.invoke(KClassImpl.kt:44)\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:92)\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:31)\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data.getConstructors(KClassImpl.kt)\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.getConstructors(KClassImpl.kt:235)\r\n\tat kotlin.reflect.jvm.ReflectJvmMapping.getKotlinFunction(ReflectJvmMapping.kt:144)\r\n\tat com.fasterxml.jackson.module.kotlin.KotlinNamesAnnotationIntrospector.findKotlinParameterName(KotlinNamesAnnotationIntrospector.kt:115)\r\n\tat com.fasterxml.jackson.module.kotlin.KotlinNamesAnnotationIntrospector.findImplicitPropertyName(KotlinNamesAnnotationIntrospector.kt:31)\r\n\tat com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair.findImplicitPropertyName(AnnotationIntrospectorPair.java:490)\r\n\tat com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addCreatorParam(POJOPropertiesCollector.java:485)\r\n\tat com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addCreators(POJOPropertiesCollector.java:465)\r\n\tat com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collectAll(POJOPropertiesCollector.java:313)\r\n\tat com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getJsonValueAccessor(POJOPropertiesCollector.java:196)\r\n\tat com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueAccessor(BasicBeanDescription.java:252)\r\n\tat com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(BasicSerializerFactory.java:346)\r\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(BeanSerializerFactory.java:216)\r\n\tat com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(BeanSerializerFactory.java:165)\r\n\tat com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(SerializerProvider.java:1388)\r\n\tat com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(SerializerProvider.java:1336)\r\n\tat com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(SerializerProvider.java:1305)\r\n\tat com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(DefaultSerializerProvider.java:260)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.canSerialize(ObjectMapper.java:3005)\r\n\tat org.springframework.http.codec.json.AbstractJackson2Encoder.canEncode(AbstractJackson2Encoder.java:107)\r\n\tat org.springframework.http.codec.EncoderHttpMessageWriter.canWrite(EncoderHttpMessageWriter.java:107)\r\n\tat org.springframework.web.reactive.function.BodyInserters.lambda$writeWithMessageWriters$9(BodyInserters.java:377)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1598)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:543)\r\n\tat org.springframework.web.reactive.function.BodyInserters.writeWithMessageWriters(BodyInserters.java:378)\r\n\tat org.springframework.web.reactive.function.BodyInserters.lambda$fromValue$1(BodyInserters.java:98)\r\n\tat org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(DefaultClientRequestBuilder.java:249)\r\n\tat org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$1(ExchangeFunctions.java:104)\r\n\tat org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$2(ReactorClientHttpConnector.java:110)\r\n\tat reactor.netty.http.client.HttpClientConnect$HttpClientHandler.requestWithBody(HttpClientConnect.java:607)\r\n\tat reactor.netty.http.client.HttpClientConnect$HttpIOHandlerObserver.lambda$onStateChange$0(HttpClientConnect.java:434)\r\n\tat reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44)\r\n\tat reactor.netty.http.client.HttpClientConnect$HttpIOHandlerObserver.onStateChange(HttpClientConnect.java:435)\r\n\tat reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:514)\r\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onStateChange(PooledConnectionProvider.java:523)\r\n\tat reactor.netty.resources.PooledConnectionProvider$PooledConnection.onStateChange(PooledConnectionProvider.java:429)\r\n\tat reactor.netty.channel.ChannelOperationsHandler.channelActive(ChannelOperationsHandler.java:60)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:230)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:216)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelActive(AbstractChannelHandlerContext.java:209)\r\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelActive(CombinedChannelDuplexHandler.java:412)\r\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelActive(ChannelInboundHandlerAdapter.java:69)\r\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelActive(CombinedChannelDuplexHandler.java:211)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:230)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:216)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelActive(AbstractChannelHandlerContext.java:209)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelActive(DefaultChannelPipeline.java:1398)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:230)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:216)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelActive(DefaultChannelPipeline.java:895)\r\n\tat io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:305)\r\n\tat io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:335)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:830)\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/315/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/315/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/314","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/314/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/314/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/314/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/314","id":589841862,"node_id":"MDU6SXNzdWU1ODk4NDE4NjI=","number":314,"title":"Serialize Kotlin's `Nothing?` fields","user":{"login":"SerVB","id":20105593,"node_id":"MDQ6VXNlcjIwMTA1NTkz","avatar_url":"https://avatars.githubusercontent.com/u/20105593?v=4","gravatar_id":"","url":"https://api.github.com/users/SerVB","html_url":"https://github.com/SerVB","followers_url":"https://api.github.com/users/SerVB/followers","following_url":"https://api.github.com/users/SerVB/following{/other_user}","gists_url":"https://api.github.com/users/SerVB/gists{/gist_id}","starred_url":"https://api.github.com/users/SerVB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SerVB/subscriptions","organizations_url":"https://api.github.com/users/SerVB/orgs","repos_url":"https://api.github.com/users/SerVB/repos","events_url":"https://api.github.com/users/SerVB/events{/privacy}","received_events_url":"https://api.github.com/users/SerVB/received_events","type":"User","site_admin":false},"labels":[{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2020-03-29T12:13:17Z","updated_at":"2020-05-08T15:15:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi! It seems that now `ObjectMapper` skips `Nothing?` properties:\r\n\r\n```kotlin\r\n// simplified example\r\n// Jackson version I use is `2.10.3` (the latest stable patch version)\r\nimport com.fasterxml.jackson.core.JsonGenerator\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.databind.SerializerProvider\r\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize\r\nimport com.fasterxml.jackson.databind.ser.std.StdSerializer\r\n\r\nclass NothingData {\r\n    val data: Nothing? = null\r\n}\r\n\r\n@JsonSerialize(using = NothingDataWithSerializer.NothingDataSerializer::class)\r\nclass NothingDataWithSerializer {\r\n    val data: Nothing? = null\r\n\r\n    class NothingDataSerializer @JvmOverloads constructor(t: Class<NothingDataWithSerializer>? = null) : StdSerializer<NothingDataWithSerializer>(t) {\r\n        override fun serialize(value: NothingDataWithSerializer, generator: JsonGenerator, provider: SerializerProvider) {\r\n            generator.writeStartObject()\r\n            generator.writeObjectField(\"data\", null)\r\n            generator.writeEndObject()\r\n        }\r\n    }\r\n}\r\n\r\nclass IntData {\r\n    val data: Int? = null\r\n}\r\n\r\nfun main() {\r\n    val mapper = ObjectMapper()\r\n\r\n    println(mapper.writeValueAsString(NothingData()))                // {}\r\n    println(mapper.writeValueAsString(NothingDataWithSerializer()))  // {\"data\":null}\r\n    println(mapper.writeValueAsString(IntData()))                    // {\"data\":null}\r\n}\r\n```\r\n\r\nAs you see, if type is other than `Nothing?` (like `Int`), `data` property is serialized properly.\r\n\r\nAlso, I've found out that I can define my own serializer which gives me behavior I want so I'm using this solution now.\r\n\r\nAlready asked that here but there is still no answer: <https://stackoverflow.com/questions/60900202/serialize-nothing-property-via-jackson>.\r\n\r\nI've done a short debug and I see that in the first case Jackson sees that the type of the getter is `java.lang.Void` so this getter isn't added to properties. So the class has zero properties – that's what Jackson thinks.\r\n\r\nActually, `Nothing?` can contain only `null`, so it's easy to serialize it. For example, like in my custom serializer, as an object which is `null`.\r\n\r\nNot sure where I should report it: here or in <https://github.com/FasterXML/jackson-module-kotlin>. If I do `ObjectMapper().registerModule(KotlinModule())`, there is the same behavior.\r\n\r\nSo I propose to implement this behavior and make by default...","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/314/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/313","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/313/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/313/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/313/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/313","id":589653735,"node_id":"MDU6SXNzdWU1ODk2NTM3MzU=","number":313,"title":"Inappropriate blocking method call for serialization","user":{"login":"jonahseguin","id":8146051,"node_id":"MDQ6VXNlcjgxNDYwNTE=","avatar_url":"https://avatars.githubusercontent.com/u/8146051?v=4","gravatar_id":"","url":"https://api.github.com/users/jonahseguin","html_url":"https://github.com/jonahseguin","followers_url":"https://api.github.com/users/jonahseguin/followers","following_url":"https://api.github.com/users/jonahseguin/following{/other_user}","gists_url":"https://api.github.com/users/jonahseguin/gists{/gist_id}","starred_url":"https://api.github.com/users/jonahseguin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonahseguin/subscriptions","organizations_url":"https://api.github.com/users/jonahseguin/orgs","repos_url":"https://api.github.com/users/jonahseguin/repos","events_url":"https://api.github.com/users/jonahseguin/events{/privacy}","received_events_url":"https://api.github.com/users/jonahseguin/received_events","type":"User","site_admin":false},"labels":[{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"},{"id":1955092088,"node_id":"MDU6TGFiZWwxOTU1MDkyMDg4","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.12","name":"2.12","color":"62dbb5","default":false,"description":"Issue affecting version 2.12"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2020-03-28T20:29:02Z","updated_at":"2021-07-06T19:30:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Similar to issue #221 : \r\nwhen using `readValue()` we use the extension function from `Extensions.kt` to fix this inspection warning:\r\n<img width=\"623\" alt=\"Screen Shot 2020-03-28 at 2 27 05 PM\" src=\"https://user-images.githubusercontent.com/8146051/77833086-34eb5c80-7100-11ea-8513-6fd7e8cd3cb8.png\">\r\n\r\nI'm wondering if there's a workaround for this inspection error (within a `suspend` function) for the `write()` functions in objectMapper?\r\n\r\nI looked through the `ExtensionsKt` file and couldn't find any writing functions.  Maybe I'm missing something obvious here?\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/313/reactions","total_count":10,"+1":10,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/313/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/311","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/311/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/311/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/311/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/311","id":587954354,"node_id":"MDU6SXNzdWU1ODc5NTQzNTQ=","number":311,"title":"Deserialization breaks for Spring's Rest Controllers inner object joins","user":{"login":"craigsmithmsp","id":13069497,"node_id":"MDQ6VXNlcjEzMDY5NDk3","avatar_url":"https://avatars.githubusercontent.com/u/13069497?v=4","gravatar_id":"","url":"https://api.github.com/users/craigsmithmsp","html_url":"https://github.com/craigsmithmsp","followers_url":"https://api.github.com/users/craigsmithmsp/followers","following_url":"https://api.github.com/users/craigsmithmsp/following{/other_user}","gists_url":"https://api.github.com/users/craigsmithmsp/gists{/gist_id}","starred_url":"https://api.github.com/users/craigsmithmsp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/craigsmithmsp/subscriptions","organizations_url":"https://api.github.com/users/craigsmithmsp/orgs","repos_url":"https://api.github.com/users/craigsmithmsp/repos","events_url":"https://api.github.com/users/craigsmithmsp/events{/privacy}","received_events_url":"https://api.github.com/users/craigsmithmsp/received_events","type":"User","site_admin":false},"labels":[{"id":1670719401,"node_id":"MDU6TGFiZWwxNjcwNzE5NDAx","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-03-25T19:59:09Z","updated_at":"2020-03-25T20:23:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"If I run a Spring Boot kotlin rest api, I'm able to POST a resources like:\r\n\r\n{\r\n   \"projectName\": \"Test project\",\r\n   \"projectManager\": { \"id\": 1 },\r\n}\r\n\r\nwhere the projectManager field is joined to something like Employee. Even though \"firstName\" is required in the data class Employee, it's not necessary to add it to the body. After adding this to my gradle, that feature breaks and it complains about missing required fields. Need to investigate further, but hoping this is something someone might have encountered.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/311/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/311/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/310","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/310/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/310/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/310/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/310","id":587793677,"node_id":"MDU6SXNzdWU1ODc3OTM2Nzc=","number":310,"title":"Reflection overhead","user":{"login":"mihic","id":493990,"node_id":"MDQ6VXNlcjQ5Mzk5MA==","avatar_url":"https://avatars.githubusercontent.com/u/493990?v=4","gravatar_id":"","url":"https://api.github.com/users/mihic","html_url":"https://github.com/mihic","followers_url":"https://api.github.com/users/mihic/followers","following_url":"https://api.github.com/users/mihic/following{/other_user}","gists_url":"https://api.github.com/users/mihic/gists{/gist_id}","starred_url":"https://api.github.com/users/mihic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mihic/subscriptions","organizations_url":"https://api.github.com/users/mihic/orgs","repos_url":"https://api.github.com/users/mihic/repos","events_url":"https://api.github.com/users/mihic/events{/privacy}","received_events_url":"https://api.github.com/users/mihic/received_events","type":"User","site_admin":false},"labels":[{"id":125028035,"node_id":"MDU6TGFiZWwxMjUwMjgwMzU=","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/bug","name":"bug","color":"fc2929","default":true,"description":null},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"}],"state":"open","locked":false,"assignee":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"assignees":[{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2020-03-25T15:44:59Z","updated_at":"2020-10-14T09:53:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"After migrating one of our rest clients to kotlin data classes (with jackson and KotlinModule), we observe large reflection overheads. This almost doubles our allocation rate compared to the previous implementation. \r\n![screenshot_2020-03-19_at_16 53 01](https://user-images.githubusercontent.com/493990/77555787-f4010700-6eb7-11ea-9335-68d424e57b9e.png)\r\n\r\nReflection cache is on with with 500.000 limit.\r\n\r\nSimilar issue:\r\nhttps://github.com/FasterXML/jackson-module-kotlin/issues/136","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/310/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/310/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/305","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/305/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/305/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/305/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/305","id":575634176,"node_id":"MDU6SXNzdWU1NzU2MzQxNzY=","number":305,"title":"@jsonCreator on primary constructor is not working","user":{"login":"yaitskov","id":1292734,"node_id":"MDQ6VXNlcjEyOTI3MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1292734?v=4","gravatar_id":"","url":"https://api.github.com/users/yaitskov","html_url":"https://github.com/yaitskov","followers_url":"https://api.github.com/users/yaitskov/followers","following_url":"https://api.github.com/users/yaitskov/following{/other_user}","gists_url":"https://api.github.com/users/yaitskov/gists{/gist_id}","starred_url":"https://api.github.com/users/yaitskov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yaitskov/subscriptions","organizations_url":"https://api.github.com/users/yaitskov/orgs","repos_url":"https://api.github.com/users/yaitskov/repos","events_url":"https://api.github.com/users/yaitskov/events{/privacy}","received_events_url":"https://api.github.com/users/yaitskov/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-03-04T18:07:52Z","updated_at":"2020-03-13T16:24:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```\r\n        <java.version>1.8</java.version>\r\n        <kotlin.version>1.3.61</kotlin.version>\r\n        <jackson.version>2.10.3</jackson.version>\r\n```\r\n \r\n```\r\ndata class X @JsonCreator constructor(val x: String) \r\ndata class Y(x: X)\r\n\r\nfun test() {\r\n  val om = ObjectMapper().registerModule(KotlinModule())\r\n  assertThat(om.readValue(\"\"\"{\"x\": \"c\"}\"\"\", Y::class.java))\r\n        .isEqualTo(Y(X(\"c\")))\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/305/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/305/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/301","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/301/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/301/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/301/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/301","id":568444968,"node_id":"MDU6SXNzdWU1Njg0NDQ5Njg=","number":301,"title":"Kotlin data class properties splitted to several instances","user":{"login":"jxerome","id":1355634,"node_id":"MDQ6VXNlcjEzNTU2MzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1355634?v=4","gravatar_id":"","url":"https://api.github.com/users/jxerome","html_url":"https://github.com/jxerome","followers_url":"https://api.github.com/users/jxerome/followers","following_url":"https://api.github.com/users/jxerome/following{/other_user}","gists_url":"https://api.github.com/users/jxerome/gists{/gist_id}","starred_url":"https://api.github.com/users/jxerome/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jxerome/subscriptions","organizations_url":"https://api.github.com/users/jxerome/orgs","repos_url":"https://api.github.com/users/jxerome/repos","events_url":"https://api.github.com/users/jxerome/events{/privacy}","received_events_url":"https://api.github.com/users/jxerome/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-02-20T17:04:52Z","updated_at":"2020-02-20T17:05:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I met a special bug in data classes deserialization using jackson with kotlin module.\r\nThis happens with both Jackson 2.9.10 and 2.10.2.\r\n\r\n## Context\r\n\r\nI have:\r\n* a generic ItemList<T> (typical a search result)\r\n\r\n    ```data class ItemList<T>(val items: List<T>)```\r\n\r\n* an item wrapper Wrapper<T>, fields are nullable. (if field are not nullable, the same problem happens but the error is different.)\r\n\r\n    ```data class Wrapper<T>(val value: T?, val tags: List<String>?)```\r\n\r\n* an item with an id and a nature. Nature is an enum class. Concret class of the id depends of the value in nature.\r\n    ```\r\n    data class Item(\r\n      @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = \"nature\")\r\n      val id: ItemId,\r\n      val nature: Nature\r\n    )\r\n\r\n    enum class Nature(@get:JsonValue val json: String, private val factory: (String) -> ItemId) {\r\n        One(\"one\", { OneId(it) }),\r\n        Two(\"two\", { TwoId(it) });\r\n    \r\n        companion object {\r\n            private val jsonToValue: Map<String, Nature> = Stream.of(*Nature.values())\r\n                .collect(Collectors.toMap({ it.json }, { it }))\r\n    \r\n            @JsonCreator\r\n            @JvmStatic\r\n            fun fromJson(s: String): Nature = jsonToValue[s] ?: throw IllegalArgumentException(\"Invalid Nature: $s\")\r\n        }\r\n    \r\n        fun createId(uuid: String) = factory(uuid)\r\n    \r\n    }\r\n    \r\n    \r\n    @JsonSubTypes(\r\n        JsonSubTypes.Type(name = \"one\", value = OneId::class),\r\n        JsonSubTypes.Type(name = \"two\", value = TwoId::class)\r\n    )\r\n    sealed class ItemId() {\r\n        @get:JsonValue\r\n        abstract val uuid: String\r\n        abstract val nature: Nature\r\n    \r\n        companion object {\r\n            @JvmStatic\r\n            fun parseUri(uri: String): ItemId {\r\n                val sep = uri.indexOf(':')\r\n                if (sep == -1) {\r\n                    throw IllegalArgumentException(\"Invalid id uri <$uri>\")\r\n                }\r\n                val nature = try {\r\n                    Nature.fromJson(uri.substring(0, sep))\r\n                } catch (e: IllegalArgumentException) {\r\n                    throw IllegalArgumentException(\"Invalid id uri <$uri>\", e)\r\n                }\r\n                return nature.createId(uri.substring(sep + 1))\r\n            }\r\n        }\r\n    }\r\n    \r\n    data class OneId(override val uuid: String) : ItemId() {\r\n        override val nature: Nature = Nature.One\r\n    }\r\n    \r\n    data class TwoId(override val uuid: String) : ItemId() {\r\n        override val nature: Nature = Nature.Two\r\n    }\r\n    ```\r\n\r\n* A Object mapper with kotlin module and some other modules, that ignore unknown properties to deals with consumed API evolutions.\r\n    ```\r\n    val mapper = jacksonObjectMapper().apply {\r\n        registerModule(Jdk8Module())\r\n        registerModule(JavaTimeModule())\r\n        configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)\r\n        configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n    }\r\n    ```\r\n\r\n## Comportement\r\n\r\nWhen I try to deserialize a `ItemList<Wrapper<Item>>` of a JSON where the item have an additionnal unknown array property with 0 or 1 item, \r\nthen the wrapper instance in two instances each having one property. To make it clear:\r\n\r\n    @Test\r\n    fun `deserialisation fails with array extra field with no item`() {\r\n        val json = \"\"\"\r\n            {\r\n              \"items\": [\r\n                {\r\n                  \"value\": {\r\n                    \"id\": \"ac13e7e8-90d5-427b-bd4c-818ee7990b8a\",\r\n                    \"nature\": \"one\",\r\n                    \"other\": []\r\n                  },\r\n                  \"tags\": [\r\n                    \"A\",\r\n                    \"B\"\r\n                  ]\r\n                }\r\n              ]\r\n            }\r\n        \"\"\".trimIndent()\r\n\r\n        val actual: ItemList<Wrapper<Item>> = JsonMapper.readValue(json)\r\n        assertEquals(1, actual.items.size)\r\n    }\r\n\r\nFails with message:\r\n> expected: <1> but was: <2>\r\n\r\nWhen debuging, on instance of the wrapper has the item and a null tags list, the other has a null item and a tags list.\r\nStrangely it works when the additional array has two items.\r\n\r\nWhen Wrapper fields are not nullable, the message becomes:\r\n> Instantiation of [simple type, class com.zeenea.debug.NotNullWrapper<com.zeenea.debug.Item>] value failed for JSON property tags due to missing (therefore NULL) value for creator parameter tags which is a non-nullable type\r\n\r\n\r\n### Test the bug\r\n\r\nI made this gradle project to shown the bog.\r\n\r\nYou can run the tests with `./gradlew test`\r\n\r\n[jackson-kotlin-module-object-splitted.tar.gz](https://github.com/FasterXML/jackson-module-kotlin/files/4232020/jackson-kotlin-module-object-splitted.tar.gz)\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/301/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/297","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/297/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/297/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/297/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/297","id":560046998,"node_id":"MDU6SXNzdWU1NjAwNDY5OTg=","number":297,"title":"GenericSignatureFormatError for valid classes inside escaped class","user":{"login":"TWiStErRob","id":2906988,"node_id":"MDQ6VXNlcjI5MDY5ODg=","avatar_url":"https://avatars.githubusercontent.com/u/2906988?v=4","gravatar_id":"","url":"https://api.github.com/users/TWiStErRob","html_url":"https://github.com/TWiStErRob","followers_url":"https://api.github.com/users/TWiStErRob/followers","following_url":"https://api.github.com/users/TWiStErRob/following{/other_user}","gists_url":"https://api.github.com/users/TWiStErRob/gists{/gist_id}","starred_url":"https://api.github.com/users/TWiStErRob/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TWiStErRob/subscriptions","organizations_url":"https://api.github.com/users/TWiStErRob/orgs","repos_url":"https://api.github.com/users/TWiStErRob/repos","events_url":"https://api.github.com/users/TWiStErRob/events{/privacy}","received_events_url":"https://api.github.com/users/TWiStErRob/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-02-04T23:44:24Z","updated_at":"2020-02-04T23:48:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Similar issue has re-surfaced in JDK 8 with Kotlin:\r\nhttps://github.com/fasterxml/jackson-modules-base/issues/8\r\n\r\nIf an enclosing class has an `` `Escaped Name` ``, Jackson crashes with a `GenericSignatureFormatError`, even though it should just work.\r\n\r\nConsider this simple test:\r\n```kotlin\r\nclass JacksonSerializationTest {\r\n\tclass Data(val value: String)\r\n\t@Test fun test() {\r\n\t\tval mapper = com.fasterxml.jackson.module.kotlin.jacksonObjectMapper()\r\n\r\n\t\tval data: Data = mapper.readValue(\"\"\"{ \"value\": \"Text\" }\"\"\")\r\n\r\n\t\tassertEquals(\"Text\", data.value)\r\n\t}\r\n}\r\n```\r\nIt passes as expected, all is well.\r\n\r\nBut if the test name is a bit fancier, ``class `JacksonSerialization Test` {``, it crashes with an error:\r\n\r\n<details>\r\n\t<summary>\r\n\t\tjava.lang.reflect.GenericSignatureFormatError: Signature Parse error: expected '<' or ';' but got  \r\n\t\t\tRemaining input:  Test$Data;>;\r\n\t</summary>\r\n\r\n\tat sun.reflect.generics.parser.SignatureParser.error(SignatureParser.java:124)\r\n\tat sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature(SignatureParser.java:348)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:310)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:289)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:283)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseTypeArgument(SignatureParser.java:436)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseTypeArguments(SignatureParser.java:396)\r\n\tat sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature(SignatureParser.java:346)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:310)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassSignature(SignatureParser.java:213)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassSig(SignatureParser.java:156)\r\n\tat sun.reflect.generics.repository.ClassRepository.parse(ClassRepository.java:57)\r\n\tat sun.reflect.generics.repository.ClassRepository.parse(ClassRepository.java:41)\r\n\tat sun.reflect.generics.repository.AbstractRepository.<init>(AbstractRepository.java:74)\r\n\tat sun.reflect.generics.repository.GenericDeclRepository.<init>(GenericDeclRepository.java:49)\r\n\tat sun.reflect.generics.repository.ClassRepository.<init>(ClassRepository.java:53)\r\n\tat sun.reflect.generics.repository.ClassRepository.make(ClassRepository.java:70)\r\n\tat java.lang.Class.getGenericInfo(Class.java:2548)\r\n\tat java.lang.Class.getGenericSuperclass(Class.java:765)\r\n\tat com.fasterxml.jackson.core.type.TypeReference.<init>(TypeReference.java:33)\r\n\tat com.example.JacksonSerialization Test$test$$inlined$readValue$1.<init>(Extensions.kt:18)\r\n\tat com.example.JacksonSerialization Test.test(JacksonSerializationTest.kt:264)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\n</details>\r\n\r\nSo this bug report is about broken functionality due to wrong parsing of names.\r\n(See also a tightly related #296)","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/297/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/297/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/296","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/296/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/296/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/296/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/296","id":560046931,"node_id":"MDU6SXNzdWU1NjAwNDY5MzE=","number":296,"title":"GenericSignatureFormatError for local classes inside escaped scopes","user":{"login":"TWiStErRob","id":2906988,"node_id":"MDQ6VXNlcjI5MDY5ODg=","avatar_url":"https://avatars.githubusercontent.com/u/2906988?v=4","gravatar_id":"","url":"https://api.github.com/users/TWiStErRob","html_url":"https://github.com/TWiStErRob","followers_url":"https://api.github.com/users/TWiStErRob/followers","following_url":"https://api.github.com/users/TWiStErRob/following{/other_user}","gists_url":"https://api.github.com/users/TWiStErRob/gists{/gist_id}","starred_url":"https://api.github.com/users/TWiStErRob/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TWiStErRob/subscriptions","organizations_url":"https://api.github.com/users/TWiStErRob/orgs","repos_url":"https://api.github.com/users/TWiStErRob/repos","events_url":"https://api.github.com/users/TWiStErRob/events{/privacy}","received_events_url":"https://api.github.com/users/TWiStErRob/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-02-04T23:44:13Z","updated_at":"2020-02-04T23:47:54Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Similar issue has re-surfaced in JDK 8 with Kotlin:\r\nhttps://github.com/fasterxml/jackson-modules-base/issues/8\r\n\r\nIf an enclosing class or function has an `` `escaped name` ``, Jackson crashes with a `GenericSignatureFormatError` instead of the nicer `JsonMappingException (of type local/anonymous)`.\r\n\r\nConsider this simple test:\r\n```kotlin\r\nclass JacksonSerializationTest {\r\n\t@Test fun test() {\r\n\t\tclass Data(val value: String)\r\n\r\n\t\tval mapper = com.fasterxml.jackson.module.kotlin.jacksonObjectMapper()\r\n\r\n\t\tval data: Data = mapper.readValue(\"\"\"{ \"value\": \"Text\" }\"\"\")\r\n\r\n\t\tassertEquals(\"Text\", data.value)\r\n\t}\r\n}\r\n```\r\nI know `Data` is in the wrong location (local), this is not a dupe of #135.\r\nIt throws the expected exception:\r\n<details>\r\n\t<summary>\r\n\t    com.fasterxml.jackson.databind.JsonMappingException: Cannot deserialize Class com.example.JacksonSerializationTest$test$Data (of type local/anonymous) as a Bean\r\n\t     at [Source: (String)\"{ \"value\": \"Text\" }\"; line: 1, column: 1]\r\n\t</summary>\r\n\r\n\t\tat com.fasterxml.jackson.databind.JsonMappingException.from(JsonMappingException.java:306)\r\n\t\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:268)\r\n\t\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(DeserializerCache.java:244)\r\n\t\tat com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(DeserializerCache.java:142)\r\n\t\tat com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(DeserializationContext.java:476)\r\n\t\tat com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(ObjectMapper.java:4389)\r\n\t\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4198)\r\n\t\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3205)\r\n\t\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3188)\r\n\t\tat com.example.JacksonSerializationTest.test(JacksonSerializationTest.kt:389)\r\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\t\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\t\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\t\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\t\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\t\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\t\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\t\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\t\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\t\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\t\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\t\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\t\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\t\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\t\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\t\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\t\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\t\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\t\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\t\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\t\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\t\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\t\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\t\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\n\tCaused by: java.lang.IllegalArgumentException: Cannot deserialize Class com.example.JacksonSerializationTest$test$Data (of type local/anonymous) as a Bean\r\n\t\tat com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType(BeanDeserializerFactory.java:883)\r\n\t\tat com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(BeanDeserializerFactory.java:137)\r\n\t\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(DeserializerCache.java:411)\r\n\t\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(DeserializerCache.java:349)\r\n\t\tat com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(DeserializerCache.java:264)\r\n\t\t... 33 more\r\n</details>\r\n... and that's what the expected behavior is for this bug report.\r\n\r\n\r\nIf I change the test name like this: ``@Test fun `broken test`()``, I get a hard to decipher Error instead of a nice Exception:\r\n<details>\r\n\t<summary>\r\n\t\tjava.lang.reflect.GenericSignatureFormatError: Signature Parse error: expected '<' or ';' but got  \r\n\t\tRemaining input:  test$Data;>;\r\n\t</summary>\r\n\r\n\tat sun.reflect.generics.parser.SignatureParser.error(SignatureParser.java:124)\r\n\tat sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature(SignatureParser.java:348)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:310)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:289)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:283)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseTypeArgument(SignatureParser.java:436)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseTypeArguments(SignatureParser.java:396)\r\n\tat sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature(SignatureParser.java:346)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:310)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassSignature(SignatureParser.java:213)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassSig(SignatureParser.java:156)\r\n\tat sun.reflect.generics.repository.ClassRepository.parse(ClassRepository.java:57)\r\n\tat sun.reflect.generics.repository.ClassRepository.parse(ClassRepository.java:41)\r\n\tat sun.reflect.generics.repository.AbstractRepository.<init>(AbstractRepository.java:74)\r\n\tat sun.reflect.generics.repository.GenericDeclRepository.<init>(GenericDeclRepository.java:49)\r\n\tat sun.reflect.generics.repository.ClassRepository.<init>(ClassRepository.java:53)\r\n\tat sun.reflect.generics.repository.ClassRepository.make(ClassRepository.java:70)\r\n\tat java.lang.Class.getGenericInfo(Class.java:2548)\r\n\tat java.lang.Class.getGenericSuperclass(Class.java:765)\r\n\tat com.fasterxml.jackson.core.type.TypeReference.<init>(TypeReference.java:33)\r\n\tat com.example.JacksonSerializationTest$broken test$$inlined$readValue$1.<init>(Extensions.kt:18)\r\n\tat com.example.JacksonSerializationTest.broken test(JacksonSerializationTest.kt:390)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\n</details>\r\n\r\nA similar Error happens if I change the class name like this: `class JacksonSerialization Test {`:\r\n<details>\r\n\t<summary>\r\n\t\tjava.lang.reflect.GenericSignatureFormatError: Signature Parse error: expected '<' or ';' but got  \r\n\t\tRemaining input:  Test$test$Data;>;\r\n\t</summary>\r\n\r\n\tat sun.reflect.generics.parser.SignatureParser.error(SignatureParser.java:124)\r\n\tat sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature(SignatureParser.java:348)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:310)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:289)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseFieldTypeSignature(SignatureParser.java:283)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseTypeArgument(SignatureParser.java:436)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseTypeArguments(SignatureParser.java:396)\r\n\tat sun.reflect.generics.parser.SignatureParser.parsePackageNameAndSimpleClassTypeSignature(SignatureParser.java:346)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassTypeSignature(SignatureParser.java:310)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassSignature(SignatureParser.java:213)\r\n\tat sun.reflect.generics.parser.SignatureParser.parseClassSig(SignatureParser.java:156)\r\n\tat sun.reflect.generics.repository.ClassRepository.parse(ClassRepository.java:57)\r\n\tat sun.reflect.generics.repository.ClassRepository.parse(ClassRepository.java:41)\r\n\tat sun.reflect.generics.repository.AbstractRepository.<init>(AbstractRepository.java:74)\r\n\tat sun.reflect.generics.repository.GenericDeclRepository.<init>(GenericDeclRepository.java:49)\r\n\tat sun.reflect.generics.repository.ClassRepository.<init>(ClassRepository.java:53)\r\n\tat sun.reflect.generics.repository.ClassRepository.make(ClassRepository.java:70)\r\n\tat java.lang.Class.getGenericInfo(Class.java:2548)\r\n\tat java.lang.Class.getGenericSuperclass(Class.java:765)\r\n\tat com.fasterxml.jackson.core.type.TypeReference.<init>(TypeReference.java:33)\r\n\tat com.example.JacksonSerialization Test$test$$inlined$readValue$1.<init>(Extensions.kt:18)\r\n\tat com.example.JacksonSerialization Test.test(JacksonSerializationTest.kt:390)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\n</details>\r\n\r\nSo this bug report is about a hidden error message due to wrong parsing of names.\r\n(See also the tightly related #297)","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/296/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/295","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/295/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/295/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/295/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/295","id":559627302,"node_id":"MDU6SXNzdWU1NTk2MjczMDI=","number":295,"title":"ReflectionCache not Serializable","user":{"login":"elgbar","id":1556738,"node_id":"MDQ6VXNlcjE1NTY3Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/1556738?v=4","gravatar_id":"","url":"https://api.github.com/users/elgbar","html_url":"https://github.com/elgbar","followers_url":"https://api.github.com/users/elgbar/followers","following_url":"https://api.github.com/users/elgbar/following{/other_user}","gists_url":"https://api.github.com/users/elgbar/gists{/gist_id}","starred_url":"https://api.github.com/users/elgbar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elgbar/subscriptions","organizations_url":"https://api.github.com/users/elgbar/orgs","repos_url":"https://api.github.com/users/elgbar/repos","events_url":"https://api.github.com/users/elgbar/events{/privacy}","received_events_url":"https://api.github.com/users/elgbar/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-02-04T10:33:17Z","updated_at":"2020-02-04T16:24:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Ref issue #245, it it possible to make ReflectionCache Serializable?\r\n\r\n>It should be relatively easy, but I would suggest to only serialize it as empty.\r\nSerializing actual contents may be complicated and unlikely to be worth the hassle.\r\n\r\n_Originally posted by @cowtowncoder in https://github.com/FasterXML/jackson-module-kotlin/issues/245#issuecomment-521093443_\r\n\r\n\r\nI do need to pass a configured instance of an ObjectMapper between applications.\r\n\r\nIf this is infeasible, any other suggestions for how to deal with configuring ObjectMapper cross application?\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/295/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/294","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/294/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/294/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/294/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/294","id":556942192,"node_id":"MDU6SXNzdWU1NTY5NDIxOTI=","number":294,"title":"Simplest way to use @JsonManagedReference","user":{"login":"davidmoser","id":3186002,"node_id":"MDQ6VXNlcjMxODYwMDI=","avatar_url":"https://avatars.githubusercontent.com/u/3186002?v=4","gravatar_id":"","url":"https://api.github.com/users/davidmoser","html_url":"https://github.com/davidmoser","followers_url":"https://api.github.com/users/davidmoser/followers","following_url":"https://api.github.com/users/davidmoser/following{/other_user}","gists_url":"https://api.github.com/users/davidmoser/gists{/gist_id}","starred_url":"https://api.github.com/users/davidmoser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davidmoser/subscriptions","organizations_url":"https://api.github.com/users/davidmoser/orgs","repos_url":"https://api.github.com/users/davidmoser/repos","events_url":"https://api.github.com/users/davidmoser/events{/privacy}","received_events_url":"https://api.github.com/users/davidmoser/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-01-29T15:36:11Z","updated_at":"2020-05-12T14:19:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We're trying to use `@JsonManagedReference` but so far the `@JsonBackReference` is null when we deserialize.\r\n\r\nWe tried the approach from #129 .\r\nBut actually this test doesn't check that the back reference is set when deserializing. We added\r\n`assertNotNull(value.colors.single().car)`\r\nand then the test fails.\r\n\r\nThe example from #149 works, but it uses a backing field, which we'd prefer not to use.\r\n\r\nWhat's the simplest way to get the example from #129 to work?","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/294/reactions","total_count":2,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/294/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/290","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/290/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/290/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/290/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/290","id":548603902,"node_id":"MDU6SXNzdWU1NDg2MDM5MDI=","number":290,"title":"Jackson is not able to deserialize when JsonIdentityInfo and JsonTypeInfo is used together.","user":{"login":"muhemmedali","id":42800902,"node_id":"MDQ6VXNlcjQyODAwOTAy","avatar_url":"https://avatars.githubusercontent.com/u/42800902?v=4","gravatar_id":"","url":"https://api.github.com/users/muhemmedali","html_url":"https://github.com/muhemmedali","followers_url":"https://api.github.com/users/muhemmedali/followers","following_url":"https://api.github.com/users/muhemmedali/following{/other_user}","gists_url":"https://api.github.com/users/muhemmedali/gists{/gist_id}","starred_url":"https://api.github.com/users/muhemmedali/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/muhemmedali/subscriptions","organizations_url":"https://api.github.com/users/muhemmedali/orgs","repos_url":"https://api.github.com/users/muhemmedali/repos","events_url":"https://api.github.com/users/muhemmedali/events{/privacy}","received_events_url":"https://api.github.com/users/muhemmedali/received_events","type":"User","site_admin":false},"labels":[{"id":1670719401,"node_id":"MDU6TGFiZWwxNjcwNzE5NDAx","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-01-12T17:53:09Z","updated_at":"2020-01-14T19:13:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have Json to deserialize(copying the problematic chunk below)\r\n`    \"values\" : [ {\r\n            \"IEnumerationValueClass\" : \"EnumerationValueName\",\r\n            \"@id\" : 243,\r\n            \"value\" : 0,\r\n            \"id\" : 3038,\r\n            \"comment\" : \"Indicates the calculation in net values.\",\r\n            \"name\" : \"MonetaryNet\",\r\n            \"type\" : {\r\n              \"IDataTypeClass\" : \"EnumerationType\",\r\n              \"values\" : [ 243, {\r\n                \"IEnumerationValueClass\" : \"EnumerationValueName\",\r\n                \"@id\" : 244,\r\n                \"value\" : 1,\r\n                \"id\" : 3039,\r\n                \"comment\" : \"Indicates the calculation in gross values.\",\r\n                \"name\" : \"MonetaryGross\",\r\n                \"type\" : {\r\n                  \"IDataTypeClass\" : \"EnumerationType\",\r\n                  \"values\" : [ 243, 244, {\r\n                    \"IEnumerationValueClass\" : \"EnumerationValueName\",\r\n                    \"@id\" : 245,\r\n                    \"value\" : 2,\r\n                    \"id\" : 3040,\r\n                    \"comment\" : \"Indicates the calculation is using times as unit.\",\r\n                    \"name\" : \"Time\",\r\n                    \"type\" : {\r\n                      \"IDataTypeClass\" : \"EnumerationType\",\r\n                      \"values\" : [ 243, 244, 245, {\r\n                        \"IEnumerationValueClass\" : \"EnumerationValueName\",\r\n                        \"@id\" : 246,\r\n                        \"value\" : 3,\r\n                        \"id\" : 3041,\r\n                        \"comment\" : \"Indicates the calculation is using volume as unit.\",\r\n                        \"name\" : \"Volume\",\r\n                        \"type\" : {\r\n                          \"IDataTypeClass\" : \"EnumerationType\",\r\n                          \"values\" : [ 243, 244, 245, 246, {\r\n                            \"IEnumerationValueClass\" : \"EnumerationValueName\",\r\n                            \"@id\" : 247,\r\n                            \"value\" : 4,\r\n                            \"id\" : 3042,\r\n                            \"comment\" : \"Indicates the calculation is using bonus specific unit.\",\r\n                            \"name\" : \"Bonus\",\r\n                            \"type\" : {\r\n                              \"IDataTypeClass\" : \"EnumerationType\",\r\n                              \"values\" : [ 243, 244, 245, 246, 247 ],\r\n                              \"name\" : \"GLOBAL.UnitType\",\r\n                              \"comment\" : \"\",\r\n                              \"type\" : 10440,\r\n                              \"baseType\" : [ \"DataType\", \"Integer\" ],\r\n                              \"kind\" : \"mixed\",\r\n                              \"global\" : true,\r\n                              \"code\" : 10440\r\n                            }\r\n                          } ],\r\n                          \"name\" : \"GLOBAL.UnitType\",\r\n                          \"comment\" : \"\",\r\n                          \"type\" : 10440,\r\n                          \"baseType\" : [ \"DataType\", \"Integer\" ],\r\n                          \"kind\" : \"mixed\",\r\n                          \"global\" : true,\r\n                          \"code\" : 10440\r\n                        }\r\n                      }, 247 ],\r\n                      \"name\" : \"GLOBAL.UnitType\",\r\n                      \"comment\" : \"\",\r\n                      \"type\" : 10440,\r\n                      \"baseType\" : [ \"DataType\", \"Integer\" ],\r\n                      \"kind\" : \"mixed\",\r\n                      \"global\" : true,\r\n                      \"code\" : 10440\r\n                    }\r\n                  }, 246, 247 ],\r\n                  \"name\" : \"GLOBAL.UnitType\",\r\n                  \"comment\" : \"\",\r\n                  \"type\" : 10440,\r\n                  \"baseType\" : [ \"DataType\", \"Integer\" ],\r\n                  \"kind\" : \"mixed\",\r\n                  \"global\" : true,\r\n                  \"code\" : 10440\r\n                }\r\n              }, 245, 246, 247 ]`\r\n\r\nWhen I try to deserialize following exception is thrown \r\n`com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class IEnumerationValue]: missing type id property 'IEnumerationValueClass' (for POJO property 'values')\r\n at [Source: (StringReader); line: 91774, column: 28] (through reference chain: MainModel[\"searchActions\"]->java.lang.Object[][3]->Table[\"columns\"]->java.util.ArrayList[1]->TableColumn[\"types\"]->java.util.ArrayList[0]->ColumnDataType[\"type\"]->EnumerationType[\"values\"]->java.util.ArrayList[0]->EnumerationValue[\"type\"]->EnumerationType[\"values\"]->java.util.ArrayList[0])`\r\n\r\nFrom what I see \r\nAfter serializing the the json have the type info \r\n`\r\n \"IEnumerationValueClass\" : \"EnumerationValueName\",\r\n            \"@id\" : 243,\r\n`\r\nbut when the same id is refer in the json later on \r\n` \"values\" : [ 243, {`\r\nJackson is not able to recognize the type.\r\n\r\nInterface \r\n`@JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        include = JsonTypeInfo.As.PROPERTY,\r\n        property = \"IEnumerationValueClass\")\r\n@JsonSubTypes({\r\n        @JsonSubTypes.Type(value = EnumerationValue.class , name = \"EnumerationValueName\"),\r\n})\r\npublic interface IEnumerationValue { \r\n....\r\n}\r\n`\r\nChild class\r\n`\r\n@JsonIdentityInfo(generator= ObjectIdGenerators.IntSequenceGenerator.class, property=\"@id\")\r\npublic class EnumerationValue implements IEnumerationValue, Serializable, Cloneable {\r\n......\r\n}\r\n`\r\n\r\n\r\nReally appreciate the help.\r\n\r\nThanks ","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/290/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/290/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/285","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/285/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/285/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/285/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/285","id":543304453,"node_id":"MDU6SXNzdWU1NDMzMDQ0NTM=","number":285,"title":"Problem deserializing `@JsonValue`, single string constructor, in Jackson 3.0","user":{"login":"cowtowncoder","id":55065,"node_id":"MDQ6VXNlcjU1MDY1","avatar_url":"https://avatars.githubusercontent.com/u/55065?v=4","gravatar_id":"","url":"https://api.github.com/users/cowtowncoder","html_url":"https://github.com/cowtowncoder","followers_url":"https://api.github.com/users/cowtowncoder/followers","following_url":"https://api.github.com/users/cowtowncoder/following{/other_user}","gists_url":"https://api.github.com/users/cowtowncoder/gists{/gist_id}","starred_url":"https://api.github.com/users/cowtowncoder/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cowtowncoder/subscriptions","organizations_url":"https://api.github.com/users/cowtowncoder/orgs","repos_url":"https://api.github.com/users/cowtowncoder/repos","events_url":"https://api.github.com/users/cowtowncoder/events{/privacy}","received_events_url":"https://api.github.com/users/cowtowncoder/received_events","type":"User","site_admin":false},"labels":[{"id":1162961673,"node_id":"MDU6TGFiZWwxMTYyOTYxNjcz","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/3.x","name":"3.x","color":"a7e88d","default":false,"description":"Issue affecting Jackson 3.x"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-12-29T01:57:33Z","updated_at":"2019-12-29T02:00:30Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"So: looks like there is a minor regression in `master` (for 3.0.0-SNAPSHOT), regarding fix (and one of tests) for #22. I will refactor test to have failing case for this issue, in `master` branch.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/285/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/285/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/281","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/281/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/281/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/281/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/281","id":540314701,"node_id":"MDU6SXNzdWU1NDAzMTQ3MDE=","number":281,"title":"KotlinObjectSingletonDeserializer fails to deserialize previously serialized JSON as it doesn't delegate deserializeWithType","user":{"login":"george-hawkins","id":5216161,"node_id":"MDQ6VXNlcjUyMTYxNjE=","avatar_url":"https://avatars.githubusercontent.com/u/5216161?v=4","gravatar_id":"","url":"https://api.github.com/users/george-hawkins","html_url":"https://github.com/george-hawkins","followers_url":"https://api.github.com/users/george-hawkins/followers","following_url":"https://api.github.com/users/george-hawkins/following{/other_user}","gists_url":"https://api.github.com/users/george-hawkins/gists{/gist_id}","starred_url":"https://api.github.com/users/george-hawkins/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/george-hawkins/subscriptions","organizations_url":"https://api.github.com/users/george-hawkins/orgs","repos_url":"https://api.github.com/users/george-hawkins/repos","events_url":"https://api.github.com/users/george-hawkins/events{/privacy}","received_events_url":"https://api.github.com/users/george-hawkins/received_events","type":"User","site_admin":false},"labels":[{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":21,"created_at":"2019-12-19T13:29:51Z","updated_at":"2020-03-11T03:59:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The introduction of [`KotlinObjectSingletonDeserializer`](https://github.com/FasterXML/jackson-module-kotlin/blob/master/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinObjectSingletonDeserializer.kt) in 2.10.1 breaks the deserialization of Kotlin structures that could successfully be deserialized in 2.10.0.\r\n\r\nI've forked jackson-module-kotlin and introduced three branches that demonstrate the problem and show a solution:\r\n\r\n* I branched from tag 2.10.0 and introduced a test that passes successfully for this release - see the test [here](https://github.com/george-hawkins/jackson-module-kotlin/commit/12ca397f2cde0c0da24bc4d63bdabfa3ac1e0f90).\r\n* I branched from tag 2.10.1 and in this branch, the same test now fails.\r\n* I branched from master and introduced a change to `KotlinObjectSingletonDeserializer` that fixes this particular issue such that the test passes again - see the change [here](https://github.com/george-hawkins/jackson-module-kotlin/commit/f6659547be5bc12e47a36bcfa4339e8df3916281).\r\n\r\nTo quickly try this all out just do:\r\n\r\n```\r\n$ git clone git@github.com:george-hawkins/jackson-module-kotlin.git\r\n$ cd jackson-module-kotlin\r\n\r\n$ git checkout 2.10.0-object-id\r\n$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubX test\r\n...\r\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\r\n...\r\n\r\n$ git checkout 2.10.1-object-id-bug \r\n$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubX test\r\n...\r\n[ERROR] Errors: \r\n[ERROR]   TestGithubX.test reading involving type, id and object:63 » InvalidTypeId Miss...\r\n...\r\n\r\n$ git checkout master-object-id-fix \r\n$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubX test\r\n...\r\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0\r\n...\r\n```\r\n\r\nAbove I check out the three branches in turn and for each ask Maven to run the test that I've added - for the 2.10.0 based branch everything works fine, for the 2.10.1 based branch things break and then in the master based branch things are fixed.\r\n\r\nYou could merge my master-object-id-fix branch to fix this particular problem. But I'm actually going to suggest reverting the addition of `KotlinObjectSingletonDeserializer` instead.\r\n\r\n`KotlinObjectSingletonDeserializer` was introduced to try and resolve issue #244. It's certainly confusing for people if they deserialize an `object` and get a different instance of what was supposed to be a singleton. But Jackson has so many special cases and so much clever logic for dealing with e.g. things like cycles (`@JsonIdentityInfo` etc.) and with things like generics (`@JsonTypeInfo` etc.) that it's extremely difficult to cover all situations where Jackson deserializes, stores and reuses objects. `KotlinObjectSingletonDeserializer`, as it is, is just the beginning and it would require quite invasive changes elsewhere in Jackson (not just the Kotlin module) to be able to handle all cases.\r\n\r\nEven with my change, it's still fairly trivial to construct a case where a new instance is returned by deserialization rather than the original singleton.\r\n\r\nE.g. see [this test](https://github.com/george-hawkins/jackson-module-kotlin/commit/425ffc01765032607a74cab24c23c9b84c7db758) that fails (irrespective of whether the change I made above to `KotlinObjectSingletonDeserializer` is applied or not). To try this just do:\r\n\r\n```\r\n$ git checkout master-object-instance-bug\r\n$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubY test\r\n...\r\n[ERROR] test reading a list of objects with id(com.fasterxml.jackson.module.kotlin.test.TestGithubY)  Time elapsed: 0.321 s  <<< FAILURE!\r\njava.lang.AssertionError: second element is not the same instance as Child.\r\n...\r\n```\r\n\r\nI've added a detailed explanation of what's going on in this particular situation below. But in short, I think the problem is too complex to be easily addressed for all possible cases. So I think it's maybe better to just accept that unfortunately Kotlin singletons get deserialized to a different instance than to go with a solution that only works in a certain subset of simpler cases. As such I think the addition of `KotlinObjectSingletonDeserializer` should be reverted.\r\n\r\n---\r\n\r\n### Longer explanation\r\n\r\nThe new `KotlinObjectSingletonDeserializer` wraps an instance of `JsonDeserializer`. `JsonDeserializer` has quite a number of potentially overrideable methods (see below) but currently `KotlinObjectSingletonDeserializer` only delegates the three that I've marked with an asterisk. Of the remaining 16 methods, all but one of them (marked with a minus below) is overridden in at least one subclass in the standard Jackson libraries. So it would be surprising if the fact that `KotlinObjectSingletonDeserializer` doesn't delegate these methods doesn't cause problems in circumstances where the given behavior is overridden in the wrapped deserializer.\r\n\r\n```\r\n* createContextual(ctxt: DeserializationContext, property: BeanProperty ): JsonDeserializer<*>\r\n* deserialize(p: JsonParser, ctxt: DeserializationContext): T\r\n  deserialize(p: JsonParser, ctxt: DeserializationContext, intoValue: T): T\r\n  deserializeWithType(p: JsonParser, ctxt: DeserializationContext, typeDeserializer: TypeDeserializer): Any\r\n- deserializeWithType(p: JsonParser, ctxt: DeserializationContext, typeDeserializer: TypeDeserializer, intoValue: T): Any\r\n  findBackReference(refName: String): SettableBeanProperty\r\n  getDelegatee(): JsonDeserializer<*>\r\n  getEmptyAccessPattern(): AccessPattern\r\n  getEmptyValue(ctxt: DeserializationContext): Any\r\n  getKnownPropertyNames(): Collection<Any>\r\n  getNullAccessPattern(): AccessPattern\r\n  getNullValue(ctxt: DeserializationContext): Any\r\n  getObjectIdReader(ctxt: DeserializationContext): ObjectIdReader\r\n  handledType(): Class<*>\r\n  isCachable(): Boolean\r\n  replaceDelegatee(delegatee: JsonDeserializer<*>): JsonDeserializer<*>\r\n* resolve(ctxt: DeserializationContext)\r\n  supportsUpdate(config: DeserializationConfig): Boolean\r\n  unwrappingDeserializer(ctxt: DeserializationContext, unwrapper: NameTransformer): JsonDeserializer<T>\r\n```\r\n\r\nAnd even if you do delegate to the wrapped deserializer for these methods, there are still issues that `KotlinObjectSingletonDeserializer` can't address.\r\n\r\nE.g. in [the test](https://github.com/george-hawkins/jackson-module-kotlin/commit/425ffc01765032607a74cab24c23c9b84c7db758) I mentioned above `@JsonIdentityInfo` is used. When using `@JsonIdentityInfo` it's the delegate that stores identified instances. The following stacktrace shows where the ID based storage happens initially in this test. As you can see it happens in `ObjectIdValueProperty.deserializeSetAndReturn` which is called fairly deep down after `KotlinObjectSingletonDeserializer` has passed over control to the delegate:\r\n\r\n```\r\n* deserializeSetAndReturn:101, ObjectIdValueProperty (com.fasterxml.jackson.databind.deser.impl)\r\n  deserializeAndSet:83, ObjectIdValueProperty (com.fasterxml.jackson.databind.deser.impl)\r\n  deserializeFromObject:510, BeanDeserializer (com.fasterxml.jackson.databind.deser)\r\n  deserializeWithObjectId:1212, BeanDeserializerBase (com.fasterxml.jackson.databind.deser)\r\n  _deserializeOther:220, BeanDeserializer (com.fasterxml.jackson.databind.deser)\r\n  deserialize:189, BeanDeserializer (com.fasterxml.jackson.databind.deser)\r\n* deserialize:28, KotlinObjectSingletonDeserializer (com.fasterxml.jackson.module.kotlin)\r\n  _deserializeTypedForId:122, AsPropertyTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)\r\n  deserializeTypedFromObject:89, AsPropertyTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)\r\n  deserializeWithType:237, AbstractDeserializer (com.fasterxml.jackson.databind.deser)\r\n  _deserializeWithObjectId:384, CollectionDeserializer (com.fasterxml.jackson.databind.deser.std)\r\n```\r\n\r\nIn the case of a singleton, the delegate stores its deserialized duplicate of the original object rather than the original singleton that only `KotlinObjectSingletonDeserializer` knows about.\r\n\r\nWhen Jackson then encounters an ID for an already stored instance it will use this deserialized duplicate - it doesn't even give `KotlinObjectSingletonDeserializer` a chance to be involved in this process. In the above stacktrace we can see that we're deserializing a list (so `CollectionDeserializer` is being used) and that we're storing an element of this list that's identified with an ID. In this stacktrace below the same `CollectionDeserializer` has hit that ID again and, as you can see, it just looks up the ID directly, via `findObjectId` - it doesn't involve `KotlinObjectSingletonDeserializer` at all, so the stored duplicate is retrieved rather than the original singleton instance:\r\n\r\n```\r\n* findObjectId:78, DefaultDeserializationContext (com.fasterxml.jackson.databind.deser)\r\n  _deserializeFromObjectId:303, AbstractDeserializer (com.fasterxml.jackson.databind.deser)\r\n  deserializeWithType:220, AbstractDeserializer (com.fasterxml.jackson.databind.deser)\r\n* _deserializeWithObjectId:384, CollectionDeserializer (com.fasterxml.jackson.databind.deser.std)\r\n```\r\n\r\nHence if you look at the test you'll see the problem just with the _second_ occurrence of the given singleton object (and you would see the same issue with any further occurrences in a longer list).\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/281/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/281/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/273","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/273/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/273/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/273/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/273","id":531717913,"node_id":"MDU6SXNzdWU1MzE3MTc5MTM=","number":273,"title":"Kotlin classes with constructors with non-field parameter of Enum type cannot be deserialized","user":{"login":"gyuhyeon","id":5991060,"node_id":"MDQ6VXNlcjU5OTEwNjA=","avatar_url":"https://avatars.githubusercontent.com/u/5991060?v=4","gravatar_id":"","url":"https://api.github.com/users/gyuhyeon","html_url":"https://github.com/gyuhyeon","followers_url":"https://api.github.com/users/gyuhyeon/followers","following_url":"https://api.github.com/users/gyuhyeon/following{/other_user}","gists_url":"https://api.github.com/users/gyuhyeon/gists{/gist_id}","starred_url":"https://api.github.com/users/gyuhyeon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gyuhyeon/subscriptions","organizations_url":"https://api.github.com/users/gyuhyeon/orgs","repos_url":"https://api.github.com/users/gyuhyeon/repos","events_url":"https://api.github.com/users/gyuhyeon/events{/privacy}","received_events_url":"https://api.github.com/users/gyuhyeon/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-12-03T04:49:26Z","updated_at":"2019-12-03T04:50:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```\r\nclass Bar(\r\n    tempVar: SomeEnum? = null\r\n) {\r\n    var id: Long\r\n}\r\n```\r\nthis class will fail to deserialize from the response of a restTemplate like:\r\n```\r\nrestTemplate.postForObject(\"http://localhost:8080/api\", mapOf<String, String>(), Bar::class.java)\r\n```\r\n\r\nInterestingly, if you make class Bar in Java instead, there aren't any issues.  \r\nAlso, if you change the `SomeEnum` into another class or `Long`, `String`, etc, there aren't any issues.  \r\nAlso, it works when deserializing from `@RequestParam`.  \r\n\r\nIt exclusively fails when being deserialized from RestTemplate response when the class is defined in Kotlin, has a constructor, has a required/optional parameter that is not a field(var/val) while having a type of Enum.  \r\n\r\nissue demo: https://github.com/gyuhyeon/KotlinSerializationIssueDemo\r\n\r\nIf this is actually a Spring framework bug, please close the issue.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/273/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/271","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/271/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/271/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/271/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/271","id":525974639,"node_id":"MDU6SXNzdWU1MjU5NzQ2Mzk=","number":271,"title":"Classes with properties from both constructor and fields are not alphabetically sorted with @JsonPropertyOrder","user":{"login":"eddsteel","id":206872,"node_id":"MDQ6VXNlcjIwNjg3Mg==","avatar_url":"https://avatars.githubusercontent.com/u/206872?v=4","gravatar_id":"","url":"https://api.github.com/users/eddsteel","html_url":"https://github.com/eddsteel","followers_url":"https://api.github.com/users/eddsteel/followers","following_url":"https://api.github.com/users/eddsteel/following{/other_user}","gists_url":"https://api.github.com/users/eddsteel/gists{/gist_id}","starred_url":"https://api.github.com/users/eddsteel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eddsteel/subscriptions","organizations_url":"https://api.github.com/users/eddsteel/orgs","repos_url":"https://api.github.com/users/eddsteel/repos","events_url":"https://api.github.com/users/eddsteel/events{/privacy}","received_events_url":"https://api.github.com/users/eddsteel/received_events","type":"User","site_admin":false},"labels":[{"id":1670719401,"node_id":"MDU6TGFiZWwxNjcwNzE5NDAx","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/need-test-case","name":"need-test-case","color":"f9d0c4","default":false,"description":"To work on issue, a reproduction (ideally unit test) needed"},{"id":1756885617,"node_id":"MDU6TGFiZWwxNzU2ODg1NjE3","url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/labels/2.11","name":"2.11","color":"c2e0c6","default":false,"description":"Issue affecting version 2.11"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-11-20T18:02:06Z","updated_at":"2019-12-29T22:19:24Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"With the following data class:\r\n\r\n```kotlin\r\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder\r\n\r\n@JsonPropertyOrder(alphabetic=true)\r\ndata class Object(val a: String, val c: Int) {\r\n    val b = false\r\n}\r\n```\r\n\r\nand the following main function:\r\n\r\n```kotlin\r\nfun main(args: Array<String>) {\r\n    println(ObjectMapper().registerModule(KotlinModule()).writeValueAsString(Object(\"a\", 1)))\r\n}\r\n```\r\n\r\nI get the following output:\r\n\r\n```\r\n{\"a\":\"a\",\"c\":1,\"b\":false}\r\n```\r\n\r\ni.e. constructor parameters first, then fields. I'd expect all properties to be alphabetically sorted.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/271/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/260","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/260/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/260/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/260/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/260","id":512721569,"node_id":"MDU6SXNzdWU1MTI3MjE1Njk=","number":260,"title":"YAML parsing of nested objects in Kotlin","user":{"login":"nkiesel","id":1134209,"node_id":"MDQ6VXNlcjExMzQyMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1134209?v=4","gravatar_id":"","url":"https://api.github.com/users/nkiesel","html_url":"https://github.com/nkiesel","followers_url":"https://api.github.com/users/nkiesel/followers","following_url":"https://api.github.com/users/nkiesel/following{/other_user}","gists_url":"https://api.github.com/users/nkiesel/gists{/gist_id}","starred_url":"https://api.github.com/users/nkiesel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nkiesel/subscriptions","organizations_url":"https://api.github.com/users/nkiesel/orgs","repos_url":"https://api.github.com/users/nkiesel/repos","events_url":"https://api.github.com/users/nkiesel/events{/privacy}","received_events_url":"https://api.github.com/users/nkiesel/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-10-25T20:15:38Z","updated_at":"2020-11-01T13:04:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am trying to do:\r\n```kotlin\r\nclass Id(val name: String, val scope: Int = 3)\r\nclass Foo(name: String, val age: Int) { val id = Id(name) }\r\nval mapper = ObjectMapper(YAMLFactory()).registerKotlinModule()\r\nval foo = Foo(\"Mary\", 33)\r\nval s = mapper.writeValueAsString(foo)\r\nval bar = mapper.readValue<Foo>(s)\r\n```\r\nThis fails with `com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class com.metricstream.metadata.service.Foo] value failed for JSON property name due to missing (therefore NULL) value for creator parameter name which is a non-nullable type\r\n at [Source: (StringReader); line: 6, column: 1] (through reference chain: com.metricstream.metadata.service.Foo[\"name\"])`\r\n\r\nIt works if I change `Foo` to\r\n```kotlin\r\nclass Foo(val id: Id, val age: Int) { constructor(name: String, age: Int) : this(Id(name), age) }\r\n```\r\nbut I would like to keep the original `Foo` definition.\r\n","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/260/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/260/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/248","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/248/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/248/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/248/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/248","id":492438970,"node_id":"MDU6SXNzdWU0OTI0Mzg5NzA=","number":248,"title":"Add apache karaf features to jackson","user":{"login":"steinarb","id":691728,"node_id":"MDQ6VXNlcjY5MTcyOA==","avatar_url":"https://avatars.githubusercontent.com/u/691728?v=4","gravatar_id":"","url":"https://api.github.com/users/steinarb","html_url":"https://github.com/steinarb","followers_url":"https://api.github.com/users/steinarb/followers","following_url":"https://api.github.com/users/steinarb/following{/other_user}","gists_url":"https://api.github.com/users/steinarb/gists{/gist_id}","starred_url":"https://api.github.com/users/steinarb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/steinarb/subscriptions","organizations_url":"https://api.github.com/users/steinarb/orgs","repos_url":"https://api.github.com/users/steinarb/repos","events_url":"https://api.github.com/users/steinarb/events{/privacy}","received_events_url":"https://api.github.com/users/steinarb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-09-11T20:00:31Z","updated_at":"2019-09-11T20:00:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This is the part of FasterXML/jackson-databind#2434 that relates to changes to the jackson-module-kotlin project.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/248/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/248/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/247","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/247/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/247/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/247/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/247","id":491067495,"node_id":"MDU6SXNzdWU0OTEwNjc0OTU=","number":247,"title":"enum as map key ignores JsonProperty when data field uses interface type","user":{"login":"mindhaq","id":1186393,"node_id":"MDQ6VXNlcjExODYzOTM=","avatar_url":"https://avatars.githubusercontent.com/u/1186393?v=4","gravatar_id":"","url":"https://api.github.com/users/mindhaq","html_url":"https://github.com/mindhaq","followers_url":"https://api.github.com/users/mindhaq/followers","following_url":"https://api.github.com/users/mindhaq/following{/other_user}","gists_url":"https://api.github.com/users/mindhaq/gists{/gist_id}","starred_url":"https://api.github.com/users/mindhaq/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mindhaq/subscriptions","organizations_url":"https://api.github.com/users/mindhaq/orgs","repos_url":"https://api.github.com/users/mindhaq/repos","events_url":"https://api.github.com/users/mindhaq/events{/privacy}","received_events_url":"https://api.github.com/users/mindhaq/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-09-09T12:32:02Z","updated_at":"2019-09-10T15:05:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Jackson versions tested: 2.10.0.pr2 and 2.9.9.20190807\r\n\r\nI have an enum which implements an interface similar to this:\r\n\r\n```Kotlin\r\ninterface Operation\r\n\r\nenum class ScratchOperation : Operation {\r\n    @JsonProperty(\"not_equals\")\r\n    NotEquals\r\n}\r\n```\r\n\r\nI want to this these enum values as dynamic keys for a JSON property, and created a data class like this:\r\n\r\n```Kotlin\r\ndata class K1(\r\n    val operation: Operation\r\n): HashMap<Operation, String>(\r\n    mapOf(operation to \"foo\")\r\n)\r\n```\r\n\r\nThis results in a JSON which ignores the `@JsonProperty`, and another approach with a dedicated `@JsonValue` also fails:\r\n\r\n```Kotlin\r\nval objectMapper = jacksonObjectMapper()\r\n\r\n// {\"NotEquals\":\"foo\"}\r\nobjectMapper.writeValueAsString(K1(ScratchOperation.NotEquals))\r\n```\r\n\r\nIf I create a slightly different class, where the type of the operation is not the interface, but the actual enum, this is not happening.\r\n\r\n```Kotlin\r\ndata class K2(\r\n    val operation: ScratchOperation\r\n): HashMap<ScratchOperation, String>(\r\n    mapOf(operation to \"foo\")\r\n)\r\n\r\n// {\"not_equals\":\"foo\"}\r\nobjectMapper.writeValueAsString(K2(ScratchOperation.NotEquals))\r\n```\r\n\r\nSo far I worked around this by using a custom Serializer, but I find this quite odd and tried to reduce this example as much as possible.\r\n\r\nThere was a similar issue posted to jackson-databind:\r\nhttps://github.com/FasterXML/jackson-databind/issues/1535","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/247/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/246","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/246/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/246/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/246/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/246","id":485456666,"node_id":"MDU6SXNzdWU0ODU0NTY2NjY=","number":246,"title":"Deserialization fails to with custom De/Serializer","user":{"login":"anvarik","id":1272279,"node_id":"MDQ6VXNlcjEyNzIyNzk=","avatar_url":"https://avatars.githubusercontent.com/u/1272279?v=4","gravatar_id":"","url":"https://api.github.com/users/anvarik","html_url":"https://github.com/anvarik","followers_url":"https://api.github.com/users/anvarik/followers","following_url":"https://api.github.com/users/anvarik/following{/other_user}","gists_url":"https://api.github.com/users/anvarik/gists{/gist_id}","starred_url":"https://api.github.com/users/anvarik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anvarik/subscriptions","organizations_url":"https://api.github.com/users/anvarik/orgs","repos_url":"https://api.github.com/users/anvarik/repos","events_url":"https://api.github.com/users/anvarik/events{/privacy}","received_events_url":"https://api.github.com/users/anvarik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-08-26T21:16:18Z","updated_at":"2019-10-29T01:22:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Here is my code:\r\n```kotlin\r\nclass Foo<K>(\r\n    val foo: Bar<K>\r\n)\r\n\r\nclass Bar<K>(\r\n    val bar: K\r\n)\r\n\r\nclass Baz(\r\n    val baz: ByteArray\r\n)\r\n\r\ninternal class BazSerializer : JsonSerializer<Baz>() {\r\n    override fun serialize(value: Baz, gen: JsonGenerator, serializers: SerializerProvider) {\r\n        gen.writeString(String(value.baz))\r\n    }\r\n}\r\n\r\ninternal class BazDeserializer : JsonDeserializer<Baz>() {\r\n    override fun deserialize(p: JsonParser, ctxt: DeserializationContext): Baz {\r\n        return Baz(p.valueAsString.toByteArray())\r\n    }\r\n}\r\n\r\nval MAPPER = ObjectMapper()\r\n    .registerModule(\r\n        SimpleModule()\r\n            .addSerializer(Baz::class.java, BazSerializer())\r\n            .addDeserializer(Baz::class.java, BazDeserializer())\r\n    ).registerKotlinModule()\r\n}\r\n```\r\n\r\nMy custom de/serializers there for simply byte-> string conversions so that it shows up nicely in JSON. Here are my tests which are green:\r\n\r\n```kotlin\r\n@Test\r\nfun `foo bar`() {\r\n    val type1 = \"text\"\r\n    val type2 = Baz(\"baz\".toByteArray())\r\n\r\n    val fooStringOriginal = Foo(Bar(type1))\r\n    val fooByteArrayOriginal = Foo(Bar(type2))\r\n\r\n    // {\"foo\":{\"bar\":\"text\"}}\r\n    val s1 = MAPPER.writeValueAsString(fooStringOriginal)\r\n    // {\"foo\":{\"bar\":\"baz\"}}\r\n    val s2 = MAPPER.writeValueAsString(fooByteArrayOriginal)\r\n\r\n    val fooStringDeser = MAPPER.readValue<Foo<String>>(s1)\r\n    val fooByteArrayDeser = MAPPER.readValue<Foo<Baz>>(s2)\r\n\r\n    // {\"foo\":{\"bar\":\"text\"}}\r\n    val s11 = MAPPER.writeValueAsString(fooStringDeser)\r\n    // {\"foo\":{\"bar\":\"baz\"}}\r\n    val s21 = MAPPER.writeValueAsString(fooByteArrayDeser)\r\n\r\n    assertEquals(s1, s11)\r\n    assertEquals(s2, s21)\r\n    assertEquals(fooStringOriginal.foo.bar, fooStringDeser.foo.bar)\r\n    assertEquals(String(fooByteArrayDeser.foo.bar.baz), \"baz\")\r\n    assertTrue(fooByteArrayDeser.foo.bar is Baz)\r\n}\r\n```\r\n\r\nnow let's say instead of exposing the MAPPER object on my api I want to add serialize and deserialize methods to my kt file and use those in my tests:\r\n\r\n```kotlin\r\nfun <K> serialize(mapping: Foo<K>): String {\r\n    return MAPPER.writeValueAsString(mapping)\r\n}\r\n\r\nfun <K> deserialize(json: String): Foo<K> {\r\n    return MAPPER.readValue<Foo<K>>(json)\r\n}\r\n```\r\n\r\nHowever for some reason kotlin is not getting my `Baz` and thinking that it's a `HashMap`:\r\n\r\n\r\n```kotlin\r\n@Test\r\nfun `failing foo bar`() {\r\n    val type1 = \"text\"\r\n    val type2 = Baz(\"baz\".toByteArray())\r\n\r\n    val fooStringOriginal = Foo(Bar(type1))\r\n    val fooByteArrayOriginal = Foo(Bar(type2))\r\n\r\n    val s1 = serialize(fooStringOriginal)\r\n    val s2 = serialize(fooByteArrayOriginal)\r\n\r\n    val fooStringDeser = deserialize<String>(s1)\r\n    val fooByteArrayDeser = deserialize<Baz>(s2)\r\n\r\n    val s11 = serialize(fooStringDeser)\r\n    val s21 = serialize(fooByteArrayDeser)\r\n\r\n    assertEquals(s1, s11)\r\n    assertEquals(s2, s21)\r\n    assertEquals(fooStringOriginal.foo.bar, fooStringDeser.foo.bar)\r\n    assertEquals(String(fooByteArrayDeser.foo.bar.baz), \"baz\")\r\n    // ^^^^^ ERROR: java.lang.ClassCastException: java.lang.String cannot be cast to Baz\r\n    assertTrue(fooByteArrayDeser.foo.bar is Baz)\r\n}\r\n```\r\nanyone have a clue why `MAPPER.readValue<Foo<Baz>>` works and `deserialize<Baz>` doesn't (which simply returns `MAPPER.readValue<Foo<K>>`)?\r\n\r\nEDIT: I can't use inline reified since I want this to be called from Java.\r\n(also posted on https://stackoverflow.com/questions/57664947/jackson-kotlin-deserialization-fails-with-custom-serializer)","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/246/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/243","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/243/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/243/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/243/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/243","id":479020903,"node_id":"MDU6SXNzdWU0NzkwMjA5MDM=","number":243,"title":"Reified types are not inlined into type references of generic classes","user":{"login":"meztihn","id":6940823,"node_id":"MDQ6VXNlcjY5NDA4MjM=","avatar_url":"https://avatars.githubusercontent.com/u/6940823?v=4","gravatar_id":"","url":"https://api.github.com/users/meztihn","html_url":"https://github.com/meztihn","followers_url":"https://api.github.com/users/meztihn/followers","following_url":"https://api.github.com/users/meztihn/following{/other_user}","gists_url":"https://api.github.com/users/meztihn/gists{/gist_id}","starred_url":"https://api.github.com/users/meztihn/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/meztihn/subscriptions","organizations_url":"https://api.github.com/users/meztihn/orgs","repos_url":"https://api.github.com/users/meztihn/repos","events_url":"https://api.github.com/users/meztihn/events{/privacy}","received_events_url":"https://api.github.com/users/meztihn/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2019-08-09T14:37:52Z","updated_at":"2020-12-01T20:19:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When you create a type reference for a generic class with a reified type parameter, this type parameter is still generic, not the inlined type. That prevents deserialization of properties of the reified type.\r\nIt might look like very rare case unless you prefer composition over inheritance.\r\nLooks like a new typeOf Kotlin function works correctly in this case. Can we use it somehow?\r\n\r\nKotlin version: 1.3.41\r\nJackson version: 2.9.9\r\n\r\n```Kotlin\r\nval objectMapper = jacksonObjectMapper()\r\n\r\nfun main() {\r\n    val json = \"\"\"{ \"wrapped\": { \"content\": 42 } }\"\"\"\r\n    println(\"objectMapper.readValue<Wrap<Box>>(json): ${objectMapper.readValue<Wrap<Box>>(json)}\")\r\n\r\n    println(\"jacksonTypeRef<Wrap<Box>>(): ${jacksonTypeRef<Wrap<Box>>().type}\")\r\n\r\n    val readWrapped = readWrapped<Box>(json)\r\n    println(\"readWrapped<Box>(json): $readWrapped\")\r\n    println(\"readWrapped<Box>(json).wrapped::class: ${readWrapped.wrapped::class}\")\r\n}\r\n\r\n@UseExperimental(ExperimentalStdlibApi::class)\r\nprivate inline fun <reified R> readWrapped(json: String): Wrap<R> {\r\n    println(\"jacksonTypeRef<R>().type: ${jacksonTypeRef<R>().type}\")\r\n    println(\"jacksonTypeRef<Wrap<R>>().type: ${jacksonTypeRef<Wrap<R>>().type}\")\r\n    println(\"typeOf<Wrap<R>>(): ${typeOf<Wrap<R>>()}\")\r\n    return objectMapper.readValue(json)\r\n}\r\n\r\ndata class Wrap<V>(val wrapped: V)\r\n\r\ndata class Box(val content: Int)\r\n```\r\n\r\nOutput:\r\n```\r\nobjectMapper.readValue<Wrap<Box>>(json): Wrap(wrapped=Box(content=42))\r\njacksonTypeRef<Wrap<Box>>(): Wrap<Box>\r\njacksonTypeRef<R>().type: class Box\r\njacksonTypeRef<Wrap<R>>().type: Wrap<R>\r\ntypeOf<Wrap<R>>(): Wrap<Box>\r\nreadWrapped<Box>(json): Wrap(wrapped={content=42})\r\nreadWrapped<Box>(json).wrapped::class: class java.util.LinkedHashMap\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/243/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/242","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/242/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/242/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/242/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/242","id":473073720,"node_id":"MDU6SXNzdWU0NzMwNzM3MjA=","number":242,"title":"not-null requirement ignored for primitives in data classes","user":{"login":"lavabear","id":31233652,"node_id":"MDQ6VXNlcjMxMjMzNjUy","avatar_url":"https://avatars.githubusercontent.com/u/31233652?v=4","gravatar_id":"","url":"https://api.github.com/users/lavabear","html_url":"https://github.com/lavabear","followers_url":"https://api.github.com/users/lavabear/followers","following_url":"https://api.github.com/users/lavabear/following{/other_user}","gists_url":"https://api.github.com/users/lavabear/gists{/gist_id}","starred_url":"https://api.github.com/users/lavabear/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lavabear/subscriptions","organizations_url":"https://api.github.com/users/lavabear/orgs","repos_url":"https://api.github.com/users/lavabear/repos","events_url":"https://api.github.com/users/lavabear/events{/privacy}","received_events_url":"https://api.github.com/users/lavabear/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2019-07-25T21:15:32Z","updated_at":"2021-03-08T08:24:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When deserializing a data class with primitive types, the default value for that java primitive type is used instead of throwing an IllegalArgumentException or MissingKotlinParameterException.\r\n\r\nSteps to reproduce\r\n1. Create new project using maven archetype - org.jetbrains.kotlin:kotlin-archetype-jvm\r\n2. Add dependency on jackson-module-kotlin - 2.9.7\r\n3. Run the following test class\r\n\r\n```kotlin\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport org.junit.Test\r\nimport java.lang.IllegalArgumentException\r\nimport kotlin.test.assertNull\r\n\r\ndata class NullIntValue(val value: Int?)\r\ndata class NullDoubleValue(val value: Double?)\r\ndata class NullLongValue(val value: Long?)\r\ndata class NullBooleanValue(val value: Boolean?)\r\n\r\ndata class IntValue(val value: Int)\r\ndata class DoubleValue(val value: Double)\r\ndata class LongValue(val value: Long)\r\ndata class BooleanValue(val value: Boolean)\r\n\r\nclass DeserializationTest {\r\n    private val objectMapper = jacksonObjectMapper()\r\n\r\n    @Test\r\n    fun `test value is null - Boolean`(){\r\n        val value : NullBooleanValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test\r\n    fun `test value is null - Double`(){\r\n        val value : NullDoubleValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test\r\n    fun `test value is null - Int`(){\r\n        val value : NullIntValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test\r\n    fun `test value is null - Long`(){\r\n        val value : NullLongValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test(expected = IllegalArgumentException::class)\r\n    fun `test value throws - Boolean`(){\r\n        val value : BooleanValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test(expected = IllegalArgumentException::class)\r\n    fun `test value throws - Double`(){\r\n        val value : DoubleValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test(expected = IllegalArgumentException::class)\r\n    fun `test value throws - Int`(){\r\n        val value : IntValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n\r\n    @Test(expected = IllegalArgumentException::class)\r\n    fun `test value throws - Long`(){\r\n        val value : LongValue = objectMapper.readValue(\"{}\")\r\n        assertNull(value.value)\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/242/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/242/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/237","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/237/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/237/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/237/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/237","id":468585072,"node_id":"MDU6SXNzdWU0Njg1ODUwNzI=","number":237,"title":"@JsonProperty is ignored on data class properties with names starting with \"is\"","user":{"login":"MartinHaeusler","id":16356998,"node_id":"MDQ6VXNlcjE2MzU2OTk4","avatar_url":"https://avatars.githubusercontent.com/u/16356998?v=4","gravatar_id":"","url":"https://api.github.com/users/MartinHaeusler","html_url":"https://github.com/MartinHaeusler","followers_url":"https://api.github.com/users/MartinHaeusler/followers","following_url":"https://api.github.com/users/MartinHaeusler/following{/other_user}","gists_url":"https://api.github.com/users/MartinHaeusler/gists{/gist_id}","starred_url":"https://api.github.com/users/MartinHaeusler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MartinHaeusler/subscriptions","organizations_url":"https://api.github.com/users/MartinHaeusler/orgs","repos_url":"https://api.github.com/users/MartinHaeusler/repos","events_url":"https://api.github.com/users/MartinHaeusler/events{/privacy}","received_events_url":"https://api.github.com/users/MartinHaeusler/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2019-07-16T10:51:24Z","updated_at":"2021-02-08T22:59:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nI've got a data class with a boolean property called `isPublic`. This property *needs* to be called exactly like that in JSON. However, since the property name starts with `is`, the prefix is stripped from the name. Adding `@JsonProperty(\"isPublic\")` does not work either:\r\n\r\n```\r\nclass JacksonTest {\r\n\r\n    @Test\r\n    fun serializeTest(){\r\n        val objectMapper = ObjectMapper()\r\n        objectMapper.registerKotlinModule()\r\n\r\n        val instance = MyClass(true)\r\n        val json = objectMapper.writeValueAsString(instance)\r\n\r\n        assertEquals(\"\"\"{\"isPublic\":true}\"\"\", json.replace(\"\"\"\\s+\"\"\".toRegex(), \"\"))\r\n    }\r\n\r\n    data class MyClass(\r\n        @JsonProperty(\"isPublic\")\r\n        val isPublic: Boolean\r\n    )\r\n\r\n}\r\n```\r\n\r\n... fails with an assertion error:\r\n\r\n`java.lang.AssertionError: Expected <{\"isPublic\":true}>, actual <{\"public\":true}>.`\r\n\r\nIt doesn't matter what you pass into the `@JsonProperty` annotation, in the JSON output the field is always (!!) called `public`.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/237/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/237/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/235","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/235/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/235/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/235/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/235","id":462538590,"node_id":"MDU6SXNzdWU0NjI1Mzg1OTA=","number":235,"title":"Unable to produce error when subclass contains a field defined in a superclass, that the subclass is not allowed to have (Identified in 2.9.8)","user":{"login":"gerob311","id":8335312,"node_id":"MDQ6VXNlcjgzMzUzMTI=","avatar_url":"https://avatars.githubusercontent.com/u/8335312?v=4","gravatar_id":"","url":"https://api.github.com/users/gerob311","html_url":"https://github.com/gerob311","followers_url":"https://api.github.com/users/gerob311/followers","following_url":"https://api.github.com/users/gerob311/following{/other_user}","gists_url":"https://api.github.com/users/gerob311/gists{/gist_id}","starred_url":"https://api.github.com/users/gerob311/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gerob311/subscriptions","organizations_url":"https://api.github.com/users/gerob311/orgs","repos_url":"https://api.github.com/users/gerob311/repos","events_url":"https://api.github.com/users/gerob311/events{/privacy}","received_events_url":"https://api.github.com/users/gerob311/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-07-01T06:42:33Z","updated_at":"2019-07-01T06:51:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Recently, I have attempted to update this package to 2.9.9 from 2.9.7 in my project. In this project, I have a situation where there are some special subclasses where a field defined in the superclass is useless to it, and I wanted an exception thrown if this field is included in the JSON.\r\n\r\nPreviously I have done this by declaring the parameter in the subclass with type \"Nothing?\", and giving it a default value of \"null\". This used to result in an UnrecognizedPropertyException if the field's definition in the super class was a class, or a MismatchedInputException if it was a boolean (these are the only two cases my project is concerned with at the moment).\r\n\r\nAs of 2.9.8, the test cases that I wrote around this are failing. I am including a sample test file that demonstrates the issue (which passes in 2.9.7).\r\n\r\nAre there any workarounds for this?\r\n\r\n\r\n\r\n`\r\npackage jackson.test.schedule\r\n\r\nimport com.fasterxml.jackson.annotation.JsonInclude\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo\r\nimport com.fasterxml.jackson.databind.DatabindContext\r\nimport com.fasterxml.jackson.databind.DeserializationFeature\r\nimport com.fasterxml.jackson.databind.JavaType\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver\r\nimport com.fasterxml.jackson.databind.exc.MismatchedInputException\r\nimport com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException\r\nimport com.fasterxml.jackson.databind.jsontype.TypeIdResolver\r\nimport com.fasterxml.jackson.databind.type.TypeFactory\r\nimport com.fasterxml.jackson.datatype.jsr310.JavaTimeModule\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport org.junit.Test\r\nimport kotlin.test.assertFailsWith\r\n\r\nclass TestIdResolver : TypeIdResolver {\r\n    protected lateinit var baseType: JavaType; private set\r\n\r\n    override fun init(baseType: JavaType) {\r\n        this.baseType = baseType\r\n    }\r\n\r\n    override fun getMechanism(): JsonTypeInfo.Id {\r\n        return JsonTypeInfo.Id.CUSTOM\r\n    }\r\n\r\n    override fun idFromValue(obj: Any): String {\r\n        return idFromValueAndType(obj, obj.javaClass)\r\n    }\r\n\r\n    override fun idFromBaseType(): String {\r\n        return idFromValueAndType(null, baseType.rawClass)\r\n    }\r\n\r\n    override fun getDescForKnownTypeIds(): String? {\r\n        return null\r\n    }\r\n\r\n    override fun idFromValueAndType(obj: Any?, clazz: Class<*>): String {\r\n        return clazz.simpleName\r\n    }\r\n\r\n    override fun typeFromId(context: DatabindContext, id: String): JavaType? {\r\n        val clazz: Class<*>? = Class.forName(\"jackson.test.schedule.$id\")\r\n        return TypeFactory.defaultInstance().constructSpecializedType(baseType, clazz)\r\n    }\r\n}\r\n\r\nclass Constraint(\r\n    val someValue: Int\r\n);\r\n\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"specificClass\")\r\n@JsonTypeIdResolver(TestIdResolver::class)\r\nopen class ConstrainedSuperClass(\r\n    val constraint: Constraint? = null\r\n)\r\n\r\nclass ConstrainedSubClass(\r\n    val number: Int,\r\n    constraint: Nothing? = null // Prevent constraint from SuperClass from being accessible\r\n): ConstrainedSuperClass()\r\n\r\n\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = \"specificClass\")\r\n@JsonTypeIdResolver(TestIdResolver::class)\r\nopen class FlaggedSuperClass(\r\n    val flag: Boolean = false\r\n)\r\n\r\nclass FlaggedSubClass(\r\n    val number: Int,\r\n    @Suppress(\"UNUSED_PARAMETER\") flag: Nothing? = null\r\n): FlaggedSuperClass()\r\n\r\n\r\nfun setupBaseObjectMapper(): ObjectMapper {\r\n    return jacksonObjectMapper().registerModule(\r\n        // Gives us standard deserializers for time related stuff\r\n        JavaTimeModule()\r\n    )\r\n        // When parsing timestamps, we don't want to lose the offset information\r\n        .disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE)\r\n        // We would prefer an error if we're trying to store a float in an int\r\n        .disable(DeserializationFeature.ACCEPT_FLOAT_AS_INT)\r\n        // If a primitive field (like Int) is non-nullable (as in the Kotlin meaning), then we don't want nulls being converted to 0\r\n        .enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)\r\n        // Because enums could change order in future versions (if we keep them in lexicographic order, for example),\r\n        // we don't want the client to expect that they can give us the ordinal value of the enum.\r\n        .enable(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)\r\n        // When serialising schedule expressions, don't include null values\r\n        .setSerializationInclusion(JsonInclude.Include.NON_NULL)\r\n}\r\n\r\nclass JacksonTest {\r\n    @Test\r\n    fun testDeserialiseFailsWithUnexpectedConstraint() {\r\n        val expressionMapper: ObjectMapper = setupBaseObjectMapper()\r\n\r\n        assertFailsWith<UnrecognizedPropertyException> {\r\n            expressionMapper.readValue<ConstrainedSuperClass>(\r\n                //language=JSON\r\n                \"\"\"{\r\n                        \"specificClass\": \"ConstrainedSubClass\",\r\n                        \"number\": 5,\r\n                        \"constraint\": {\r\n                          \"someValue\": 7\r\n                        }\r\n                    }\"\"\".trimIndent()\r\n            )\r\n        }\r\n    }\r\n\r\n    @Test\r\n    fun testDeserialiseFailsWithUnexpectedBoolean() {\r\n        val expressionMapper: ObjectMapper = setupBaseObjectMapper()\r\n\r\n        assertFailsWith<MismatchedInputException> {\r\n            expressionMapper.readValue<FlaggedSuperClass>(\r\n                //language=JSON\r\n                \"\"\"\r\n                {\r\n                   \"specificClass\": \"FlaggedSubClass\",\r\n                   \"number\": 5,\r\n                   \"flag\": true\r\n                }\r\n                \"\"\".trimIndent()\r\n            )\r\n        }\r\n    }\r\n}\r\n`","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/235/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/249","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/249/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/249/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/249/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/249","id":492442117,"node_id":"MDU6SXNzdWU0OTI0NDIxMTc=","number":249,"title":"Kotlin default values do not work for missing fields when using polymorphism with JsonTypeInfo.As.EXTERNAL_PROPERTY","user":{"login":"metarag","id":12293899,"node_id":"MDQ6VXNlcjEyMjkzODk5","avatar_url":"https://avatars.githubusercontent.com/u/12293899?v=4","gravatar_id":"","url":"https://api.github.com/users/metarag","html_url":"https://github.com/metarag","followers_url":"https://api.github.com/users/metarag/followers","following_url":"https://api.github.com/users/metarag/following{/other_user}","gists_url":"https://api.github.com/users/metarag/gists{/gist_id}","starred_url":"https://api.github.com/users/metarag/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/metarag/subscriptions","organizations_url":"https://api.github.com/users/metarag/orgs","repos_url":"https://api.github.com/users/metarag/repos","events_url":"https://api.github.com/users/metarag/events{/privacy}","received_events_url":"https://api.github.com/users/metarag/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-06-25T05:01:56Z","updated_at":"2020-09-08T19:22:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```kotlin\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo\r\nimport com.fasterxml.jackson.databind.annotation.NoClass\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\n\r\nsealed class Entity\r\ndata class Bacteria(val speciesName: String): Entity()\r\ndata class Disease(val diseaseId: Long): Entity()\r\n\r\nenum class EntityType {\r\n    MY_Bacteria,\r\n    MY_Disease\r\n}\r\n\r\ndata class MyRequestBody(\r\n    val entityType: EntityType,\r\n    @JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        include = JsonTypeInfo.As.EXTERNAL_PROPERTY,\r\n        property = \"entityType\",\r\n        defaultImpl = NoClass::class,\r\n        visible = true\r\n    )\r\n    @JsonSubTypes(\r\n        JsonSubTypes.Type(value = Disease::class, name = \"MY_Disease\"),\r\n        JsonSubTypes.Type(value = Bacteria::class, name = \"MY_Bacteria\")\r\n    )\r\n    val entity: Entity? = null\r\n)\r\n\r\nfun main() {\r\n    val jsonString = \"\"\"{\r\n        |  \"entityType\": \"MY_Bacteria\"\r\n        |}\"\"\".trimMargin()\r\n    val reader = jacksonObjectMapper()\r\n    val deserialized = reader.readValue<MyRequestBody>(jsonString)\r\n    println(deserialized)\r\n}\r\n```\r\n\r\nresults in \r\n```\r\nException in thread \"main\" com.fasterxml.jackson.databind.exc.MismatchedInputException: Missing property 'entity' for external type id 'entityType'\r\n at [Source: (String)\"{\r\n  \"entityType\": \"MY_Bacteria\"\r\n}\"; line: 3, column: 1]\r\n\tat com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)\r\n\tat com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1356)\r\n\tat com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.complete(ExternalTypeHandler.java:281)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(BeanDeserializer.java:1001)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(BeanDeserializer.java:853)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:324)\r\n\tat com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4013)\r\n\tat com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3023)\r\n\tat MainKt.main(Main.kt:40)\r\n\tat MainKt.main(Main.kt)\r\n```\r\n\r\nHowever, if we change it to use `JsonTypeInfo.As.PROPERTY`, it works for the missing field\r\n```kotlin\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo\r\nimport com.fasterxml.jackson.databind.annotation.NoClass\r\nimport com.fasterxml.jackson.module.kotlin.jacksonObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\n\r\nsealed class Entity(val entityType: EntityType)\r\ndata class Bacteria(val speciesName: String): Entity(EntityType.MY_Bacteria)\r\ndata class Disease(val diseaseId: Long): Entity(EntityType.MY_Disease)\r\n\r\nenum class EntityType {\r\n    MY_Bacteria,\r\n    MY_Disease\r\n}\r\n\r\ndata class MyRequestBody(\r\n    @JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        include = JsonTypeInfo.As.PROPERTY,\r\n        property = \"entityType\",\r\n        defaultImpl = NoClass::class,\r\n        visible = true\r\n    )\r\n    @JsonSubTypes(\r\n        JsonSubTypes.Type(value = Disease::class, name = \"MY_Disease\"),\r\n        JsonSubTypes.Type(value = Bacteria::class, name = \"MY_Bacteria\")\r\n    )\r\n    val entity: Entity? = null\r\n)\r\n\r\nfun main() {\r\n    val jsonString = \"{}\"\r\n    val reader = jacksonObjectMapper()\r\n    val deserialized = reader.readValue<MyRequestBody>(jsonString)\r\n    println(deserialized)\r\n}\r\n```\r\nIt successfully prints `MyRequestBody(entity=null)`","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/249/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/249/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/234","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/234/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/234/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/234/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/234","id":457320822,"node_id":"MDU6SXNzdWU0NTczMjA4MjI=","number":234,"title":"Getting MismatchedInputException instead of MissingKotlinParameterException","user":{"login":"rus4j","id":11685364,"node_id":"MDQ6VXNlcjExNjg1MzY0","avatar_url":"https://avatars.githubusercontent.com/u/11685364?v=4","gravatar_id":"","url":"https://api.github.com/users/rus4j","html_url":"https://github.com/rus4j","followers_url":"https://api.github.com/users/rus4j/followers","following_url":"https://api.github.com/users/rus4j/following{/other_user}","gists_url":"https://api.github.com/users/rus4j/gists{/gist_id}","starred_url":"https://api.github.com/users/rus4j/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rus4j/subscriptions","organizations_url":"https://api.github.com/users/rus4j/orgs","repos_url":"https://api.github.com/users/rus4j/repos","events_url":"https://api.github.com/users/rus4j/events{/privacy}","received_events_url":"https://api.github.com/users/rus4j/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-06-18T08:04:49Z","updated_at":"2019-06-18T08:07:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Description\r\nMissing **primitive** parameter in json will generate `MismatchedInputException` instead of `MissingKotlinParameterException` while deserialization\r\n\r\n### Data to reproduce:\r\nJson:\r\n<pre>val json = \"{ \"objType\":\"type\" }\"</pre>\r\n\r\nData class:\r\n<pre>data class TestEntity (\r\n    val id: Long,\r\n    val objType: String?\r\n)</pre>\r\n\r\n`ObjectMapper` configuration:\r\n<pre>\r\nval mapper = ObjectMapper()\r\n        .registerKotlinModule()\r\n        .enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)\r\n\r\nval object = mapper.readValue(json, TestEntity::class.java)\r\n</pre>\r\n\r\n### Actual result: \r\n\r\n> com.fasterxml.jackson.databind.exc.MismatchedInputException: Missing required creator property 'id' (index 0)\r\n\r\n### Expected result: \r\n`MissingKotlinParameterException` is thrown","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/234/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/232","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/232/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/232/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/232/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/232","id":456625505,"node_id":"MDU6SXNzdWU0NTY2MjU1MDU=","number":232,"title":"JsonTypeInfo not included in JSON","user":{"login":"ufoscout","id":960885,"node_id":"MDQ6VXNlcjk2MDg4NQ==","avatar_url":"https://avatars.githubusercontent.com/u/960885?v=4","gravatar_id":"","url":"https://api.github.com/users/ufoscout","html_url":"https://github.com/ufoscout","followers_url":"https://api.github.com/users/ufoscout/followers","following_url":"https://api.github.com/users/ufoscout/following{/other_user}","gists_url":"https://api.github.com/users/ufoscout/gists{/gist_id}","starred_url":"https://api.github.com/users/ufoscout/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ufoscout/subscriptions","organizations_url":"https://api.github.com/users/ufoscout/orgs","repos_url":"https://api.github.com/users/ufoscout/repos","events_url":"https://api.github.com/users/ufoscout/events{/privacy}","received_events_url":"https://api.github.com/users/ufoscout/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-06-16T10:16:06Z","updated_at":"2020-04-21T09:47:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Converting an object annotated with @JsonTypeInfo results in a JSON that does not contain the JsonTypeInfo; consequently, Jackson fails when trying to read the very same JSON that it created.\r\n\r\nHere an example:\r\n\r\n```kotlin\r\nimport com.fasterxml.jackson.annotation.JsonSubTypes\r\nimport com.fasterxml.jackson.annotation.JsonTypeInfo\r\nimport com.fasterxml.jackson.databind.ObjectMapper\r\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\r\nimport com.fasterxml.jackson.module.kotlin.readValue\r\nimport org.junit.jupiter.api.Test\r\n\r\n@JsonTypeInfo(\r\n        use = JsonTypeInfo.Id.NAME,\r\n        include = JsonTypeInfo.As.PROPERTY,\r\n        property = \"_type\")\r\n@JsonSubTypes(\r\n        JsonSubTypes.Type(value = Data::class, name = \"V1\")\r\n)\r\ninterface AbstractData\r\n\r\ndata class Data(\r\n        val count: Int\r\n): AbstractData\r\n\r\n\r\nclass Model<T> (\r\n        val data: T\r\n)\r\n\r\nclass Test {\r\n\r\n    @Test\r\n    fun should_include_type() {\r\n\r\n        val model = Model<Data> (\r\n                data = Data(1)\r\n        )\r\n\r\n        val mapper = ObjectMapper()\r\n        mapper.registerModule(KotlinModule())\r\n\r\n        val modelJson = mapper.writeValueAsString(model)\r\n\r\n        // this prints:\r\n        // {\"data\":{\"count\":1}}\r\n        // instead of\r\n        // {\"data\":{\"_type\": \"V1\", \"count\":1}}\r\n        println(modelJson)\r\n\r\n        // This line fails with error:\r\n        // com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class com.test.Data]: missing type id property '_type' (for POJO property 'data')\r\n        val modelFromString: Model<Data> = mapper.readValue(modelJson)\r\n    }\r\n}\r\n```\r\n\r\nHere you can find the smallest reproducer for the problem:\r\nhttps://github.com/ufoscout/JacksonBug\r\n\r\nI hope this can be fixed easily, this is causing critical issues in production for us.","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/232/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/232/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/361","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/361/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/361/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/361/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/361","id":684079910,"node_id":"MDU6SXNzdWU2ODQwNzk5MTA=","number":361,"title":"Kotlin serializers for KClass","user":{"login":"jschneider","id":45393,"node_id":"MDQ6VXNlcjQ1Mzkz","avatar_url":"https://avatars.githubusercontent.com/u/45393?v=4","gravatar_id":"","url":"https://api.github.com/users/jschneider","html_url":"https://github.com/jschneider","followers_url":"https://api.github.com/users/jschneider/followers","following_url":"https://api.github.com/users/jschneider/following{/other_user}","gists_url":"https://api.github.com/users/jschneider/gists{/gist_id}","starred_url":"https://api.github.com/users/jschneider/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jschneider/subscriptions","organizations_url":"https://api.github.com/users/jschneider/orgs","repos_url":"https://api.github.com/users/jschneider/repos","events_url":"https://api.github.com/users/jschneider/events{/privacy}","received_events_url":"https://api.github.com/users/jschneider/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-06-10T19:28:42Z","updated_at":"2020-08-22T22:47:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"If you want to add something like \"foobaar::class\" to a JSON-File, this code could help:\r\n\r\n```\r\nclass ExtendedKotlinModule : SimpleModule() {\r\n  init {\r\n    addSerializer(KClass::class.java, KClassSerializer())\r\n    addDeserializer(KClass::class.java, KClassDeserializer())\r\n  }\r\n}\r\n\r\nclass KClassSerializer : StdSerializer<KClass<*>>(KClass::class.java) {\r\n  override fun serialize(value: KClass<*>, gen: JsonGenerator, provider: SerializerProvider) {\r\n    gen.writeString(value.qualifiedName)\r\n  }\r\n}\r\n\r\nclass KClassDeserializer : StdDeserializer<KClass<*>>(KClass::class.java) {\r\n  override fun deserialize(p: JsonParser, ctxt: DeserializationContext?): KClass<*> {\r\n    val qualifiedName = p.text\r\n    return Class.forName(qualifiedName).kotlin\r\n  }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/361/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/228","repository_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin","labels_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/228/labels{/name}","comments_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/228/comments","events_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/228/events","html_url":"https://github.com/FasterXML/jackson-module-kotlin/issues/228","id":451106085,"node_id":"MDU6SXNzdWU0NTExMDYwODU=","number":228,"title":"Compatibility with JPMS","user":{"login":"Burtan","id":3275473,"node_id":"MDQ6VXNlcjMyNzU0NzM=","avatar_url":"https://avatars.githubusercontent.com/u/3275473?v=4","gravatar_id":"","url":"https://api.github.com/users/Burtan","html_url":"https://github.com/Burtan","followers_url":"https://api.github.com/users/Burtan/followers","following_url":"https://api.github.com/users/Burtan/following{/other_user}","gists_url":"https://api.github.com/users/Burtan/gists{/gist_id}","starred_url":"https://api.github.com/users/Burtan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Burtan/subscriptions","organizations_url":"https://api.github.com/users/Burtan/orgs","repos_url":"https://api.github.com/users/Burtan/repos","events_url":"https://api.github.com/users/Burtan/events{/privacy}","received_events_url":"https://api.github.com/users/Burtan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false},"assignees":[{"login":"dinomite","id":23986,"node_id":"MDQ6VXNlcjIzOTg2","avatar_url":"https://avatars.githubusercontent.com/u/23986?v=4","gravatar_id":"","url":"https://api.github.com/users/dinomite","html_url":"https://github.com/dinomite","followers_url":"https://api.github.com/users/dinomite/followers","following_url":"https://api.github.com/users/dinomite/following{/other_user}","gists_url":"https://api.github.com/users/dinomite/gists{/gist_id}","starred_url":"https://api.github.com/users/dinomite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dinomite/subscriptions","organizations_url":"https://api.github.com/users/dinomite/orgs","repos_url":"https://api.github.com/users/dinomite/repos","events_url":"https://api.github.com/users/dinomite/events{/privacy}","received_events_url":"https://api.github.com/users/dinomite/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2019-06-01T17:12:47Z","updated_at":"2021-09-11T18:43:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey,\r\nit seems that this module uses internal functions of kotlin.reflect and thus is incompatible with the JPMS:\r\n\r\n```\r\nCaused by: java.util.ServiceConfigurationError: kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader: module merged.module does not declare `uses`\r\n```","reactions":{"url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/228/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/FasterXML/jackson-module-kotlin/issues/228/timeline","performed_via_github_app":null}],"issuesCount":89,"contributors":46,"pullRequests":11,"projectUrl":"https://github.com/FasterXML/jackson-module-kotlin","issuesUrl":"https://github.com/FasterXML/jackson-module-kotlin/issues","stars":895,"watchers":895,"forks":150,"githubLicenseName":"Apache-2.0","openIssues":140,"createdAt":"2014-08-27T20:20:03Z","updatedAt":"2021-10-15T15:02:57Z","monthsSinceUpdated":0},{"id":"kotlin-stdlib-jdk8@1.5.0","groupId":"org.jetbrains.kotlin","artifactId":"kotlin-stdlib-jdk8","version":"1.5.0","name":"Kotlin Stdlib Jdk8","description":"The Kotlin Programming Language. ","licenses":{"license":{"name":"The Apache License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.txt"}},"github":"https://github.com/JetBrains/kotlin","latestVersion":"1.6.0-RC","issues":[],"issuesCount":0,"contributors":705,"pullRequests":130,"projectUrl":"https://github.com/JetBrains/kotlin","issuesUrl":"https://github.com/JetBrains/kotlin/issues","stars":39016,"watchers":39016,"forks":4749,"openIssues":132,"createdAt":"2012-02-13T17:29:58Z","updatedAt":"2021-10-15T17:17:06Z","monthsSinceUpdated":0},{"id":"kotlin-reflect@1.5.0","groupId":"org.jetbrains.kotlin","artifactId":"kotlin-reflect","version":"1.5.0","name":"Kotlin Reflect","description":"The Kotlin Programming Language. ","licenses":{"license":{"name":"The Apache License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.txt"}},"github":"https://github.com/JetBrains/kotlin","latestVersion":"1.6.0-RC","issues":[],"issuesCount":0,"contributors":705,"pullRequests":130,"projectUrl":"https://github.com/JetBrains/kotlin","issuesUrl":"https://github.com/JetBrains/kotlin/issues","stars":39016,"watchers":39016,"forks":4749,"openIssues":132,"createdAt":"2012-02-13T17:29:58Z","updatedAt":"2021-10-15T17:17:06Z","monthsSinceUpdated":0},{"id":"kotlinx-coroutines-core@1.5.0","groupId":"org.jetbrains.kotlinx","artifactId":"kotlinx-coroutines-core","version":"1.5.0","name":"kotlinx-coroutines-core","description":"Library support for Kotlin coroutines ","licenses":{"license":{"name":"The Apache Software License, Version 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.txt","distribution":"repo"}},"github":"https://github.com/Kotlin/kotlinx.coroutines","latestVersion":"1.5.2-native-mt","issues":[{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2990","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2990/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2990/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2990/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2990","id":1027393382,"node_id":"I_kwDOA63QcM49PMdm","number":2990,"title":"Task<T>.await() schedules its continuation on the main thread","user":{"login":"petrcermak","id":2546601,"node_id":"MDQ6VXNlcjI1NDY2MDE=","avatar_url":"https://avatars.githubusercontent.com/u/2546601?v=4","gravatar_id":"","url":"https://api.github.com/users/petrcermak","html_url":"https://github.com/petrcermak","followers_url":"https://api.github.com/users/petrcermak/followers","following_url":"https://api.github.com/users/petrcermak/following{/other_user}","gists_url":"https://api.github.com/users/petrcermak/gists{/gist_id}","starred_url":"https://api.github.com/users/petrcermak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/petrcermak/subscriptions","organizations_url":"https://api.github.com/users/petrcermak/orgs","repos_url":"https://api.github.com/users/petrcermak/repos","events_url":"https://api.github.com/users/petrcermak/events{/privacy}","received_events_url":"https://api.github.com/users/petrcermak/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-15T12:28:08Z","updated_at":"2021-10-15T12:28:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The `Task<T>.await()` extension function [schedules its continuation on the main thread](https://github.com/Kotlin/kotlinx.coroutines/blob/e81ce210eef465d8fa0097bd6e463202b0f3e253/integration/kotlinx-coroutines-play-services/src/Tasks.kt#L136-L144), which adds unnecessary latency:\r\n\r\n```kt\r\naddOnCompleteListener {\r\n    val e = it.exception\r\n    if (e == null) {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        if (it.isCanceled) deferred.cancel() else deferred.complete(it.result as T)\r\n    } else {\r\n        deferred.completeExceptionally(e)\r\n    }\r\n}\r\n```\r\n\r\nIt would be better to avoid this by explicitly passing the [direct executor](https://guava.dev/releases/19.0/api/docs/com/google/common/util/concurrent/MoreExecutors.html#directExecutor()) to [`addOnCompleteListener`](https://developers.google.com/android/reference/com/google/android/gms/tasks/Task#addOnCompleteListener(java.util.concurrent.Executor,%20com.google.android.gms.tasks.OnCompleteListener%3CTResult%3E)) instead:\r\n\r\n```kt\r\naddOnCompleteListener(directExecutor()) {\r\n    val e = it.exception\r\n    if (e == null) {\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        if (it.isCanceled) deferred.cancel() else deferred.complete(it.result as T)\r\n    } else {\r\n        deferred.completeExceptionally(e)\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2990/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2989","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2989/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2989/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2989/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2989","id":1027015919,"node_id":"I_kwDOA63QcM49NwTv","number":2989,"title":"Operator to chunk a single Flow<T> into a Flow<Flow<T>>","user":{"login":"Flockavelli","id":92325026,"node_id":"U_kgDOBYDEog","avatar_url":"https://avatars.githubusercontent.com/u/92325026?v=4","gravatar_id":"","url":"https://api.github.com/users/Flockavelli","html_url":"https://github.com/Flockavelli","followers_url":"https://api.github.com/users/Flockavelli/followers","following_url":"https://api.github.com/users/Flockavelli/following{/other_user}","gists_url":"https://api.github.com/users/Flockavelli/gists{/gist_id}","starred_url":"https://api.github.com/users/Flockavelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Flockavelli/subscriptions","organizations_url":"https://api.github.com/users/Flockavelli/orgs","repos_url":"https://api.github.com/users/Flockavelli/repos","events_url":"https://api.github.com/users/Flockavelli/events{/privacy}","received_events_url":"https://api.github.com/users/Flockavelli/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-10-15T02:31:32Z","updated_at":"2021-10-15T04:01:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I essentially want a stream clipping/chunking operator -- the opposite of FlatMap/Merge.\r\n\r\nI have a video stream which is a `Flow<Bitmap>`.\r\n\r\nI map the individual Bitmap frames through an object detector algorithm and get a `Flow<FramesWithDetections>`\r\n\r\n`FramesWithDetections` is a `Pair<Bitmap, List<Detection>>` where the list can be empty if nothing is detected, or could contain bounding rectangles of objects that are detected in the frames.\r\n\r\nWhat I want is an operator that could take the `Flow<FramesWithDetections>` and transform it into a `Flow<Flow<Bitmap>>` where the inner `Flow<Bitmap>` is a continuous flow of sequential frames (a \"clip\") where I detected objects for that whole duration.\r\n\r\nI don't want just one of these, I want a flow of these flows (clips) every time objects are detected in sequence.\r\n\r\nSo to reiterate, I have a stream/flow of frames like this:\r\n🖼🖼🖼🖼😦😦😦😦😦🖼🖼🖼🖼🖼🖼🖼🖼🖼🖼🖼🖼😎😎😎😎😎😎😎🖼🖼🖼🖼🖼🖼🖼😦😦😦🖼🖼🖼🖼🖼🖼🖼🖼🖼🛑\r\n\r\nwhere 🖼  are video frames with no objects detected in them \r\nthe 😎  and 😦  are video frames that do contain some objects that are detected,\r\nand '🛑 ' is the end of a stream\r\n\r\n\r\nthe operator would take that overall flow of video frames and give me a `Flow<Flow<Bitmap>>` where the outer flow would emit 3 inner flows like this:\r\n\r\n😦😦😦😦😦🛑\r\n😎😎😎😎😎😎😎🛑\r\n😦😦😦🛑\r\n\r\nthen the outer flow would also 🛑\r\n\r\nthe reason for this is I would want to subscribe to the outer flow and feed the frames into a video encoder: \r\nIf I flat map the entire stream and feed that into the encoder, I would get one clip with all the frames that have objects detected in them, but I could also subscribe to the outer flow and send the individual clips (inner flows) to the encoder to make 3 separate clips from the one overall video stream.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2989/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2988","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2988/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2988/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2988/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2988","id":1026693563,"node_id":"I_kwDOA63QcM49Mhm7","number":2988,"title":"JS silently crashing under highly obscure conditions","user":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"labels":[{"id":1252651513,"node_id":"MDU6TGFiZWwxMjUyNjUxNTEz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/js","name":"js","color":"4c44e5","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-14T18:26:55Z","updated_at":"2021-10-14T18:27:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"```kotlin\r\n    fun promiseCrashing(): Promise<Unit> {\r\n        val block: suspend (suspend () -> Unit).() -> Unit = {\r\n            assertFailsWith<IllegalStateException> {\r\n                this()\r\n            }\r\n        }\r\n        val test = {\r\n            GlobalScope.promise {\r\n                throw IllegalStateException()\r\n            }\r\n        }\r\n        return GlobalScope.promise {\r\n            block {\r\n                test().await()\r\n            }\r\n        }\r\n    }\r\n```\r\ncrashes due to unfulfilled `assertFailsWith` and also spews the following into logs:\r\n```\r\n{ CoroutinesInternalError: Fatal exception in coroutines machinery for CancellableContinuation(DispatchedContinuation[NodeDispatcher@2, [object Object]]){Cancelled}@5. Please read KD\r\noc to 'handleFatalException' method and report this incident to maintainers\r\n    at Object.captureStack (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/src/kotlin/builtins.kt:103:21)\r\n    at CoroutinesInternalError.Error_0 [as constructor] (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlin.js:38897:14)\r\n    at new CoroutinesInternalError (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-core.js:2982:13)\r\n    at CancellableContinuationImpl.DispatchedTask.handleFatalException_pr7uss$ (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutin\r\nes-core.js:28933:16)                                                                                                                                                                  \r\n    at CancellableContinuationImpl.DispatchedTask.run (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-core.js:28926:10)\r\n    at SetTimeoutBasedDispatcher$ScheduledMessageQueue.MessageQueue.process (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-\r\ncore.js:32303:15)                                                                                                                                                                     \r\n    at /home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-core.js:32119:30                  \r\n    at _combinedTickCallback (internal/process/next_tick.js:131:7)                                                                                                                    \r\n    at process._tickCallback (internal/process/next_tick.js:180:9)                                                                                                                    \r\n  'message_q7r8iu$_0': 'Fatal exception in coroutines machinery for CancellableContinuation(DispatchedContinuation[NodeDispatcher@2, [object Object]]){Cancelled}@5. Please read KDoc \r\nto \\'handleFatalException\\' method and report this incident to maintainers',                                                                                                          \r\n  'cause_us9j0c$_0':                                                                                                                                                                  \r\n   { ClassCastException: Illegal cast                                                      \r\n    at Object.captureStack (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/src/kotlin/builtins.kt:103:21)\r\n    at ClassCastException.Exception [as constructor] (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlin.js:38928:14)\r\n    at ClassCastException.RuntimeException [as constructor] (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/src/kotlin/exceptions.kt:35:101)\r\n    at RuntimeException_init_0 (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/src/kotlin/exceptions.kt:37:44)\r\n    at new ClassCastException (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlin.js:39084:7)\r\n    at throwCCE_0 (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/js/src/kotlin/exceptionUtils.kt:15:11)\r\n    at NodeDispatcher.CoroutineDispatcher.releaseInterceptedContinuation_k98bjh$ (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-corout\r\nines-core.js:2046:88)\r\n    at Coroutine$PromiseTest$promiseCrashing$lambda_0.CoroutineImpl.releaseIntercepted_0 (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/src/ko\r\ntlin/coroutines/CoroutineImpl.kt:75:48)                                                                                                                                               \r\n    at Coroutine$PromiseTest$promiseCrashing$lambda$lambda_0.CoroutineImpl.resumeWith_tl1gpc$ (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/s\r\nrc/kotlin/coroutines/CoroutineImpl.kt:56:17)\r\n    at CancellableContinuationImpl.DispatchedTask.run (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-core.js:28903:22)\r\n    at SetTimeoutBasedDispatcher$ScheduledMessageQueue.MessageQueue.process (/home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-\r\ncore.js:32303:15)                         \r\n    at /home/dmitry.khalanskiy/Coroutines/Project/kotlinx-coroutines-test/build/node_modules/kotlinx-coroutines-core.js:32119:30\r\n    at _combinedTickCallback (internal/process/next_tick.js:131:7)                                                                                                                    \r\n    at process._tickCallback (internal/process/next_tick.js:180:9)   \r\n     'message_8yp7un$_0': 'Illegal cast',                                                                                                                                             \r\n     'cause_th0jdv$_0': null,\r\n     name: 'ClassCastException' },\r\n  name: 'CoroutinesInternalError' }  \r\n```\r\nLooking at the code now, I see that it's also unclear why it works at all; it probably shouldn't. Fixing it as follows, however, doesn't fix the error.\r\n```kotlin\r\n    fun promiseCrashing(): Promise<Unit> {\r\n        val block: suspend (suspend () -> Unit) -> Unit = {\r\n            assertFailsWith<IllegalStateException> {\r\n                it()\r\n            }\r\n        }\r\n        val test = {\r\n            GlobalScope.promise {\r\n                throw IllegalStateException()\r\n            }\r\n        }\r\n        return GlobalScope.promise {\r\n            block {\r\n                test().await()\r\n            }\r\n        }\r\n    }\r\n```\r\nAs a bonus, my initial reproducer looked as follows:\r\n```kotlin\r\n    fun promiseCrashing(): TestResult {\r\n        fun testResultMap(block: suspend (suspend () -> Unit).() -> Unit, test: () -> TestResult): TestResult {\r\n            return GlobalScope.promise {\r\n                block {\r\n                    println(\"before await\")\r\n                    val result = test().await()\r\n                    println(\"after await: $result\")\r\n                }\r\n            }\r\n        }\r\n        return testResultMap({\r\n            assertFailsWith<IllegalStateException> {\r\n                this()\r\n            }\r\n        }) {\r\n            GlobalScope.promise {\r\n                throw IllegalStateException()\r\n            }\r\n        }\r\n    }\r\n```\r\nAttempting \"inline the function\" refactoring led to disappointing results. I'll need to report all of this to the proper issue trackers eventually.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2988/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2983","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2983/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2983/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2983/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2983","id":1026121147,"node_id":"I_kwDOA63QcM49KV27","number":2983,"title":"Support trySendBlocking() Coroutines API in Kotlin/Native","user":{"login":"artdfel","id":47744118,"node_id":"MDQ6VXNlcjQ3NzQ0MTE4","avatar_url":"https://avatars.githubusercontent.com/u/47744118?v=4","gravatar_id":"","url":"https://api.github.com/users/artdfel","html_url":"https://github.com/artdfel","followers_url":"https://api.github.com/users/artdfel/followers","following_url":"https://api.github.com/users/artdfel/following{/other_user}","gists_url":"https://api.github.com/users/artdfel/gists{/gist_id}","starred_url":"https://api.github.com/users/artdfel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/artdfel/subscriptions","organizations_url":"https://api.github.com/users/artdfel/orgs","repos_url":"https://api.github.com/users/artdfel/repos","events_url":"https://api.github.com/users/artdfel/events{/privacy}","received_events_url":"https://api.github.com/users/artdfel/received_events","type":"User","site_admin":false},"labels":[{"id":1109675638,"node_id":"MDU6TGFiZWwxMTA5Njc1NjM4","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/native","name":"native","color":"3ce1ea","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-14T08:37:27Z","updated_at":"2021-10-14T08:50:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"NOTE: This is a mirror for the https://youtrack.jetbrains.com/issue/KT-49230, made to follow the [kotlinx.coroutines Contributing Guidelines](https://github.com/Kotlin/kotlinx.coroutines/blob/master/CONTRIBUTING.md#submitting-issues).\r\nAll the credits should go to @jeffdgr8(I hope I'm not mentioning the wrong person).\r\n\r\n\r\n`trySendBlocking()` is [only available in Kotlin/JVM](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/try-send-blocking.html). But the implementation doesn't seem to have any JVM-specific requirements. Copying the extension function to a KMM shared module compiles just fine, only warning about `InternalCoroutinesApi` usage in `ChannelResult`:\r\n\r\n```\r\n@Throws(InterruptedException::class)\r\npublic fun <E> SendChannel<E>.trySendBlocking(element: E): ChannelResult<Unit> {\r\n    trySend(element).onSuccess { return ChannelResult.success(Unit) }\r\n    return runBlocking {\r\n        val r = runCatching { send(element) }\r\n        if (r.isSuccess) ChannelResult.success(Unit)\r\n        else ChannelResult.closed(r.exceptionOrNull())\r\n    }\r\n}\r\n```\r\n\r\nCan this function be added to support Kotlin/Native?\r\n\r\nThe deprecated `sendBlocking()` function that functions similarly is available, but can't be replaced with `trySendBlocking()` as it suggests.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2983/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2983/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2977","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2977/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2977/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2977/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2977","id":1023134045,"node_id":"I_kwDOA63QcM48-8ld","number":2977,"title":"[KotlinJs] Fatal exception in coroutines machinery for CancellableContinuation","user":{"login":"mirland","id":8472881,"node_id":"MDQ6VXNlcjg0NzI4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/8472881?v=4","gravatar_id":"","url":"https://api.github.com/users/mirland","html_url":"https://github.com/mirland","followers_url":"https://api.github.com/users/mirland/followers","following_url":"https://api.github.com/users/mirland/following{/other_user}","gists_url":"https://api.github.com/users/mirland/gists{/gist_id}","starred_url":"https://api.github.com/users/mirland/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mirland/subscriptions","organizations_url":"https://api.github.com/users/mirland/orgs","repos_url":"https://api.github.com/users/mirland/repos","events_url":"https://api.github.com/users/mirland/events{/privacy}","received_events_url":"https://api.github.com/users/mirland/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-11T21:34:08Z","updated_at":"2021-10-11T21:34:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I found an issue in KotlinJs. In Kotlin JVM and native (ios target) seems to be working as expected.\r\n\r\nThe exception message is: \r\n```\r\n\"Job StandaloneCoroutine{Completed}@1 is already complete or completing, but is being completed with CompletedExceptionally[JobCancellationException: StandaloneCoroutine has completed normally; job=StandaloneCoroutine{Completed}@1]\"\r\n```\r\n\r\nSteps to reproduce it:\r\nFirst of all, create this interface\r\n```kotlin\r\ninterface Foo<in Param, Output> {\r\n    suspend operator fun invoke(params: Param): Output =\r\n        execute(params)\r\n\r\n    suspend fun execute(params: Param): Output\r\n}\r\n```\r\n\r\n\r\nIf you define an instance of foo as:\r\n```kotlin\r\nclass Foo1 : Foo<Unit, Boolean> {\r\n    override suspend fun execute(params: Unit): Boolean {\r\n        delay(1500)\r\n        return true\r\n    }\r\n}\r\n```\r\nThen in the main app, you call\r\n```kotlin\r\nfun main() {\r\n    GlobalScope.launch {\r\n        val foo1 = Foo1()\r\n        println(\"Foo1: ${foo1.invoke(Unit)}\")\r\n    }\r\n}\r\n```\r\nIt generates a good output: `Foo1: true`. However, if you define `Output` as `Unit` and you test the same, the app crashes.\r\n\r\n```kotlin\r\nclass Foo2 : Foo<Unit, Unit> {\r\n    override suspend fun execute(params: Unit): Unit {\r\n        delay(1500)\r\n    }\r\n}\r\n\r\n\r\nfun main() {\r\n    GlobalScope.launch {\r\n        val foo2 = Foo2()\r\n        println(\"Foo2: ${foo2.invoke(Unit)}\")\r\n    }\r\n}\r\n```\r\nOutput:\r\n```\r\nFoo2: kotlin.Unit\r\nCoroutineExceptionHandlerImpl.kt?f1f9:11 CoroutinesInternalError {message: \"Fatal exception in coroutines machinery for Cancel…n' method and report this incident to maintainers\", cause: IllegalStateException, name: 'CoroutinesInternalError', stack: 'CoroutinesInternalError: Fatal exception in corout…bpack-internal:///./kotlin/app-web.js:82470:9)'}\r\n```\r\n\r\nTo sum up, you cannot define `Output` as `Unit` in `Foo`\r\n\r\nVersions:\r\nCompiler = IR\r\nKotlin version = \"1.5.30\"\r\nCoroutines version = \"1.5.2-native-mt\" // \"1.5.2\" has the same issue\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2977/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2977/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2972","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2972/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2972/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2972/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2972","id":1022823293,"node_id":"I_kwDOA63QcM489wt9","number":2972,"title":"Default `delay` behavior on Android creates additional threads when using external dispatchers","user":{"login":"adamp","id":103458,"node_id":"MDQ6VXNlcjEwMzQ1OA==","avatar_url":"https://avatars.githubusercontent.com/u/103458?v=4","gravatar_id":"","url":"https://api.github.com/users/adamp","html_url":"https://github.com/adamp","followers_url":"https://api.github.com/users/adamp/followers","following_url":"https://api.github.com/users/adamp/following{/other_user}","gists_url":"https://api.github.com/users/adamp/gists{/gist_id}","starred_url":"https://api.github.com/users/adamp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adamp/subscriptions","organizations_url":"https://api.github.com/users/adamp/orgs","repos_url":"https://api.github.com/users/adamp/repos","events_url":"https://api.github.com/users/adamp/events{/privacy}","received_events_url":"https://api.github.com/users/adamp/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-10-11T15:02:58Z","updated_at":"2021-10-11T15:58:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When `delay` is called using an externally-defined dispatcher that does not implement the internal `Delay` interface, it uses a default fallback implementation that can cause an additional thread to be created. Some Android apps strictly audit threads created by their library dependencies and have raised this as an issue when using Jetpack Compose, which defines its own UI dispatcher and both promotes using the `delay` API and uses it internally.\r\n\r\nOn Android, apps always have a main thread running an event loop that could be used in place of creating an additional thread to time the `delay`, which could make `Dispatchers.Main` a suitable choice for performing the default delay on Android when a compatible/known dispatcher is not found.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2972/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2972/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2970","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2970/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2970/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2970/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2970","id":1020574464,"node_id":"I_kwDOA63QcM481LsA","number":2970,"title":"[Play Services Integration] Add support for CancellableTask's progress listener.","user":{"login":"psteiger","id":124331,"node_id":"MDQ6VXNlcjEyNDMzMQ==","avatar_url":"https://avatars.githubusercontent.com/u/124331?v=4","gravatar_id":"","url":"https://api.github.com/users/psteiger","html_url":"https://github.com/psteiger","followers_url":"https://api.github.com/users/psteiger/followers","following_url":"https://api.github.com/users/psteiger/following{/other_user}","gists_url":"https://api.github.com/users/psteiger/gists{/gist_id}","starred_url":"https://api.github.com/users/psteiger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteiger/subscriptions","organizations_url":"https://api.github.com/users/psteiger/orgs","repos_url":"https://api.github.com/users/psteiger/repos","events_url":"https://api.github.com/users/psteiger/events{/privacy}","received_events_url":"https://api.github.com/users/psteiger/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-08T00:47:23Z","updated_at":"2021-10-08T00:49:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nIt is relatively common to have use cases of long running tasks that report back the task progress to a callback installed through `CancellableTask<T>.addOnProgressListener()`. One such example is Firebase's `StorageTask` for uploading files.\r\n\r\nIt seems simple enough to support such use cases in the coroutine world by providing a variant of the current `Task<T>.await()` that extends `CancellableTask` instead of `Task`, takes a callback for progress reporting, and returns the Task result (T).\r\n\r\n I have a draft code for it and can submit a PR if welcome:\r\n\r\n```kotlin\r\nsuspend fun <ProgressT : Any, T : ProgressT> CancellableTask<T>.await(\r\n    coroutineContext: CoroutineContext = EmptyCoroutineContext, // CoroutineContext for the suspending callback\r\n    cancellationTokenSource: CancellationTokenSource?,\r\n    onProgress: suspend (ProgressT) -> Unit\r\n): : T = coroutineScope { // parallel decomposition of the progress reporting coroutine and calling coroutine.\r\n    // have the progress callback send to a conflated channel\r\n    val progressChannel = Channel<ProgressT>(capacity = Channel.CONFLATED)\r\n    // consume the progress channel in a separate coroutine\r\n    launch(coroutineContext) {\r\n        for (progress in progressChannel) onProgress(progress)\r\n    }\r\n    // if passed coroutineContext parameter has a CoroutineDispatcher, we can (should, must?) use it\r\n    // as the executor for addOnProgressListener().\r\n    val dispatcher = coroutineContext[ContinuationInterceptor] as? CoroutineDispatcher\r\n        ?: currentCoroutineContext()[ContinuationInterceptor] as? CoroutineDispatcher\r\n    val executor = dispatcher?.asExecutor()\r\n    val listener = OnProgressListener<ProgressT> { progressChannel.trySend(it) }\r\n    val task = executor?.let {\r\n        addOnProgressListener(executor, listener)\r\n    } ?: addOnProgressListener(listener)\r\n    try {\r\n        cancellationTokenSource?.let {\r\n            task.await(cancellationTokenSource)\r\n        } ?: task.await()\r\n    } finally {\r\n        // task has ended: close the progress channel\r\n        progressChannel.close()\r\n    }\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2970/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2961","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2961/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2961/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2961/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2961","id":1010263618,"node_id":"I_kwDOA63QcM48N2ZC","number":2961,"title":"java.lang.IllegalStateException: Inconsistent state CancellableContinuation {Completed}","user":{"login":"diksha","id":699654,"node_id":"MDQ6VXNlcjY5OTY1NA==","avatar_url":"https://avatars.githubusercontent.com/u/699654?v=4","gravatar_id":"","url":"https://api.github.com/users/diksha","html_url":"https://github.com/diksha","followers_url":"https://api.github.com/users/diksha/followers","following_url":"https://api.github.com/users/diksha/following{/other_user}","gists_url":"https://api.github.com/users/diksha/gists{/gist_id}","starred_url":"https://api.github.com/users/diksha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/diksha/subscriptions","organizations_url":"https://api.github.com/users/diksha/orgs","repos_url":"https://api.github.com/users/diksha/repos","events_url":"https://api.github.com/users/diksha/events{/privacy}","received_events_url":"https://api.github.com/users/diksha/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":864692605,"node_id":"MDU6TGFiZWw4NjQ2OTI2MDU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/waiting%20for%20clarification","name":"waiting for clarification","color":"c98842","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-28T22:18:46Z","updated_at":"2021-09-30T17:21:42Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```\r\n[java.lang.IllegalStateException: Inconsistent state CancellableContinuation(DispatchedContinuation[Dispatchers.IO, Continuation at com.zoox.box.data.clients.ApplicationClient$createBodyTelltaleDataFlow$dataActor$1.invokeSuspend(ApplicationClient.kt:87)@ef85b17]){Completed}@649fb04\r\n\tat kotlinx.coroutines.internal.DispatchedContinuation.claimReusableCancellableContinuation(DispatchedContinuation.kt:129)\r\n\tat kotlinx.coroutines.CancellableContinuationKt.getOrCreateCancellableContinuation(CancellableContinuation.kt:353)\r\n\tat kotlinx.coroutines.channels.AbstractChannel$Itr.hasNextSuspend(AbstractChannel.kt:1133)\r\n\tat kotlinx.coroutines.channels.AbstractChannel$Itr.hasNext(AbstractChannel.kt:841)\r\n\tat com.zoox.box.data.clients.ApplicationClient$createBodyTelltaleDataFlow$dataActor$1.invokeSuspend(ApplicationClient.kt:87)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:571)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:678)\r\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:665)](url)\r\n```\r\n\r\nI received this crash while using dataActor. Here is my sample code\r\n\r\n\r\n```\r\nprivate fun createBodyDataFlow(): MutableStateFlow<BodyData?> {\r\n        val newBodyDataFlow = MutableStateFlow<BodyData?>(null)\r\n\r\n        val dataActor = actor<BodyFeedbackOuterClass.BodyFeedback>(\r\n            coroutineContext,\r\n            capacity = Channel.CONFLATED\r\n        ) {\r\n            for (bodyFeedback in channel) {\r\n                val transformedBodyFeedback =\r\n                    bodyFeedback.transform(vehicleInterface.hmiQuadrant)\r\n                bodyFeedback.logIncomingMessage(logger, vehicleInterface.hmiQuadrant)\r\n\r\n                newBodyDataFlow.value = transformedBodyFeedback\r\n                lastSuccessfulBodyMessage = System.currentTimeMillis()\r\n                bodyMessageStatus.applyUpdate(\r\n                    ComponentType.BODY,\r\n                    logger,\r\n                    ComponentStatus.OK\r\n                )\r\n            }\r\n        }\r\n\r\n        vehicleInterface.setBodyInterfaceCallback { bodyFeedback ->\r\n            dataActor.trySend(bodyFeedback)\r\n        }\r\n\r\n        return newBodyDataFlow\r\n    }\r\n```\r\n\r\nThe message says that the CancellableContinuation is {Completed}. Why am I still facing an issue then?\r\nCan someone help, I am unable to understand why I might be facing this error","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2961/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2961/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2959","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2959/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2959/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2959/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2959","id":1009578520,"node_id":"I_kwDOA63QcM48LPIY","number":2959,"title":"Document Junit 5 support and usage","user":{"login":"LifeIsStrange","id":12934716,"node_id":"MDQ6VXNlcjEyOTM0NzE2","avatar_url":"https://avatars.githubusercontent.com/u/12934716?v=4","gravatar_id":"","url":"https://api.github.com/users/LifeIsStrange","html_url":"https://github.com/LifeIsStrange","followers_url":"https://api.github.com/users/LifeIsStrange/followers","following_url":"https://api.github.com/users/LifeIsStrange/following{/other_user}","gists_url":"https://api.github.com/users/LifeIsStrange/gists{/gist_id}","starred_url":"https://api.github.com/users/LifeIsStrange/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LifeIsStrange/subscriptions","organizations_url":"https://api.github.com/users/LifeIsStrange/orgs","repos_url":"https://api.github.com/users/LifeIsStrange/repos","events_url":"https://api.github.com/users/LifeIsStrange/events{/privacy}","received_events_url":"https://api.github.com/users/LifeIsStrange/received_events","type":"User","site_admin":false},"labels":[{"id":742220755,"node_id":"MDU6TGFiZWw3NDIyMjA3NTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs","name":"docs","color":"6b87ce","default":false,"description":""},{"id":1435915404,"node_id":"MDU6TGFiZWwxNDM1OTE1NDA0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test","name":"test","color":"c94240","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-28T10:37:01Z","updated_at":"2021-09-29T07:47:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":null,"reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2959/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2959/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2958","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2958/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2958/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2958/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2958","id":1009548936,"node_id":"I_kwDOA63QcM48LH6I","number":2958,"title":"Exception inside a coroutine has no helpful stack trace","user":{"login":"romanandreyvich","id":15000414,"node_id":"MDQ6VXNlcjE1MDAwNDE0","avatar_url":"https://avatars.githubusercontent.com/u/15000414?v=4","gravatar_id":"","url":"https://api.github.com/users/romanandreyvich","html_url":"https://github.com/romanandreyvich","followers_url":"https://api.github.com/users/romanandreyvich/followers","following_url":"https://api.github.com/users/romanandreyvich/following{/other_user}","gists_url":"https://api.github.com/users/romanandreyvich/gists{/gist_id}","starred_url":"https://api.github.com/users/romanandreyvich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/romanandreyvich/subscriptions","organizations_url":"https://api.github.com/users/romanandreyvich/orgs","repos_url":"https://api.github.com/users/romanandreyvich/repos","events_url":"https://api.github.com/users/romanandreyvich/events{/privacy}","received_events_url":"https://api.github.com/users/romanandreyvich/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-28T10:07:49Z","updated_at":"2021-09-28T10:07:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"If I throw an exception inside coroutine it has no helpful stack trace. It doesn't tell me which line of code is causing the problem\r\n\r\nHappened on coroutines 1.5.1-native-mt and 1.5.2-native-mt, and it works fine with 1.5.0-native-mt\r\n\r\nHere is an example project:\r\n[Example.zip](https://github.com/Kotlin/kotlinx.coroutines/files/7242885/Example.zip)\r\n\r\nIf I use coroutines 1.5.2-native-mt (or 1.5.1-native-mt) the stack trace looks like:\r\n```\r\nkotlin.Throwable: The process was terminated due to the unhandled exception thrown in the coroutine [StandaloneCoroutine{Cancelling}@82bb1268, MainDispatcher]: Test exception\r\n  at 0  iosApp               0x0000000100e50e18 kfun:kotlinx.coroutines#handleCoroutineExceptionImpl(kotlin.coroutines.CoroutineContext;kotlin.Throwable){} + 544\r\n  at 1  iosApp               0x0000000100e1b6e8 kfun:kotlinx.coroutines#handleCoroutineException(kotlin.coroutines.CoroutineContext;kotlin.Throwable){} + 792\r\n  at 2  iosApp               0x0000000100e0f9c4 kfun:kotlinx.coroutines.StandaloneCoroutine.handleJobException#internal + 176\r\n  at 3  iosApp               0x0000000100e265c0 kfun:kotlinx.coroutines.JobSupport.finalizeFinishingState#internal + 1864\r\n  at 4  iosApp               0x0000000100e307fc kfun:kotlinx.coroutines.JobSupport.tryMakeCompletingSlowPath#internal + 1464\r\n  at 5  iosApp               0x0000000100e3014c kfun:kotlinx.coroutines.JobSupport.tryMakeCompleting#internal + 656\r\n  at 6  iosApp               0x0000000100e2fcb4 kfun:kotlinx.coroutines.JobSupport#makeCompletingOnce(kotlin.Any?){}kotlin.Any? + 360\r\n  at 7  iosApp               0x0000000100e0ee04 kfun:kotlinx.coroutines.AbstractCoroutine#resumeWith(kotlin.Result<1:0>){} + 232\r\n  at 8  iosApp               0x0000000100dc7158 kfun:kotlin.coroutines.native.internal.BaseContinuationImpl#resumeWith(kotlin.Result<kotlin.Any?>){} + 1252\r\n  at 9  iosApp               0x0000000100e3f4b0 kfun:kotlinx.coroutines.DispatchedTask#run(){} + 2700\r\n  at 10 iosApp               0x0000000100e5b530 kfun:kotlinx.coroutines.DarwinMainDispatcher.dispatch$lambda-0#internal + 128\r\n  at 11 iosApp               0x0000000100e5b918 kfun:kotlinx.coroutines.DarwinMainDispatcher.$dispatch$lambda-0$FUNCTION_REFERENCE$12.invoke#internal + 68\r\n  at 12 iosApp               0x0000000100e5ba0c kfun:kotlinx.coroutines.DarwinMainDispatcher.$dispatch$lambda-0$FUNCTION_REFERENCE$12.$<bridge-UNN>invoke(){}#internal + 68\r\n  at 13 iosApp               0x0000000100e5ca90 _6f72672e6a6574627261696e732e6b6f746c696e783a6b6f746c696e782d636f726f7574696e65732d636f7265_knbridge4 + 204\r\n  at 14 libdispatch.dylib          0x00000001013bc0b4 _dispatch_call_block_and_release + 32\r\n  at 15 libdispatch.dylib          0x00000001013bdde0 _dispatch_client_callout + 20\r\n  at 16 libdispatch.dylib          0x00000001013ce0a8 _dispatch_main_queue_callback_4CF + 1040\r\n  at 17 CoreFoundation           0x0000000182d08398 4FBDF167-161A-324C-A233-D516922C67E5 + 668568\r\n  at 18 CoreFoundation           0x0000000182d02270 4FBDF167-161A-324C-A233-D516922C67E5 + 643696\r\n  at 19 CoreFoundation           0x0000000182d01360 CFRunLoopRunSpecific + 600\r\n  at 20 GraphicsServices          0x000000019a33f734 GSEventRunModal + 164\r\n  at 21 UIKitCore              0x000000018577c584 33B02AB5-5DAF-3249-8DC6-5872DF830EC5 + 12363140\r\n  at 22 UIKitCore              0x0000000185781df4 UIApplicationMain + 168\r\n  at 23 SwiftUI               0x0000000189c57370 AA8F15D9-1787-341A-9067-D5C0109DE7FF + 10404720\r\n  at 24 SwiftUI               0x0000000189c572fc AA8F15D9-1787-341A-9067-D5C0109DE7FF + 10404604\r\n  at 25 SwiftUI               0x000000018974fb6c $s7SwiftUI3AppPAAE4mainyyFZ + 144\r\n  at 26 iosApp               0x0000000100d99ba8 $s6iosApp6iOSAppV5$mainyyFZ + 60\r\n  at 27 iosApp               0x0000000100d99c48 main + 12\r\n  at 28 libdyld.dylib            0x00000001829bdcf8 E574A365-9878-348A-8E84-91E163CFC128 + 7416\r\n```\r\n\r\nHere is stack trace if I do the same with coroutines 1.5.0-native-mt:\r\n```\r\nkotlinx.coroutines.CoroutinesInternalError: Fatal exception in coroutines machinery for DispatchedContinuation[MainDispatcher, Continuation @ 0]. Please read KDoc to 'handleFatalException' method and report this incident to maintainers\r\n    at 0   iosApp                              0x00000001021567a0 kfun:kotlin.Error#<init>(kotlin.String?;kotlin.Throwable?){} + 120\r\n    at 1   iosApp                              0x00000001021d73a0 kfun:kotlinx.coroutines.CoroutinesInternalError#<init>(kotlin.String;kotlin.Throwable){} + 120\r\n    at 2   iosApp                              0x00000001021f3a18 kfun:kotlinx.coroutines.DispatchedTask#handleFatalException(kotlin.Throwable?;kotlin.Throwable?){} + 680\r\n    at 3   iosApp                              0x00000001021f370c kfun:kotlinx.coroutines.DispatchedTask#run(){} + 3580\r\n    at 4   iosApp                              0x000000010220f348 kfun:kotlinx.coroutines.DarwinMainDispatcher.dispatch$lambda-0#internal + 128\r\n    at 5   iosApp                              0x000000010220f730 kfun:kotlinx.coroutines.DarwinMainDispatcher.$dispatch$lambda-0$FUNCTION_REFERENCE$12.invoke#internal + 68\r\n    at 6   iosApp                              0x000000010220f824 kfun:kotlinx.coroutines.DarwinMainDispatcher.$dispatch$lambda-0$FUNCTION_REFERENCE$12.$<bridge-UNN>invoke(){}#internal + 68\r\n    at 7   iosApp                              0x00000001022108a8 _6f72672e6a6574627261696e732e6b6f746c696e783a6b6f746c696e782d636f726f7574696e65732d636f7265_knbridge4 + 204\r\n    at 8   libdispatch.dylib                   0x00000001024f80b4 _dispatch_call_block_and_release + 32\r\n    at 9   libdispatch.dylib                   0x00000001024f9de0 _dispatch_client_callout + 20\r\n    at 10  libdispatch.dylib                   0x000000010250a0a8 _dispatch_main_queue_callback_4CF + 1040\r\n    at 11  CoreFoundation                      0x0000000182d08398 4FBDF167-161A-324C-A233-D516922C67E5 + 668568\r\n    at 12  CoreFoundation                      0x0000000182d02270 4FBDF167-161A-324C-A233-D516922C67E5 + 643696\r\n    at 13  CoreFoundation                      0x0000000182d01360 CFRunLoopRunSpecific + 600\r\n    at 14  GraphicsServices                    0x000000019a33f734 GSEventRunModal + 164\r\n    at 15  UIKitCore                           0x000000018577c584 33B02AB5-5DAF-3249-8DC6-5872DF830EC5 + 12363140\r\n    at 16  UIKitCore                           0x0000000185781df4 UIApplicationMain + 168\r\n    at 17  SwiftUI                             0x0000000189c57370 AA8F15D9-1787-341A-9067-D5C0109DE7FF + 10404720\r\n    at 18  SwiftUI                             0x0000000189c572fc AA8F15D9-1787-341A-9067-D5C0109DE7FF + 10404604\r\n    at 19  SwiftUI                             0x000000018974fb6c $s7SwiftUI3AppPAAE4mainyyFZ + 144\r\n    at 20  iosApp                              0x000000010214d98c $s6iosApp6iOSAppV5$mainyyFZ + 60\r\n    at 21  iosApp                              0x000000010214da2c main + 12\r\n    at 22  libdyld.dylib                       0x00000001829bdcf8 E574A365-9878-348A-8E84-91E163CFC128 + 7416\r\nCaused by: kotlin.IllegalStateException: Test exception\r\n    at 0   iosApp                              0x000000010215c254 kfun:kotlin.Throwable#<init>(kotlin.String?){} + 96\r\n    at 1   iosApp                              0x0000000102155dec kfun:kotlin.Exception#<init>(kotlin.String?){} + 92\r\n    at 2   iosApp                              0x0000000102155fa0 kfun:kotlin.RuntimeException#<init>(kotlin.String?){} + 92\r\n    at 3   iosApp                              0x000000010215626c kfun:kotlin.IllegalStateException#<init>(kotlin.String?){} + 92\r\n    at 4   iosApp                              0x0000000102212090 kfun:com.example.example.Service.$start$lambda-0COROUTINE$0.invokeSuspend#internal + 288\r\n    at 5   iosApp                              0x000000010217ac88 kfun:kotlin.coroutines.native.internal.BaseContinuationImpl#resumeWith(kotlin.Result<kotlin.Any?>){} + 560\r\n    at 6   iosApp                              0x00000001021f339c kfun:kotlinx.coroutines.DispatchedTask#run(){} + 2700\r\n    at 7   iosApp                              0x000000010220f348 kfun:kotlinx.coroutines.DarwinMainDispatcher.dispatch$lambda-0#internal + 128\r\n    at 8   iosApp                              0x000000010220f730 kfun:kotlinx.coroutines.DarwinMainDispatcher.$dispatch$lambda-0$FUNCTION_REFERENCE$12.invoke#internal + 68\r\n    at 9   iosApp                              0x000000010220f824 kfun:kotlinx.coroutines.DarwinMainDispatcher.$dispatch$lambda-0$FUNCTION_REFERENCE$12.$<bridge-UNN>invoke(){}#internal + 68\r\n    at 10  iosApp                              0x00000001022108a8 _6f72672e6a6574627261696e732e6b6f746c696e783a6b6f746c696e782d636f726f7574696e65732d636f7265_knbridge4 + 204\r\n    at 11  libdispatch.dylib                   0x00000001024f80b4 _dispatch_call_block_and_release + 32\r\n    at 12  libdispatch.dylib                   0x00000001024f9de0 _dispatch_client_callout + 20\r\n    at 13  libdispatch.dylib                   0x000000010250a0a8 _dispatch_main_queue_callback_4CF + 1040\r\n    at 14  CoreFoundation                      0x0000000182d08398 4FBDF167-161A-324C-A233-D516922C67E5 + 668568\r\n    at 15  CoreFoundation                      0x0000000182d02270 4FBDF167-161A-324C-A233-D516922C67E5 + 643696\r\n    at 16  CoreFoundation                      0x0000000182d01360 CFRunLoopRunSpecific + 600\r\n    at 17  GraphicsServices                    0x000000019a33f734 GSEventRunModal + 164\r\n    at 18  UIKitCore                           0x000000018577c584 33B02AB5-5DAF-3249-8DC6-5872DF830EC5 + 12363140\r\n    at 19  UIKitCore                           0x0000000185781df4 UIApplicationMain + 168\r\n    at 20  SwiftUI                             0x0000000189c57370 AA8F15D9-1787-341A-9067-D5C0109DE7FF + 10404720\r\n    at 21  SwiftUI                             0x0000000189c572fc AA8F15D9-1787-341A-9067-D5C0109DE7FF + 10404604\r\n    at 22  SwiftUI                             0x000000018974fb6c $s7SwiftUI3AppPAAE4mainyyFZ + 144\r\n    at 23  iosApp                              0x000000010214d98c $s6iosApp6iOSAppV5$mainyyFZ + 60\r\n    at 24  iosApp                              0x000000010214da2c main + 12\r\n    at 25  libdyld.dylib                       0x00000001829bdcf8 E574A365-9878-348A-8E84-91E163CFC128 + 7416\r\n```\r\n\r\nBTW this exception with coroutines 1.5.1-native-mt+ doesn't have a cause of the throwable\r\n\r\nKotlin: 1.5.31","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2958/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2949","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2949/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2949/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2949/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2949","id":1005904501,"node_id":"I_kwDOA63QcM479OJ1","number":2949,"title":"Exception handling of coroutine CompletableFuture doesn't work as expected","user":{"login":"jameslan","id":1083331,"node_id":"MDQ6VXNlcjEwODMzMzE=","avatar_url":"https://avatars.githubusercontent.com/u/1083331?v=4","gravatar_id":"","url":"https://api.github.com/users/jameslan","html_url":"https://github.com/jameslan","followers_url":"https://api.github.com/users/jameslan/followers","following_url":"https://api.github.com/users/jameslan/following{/other_user}","gists_url":"https://api.github.com/users/jameslan/gists{/gist_id}","starred_url":"https://api.github.com/users/jameslan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jameslan/subscriptions","organizations_url":"https://api.github.com/users/jameslan/orgs","repos_url":"https://api.github.com/users/jameslan/repos","events_url":"https://api.github.com/users/jameslan/events{/privacy}","received_events_url":"https://api.github.com/users/jameslan/received_events","type":"User","site_admin":false},"labels":[{"id":396785982,"node_id":"MDU6TGFiZWwzOTY3ODU5ODI=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question","name":"question","color":"cc317c","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-23T22:36:15Z","updated_at":"2021-09-28T21:17:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The code\r\n\r\n```kt\r\npackage james.exp.kotlin.coroutines\r\n\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.future.await\r\nimport kotlinx.coroutines.future.future\r\nimport kotlinx.coroutines.runBlocking\r\nimport java.lang.Thread.sleep\r\nimport java.util.concurrent.CompletableFuture\r\n\r\nfun main() = runBlocking {\r\n    println(System.currentTimeMillis())\r\n    val future1 = CompletableFuture.supplyAsync<String> {\r\n        sleep(1000)\r\n        val e = RuntimeException(\"exception future1\")\r\n        throw e\r\n    }\r\n    printFuture(future1)\r\n    println(System.currentTimeMillis())\r\n    val future2 = future<String> {\r\n        delay(1000)\r\n        val e = RuntimeException(\"exception future2\")\r\n        throw e\r\n    }\r\n    printFuture(future2)\r\n    println(System.currentTimeMillis())\r\n    val future3 = CompletableFuture.supplyAsync<String> {\r\n        sleep(1000)\r\n        val e = RuntimeException(\"exception future3\")\r\n        throw e\r\n    }\r\n    printFuture(future3)\r\n    println(System.currentTimeMillis())\r\n}\r\n\r\nsuspend fun printFuture(future: CompletableFuture<String>) {\r\n    try {\r\n        println(future.await())\r\n    } catch (e: Throwable) {\r\n        println(e)\r\n    }\r\n}\r\n```\r\ngenerates the output\r\n\r\n```\r\n1632433419004\r\njava.lang.RuntimeException: exception future1\r\n1632433420015\r\nkotlinx.coroutines.JobCancellationException: BlockingCoroutine is cancelling; job=BlockingCoroutine{Cancelling}@64729b1e\r\n1632433421022\r\nkotlinx.coroutines.JobCancellationException: BlockingCoroutine is cancelling; job=BlockingCoroutine{Cancelling}@64729b1e\r\n1632433421022\r\nException in thread \"main\" java.lang.RuntimeException: exception future2\r\n\tat james.exp.kotlin.coroutines.CoMainKt$main$1$future2$1.invokeSuspend(CoMain.kt:21)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTaskKt.resume(DispatchedTask.kt:234)\r\n\tat kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:166)\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:397)\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:431)\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:420)\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeUndispatched(CancellableContinuationImpl.kt:518)\r\n\tat kotlinx.coroutines.EventLoopImplBase$DelayedResumeTask.run(EventLoop.common.kt:489)\r\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\r\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)\r\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\r\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)\r\n\tat kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)\r\n\tat james.exp.kotlin.coroutines.CoMainKt.main(CoMain.kt:10)\r\n\tat james.exp.kotlin.coroutines.CoMainKt.main(CoMain.kt)\r\n```\r\n\r\nThe `future1` works as expected, it sleeps for 1s, and the `await` rethrows the exception.\r\nThe `future2` wraps the exception with a `JobCancellationException`. Is this by design? Is there a way that the caller of the future could get the original exception without being aware of `CancellationException`? The framework I am using relies on the specific exception to return HTTP error code.\r\nAwaiting the `future3` throws the same exception, instead of a new one, with `future2`, although its implementation is the same with `future1`.\r\n\r\nThe exception thrown in `future3`, seems to be uncaught, though.\r\n\r\nPS, I am writing a converter, similar to `kotlinx-coroutines-jdk8`, for other async primitives, and ran into the same issue.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2949/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2949/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2947","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2947/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2947/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2947/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2947","id":1005481447,"node_id":"I_kwDOA63QcM477m3n","number":2947,"title":"pauseDispatcher not working","user":{"login":"jaozinfs","id":38353328,"node_id":"MDQ6VXNlcjM4MzUzMzI4","avatar_url":"https://avatars.githubusercontent.com/u/38353328?v=4","gravatar_id":"","url":"https://api.github.com/users/jaozinfs","html_url":"https://github.com/jaozinfs","followers_url":"https://api.github.com/users/jaozinfs/followers","following_url":"https://api.github.com/users/jaozinfs/following{/other_user}","gists_url":"https://api.github.com/users/jaozinfs/gists{/gist_id}","starred_url":"https://api.github.com/users/jaozinfs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaozinfs/subscriptions","organizations_url":"https://api.github.com/users/jaozinfs/orgs","repos_url":"https://api.github.com/users/jaozinfs/repos","events_url":"https://api.github.com/users/jaozinfs/events{/privacy}","received_events_url":"https://api.github.com/users/jaozinfs/received_events","type":"User","site_admin":false},"labels":[{"id":396785982,"node_id":"MDU6TGFiZWwzOTY3ODU5ODI=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question","name":"question","color":"cc317c","default":true,"description":null},{"id":864692605,"node_id":"MDU6TGFiZWw4NjQ2OTI2MDU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/waiting%20for%20clarification","name":"waiting for clarification","color":"c98842","default":false,"description":""},{"id":1435915404,"node_id":"MDU6TGFiZWwxNDM1OTE1NDA0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test","name":"test","color":"c94240","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"assignees":[{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2021-09-23T14:08:03Z","updated_at":"2021-09-27T13:29:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm trying to run some late tests where I need to test different scenarios of a use case.\r\nI'm injecting my test dispatcher so that I can control the routine's currentTime.\r\nI'm getting ahead in time, but I can't stop dispatchImmediately:\r\n`\r\ninternal class CheckoutCardUseCase(\r\n    ....\r\n    private val defaultDispatcher: CoroutineDispatcher = Dispatchers.Default\r\n) {\r\n    private val checkoutAttemptDelay = 3_000L\r\n    private val expectedTime = 18_000L\r\n\r\n    suspend operator fun invoke(): Result<...> =\r\n        withContext(defaultDispatcher) {\r\n            tryToResult {\r\n                val response = withTimeoutOrNull(expectedTime) {\r\n                    var response: ...? = null\r\n                    do {\r\n                        if (coroutineContext[Job]?.isActive == true) {\r\n                            response =\r\n                                repository.data\r\n\r\n                            if (response.inAnalysis())\r\n                                delay(checkoutAttemptDelay)\r\n                        }\r\n                    } while (response.inAnalysis())\r\n\r\n                    ...\r\n                } ?: throw TimeoutException(\"Time out on polling checkout\")\r\n                ....\r\n            }\r\n        }\r\n`\r\nMy test:\r\n\r\n@Test\r\nfun test() = testCoroutineDispatcher.runBlockingTest {\r\n            val mockBaseOpResponse = mockk()\r\n            val expectedException = TimeoutException(\"Time out on polling checkout\")\r\n            val mockClientDetails = mockk()\r\n            coEvery { userRepository.initApplication(any()) } returns mockBaseOpResponse\r\n            coEvery { getClientDetailsUseCase.invoke() } returns mockClientDetails\r\n            pauseDispatcher {\r\n               val result = checkoutCardUseCase.invoke()\r\n                assertThat<Result.Error<CheckNextTaskUseCase.NextStep>>(result) {\r\n                    assertTrue(error is TimeoutException)\r\n                    assertEquals(expectedException.message, error?.message)\r\n                }\r\n                verify(exactly = 0) { checkNextTaskUseCase.checkNextTask(any()) }\r\n            }\r\n}","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2947/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2946","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2946/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2946/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2946/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2946","id":1004481902,"node_id":"I_kwDOA63QcM473y1u","number":2946,"title":"Add SharedFlow and StateFlow documentation to the Coroutines Guide","user":{"login":"ianbrandt","id":709570,"node_id":"MDQ6VXNlcjcwOTU3MA==","avatar_url":"https://avatars.githubusercontent.com/u/709570?v=4","gravatar_id":"","url":"https://api.github.com/users/ianbrandt","html_url":"https://github.com/ianbrandt","followers_url":"https://api.github.com/users/ianbrandt/followers","following_url":"https://api.github.com/users/ianbrandt/following{/other_user}","gists_url":"https://api.github.com/users/ianbrandt/gists{/gist_id}","starred_url":"https://api.github.com/users/ianbrandt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ianbrandt/subscriptions","organizations_url":"https://api.github.com/users/ianbrandt/orgs","repos_url":"https://api.github.com/users/ianbrandt/repos","events_url":"https://api.github.com/users/ianbrandt/events{/privacy}","received_events_url":"https://api.github.com/users/ianbrandt/received_events","type":"User","site_admin":false},"labels":[{"id":742220755,"node_id":"MDU6TGFiZWw3NDIyMjA3NTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs","name":"docs","color":"6b87ce","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-09-22T16:14:21Z","updated_at":"2021-09-22T16:25:19Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"[`SharedFlow`](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/index.html), [`StateFlow`](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/index.html), and their mutable counterparts have good KDoc, but they're conspicuously absent from the main https://kotlinlang.org/docs/ site. This may limit their discoverability and use.\r\n\r\n`Flow` is covered (https://kotlinlang.org/docs/flow.html), but given the significant cold/hot difference, `SharedFlow` and `StateFlow` seem worthy of guide-like coverage as well.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2946/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2946/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2943","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2943/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2943/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2943/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2943","id":1001194380,"node_id":"I_kwDOA63QcM47rQOM","number":2943,"title":"Elastic Dispatchers.IO unbounded for limitedParallelism","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-20T17:01:27Z","updated_at":"2021-09-20T17:01:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Dispatchers.IO legacy\r\n\r\nPrior to #2919 and upcoming release 1.6.0, `kotlinx.coroutines` had no API to limit the parallelism without creating excessive threads. `Dispatchers.IO` meant to be a dispatcher for \"any IO\", similar to Rx-like `io` and `newCachedThreadPool`.\r\nBut having an _unlimited_ number of threads has brittle and dangerous pitfalls: the performance of an overloaded application degrades in a slow, but unlimited manner, eventually causing out-of-memory errors.\r\nBecause of that, it was decided to have a \"good enough\" upper limit (64 seemed to be a reasonable constant at that moment, especially for Android).\r\n\r\nAfter #2919, along with `newFixedThreadPoolContext` becoming `@DelicateCoroutinesApi`, we would advocate for using e.g. `Dispatchers.IO.limitedParallelism(myDbConnectionPoolSize)` instead of `newFixedThreadPoolContext(myDbConnectionPoolSize)`.\r\n\r\nSuch recommendation has a fatal flaw:  --  nowadays the number of threads allocated for DB connections, blocking IO, and networks is measured in hundreds, so as soon as the user has enough \"limited\" slices of `Dispatchers.IO`, the system will start starving _only_ during peak loads. It's almost impossible to catch such behavior during code-review, (regular) testing, and regular operational mode. Shortly speaking, this behavior is just a timebomb that will explode at the least expected moment.\r\n\r\n### Proposed change\r\n\r\nTo avoid degradations during peak loads, while still providing fluent and hard-to-misuse API, the following changes will be implemented:\r\n\r\n* `Dispatchers.IO` will still be limited to 64 threads with the limit being a fail-safe mechanism\r\n* `Dispatchers.IO.limitedParallelism(n)` won't be limited by the hard limit of the original `Dispatchers.IO`, but instead will be limited by the given parallelism\r\n*  Multiple slices of `Dispatchers.IO` will still be conceptually backed by the same thread-pool, being able to leverage both reduced number of threads and reduced number of context-switches due to its built-in integration with `Dispatchers.Defailt`\r\n\r\nBasically, the mental model (but not the implementation!) is the following:\r\n```\r\nprivate val unlimitedThreadsDispatcherIO = ...\r\n\r\nDispatchers.IO = unlimitedThreadsDispatcherIO.limitParallelism(64)\r\nDispatchers.IO.limitParallelism(x) = unlimitedThreadsDispatcherIO.limitParallelism(x)\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2943/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2943/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2942","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2942/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2942/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2942/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2942","id":1000854565,"node_id":"I_kwDOA63QcM47p9Ql","number":2942,"title":"CancellationException in flatMapMerge/flatMapLatest operators","user":{"login":"marcin-adamczewski","id":14334185,"node_id":"MDQ6VXNlcjE0MzM0MTg1","avatar_url":"https://avatars.githubusercontent.com/u/14334185?v=4","gravatar_id":"","url":"https://api.github.com/users/marcin-adamczewski","html_url":"https://github.com/marcin-adamczewski","followers_url":"https://api.github.com/users/marcin-adamczewski/followers","following_url":"https://api.github.com/users/marcin-adamczewski/following{/other_user}","gists_url":"https://api.github.com/users/marcin-adamczewski/gists{/gist_id}","starred_url":"https://api.github.com/users/marcin-adamczewski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcin-adamczewski/subscriptions","organizations_url":"https://api.github.com/users/marcin-adamczewski/orgs","repos_url":"https://api.github.com/users/marcin-adamczewski/repos","events_url":"https://api.github.com/users/marcin-adamczewski/events{/privacy}","received_events_url":"https://api.github.com/users/marcin-adamczewski/received_events","type":"User","site_admin":false},"labels":[{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-09-20T11:22:35Z","updated_at":"2021-10-07T16:01:01Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi. I've noticed strange behavior of `CancellationException` when using `flatMapMerge` and `flatMapLatest`.\r\n\r\nLet's have a look at a simple example to visualize the problem:\r\n```\r\nval loginClick = MutableSharedFlow<Unit>()\r\nloginClick\r\n    .flatMapLatest {\r\n        loginWithFacebook()\r\n    }\r\n    .collect()\r\n```\r\n\r\nWhen the `loginWithFacebook()` flow cancels then the whole flow cancels too. It's problematic because when a user cancels the first time then he can't log in again. I could catch the CancellationException in the inner flow but I guess it's not the best solution as you have to remember about it each time and adds some boilerplate. I would just expect the CancellationException in the inner flow (inside flatMap) to not propagate up.\r\nIn RxJava it doesn't work that way. You could cancel (complete) the Observable inside the flatMap and both the upstream and observer would still work fine.\r\n\r\nA simple test to reproduce the case:\r\n\r\n```\r\n @Test\r\n  fun simpleTest() = runBlockingTest {\r\n      val actions = MutableSharedFlow<Int>()\r\n\r\n      launch {\r\n          actions\r\n              .flatMapLatest {\r\n                  flow { emit(getNumber(it)) }\r\n              }\r\n              .collect {\r\n                  println(\"lol onEach $it\")\r\n              }\r\n      }\r\n\r\n      launch {\r\n          actions.emit(1) // emmited \r\n          actions.emit(2) // not emitted\r\n          actions.emit(3) // not emitted but should be\r\n      }\r\n  }\r\n\r\n  suspend fun getNumber(number: Int): Int {\r\n      return suspendCancellableCoroutine { cont ->\r\n          if (number == 2) {\r\n              cont.cancel()\r\n          } else {\r\n              cont.resume(number)\r\n          }\r\n      }\r\n  }\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2942/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2941","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2941/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2941/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2941/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2941","id":1000836134,"node_id":"I_kwDOA63QcM47p4wm","number":2941,"title":"Add a way to check library version at runtime","user":{"login":"PierfrancescoSoffritti","id":7457011,"node_id":"MDQ6VXNlcjc0NTcwMTE=","avatar_url":"https://avatars.githubusercontent.com/u/7457011?v=4","gravatar_id":"","url":"https://api.github.com/users/PierfrancescoSoffritti","html_url":"https://github.com/PierfrancescoSoffritti","followers_url":"https://api.github.com/users/PierfrancescoSoffritti/followers","following_url":"https://api.github.com/users/PierfrancescoSoffritti/following{/other_user}","gists_url":"https://api.github.com/users/PierfrancescoSoffritti/gists{/gist_id}","starred_url":"https://api.github.com/users/PierfrancescoSoffritti/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PierfrancescoSoffritti/subscriptions","organizations_url":"https://api.github.com/users/PierfrancescoSoffritti/orgs","repos_url":"https://api.github.com/users/PierfrancescoSoffritti/repos","events_url":"https://api.github.com/users/PierfrancescoSoffritti/events{/privacy}","received_events_url":"https://api.github.com/users/PierfrancescoSoffritti/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-20T11:03:57Z","updated_at":"2021-09-20T12:06:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We are in the process of enabling coroutine debugging on Android Studio. In order to make it work we had to fix some performance issues on the coroutine debugger. \r\n\r\nAs these improvements are available only to devs using `kotlinx-coroutine-core` version 1.6+, we decided to disable the debugger for devs using older versions of the lib, as the debugger is not usable there.\r\n\r\nIn order to do this we have two options:\r\n\r\n1. Check version of the lib at build time. This will require adding a dependency to the build system, which we want to avoid because it's not reliable and a common source of bugs.\r\n2. Check version of the lib at runtime. This will require adding some versioning info to the lib's jar. [In Androidx libs](https://github.com/androidx/androidx/blob/androidx-main/buildSrc/private/src/main/kotlin/androidx/build/VersionFileWriterTask.kt#L79) we add a `META-INF/some_file.version` file to the jar, containing the version number. Something similar could be done for coroutines, to allow our agent to check it at runtime.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2941/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2941/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2937","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2937/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2937/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2937/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2937","id":998625793,"node_id":"I_kwDOA63QcM47hdIB","number":2937,"title":"BlockHound false positive in WorkQueue.addLast","user":{"login":"OliverO2","id":4660803,"node_id":"MDQ6VXNlcjQ2NjA4MDM=","avatar_url":"https://avatars.githubusercontent.com/u/4660803?v=4","gravatar_id":"","url":"https://api.github.com/users/OliverO2","html_url":"https://github.com/OliverO2","followers_url":"https://api.github.com/users/OliverO2/followers","following_url":"https://api.github.com/users/OliverO2/following{/other_user}","gists_url":"https://api.github.com/users/OliverO2/gists{/gist_id}","starred_url":"https://api.github.com/users/OliverO2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OliverO2/subscriptions","organizations_url":"https://api.github.com/users/OliverO2/orgs","repos_url":"https://api.github.com/users/OliverO2/repos","events_url":"https://api.github.com/users/OliverO2/events{/privacy}","received_events_url":"https://api.github.com/users/OliverO2/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null}],"state":"open","locked":false,"assignee":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"assignees":[{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2021-09-16T20:47:46Z","updated_at":"2021-09-27T13:23:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1\r\n\r\nRelevant stack trace excerpt:\r\n```\r\nCaused by: reactor.blockhound.BlockingOperationError: Blocking call! java.lang.Thread.yield\r\n\tat java.base/java.lang.Thread.yield(Thread.java)\r\n\tat kotlinx.coroutines.scheduling.WorkQueue.addLast(WorkQueue.kt:95)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2937/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2937/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2932","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2932/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2932/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2932/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2932","id":994997153,"node_id":"MDU6SXNzdWU5OTQ5OTcxNTM=","number":2932,"title":"Support injection of default context elements","user":{"login":"OliverO2","id":4660803,"node_id":"MDQ6VXNlcjQ2NjA4MDM=","avatar_url":"https://avatars.githubusercontent.com/u/4660803?v=4","gravatar_id":"","url":"https://api.github.com/users/OliverO2","html_url":"https://github.com/OliverO2","followers_url":"https://api.github.com/users/OliverO2/followers","following_url":"https://api.github.com/users/OliverO2/following{/other_user}","gists_url":"https://api.github.com/users/OliverO2/gists{/gist_id}","starred_url":"https://api.github.com/users/OliverO2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OliverO2/subscriptions","organizations_url":"https://api.github.com/users/OliverO2/orgs","repos_url":"https://api.github.com/users/OliverO2/repos","events_url":"https://api.github.com/users/OliverO2/events{/privacy}","received_events_url":"https://api.github.com/users/OliverO2/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-13T14:59:47Z","updated_at":"2021-09-27T12:12:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"`CoroutineScope.newCoroutineContext` currently sets up coroutine contexts via a hard-wired mechanism: https://github.com/Kotlin/kotlinx.coroutines/blob/287a931d3b8ce534757c6c2399eb72e6574bcf69/kotlinx-coroutines-core/jvm/src/CoroutineContext.kt#L32-L37\r\n\r\nHere is a use case where a customizable set of default context elements would help:\r\n\r\nThe Kotest assertions library has a [Soft Assertions](https://kotest.io/docs/assertions/soft-assertions.html) feature which collects multiple failures and finally reports them in a single exception. It uses a [thread-local error-collecting context](https://github.com/OliverO2/kotest/blob/7b69d9757a2abffa063b7a5e06e6987f52503da9/kotest-assertions/kotest-assertions-shared/src/jvmMain/kotlin/io/kotest/assertions/ErrorCollector.kt) to achieve this. `ThreadLocal<T>.asContextElement` makes this work with thread-switching coroutines.\r\n\r\nHowever, the user must either use the Kotest framework (which sets up the coroutine context) or remember to insert a provided `errorCollectorContextElement` wherever a top-level coroutine context is created:\r\n\r\n```kotlin\r\n    @Test\r\n    fun `assertSoftly demonstration`() = runBlocking(Dispatchers.Unconfined + errorCollectorContextElement) {\r\n        // Two intentional failures will be collected reported as one.\r\n        assertSoftly {\r\n            1 + 1 shouldBe 2 + 1\r\n            delay(10)  // the coroutine will switch threads here\r\n            2 + 3 shouldBe 5 + 1\r\n        }\r\n    }\r\n```\r\n\r\nIdeally, the Kotest assertions library would take care of such initialization, allowing the user to just use `runBlocking(Dispatchers.Unconfined) { ... }` without having to care about the `errorCollectorContextElement`.\r\n\r\nAn idea would be to provide a `DefaultContextFactory`, which could be set up on the JVM via [`ServiceLoader`](https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html), analogous to the existing `MainDispatcherFactory`.\r\n\r\nRelated:\r\n* https://github.com/kotest/kotest/pull/2500\r\n* #1696","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2932/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2932/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2930","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2930/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2930/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2930/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2930","id":994474289,"node_id":"MDU6SXNzdWU5OTQ0NzQyODk=","number":2930,"title":"Thread local is not cleaned up sometimes","user":{"login":"frost13it","id":5944951,"node_id":"MDQ6VXNlcjU5NDQ5NTE=","avatar_url":"https://avatars.githubusercontent.com/u/5944951?v=4","gravatar_id":"","url":"https://api.github.com/users/frost13it","html_url":"https://github.com/frost13it","followers_url":"https://api.github.com/users/frost13it/followers","following_url":"https://api.github.com/users/frost13it/following{/other_user}","gists_url":"https://api.github.com/users/frost13it/gists{/gist_id}","starred_url":"https://api.github.com/users/frost13it/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frost13it/subscriptions","organizations_url":"https://api.github.com/users/frost13it/orgs","repos_url":"https://api.github.com/users/frost13it/repos","events_url":"https://api.github.com/users/frost13it/events{/privacy}","received_events_url":"https://api.github.com/users/frost13it/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-09-13T05:36:09Z","updated_at":"2021-10-13T09:32:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm using a `ThreadContextElement` that sets value of a `ThreadLocal`. After resolving of #985 it worked perfectly.\r\nBut after upgrade to 1.5.0 I've got a similar problem: sometimes the last value of the thread local stucks in a worker thread.\r\nEquivalent code:\r\n```\r\nwhile(true) {\r\n    someCode {\r\n        // here the thread local may already have a value from previous iteration\r\n        withContext(threadLocal.asContextElement(\"foo\")) {\r\n            someOtherCode()\r\n        }\r\n    }\r\n}\r\n```\r\nActual code of the `ThreadContextElement` implementation is [here](https://github.com/kinfra/kinfra-logging/blob/0.3/src/main/kotlin/ru/kontur/kinfra/logging/LoggingContext.kt).\r\n\r\nIt is hard to reproduce the issue, but I'm facing it periodically in production (it may take hours or days to arise).\r\nTested 1.5.0 and 1.5.2, both behaves the same. Running it with `-ea`.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2930/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2930/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2925","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2925/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2925/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2925/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2925","id":992783007,"node_id":"MDU6SXNzdWU5OTI3ODMwMDc=","number":2925,"title":"rxSingle/Completable/Maybe in kotlin-coroutines-rx2 use Default instead of Unconfined as default dispatcher","user":{"login":"jingibus","id":1508949,"node_id":"MDQ6VXNlcjE1MDg5NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1508949?v=4","gravatar_id":"","url":"https://api.github.com/users/jingibus","html_url":"https://github.com/jingibus","followers_url":"https://api.github.com/users/jingibus/followers","following_url":"https://api.github.com/users/jingibus/following{/other_user}","gists_url":"https://api.github.com/users/jingibus/gists{/gist_id}","starred_url":"https://api.github.com/users/jingibus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jingibus/subscriptions","organizations_url":"https://api.github.com/users/jingibus/orgs","repos_url":"https://api.github.com/users/jingibus/repos","events_url":"https://api.github.com/users/jingibus/events{/privacy}","received_events_url":"https://api.github.com/users/jingibus/received_events","type":"User","site_admin":false},"labels":[{"id":2812079245,"node_id":"MDU6TGFiZWwyODEyMDc5MjQ1","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/reactive","name":"reactive","color":"0F5B3C","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"assignees":[{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2021-09-10T00:53:21Z","updated_at":"2021-09-13T17:01:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Our team has started using kotlin-coroutines-rx2 to incrementally migrate our codebase from RxJava2 to coroutines. In so doing, we encounter a lot of call sites like the following:\r\n\r\n```kotlin\r\n          disposables += resultObservable\r\n            ...\r\n            .observeOn(ioScheduler)\r\n            .flatMapCompletable { secureStore.writeCompletable(it, null) }\r\n            .errorHandlingSubscribe()\r\n```\r\n\r\nThe most natural choice that `kotlin-coroutines-rx2` presents us with is the following:\r\n\r\n```kotlin\r\n          disposables += resultObservable\r\n            ...\r\n            .observeOn(ioScheduler)\r\n            .flatMapCompletable { rxCompletable { secureStore.write(it, null) } }\r\n            .errorHandlingSubscribe()\r\n```\r\n\r\nThis would be how the problem would be solved with `rxObservable` in an analogous situation.\r\n\r\n...but this is not correct. `rxCompletable` uses `Dispatchers.Default` if no other dispatcher is specified. The resulting observable will be multithreaded, even if `Schedulers.trampoline()` were the injected value for `ioScheduler`. This is also inconsistent with `rxObservable`, which also uses `Dispatchers.Unconfined`.\r\n\r\nOur RxJava2 unit testing codebase relies upon injecting `Schedulers.trampoline()` to validate reactive code on a single thread. The presence of a stray `Dispatchers.Default` will break any one of these tests.\r\n\r\nIt would be less surprising and more consistent to use `Dispatchers.Unconfined` as the default dispatcher instead of `Dispatchers.Default`.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2925/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2925/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2919","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2919/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2919/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2919/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2919","id":989346735,"node_id":"MDU6SXNzdWU5ODkzNDY3MzU=","number":2919,"title":"Introduce `CoroutineDispatcher.limitedParallelism` as an alternative to standalone executors and slices","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"assignees":[{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2021-09-06T17:25:36Z","updated_at":"2021-09-20T18:37:06Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"See the original idea behind slices here: https://github.com/Kotlin/kotlinx.coroutines/issues/261\r\nSince then, a lot of API was introduced and refined, so the proposed API no longer fits `kotlinx.coroutines`.\r\n\r\n### Use-cases\r\n\r\n`newFixedThreadPoolContext` and `newSingleThreadContext`, as well as regular Java executors, are often used as the only way to control concurrency.  Various factors contribute to that -- limited external resources (e.g. pool of database connections), functional restrictions (e.g. CPU consumption or rate-limiting), or need to have an isolated serializable execution flow (an extreme example would be IDEA code-base that contains *62* single-threaded dispatchers).\r\n\r\nAs a result, an average application creates unnecessary many threads, most of which are idle, consuming the memory, CPU, and device battery.\r\n\r\n### Design overview\r\n\r\nTo address such use-cases, we aim to provide API to take a _view_ of the dispatcher. The dispatcher's view does not create any additional threads and does not allocate any resources. Instead, it piggybacks the original dispatcher but limits the parallelism of submitted tasks and coroutines.  Views themselves are independent and it is possible to have views that have more _declared_ parallelism in total than the original dispatchers. It saves users from meticulous counting of resources, especially when views are used along with global `Dispatchers.Default` and `Dispatchers.IO`.\r\n\r\nWith that API, it is possible to have fine-grained control over the parallelism and leverage already existing dispatchers and executors, saving resources and the number of threads.\r\n\r\nThe API changes are minimal, i.e. instead of\r\n```\r\nprivate val myDatabaseDispatcher = newFixedThreadPool(10, \"DB\")  // At most 10 connections to the database\r\nprivate val myCpuHeavyImageProcessingDispatcher = newFixedThreadPool(2, \"Image rescaling\") // Prevent more than 200% of CPU consumption on images\r\n```\r\nit is possible to write this instead:\r\n```\r\nprivate val myDatabaseDispatcher = Dispatchers.IO.limitedParallelism(10)  // At most 10 connections to the database\r\nprivate val myCpuHeavyImageProcessingDispatcher = Dispatchers.Default.limitedParallelism(2) // Prevent more than 200% of CPU consumption on images\r\n```\r\n\r\n### API changes\r\n\r\nConceptually, _any_ coroutine dispatcher can limit its own parallelism. If we are allowing the sum of views to be greater than the original dispatcher, nothing prevents users to take a view of a single-threaded dispatcher (e.g. `Dispatchers.Main`) as long as its contract allows it to short-circuit the implementation to `return this`.\r\n\r\nAs a result, a single public signature will be added to `CoroutineDispatcher` class\r\n\r\n```\r\npublic abstract class CoroutineDispatcher {\r\n\r\n    public open fun limitedParallelism(parallelism: Int): CoroutineDispatcher\r\n   \r\n    ...the rest of the methods...\r\n}\r\n\r\n```\r\n\r\nwith the default implementation provided.\r\n\r\n### Rejected alternative namings\r\n\r\n```\r\nDispatchers.Default.slice(parallelism = 2)\r\nDispatchers.Default.view(2)\r\nDispatchers.Default.limited(parallelism = 2)\r\nDispatchers.Default.subset(2)\r\nDispatchers.Default.dedicated(2)\r\n```\r\n\r\nWhile being short and visually attractive, it's easy to misinterpret their semantics.\r\n- For `slice`, `subset`, and `view` it can be reasonable to assume that the sum of all the slices/subsets/views cannot be greater than the original\r\n- For `dedicated`  it can be reasonable to assume that _dedicated threads_ are used for such dispatcher\r\n- The biggest concern for `limited` is its name. We cannot enforce the usage of named parameters on the language level, and seeing `myDispatcher.limited(2)` or `myDispatcher.limited(myLimit)` in the wild may be quite misleading.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2919/reactions","total_count":23,"+1":21,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":2},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2919/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2914","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2914/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2914/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2914/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2914","id":986717285,"node_id":"MDU6SXNzdWU5ODY3MTcyODU=","number":2914,"title":"Merge new Native memory model support into the mainline ","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":1109675638,"node_id":"MDU6TGFiZWwxMTA5Njc1NjM4","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/native","name":"native","color":"3ce1ea","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-02T13:18:55Z","updated_at":"2021-09-02T13:18:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We have announced our new experimental memory manager: https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/ and expect our users to check it out.\r\n\r\nThis experience cannot be full without `kotlinx.coroutines`, but unfortunately [special support](https://github.com/Kotlin/kotlinx.coroutines/pull/2833) is required. It forces us to support \"one more fork\" of coroutines, but what's more important -- it forces users to depend on [dev](https://github.com/Kotlin/kotlinx.coroutines/issues/2797#issuecomment-895077197) builds of unspecified quality, and also somehow to be aware of their existense.\r\n\r\nMy proposal is to leverage [isExperimentalMM](https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/main/kotlin/kotlin/native/Platform.kt#L139) stdlib API (available only in 1.6.0+) and merge the support of the new MM in the mainline, enabling new \"sharing\" behaviour (and also implementations of `Dispatchers.Main`, `Dispatchers.Default` and `new*Context()`) conditionally. If the new MM is disabled, we can fallback to our single-threaded mode.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2914/reactions","total_count":8,"+1":8,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2914/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2894","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2894/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2894/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2894/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2894","id":978138133,"node_id":"MDU6SXNzdWU5NzgxMzgxMzM=","number":2894,"title":"BlockHound false positive in tryCopyException","user":{"login":"OliverO2","id":4660803,"node_id":"MDQ6VXNlcjQ2NjA4MDM=","avatar_url":"https://avatars.githubusercontent.com/u/4660803?v=4","gravatar_id":"","url":"https://api.github.com/users/OliverO2","html_url":"https://github.com/OliverO2","followers_url":"https://api.github.com/users/OliverO2/followers","following_url":"https://api.github.com/users/OliverO2/following{/other_user}","gists_url":"https://api.github.com/users/OliverO2/gists{/gist_id}","starred_url":"https://api.github.com/users/OliverO2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OliverO2/subscriptions","organizations_url":"https://api.github.com/users/OliverO2/orgs","repos_url":"https://api.github.com/users/OliverO2/repos","events_url":"https://api.github.com/users/OliverO2/events{/privacy}","received_events_url":"https://api.github.com/users/OliverO2/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-24T14:05:00Z","updated_at":"2021-08-24T14:09:24Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1\r\n\r\nRelevant stack trace excerpt:\r\n```\r\nCaused by: reactor.blockhound.BlockingOperationError: Blocking call! jdk.internal.misc.Unsafe#park\r\n[...]\r\nat kotlinx.coroutines.internal.ExceptionsConstuctorKt.tryCopyException(ExceptionsConstuctor.kt:47)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2894/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2891","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2891/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2891/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2891/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2891","id":976617172,"node_id":"MDU6SXNzdWU5NzY2MTcxNzI=","number":2891,"title":"Clarification on CoroutineScope doc","user":{"login":"KelvinJin","id":2549987,"node_id":"MDQ6VXNlcjI1NDk5ODc=","avatar_url":"https://avatars.githubusercontent.com/u/2549987?v=4","gravatar_id":"","url":"https://api.github.com/users/KelvinJin","html_url":"https://github.com/KelvinJin","followers_url":"https://api.github.com/users/KelvinJin/followers","following_url":"https://api.github.com/users/KelvinJin/following{/other_user}","gists_url":"https://api.github.com/users/KelvinJin/gists{/gist_id}","starred_url":"https://api.github.com/users/KelvinJin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KelvinJin/subscriptions","organizations_url":"https://api.github.com/users/KelvinJin/orgs","repos_url":"https://api.github.com/users/KelvinJin/repos","events_url":"https://api.github.com/users/KelvinJin/events{/privacy}","received_events_url":"https://api.github.com/users/KelvinJin/received_events","type":"User","site_admin":false},"labels":[{"id":742220755,"node_id":"MDU6TGFiZWw3NDIyMjA3NTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs","name":"docs","color":"6b87ce","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-23T04:33:04Z","updated_at":"2021-08-23T12:33:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"So I've noticed that the [doc](https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/common/src/CoroutineScope.kt#L272) says\r\n> If the given [context] does not contain a [Job] element, then a default `Job()` is created. \r\nThis way, cancellation or failure of any child coroutine in this scope cancels all the other children, \r\njust like inside [coroutineScope] block.\r\n\r\nThe key confusion here is that _**cancellation** of any child coroutine in this scope cancels all the other children_. From my testing, cancellation of a child of a Job() doesn't really cancels all other children. Maybe I'm missing anything but the testing code is:\r\n```\r\nval scope = CoroutineScope(Dispatchers.Default)\r\n// Or more explicitly val scope = CoroutineScope(Dispatchers.Default + Job())\r\n\r\nval job1 = scope.launch {\r\n    delay(99999)\r\n}\r\nval job2 = scope.launch {\r\n    delay(500)\r\n}\r\n\r\njob2.cancel()\r\n\r\nprintln(\"job1 state: ${job1.isCancelled}\") // false\r\nprintln(\"job2 state: ${job2.isCancelled}\") // true\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2891/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2890","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2890/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2890/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2890/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2890","id":976047099,"node_id":"MDU6SXNzdWU5NzYwNDcwOTk=","number":2890,"title":"Unable to get intended replay configuration with completing shared flows","user":{"login":"zakhenry","id":721513,"node_id":"MDQ6VXNlcjcyMTUxMw==","avatar_url":"https://avatars.githubusercontent.com/u/721513?v=4","gravatar_id":"","url":"https://api.github.com/users/zakhenry","html_url":"https://github.com/zakhenry","followers_url":"https://api.github.com/users/zakhenry/followers","following_url":"https://api.github.com/users/zakhenry/following{/other_user}","gists_url":"https://api.github.com/users/zakhenry/gists{/gist_id}","starred_url":"https://api.github.com/users/zakhenry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zakhenry/subscriptions","organizations_url":"https://api.github.com/users/zakhenry/orgs","repos_url":"https://api.github.com/users/zakhenry/repos","events_url":"https://api.github.com/users/zakhenry/events{/privacy}","received_events_url":"https://api.github.com/users/zakhenry/received_events","type":"User","site_admin":false},"labels":[{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-08-21T05:14:05Z","updated_at":"2021-08-23T15:46:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a requirement to have a flow that is converted to a `SharedFlow` as multiple downstream subscribers consume the result, but the originating flow is particularly expensive so multiple collection is unacceptable.\r\n\r\nUsing `shareIn` solves this issue, however a requirement is that the downstream subscribers must also know of the completion status of the original flow. I've implemented a `materialize` & `demateralize` function as mentioned in both #2751 & https://github.com/Kotlin/kotlinx.coroutines/issues/2034#issue-620040531 \r\n\r\n> As a side-effect of this error-handling design decision, the SharedFlow never completes. A call collect { ... } on a SharedFlow must be canceled to terminate it. However, if completion is needed, then it can always be materialized by a special emitted value. A collector can apply takeWhile operator to complete the resulting flow when this special value is encountered.\r\n\r\nI've wrapped this up in a generalised function `shareUntilComplete` with the same signature as `shareIn`, there remains however a significant problem with implementing the `replay` functionality - the gist of the function body is as follows:\r\n```kotlin\r\nreturn materialize()\r\n        .shareIn(coroutineScope, started, replay)\r\n        .dematerialize()\r\n```\r\n\r\nThe issue is that the completion symbol will count towards the `replay` allocation, and I can't simply do `replay + 1`, because a subscriber that joins _before completion_ will end up in one more than the intended replay count from buffer, and if you just do `replay` directly, then subscribers before completion will get the expected result, but late subscribers would only get an empty completing flow (because the only thing in cache was the completion notification).\r\n\r\nIs there a simple solution I'm overlooking here?","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2890/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2890/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2886","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2886/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2886/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2886/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2886","id":973608134,"node_id":"MDU6SXNzdWU5NzM2MDgxMzQ=","number":2886,"title":"[Proposal] Primitive or Channel that guarantees the delivery and processing of items","user":{"login":"manuelvicnt","id":7014464,"node_id":"MDQ6VXNlcjcwMTQ0NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/7014464?v=4","gravatar_id":"","url":"https://api.github.com/users/manuelvicnt","html_url":"https://github.com/manuelvicnt","followers_url":"https://api.github.com/users/manuelvicnt/followers","following_url":"https://api.github.com/users/manuelvicnt/following{/other_user}","gists_url":"https://api.github.com/users/manuelvicnt/gists{/gist_id}","starred_url":"https://api.github.com/users/manuelvicnt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manuelvicnt/subscriptions","organizations_url":"https://api.github.com/users/manuelvicnt/orgs","repos_url":"https://api.github.com/users/manuelvicnt/repos","events_url":"https://api.github.com/users/manuelvicnt/events{/privacy}","received_events_url":"https://api.github.com/users/manuelvicnt/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-08-18T12:23:19Z","updated_at":"2021-08-23T14:26:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Due to the prompt cancellation guarantee changes that landed in Coroutines 1.4, Channels cannot be used as mechanism that guarantees delivery _and_ acknowledges successful processing between producer and consumer in order to guarantee that an item was handled exactly once.\r\n\r\n**There's a need for another primitive (or improvements to Channel) that also guarantees that the item was successfully processed by the consumer.**\r\n\r\n--- \r\n### Use case: UI Events in Android\r\n\r\nIn Android development, ViewModel-like classes sometimes need to inform the View that it needs to perform an action. For example, showing a Toast. This is needed, for example, when stateful Views don't expose its internal state—as it happens with most View APIs.\r\n\r\nChannels cannot be used as a way to communicate these types of events to the View because those events could be lost under certain circumstances. That is: 1) the producer (ViewModel) sends the event, 2) the consumer (View) receives the event which is scheduled for dispatch, but then, 3) the consumer is cancelled. *The event was received but never processed*.\r\n\r\nThe `onUndelivered` handler support recently added to Channels doesn't work in this case because it messes up with the events ordering.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2886/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2884","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2884/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2884/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2884/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2884","id":972865792,"node_id":"MDU6SXNzdWU5NzI4NjU3OTI=","number":2884,"title":"Inconsistent exceptional behaviour of channels closed with exception","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""},{"id":1384045755,"node_id":"MDU6TGFiZWwxMzg0MDQ1NzU1","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/channels","name":"channels","color":"f4e792","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-17T16:27:35Z","updated_at":"2021-08-17T16:27:35Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Steps to reproduce:\r\n\r\n```\r\nval channel = Channel<Int>()\r\nlaunch {\r\n    channel.send(1)\r\n}\r\nyield()\r\nchannel.close(RuntimeException(\"Failure\"))\r\nchannel.cancel()\r\n```\r\n\r\nWhen the racing `cancel` comes to the channel that was _correctly_ closed with an exception in order to propagate it to receivers, `cancel` has to wake up and cancel all the senders with an exception.\r\n\r\nThe problem is that `cancel` uses closing cause as an exception, triggering cascading failure on the sending side, even though the sending side correctly closed the channel and stopped all the consecutive sends.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2884/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2884/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2877","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2877/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2877/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2877/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2877","id":970198984,"node_id":"MDU6SXNzdWU5NzAxOTg5ODQ=","number":2877,"title":"Delay sleeps forever with Dispathers.Unconfined (kotlin/native, iOS)","user":{"login":"kissedcode","id":18675884,"node_id":"MDQ6VXNlcjE4Njc1ODg0","avatar_url":"https://avatars.githubusercontent.com/u/18675884?v=4","gravatar_id":"","url":"https://api.github.com/users/kissedcode","html_url":"https://github.com/kissedcode","followers_url":"https://api.github.com/users/kissedcode/followers","following_url":"https://api.github.com/users/kissedcode/following{/other_user}","gists_url":"https://api.github.com/users/kissedcode/gists{/gist_id}","starred_url":"https://api.github.com/users/kissedcode/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kissedcode/subscriptions","organizations_url":"https://api.github.com/users/kissedcode/orgs","repos_url":"https://api.github.com/users/kissedcode/repos","events_url":"https://api.github.com/users/kissedcode/events{/privacy}","received_events_url":"https://api.github.com/users/kissedcode/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":1109675638,"node_id":"MDU6TGFiZWwxMTA5Njc1NjM4","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/native","name":"native","color":"3ce1ea","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-08-13T08:53:40Z","updated_at":"2021-08-13T15:18:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Is it known issue that delay works badly on K/N (ios) when using Unconfined dispatcher from main thread?\r\nIn my case, delay call blocks the coroutine forever:\r\n\r\n```kotlin\r\nGlobalScope.launch(Dispatchers.Main) {\r\n    withContext(Dispatchers.Unconfined) {\r\n        delay(1000)\r\n        // this code never runs\r\n    }\r\n}\r\n```\r\nbut is works normally with Default dispatcher:\r\n```kotlin\r\nGlobalScope.launch(Dispatchers.Default) {\r\n    withContext(Dispatchers.Unconfined) {\r\n        delay(1000)\r\n        // this code will run in 1 second\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2877/reactions","total_count":7,"+1":7,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2877/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2871","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2871/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2871/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2871/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2871","id":966941968,"node_id":"MDU6SXNzdWU5NjY5NDE5Njg=","number":2871,"title":"Non-conflating subscription count in MutableStateFlow and MutableSharedFlow","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"assignees":[{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2021-08-11T15:33:07Z","updated_at":"2021-08-11T15:33:15Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Problem statement\r\n\r\nCurrently, the infrastructure of `Flow` sharing is written with complete asynchrony and implementation unification in mind. While it benefits its usages in general, the implementation of sharing leaks `StateFlow` conflation into seemingly orthogonal concepts such as sharing strategies.\r\n\r\nIt can be demonstrated by the example from #2488:\r\n\r\n```\r\nval flow = flow {\r\n    println(\"Flow is started\") // Never printed\r\n    emit(1)\r\n}.stateIn(this, SharingStarted.Lazily, initialValue = 0)\r\n\r\nassertEquals(expected = 0, actual = flow.first()) // Passes\r\nyield()\r\nassertNotEquals(illegal = 0, actual = flow.first()) // Fails\r\n```\r\n\r\nThe root cause is sharing implementation -- any sharing strategy subscribes to the flow `subscriptionCount` and observes the subscriptions. When the collector subscribes and immediately (whether in the same dispatcher or in a different one, but the one that is lagging behind) unsubscribed, the original value is conflated to zero.\r\n\r\nA more complex example that involves timings can be found in #2863.\r\n\r\n### Proposed solution\r\n\r\nDuring the investigation, it was found that _local_ changes cannot solve the asynchrony problem. While the targeted tweaks can address originally reported issues, the problem will be still unresolved and it will be possible to observe it in less trivial scenarios. It doesn't matter whether the sharing happens in the same thread (e.g. `Dispatchers.Main`) or in a separate one, \r\nthe timings and conflations can still be observed in a way that breaks the mental model of sharing.\r\n\r\nDue to compatibility reasons, it's close to impossible to change the type of `subscriptionCount` and it's not the goal to replace trivially-readable (`subscriptionCount.value`) primitive with a brand new type.\r\n\r\nInstead, we decided to make `subscriptionCount`  non-conflating -- any subscriber will be able to observe _all_ changes in subscribers number. While it is not aligned with how the rest of the state flows behave, it is the smallest potentially-breaking change that only affects implementors of sharing strategies and introduces small inconsistency, but provides clear mental model to the library users and does not introduce new concepts to the library","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2871/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2867","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2867/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2867/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2867/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2867","id":965368597,"node_id":"MDU6SXNzdWU5NjUzNjg1OTc=","number":2867,"title":"Provide an API to race coroutines (\"losers\" are cancelled)","user":{"login":"LouisCAD","id":6975237,"node_id":"MDQ6VXNlcjY5NzUyMzc=","avatar_url":"https://avatars.githubusercontent.com/u/6975237?v=4","gravatar_id":"","url":"https://api.github.com/users/LouisCAD","html_url":"https://github.com/LouisCAD","followers_url":"https://api.github.com/users/LouisCAD/followers","following_url":"https://api.github.com/users/LouisCAD/following{/other_user}","gists_url":"https://api.github.com/users/LouisCAD/gists{/gist_id}","starred_url":"https://api.github.com/users/LouisCAD/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LouisCAD/subscriptions","organizations_url":"https://api.github.com/users/LouisCAD/orgs","repos_url":"https://api.github.com/users/LouisCAD/repos","events_url":"https://api.github.com/users/LouisCAD/events{/privacy}","received_events_url":"https://api.github.com/users/LouisCAD/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-08-10T20:43:24Z","updated_at":"2021-09-02T09:10:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hello,\r\n\r\nI keep seeing this suspend functions racing use case being asked on Kotlin's Slack, and I personally need it quite often as it suits many needs in \"coroutines-heavy\" code.\r\n\r\nI've been using my own solution for a long time now, which I also published as [a library in Splitties for that](https://github.com/LouisCAD/Splitties/tree/main/modules/coroutines#racing-coroutines) (available on MavenCentral), and I didn't find any better API than `raceOf({…}, { … }, …)` and `race { launchRacer { … } }`.\r\n\r\nHere is an example snippet of `raceOf` in action taken straight from the README of Splitties Coroutines:\r\n```kotlin\r\nsuspend fun testCoroutinesRacing() {\r\n    val result = raceOf({\r\n        delay(3)\r\n        \"slow\"\r\n    }, {\r\n        delay(0)\r\n        \"fast\"\r\n    })\r\n    assertEquals(expected = \"fast\", actual = result)\r\n}\r\n```\r\n\r\nand here's [a permalink to the code of these 2 APIs](https://github.com/LouisCAD/Splitties/blob/0e03a94272af3d98f851ebf12ad708f0a5d59b6a/modules/coroutines/src/commonMain/kotlin/splitties/coroutines/Racing.kt).\r\n\r\nCan this API or a better alternative be considered for addition inside kotlinx.coroutines?","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2867/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2867/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2866","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2866/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2866/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2866/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2866","id":965207464,"node_id":"MDU6SXNzdWU5NjUyMDc0NjQ=","number":2866,"title":"BlockHound false positives in ConflatedChannel","user":{"login":"OliverO2","id":4660803,"node_id":"MDQ6VXNlcjQ2NjA4MDM=","avatar_url":"https://avatars.githubusercontent.com/u/4660803?v=4","gravatar_id":"","url":"https://api.github.com/users/OliverO2","html_url":"https://github.com/OliverO2","followers_url":"https://api.github.com/users/OliverO2/followers","following_url":"https://api.github.com/users/OliverO2/following{/other_user}","gists_url":"https://api.github.com/users/OliverO2/gists{/gist_id}","starred_url":"https://api.github.com/users/OliverO2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OliverO2/subscriptions","organizations_url":"https://api.github.com/users/OliverO2/orgs","repos_url":"https://api.github.com/users/OliverO2/repos","events_url":"https://api.github.com/users/OliverO2/events{/privacy}","received_events_url":"https://api.github.com/users/OliverO2/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-10T18:00:05Z","updated_at":"2021-08-10T18:16:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have seen BlockHound complaining on a blocking call on `jdk.internal.misc.Unsafe#park` apparently caused by:\r\n```text\r\nkotlinx.coroutines.channels.ConflatedChannel.enqueueReceiveInternal\r\n```\r\n\r\nSeems like a false positive. Unfortunately, I have not been able to reproduce it.\r\n\r\nProbably it is worth adding `\"isEmpty\"` and `\"enqueueReceiveInternal\"` to the list in `allowBlockingCallsInConflatedChannel()`, as both of them use the same lock as the other members, but are not covered yet:\r\n\r\nhttps://github.com/Kotlin/kotlinx.coroutines/blob/7e762d324aeeb34b53390dee931569013809660e/kotlinx-coroutines-debug/src/CoroutinesBlockHoundIntegration.kt#L135-L136","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2866/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2866/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2865","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2865/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2865/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2865/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2865","id":964636232,"node_id":"MDU6SXNzdWU5NjQ2MzYyMzI=","number":2865,"title":"Binary incompatibitlity between different kotlinx-coroutines modules","user":{"login":"frost13it","id":5944951,"node_id":"MDQ6VXNlcjU5NDQ5NTE=","avatar_url":"https://avatars.githubusercontent.com/u/5944951?v=4","gravatar_id":"","url":"https://api.github.com/users/frost13it","html_url":"https://github.com/frost13it","followers_url":"https://api.github.com/users/frost13it/followers","following_url":"https://api.github.com/users/frost13it/following{/other_user}","gists_url":"https://api.github.com/users/frost13it/gists{/gist_id}","starred_url":"https://api.github.com/users/frost13it/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/frost13it/subscriptions","organizations_url":"https://api.github.com/users/frost13it/orgs","repos_url":"https://api.github.com/users/frost13it/repos","events_url":"https://api.github.com/users/frost13it/events{/privacy}","received_events_url":"https://api.github.com/users/frost13it/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"assignees":[{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2021-08-10T06:22:13Z","updated_at":"2021-09-21T16:13:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Given a following set of dependencies:\r\n```\r\ndependencies {\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1\"\r\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.4.3\"\r\n}\r\n```\r\n\r\nThis simple function fails with `java.lang.NoSuchMethodError: 'void kotlinx.coroutines.AbstractCoroutine.<init>(kotlin.coroutines.CoroutineContext, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)'`:\r\n````\r\nsuspend fun main(): Unit = coroutineScope {\r\n    future {  }\r\n}\r\n````\r\n\r\nIt is caused by binary incompatibitlity of `AbstractCoroutine` from `kotlinx-coroutines-core` module. Despite it is an \"internal\" API, it is used in another module, whose version might not be the same.\r\n\r\nDependency graph:\r\n<pre>\r\nruntimeClasspath - Runtime classpath of compilation 'main' (target  (jvm)).\r\n+--- org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.20\r\n|    +--- org.jetbrains.kotlin:kotlin-stdlib:1.5.20\r\n|    |    +--- org.jetbrains:annotations:13.0\r\n|    |    \\--- org.jetbrains.kotlin:kotlin-stdlib-common:1.5.20\r\n|    \\--- org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.20\r\n|         \\--- org.jetbrains.kotlin:kotlin-stdlib:1.5.20 (*)\r\n+--- org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1\r\n|    \\--- org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.5.1\r\n|         +--- org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.20 (*)\r\n|         \\--- org.jetbrains.kotlin:kotlin-stdlib-common:1.5.20\r\n\\--- <b>org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.4.3</b>\r\n     +--- <b>org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3 -> 1.5.1</b> (*)\r\n     \\--- org.jetbrains.kotlin:kotlin-stdlib:1.4.30 -> 1.5.20 (*)\r\n</pre>\r\n\r\nTo prevent such situation, both modules should depend on `kotlinx-coroutines-bom` of the corresponding version, as described in [Gradle documentation](https://docs.gradle.org/current/userguide/dependency_version_alignment.html#aligning_versions_natively_with_gradle).\r\nThis way, `kotlinx-coroutines-core:1.5.1` would upgrade `kotlinx-corotuines-jdk8:1.4.3` to the same version, resolving the issue.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2865/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":2,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2865/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2863","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2863/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2863/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2863/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2863","id":964079296,"node_id":"MDU6SXNzdWU5NjQwNzkyOTY=","number":2863,"title":"Unexpected behavior WhileSubscribed","user":{"login":"0x7e57","id":65600288,"node_id":"MDQ6VXNlcjY1NjAwMjg4","avatar_url":"https://avatars.githubusercontent.com/u/65600288?v=4","gravatar_id":"","url":"https://api.github.com/users/0x7e57","html_url":"https://github.com/0x7e57","followers_url":"https://api.github.com/users/0x7e57/followers","following_url":"https://api.github.com/users/0x7e57/following{/other_user}","gists_url":"https://api.github.com/users/0x7e57/gists{/gist_id}","starred_url":"https://api.github.com/users/0x7e57/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/0x7e57/subscriptions","organizations_url":"https://api.github.com/users/0x7e57/orgs","repos_url":"https://api.github.com/users/0x7e57/repos","events_url":"https://api.github.com/users/0x7e57/events{/privacy}","received_events_url":"https://api.github.com/users/0x7e57/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-09T14:52:38Z","updated_at":"2021-10-11T13:15:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"From the documentation:\r\n\r\n> stopTimeout - configures a delay between the disappearance of the last subscriber and the stopping of the sharing coroutine.\r\n\r\nHowever, `stopTimeout` is not refreshed on new subscriptions. I also asked this question [here](https://stackoverflow.com/questions/68699222/kotlin-flow-whilesubscribed).\r\nAnother ephemeral example on Android:\r\n```\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        val viewBinding = FragmentHomeBinding.bind(view)\r\n\r\n        val instantFlow = flow {\r\n            while (true) {\r\n                emit(Instant.now())\r\n                delay(Duration.ofMinutes(1).toMillis())\r\n            }\r\n        }\r\n            .onStart { Log.d(TAG, \"start\") }\r\n            .onCompletion { Log.d(TAG, \"completion\") }\r\n            .shareIn(\r\n                lifecycleScope,\r\n                SharingStarted.WhileSubscribed(\r\n                    Duration.ofSeconds(10).toMillis(),\r\n                    Duration.ZERO.toMillis(),\r\n                ),\r\n                1,\r\n            )\r\n        val eventFlow = MutableSharedFlow<Unit>(\r\n            0,\r\n            Int.MAX_VALUE,\r\n            BufferOverflow.SUSPEND,\r\n        )\r\n        viewBinding.button.setOnClickListener {\r\n            check(eventFlow.tryEmit(Unit))\r\n        }\r\n        eventFlow\r\n            .onEach { Log.d(TAG, \"$it ${instantFlow.first()}\") }\r\n            .launchIn(lifecycleScope)\r\n    }\r\n```\r\nEach click on the button should delay the completion of `instantFlow`, but this does not happen, the flow will end after a time equal to `stopTimeout`, ignoring the subscriptions that occur in `eventFlow`.\r\n\r\n```\r\n2021-08-09 17:32:06.835 : start\r\n2021-08-09 17:32:06.839 : kotlin.Unit 2021-08-09T14:32:06.835Z\r\n2021-08-09 17:32:08.411 : kotlin.Unit 2021-08-09T14:32:06.835Z\r\n2021-08-09 17:32:09.256 : kotlin.Unit 2021-08-09T14:32:06.835Z\r\n2021-08-09 17:32:10.978 : kotlin.Unit 2021-08-09T14:32:06.835Z\r\n2021-08-09 17:32:12.119 : kotlin.Unit 2021-08-09T14:32:06.835Z\r\n2021-08-09 17:32:13.964 : kotlin.Unit 2021-08-09T14:32:06.835Z\r\n2021-08-09 17:32:16.862 : completion\r\n```\r\nI have little experience with kotlin coroutines and I may be doing something wrong. Is this the expected behavior?","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2863/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2860","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2860/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2860/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2860/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2860","id":960459043,"node_id":"MDU6SXNzdWU5NjA0NTkwNDM=","number":2860,"title":"Confusing behavior when using retry() and wrapping an exception thrown by emit()","user":{"login":"fluidsonic","id":85242,"node_id":"MDQ6VXNlcjg1MjQy","avatar_url":"https://avatars.githubusercontent.com/u/85242?v=4","gravatar_id":"","url":"https://api.github.com/users/fluidsonic","html_url":"https://github.com/fluidsonic","followers_url":"https://api.github.com/users/fluidsonic/followers","following_url":"https://api.github.com/users/fluidsonic/following{/other_user}","gists_url":"https://api.github.com/users/fluidsonic/gists{/gist_id}","starred_url":"https://api.github.com/users/fluidsonic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fluidsonic/subscriptions","organizations_url":"https://api.github.com/users/fluidsonic/orgs","repos_url":"https://api.github.com/users/fluidsonic/repos","events_url":"https://api.github.com/users/fluidsonic/events{/privacy}","received_events_url":"https://api.github.com/users/fluidsonic/received_events","type":"User","site_admin":false},"labels":[{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-08-04T13:32:32Z","updated_at":"2021-10-14T16:49:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The following code is supposed to retry upstream if it throws an exception.\r\n\r\nIf the exception comes from downstream through the upstream's `emit()` then there it shouldn't retry as the downstream has failed already. This works well if I rethrow the exception raised by `emit()` unchanged.\r\n\r\nHowever if I add some context to that exception by wrapping it in another exception then retry treats it as an exception that doesn't come from downstream but upstream and actually restarts upstream. That leads to a transparency violation.\r\n\r\nThis is unintuitive because wrapping exceptions is fairly common to add context.\r\nIndependent of whether it's legit to do so or not the behavior is quiet confusing. I expect both Flows to stop on downstream exception.\r\nAlso, wrapping exceptions works just fine if no `retry` operator is involved.\r\n\r\n```kt\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.flow.*\r\n\r\n\r\nsuspend fun main() {\r\n    flow {\r\n        flow {\r\n            val context = \"some context\"\r\n\r\n            emit(1)\r\n            delay(500)\r\n\r\n            emit(2)\r\n            delay(500)\r\n\r\n            try {\r\n                emit(3)\r\n            } catch (e: CancellationException) {\r\n                throw e\r\n            } catch (e: Throwable) {\r\n                // throw e // This works.\r\n                throw RuntimeException(\"<new exception to add $context>\", e) // This fails.\r\n            }\r\n        }\r\n            .retry { delay(500); true }\r\n            .collect { n ->\r\n                println(\"inner: $n\")\r\n                emit(n)\r\n            }\r\n    }\r\n        .catch { e ->\r\n            println(\"outer: $e\")\r\n        }\r\n        .collect { n ->\r\n            println(\"outer: $n\")\r\n            if (n == 3) error(\"Fail\")\r\n        }\r\n}\r\n```\r\n\r\nOutput\r\n```text\r\ninner: 1\r\nouter: 1\r\ninner: 2\r\nouter: 2\r\ninner: 3\r\nouter: 3\r\ninner: 1\r\nouter: java.lang.IllegalStateException: Flow exception transparency is violated:\r\n    Previous 'emit' call has thrown exception java.lang.IllegalStateException: Fail, but then emission attempt of value '1' has been detected.\r\n    Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\r\n    For a more detailed explanation, please refer to Flow documentation.\r\n```\r\n\r\nIt gets even more confusing when I extend the `try` block to include the first `emit()`.\r\nThe downstream keeps collecting but doesn't receive any more elements. The upstream repeatedly emits the first element indefinitely.\r\n\r\n```kt\r\nimport kotlinx.coroutines.*\r\nimport kotlinx.coroutines.flow.*\r\n\r\nsuspend fun main() {\r\n    flow {\r\n        flow {\r\n            val context = \"some context\"\r\n\r\n            try {\r\n                emit(1)\r\n                delay(500)\r\n\r\n                emit(2)\r\n                delay(500)\r\n\r\n                emit(3)\r\n            } catch (e: CancellationException) {\r\n                throw e\r\n            } catch (e: Throwable) {\r\n                // throw e // This works.\r\n                throw RuntimeException(\"<new exception to add $context>\", e) // This fails.\r\n            }\r\n        }\r\n            .retry { delay(500); true }\r\n            .collect { n ->\r\n                println(\"inner: $n\")\r\n                emit(n)\r\n            }\r\n    }\r\n        .catch { e ->\r\n            println(\"outer: $e\")\r\n        }\r\n        .collect { n ->\r\n            println(\"outer: $n\")\r\n            if (n == 3) error(\"Fail\")\r\n        }\r\n}\r\n```\r\n\r\nOutput:\r\n```text\r\ninner: 1\r\nouter: 1\r\ninner: 2\r\nouter: 2\r\ninner: 3\r\nouter: 3\r\ninner: 1\r\ninner: 1\r\ninner: 1\r\ninner: 1\r\ninner: 1\r\ninner: 1\r\ninner: 1\r\n```\r\n\r\nhttps://github.com/Kotlin/kotlinx.coroutines/blob/5eca49cfcb25acefaf10ec9b997de537c653b47e/kotlinx-coroutines-core/common/src/flow/operators/Errors.kt#L207-L211","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2860/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2860/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2842","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2842/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2842/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2842/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2842","id":952281936,"node_id":"MDU6SXNzdWU5NTIyODE5MzY=","number":2842,"title":"Correct & document odd Flow retry/retryWhen attempts behavior","user":{"login":"bubenheimer","id":688759,"node_id":"MDQ6VXNlcjY4ODc1OQ==","avatar_url":"https://avatars.githubusercontent.com/u/688759?v=4","gravatar_id":"","url":"https://api.github.com/users/bubenheimer","html_url":"https://github.com/bubenheimer","followers_url":"https://api.github.com/users/bubenheimer/followers","following_url":"https://api.github.com/users/bubenheimer/following{/other_user}","gists_url":"https://api.github.com/users/bubenheimer/gists{/gist_id}","starred_url":"https://api.github.com/users/bubenheimer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bubenheimer/subscriptions","organizations_url":"https://api.github.com/users/bubenheimer/orgs","repos_url":"https://api.github.com/users/bubenheimer/repos","events_url":"https://api.github.com/users/bubenheimer/events{/privacy}","received_events_url":"https://api.github.com/users/bubenheimer/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-07-25T14:07:05Z","updated_at":"2021-07-29T17:54:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The Flow retry/retryWhen `attempt` counter never resets; it provides a kind of flow flakiness measure rather than the number of retry attempts after the last failure. This behavior is not clearly documented. I assume the behavior is an oversight, and not really by design; having such a measure seems rarely preferable. Typically, when counting retries, for example in network connectivity, the counter resets after a successful connection. Measuring flakiness would commonly be a secondary concern, perhaps as a kind of probabilistic/fuzzy measure, or for analytics.\r\n\r\nI propose changing the behavior to the reset style, or adding a flag or new operator implementing this behavior. In addition, the behavior needs to be documented.\r\n\r\nMy present use cases for this are tied to network connectivity and interprocess communication.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2842/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2839","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2839/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2839/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2839/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2839","id":950624737,"node_id":"MDU6SXNzdWU5NTA2MjQ3Mzc=","number":2839,"title":"Provide facilities for non-threadsafe mutable coroutine context element","user":{"login":"elizarov","id":478679,"node_id":"MDQ6VXNlcjQ3ODY3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/478679?v=4","gravatar_id":"","url":"https://api.github.com/users/elizarov","html_url":"https://github.com/elizarov","followers_url":"https://api.github.com/users/elizarov/followers","following_url":"https://api.github.com/users/elizarov/following{/other_user}","gists_url":"https://api.github.com/users/elizarov/gists{/gist_id}","starred_url":"https://api.github.com/users/elizarov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/elizarov/subscriptions","organizations_url":"https://api.github.com/users/elizarov/orgs","repos_url":"https://api.github.com/users/elizarov/repos","events_url":"https://api.github.com/users/elizarov/events{/privacy}","received_events_url":"https://api.github.com/users/elizarov/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-07-22T12:52:13Z","updated_at":"2021-08-02T11:04:12Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Consider the use-case of keeping a trace of operations. In thread-based programming, the data structure that keeps the current trace is stored in a `ThreadLocal` variable and gets updated by the corresponding tracing calls in the thread. With coroutines, one can use `ThreadContextElement` to keep a reference to this structure. However, this element will get automatically inherited by children of the coroutine which might execute concurrently. This concurrency poses a problem when the data structure keeping a trace is not thread-safe and making it thread-safe might be impractical for performance reasons. The proposed solution is to add some mechanism, that would let the coroutine context element to copy itself during the creation of concurrent coroutines so that there can be a guarantee that each copy is accessed only sequentially.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2839/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2839/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2834","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2834/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2834/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2834/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2834","id":946639857,"node_id":"MDU6SXNzdWU5NDY2Mzk4NTc=","number":2834,"title":"Integration for Google API future","user":{"login":"DRSchlaubi","id":16060205,"node_id":"MDQ6VXNlcjE2MDYwMjA1","avatar_url":"https://avatars.githubusercontent.com/u/16060205?v=4","gravatar_id":"","url":"https://api.github.com/users/DRSchlaubi","html_url":"https://github.com/DRSchlaubi","followers_url":"https://api.github.com/users/DRSchlaubi/followers","following_url":"https://api.github.com/users/DRSchlaubi/following{/other_user}","gists_url":"https://api.github.com/users/DRSchlaubi/gists{/gist_id}","starred_url":"https://api.github.com/users/DRSchlaubi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DRSchlaubi/subscriptions","organizations_url":"https://api.github.com/users/DRSchlaubi/orgs","repos_url":"https://api.github.com/users/DRSchlaubi/repos","events_url":"https://api.github.com/users/DRSchlaubi/events{/privacy}","received_events_url":"https://api.github.com/users/DRSchlaubi/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":741925235,"node_id":"MDU6TGFiZWw3NDE5MjUyMzU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/postponed","name":"postponed","color":"e339f9","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-07-16T22:53:14Z","updated_at":"2021-08-02T13:46:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We have an integration library for guava and for play services, but we don't have one for ApiFuture which is used in Google Java API clients\r\n\r\nDocumentation: https://googleapis.dev/java/api-common/latest/com/google/api/core/ApiFuture.html\r\nGithub: https://github.com/googleapis/api-common-java\r\n\r\nThe code would essentially be the same as the guava integration as the API is almost identical.\r\nAlso having something like `ApiFuture.await()` and `ApiFuture.asDeferred()` should be enough as you shouldn't need to convert into an ApiFuture because it is only used by Google libraries","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2834/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2834/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2823","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2823/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2823/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2823/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2823","id":944682247,"node_id":"MDU6SXNzdWU5NDQ2ODIyNDc=","number":2823,"title":"TestCoroutineDispatcher - Unable to use MockK verify with launch","user":{"login":"Teja-Konjeti","id":12207194,"node_id":"MDQ6VXNlcjEyMjA3MTk0","avatar_url":"https://avatars.githubusercontent.com/u/12207194?v=4","gravatar_id":"","url":"https://api.github.com/users/Teja-Konjeti","html_url":"https://github.com/Teja-Konjeti","followers_url":"https://api.github.com/users/Teja-Konjeti/followers","following_url":"https://api.github.com/users/Teja-Konjeti/following{/other_user}","gists_url":"https://api.github.com/users/Teja-Konjeti/gists{/gist_id}","starred_url":"https://api.github.com/users/Teja-Konjeti/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Teja-Konjeti/subscriptions","organizations_url":"https://api.github.com/users/Teja-Konjeti/orgs","repos_url":"https://api.github.com/users/Teja-Konjeti/repos","events_url":"https://api.github.com/users/Teja-Konjeti/events{/privacy}","received_events_url":"https://api.github.com/users/Teja-Konjeti/received_events","type":"User","site_admin":false},"labels":[{"id":396785982,"node_id":"MDU6TGFiZWwzOTY3ODU5ODI=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question","name":"question","color":"cc317c","default":true,"description":null},{"id":1435915404,"node_id":"MDU6TGFiZWwxNDM1OTE1NDA0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test","name":"test","color":"c94240","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2021-07-14T18:18:43Z","updated_at":"2021-07-15T10:37:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```\r\nval testCoroutineDispatcher = TestCoroutineDispatcher()\r\nval testCoroutineScope = TestCoroutineScope(testCoroutineDispatcher)\r\n\r\nclass A { fun b() { } }\r\nval mock = mockk<A>()\r\n\r\ntestCoroutineScope.launch {\r\n    delay(1000)\r\n    mock.b()\r\n}\r\n\r\nverify(timeout = 1100) { mock.b() }\r\n```\r\n\r\nThis fails with `Verification failed: call 1 of 1: A(#3).b()) was not called (timeout = 1100 ms)`","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2823/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2823/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2818","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2818/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2818/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2818/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2818","id":941275027,"node_id":"MDU6SXNzdWU5NDEyNzUwMjc=","number":2818,"title":"MutableSharedFlow rendezvous","user":{"login":"Dominaezzz","id":14130965,"node_id":"MDQ6VXNlcjE0MTMwOTY1","avatar_url":"https://avatars.githubusercontent.com/u/14130965?v=4","gravatar_id":"","url":"https://api.github.com/users/Dominaezzz","html_url":"https://github.com/Dominaezzz","followers_url":"https://api.github.com/users/Dominaezzz/followers","following_url":"https://api.github.com/users/Dominaezzz/following{/other_user}","gists_url":"https://api.github.com/users/Dominaezzz/gists{/gist_id}","starred_url":"https://api.github.com/users/Dominaezzz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dominaezzz/subscriptions","organizations_url":"https://api.github.com/users/Dominaezzz/orgs","repos_url":"https://api.github.com/users/Dominaezzz/repos","events_url":"https://api.github.com/users/Dominaezzz/events{/privacy}","received_events_url":"https://api.github.com/users/Dominaezzz/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-10T15:45:44Z","updated_at":"2021-07-12T16:52:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I expected this bit of code to deadlock. (The `onEach` is a workaround for #2817)\r\n```kotlin\r\nval stream = MutableSharedFlow<Unit>()\r\nstream/* .onEach {} */.buffer(Channel.RENDEZVOUS).produceIn(this)\r\nyield()\r\nstream.emit(Unit)\r\n// stream.emit(Unit)\r\n```\r\n\r\nThis did not deadlock until I commented out the second emission.\r\n\r\nIs this by design? The docs don't seem to suggest this.\r\n\r\n> [emit][MutableSharedFlow.emit] call to such a shared flow suspends until all subscribers receive the emitted value\r\n\r\nI haven't received anything from the channel so this shouldn't happen.\r\n\r\nI need this behaviour so I need to decide between using a workaround or a re-design?\r\nIf this won't be fixed then I'll redesign but if it will be fixed/implemented then I justify using a workaround.\r\n\r\n## Mini investigation\r\nSo API aside, I had a look at the code and the culprit seems to be in `SharedFlow.collect`.\r\nhttps://github.com/Kotlin/kotlinx.coroutines/blob/65e1b84f742a4fff14c67a11a873a4977a0ba539/kotlinx-coroutines-core/common/src/flow/SharedFlow.kt#L343-L352 .\r\n\r\n`tryTakeValue`/`awaitValue` \"pops\" the value out of the buffer for the current subscriber, (which effectively counts as the receipt the docs talked about) then the value is emitted to the collector.\r\n\r\nLooking at `tryTakeValue`.\r\nhttps://github.com/Kotlin/kotlinx.coroutines/blob/65e1b84f742a4fff14c67a11a873a4977a0ba539/kotlinx-coroutines-core/common/src/flow/SharedFlow.kt#L593-L609\r\n\r\nIn theory, that could be changed to a two step process, one step to peek the value in the buffer (i.e. `getPeekedValueLockedAt`), then the value is emitted and another step to pop/release the value in the buffer (i.e. slot index increment and `updateCollectorIndexLocked`).\r\n\r\nIt means locking twice instead of once but it's probably best to measure than listen to whatever I was about hypothesise here lol.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2818/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2818/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2817","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2817/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2817/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2817/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2817","id":941271514,"node_id":"MDU6SXNzdWU5NDEyNzE1MTQ=","number":2817,"title":"SharedFlow, buffer and produceIn fusion bug.","user":{"login":"Dominaezzz","id":14130965,"node_id":"MDQ6VXNlcjE0MTMwOTY1","avatar_url":"https://avatars.githubusercontent.com/u/14130965?v=4","gravatar_id":"","url":"https://api.github.com/users/Dominaezzz","html_url":"https://github.com/Dominaezzz","followers_url":"https://api.github.com/users/Dominaezzz/followers","following_url":"https://api.github.com/users/Dominaezzz/following{/other_user}","gists_url":"https://api.github.com/users/Dominaezzz/gists{/gist_id}","starred_url":"https://api.github.com/users/Dominaezzz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dominaezzz/subscriptions","organizations_url":"https://api.github.com/users/Dominaezzz/orgs","repos_url":"https://api.github.com/users/Dominaezzz/repos","events_url":"https://api.github.com/users/Dominaezzz/events{/privacy}","received_events_url":"https://api.github.com/users/Dominaezzz/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-07-10T15:25:46Z","updated_at":"2021-09-10T08:23:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"```kotlin\r\nval stream = MutableSharedFlow<Unit>()\r\nstream\r\n//  .onEach {} // workaround\r\n    .buffer(0)\r\n    .produceIn(GlobalScope)\r\n\r\nyield() // To make sure subscription has started.\r\n\r\nvar i = 0\r\nwhile (true) {\r\n    stream.emit(Unit)\r\n    println(\"Emitted $i\")\r\n    i++\r\n}\r\n```\r\n\r\nWithout the workaround, there are 64 emissions before suspension happens. There should be at most 1 emissions.\r\n\r\nThe bug is either in [`SharedFlow` fusion](https://github.com/Kotlin/kotlinx.coroutines/blob/65e1b84f742a4fff14c67a11a873a4977a0ba539/kotlinx-coroutines-core/common/src/flow/SharedFlow.kt#L693) or in this [function](https://github.com/Kotlin/kotlinx.coroutines/blob/65e1b84f742a4fff14c67a11a873a4977a0ba539/kotlinx-coroutines-core/common/src/flow/internal/ChannelFlow.kt#L15) that `produceIn` uses.\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2817/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2817/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2806","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2806/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2806/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2806/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2806","id":936293644,"node_id":"MDU6SXNzdWU5MzYyOTM2NDQ=","number":2806,"title":"Proposal: Flow#distinctBy","user":{"login":"Masterzach32","id":4240699,"node_id":"MDQ6VXNlcjQyNDA2OTk=","avatar_url":"https://avatars.githubusercontent.com/u/4240699?v=4","gravatar_id":"","url":"https://api.github.com/users/Masterzach32","html_url":"https://github.com/Masterzach32","followers_url":"https://api.github.com/users/Masterzach32/followers","following_url":"https://api.github.com/users/Masterzach32/following{/other_user}","gists_url":"https://api.github.com/users/Masterzach32/gists{/gist_id}","starred_url":"https://api.github.com/users/Masterzach32/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Masterzach32/subscriptions","organizations_url":"https://api.github.com/users/Masterzach32/orgs","repos_url":"https://api.github.com/users/Masterzach32/repos","events_url":"https://api.github.com/users/Masterzach32/events{/privacy}","received_events_url":"https://api.github.com/users/Masterzach32/received_events","type":"User","site_admin":false},"labels":[{"id":844322915,"node_id":"MDU6TGFiZWw4NDQzMjI5MTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/use-case%20needed","name":"use-case needed","color":"18187c","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-07-03T17:13:10Z","updated_at":"2021-09-23T07:16:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Both List and Sequence have the distinctBy extension function\r\n\r\nExample implementation:\r\n\r\n```kotlin\r\nfun <T> Flow<T>.distinct(): Flow<T> = distinctBy { it }\r\n\r\nfun <T, K> Flow<T>.distinctBy(selector: (T) -> K): Flow<T> = flow {\r\n    val keySet = mutableSetOf<K>()\r\n    collect { value ->\r\n        if (keySet.add(selector(value)))\r\n            emit(value)\r\n    }\r\n}\r\n```\r\n\r\nIs there a reason that the Flow API does not have this? Would there be interest in a function like this in the coroutines library? I have several use cases for this in my projects, I'd assume others might find it useful as well. I could make a PR for this if there is interest.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2806/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2794","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2794/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2794/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2794/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2794","id":932559326,"node_id":"MDU6SXNzdWU5MzI1NTkzMjY=","number":2794,"title":"Deprecate Mutex.onLock for removal","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":1003181424,"node_id":"MDU6TGFiZWwxMDAzMTgxNDI0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/breaking%20change","name":"breaking change","color":"c5def5","default":false,"description":""},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-29T11:59:34Z","updated_at":"2021-06-29T11:59:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Apart from regular locking methods, coroutine's `Mutex` provides a selectable [`onLock`](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/on-lock.html) method.\r\n\r\nSelectable locking was added prior to version 1.0.0 for the sake of consistency and now adds more maintenance and public API burden than actual utility:\r\n\r\n* It cannot be used along with `owner`-based locking\r\n* It cannot be reliably aligned with similar synchronous primitives API, e.g. `Semaphore`\r\n* It obfuscated an API of Mutex-based primitives, such as `ReadWriteMutex`, where its read counter-part is cannot provide any selectable primitives\r\n* Its implementation, in a nutshell, relies on a code-heavy `DCSS` primitive, that implicitly increases the size of all Android applications that use `Mutex` in any way\r\n\r\nAs far as we know, it's neither used in our own coroutines-heavy internal codebases nor in any [open-source projects](https://grep.app/search?q=.onLock&filter[lang][0]=Kotlin) and our research shows that it has no sane practical uses.\r\n\r\nThus the proposal is to deprecate it for removal in `1.6.0`, deprecate with `ERROR` in 1.7.0 and, after further investigation, either remove it completely in 1.8.0 or provide a non-linearizable stub implementation and maintain it forever","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2794/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2794/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2791","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2791/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2791/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2791/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2791","id":930427548,"node_id":"MDU6SXNzdWU5MzA0Mjc1NDg=","number":2791,"title":"`CoroutineScope.future` breaks contract of `cancel`","user":{"login":"jachor","id":451774,"node_id":"MDQ6VXNlcjQ1MTc3NA==","avatar_url":"https://avatars.githubusercontent.com/u/451774?v=4","gravatar_id":"","url":"https://api.github.com/users/jachor","html_url":"https://github.com/jachor","followers_url":"https://api.github.com/users/jachor/followers","following_url":"https://api.github.com/users/jachor/following{/other_user}","gists_url":"https://api.github.com/users/jachor/gists{/gist_id}","starred_url":"https://api.github.com/users/jachor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jachor/subscriptions","organizations_url":"https://api.github.com/users/jachor/orgs","repos_url":"https://api.github.com/users/jachor/repos","events_url":"https://api.github.com/users/jachor/events{/privacy}","received_events_url":"https://api.github.com/users/jachor/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-25T18:59:12Z","updated_at":"2021-09-27T15:28:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This issue is tricky as `CoroutineScope.future` ktdoc mentions this behavior:\r\n\r\n> Note that the error and cancellation semantics of future are subtly different than asListenableFuture’s. \r\n> In particular, any exception that happens in the coroutine after returned future is successfully cancelled\r\n> will be passed to the CoroutineExceptionHandler from the context. See ListenableFutureCoroutine for details.\r\n\r\nI'd like to argue here it is not a good one and actually it means interface of `ListenableFuture` is incorrectly implemented by `CoroutineScope.future` -- `ListenableFuture` contract has `cancel()` method and it doesn't mention it can sometimes crash whole app. Due to that it fails \"Liskov substitution principle\" -- one can not use this specific impl of `ListenableFuture` instead of other `ListenableFuture` implementations.\r\n\r\nTo substantiate my observation this trivial code already sporadically will crash due to `future` behavior:\r\n\r\n```kotlin\r\n  @Test\r\n  fun cancellation_withFailureReportingRace_crashesCoroutineScope(): Unit = runBlocking(Dispatchers.IO) {\r\n    val innerFuture = SettableFuture.create<Unit>()\r\n    val outerFuture = future { innerFuture.await() }\r\n\r\n    launch { innerFuture.setException(IOException()) }\r\n    launch { outerFuture.cancel(false) }\r\n\r\n    // NOTE: This will sporadically crash, I'd expect the failure to be only present\r\n    // in 'outterFuture'/'innerFuture'. I think unhandled exception in CoroutineScope\r\n    // should not happen here.\r\n  }\r\n```\r\n\r\nI'm aware of https://github.com/Kotlin/kotlinx.coroutines/issues/2774. I decided to create new issue as it is not about cancel/cancel race, although making cancel atomic might fix both. I don't think making cancel atomic will be fully possible due to constructs such as `NonCancellable`, but it would fix _some_ issues.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2791/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2791/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2789","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2789/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2789/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2789/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2789","id":929551378,"node_id":"MDU6SXNzdWU5Mjk1NTEzNzg=","number":2789,"title":"Consider \"overriding\" SharedFlow.collect to return Nothing","user":{"login":"lowasser","id":544569,"node_id":"MDQ6VXNlcjU0NDU2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/544569?v=4","gravatar_id":"","url":"https://api.github.com/users/lowasser","html_url":"https://github.com/lowasser","followers_url":"https://api.github.com/users/lowasser/followers","following_url":"https://api.github.com/users/lowasser/following{/other_user}","gists_url":"https://api.github.com/users/lowasser/gists{/gist_id}","starred_url":"https://api.github.com/users/lowasser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lowasser/subscriptions","organizations_url":"https://api.github.com/users/lowasser/orgs","repos_url":"https://api.github.com/users/lowasser/repos","events_url":"https://api.github.com/users/lowasser/events{/privacy}","received_events_url":"https://api.github.com/users/lowasser/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-24T19:32:43Z","updated_at":"2021-06-25T08:36:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Since a `SharedFlow` never ends and collecting it \"never completes normally,\" it'd be possible, semantically correct, and possibly illustrative to add a \"fauxveride\" of `SharedFlow.collect` returning `Nothing`.\r\n\r\nSince it's an extension method, it can't actually be an override, but adding it as an overload should have effectively the same result.\r\n\r\nInspired by https://stackoverflow.com/q/68121398/869736.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2789/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2789/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2783","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2783/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2783/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2783/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2783","id":927148773,"node_id":"MDU6SXNzdWU5MjcxNDg3NzM=","number":2783,"title":"How to make dynamic delay with sample","user":{"login":"Y2Kot","id":4283562,"node_id":"MDQ6VXNlcjQyODM1NjI=","avatar_url":"https://avatars.githubusercontent.com/u/4283562?v=4","gravatar_id":"","url":"https://api.github.com/users/Y2Kot","html_url":"https://github.com/Y2Kot","followers_url":"https://api.github.com/users/Y2Kot/followers","following_url":"https://api.github.com/users/Y2Kot/following{/other_user}","gists_url":"https://api.github.com/users/Y2Kot/gists{/gist_id}","starred_url":"https://api.github.com/users/Y2Kot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Y2Kot/subscriptions","organizations_url":"https://api.github.com/users/Y2Kot/orgs","repos_url":"https://api.github.com/users/Y2Kot/repos","events_url":"https://api.github.com/users/Y2Kot/events{/privacy}","received_events_url":"https://api.github.com/users/Y2Kot/received_events","type":"User","site_admin":false},"labels":[{"id":396785982,"node_id":"MDU6TGFiZWwzOTY3ODU5ODI=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question","name":"question","color":"cc317c","default":true,"description":null},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":2220684277,"node_id":"MDU6TGFiZWwyMjIwNjg0Mjc3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-timer","name":"flow-timer","color":"4101a8","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-06-22T11:52:26Z","updated_at":"2021-08-19T22:03:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I need to change sampling rate dynamically. Why I need this? In my case I need to send data with a period getting from backend server. Data is a callbackflow from android sensor. How can I make it?\r\n\r\nFirstly I thought about `onEach`, however it make delay on each element without throttling, so I tried to use `mapLatest` but it can't be use too, because if I got delay about 100ms and emit time ~50ms, I got loop.\r\n\r\nFinally I tried to wrtite such solution, however it still not fully working as expected (also I understand that this code is very bad). Also I need to create atomic value for each of my datasource flow. Is it possible to optimize my code or write it more correct?\r\n```\r\nfun main() = runBlocking {\r\n    val timeOfPrevEmmit = AtomicLong(System.currentTimeMillis())\r\n    val delayFlow = flow {\r\n        emit(200L)\r\n        delay(3000)\r\n        emit(2000L)\r\n    }\r\n    val generatingFLow = flow {\r\n        repeat(50) { currentNumber ->\r\n            emit(currentNumber)\r\n            delay(100)\r\n        }\r\n    }\r\n    launch {\r\n        val t: Flow<Int> = generatingFLow.combine(delayFlow) { generator, delay ->\r\n            generator to delay\r\n        }.transformLatest { (generator, delay) ->\r\n            val awaitTime = delay - (System.currentTimeMillis() - timeOfPrevEmmit.get())\r\n            delay(awaitTime)\r\n            println(\"delay: $delay\")\r\n            emit(generator)\r\n        }\r\n        t.onEach {\r\n            timeOfPrevEmmit.set(System.currentTimeMillis())\r\n        }.collect {\r\n            println(\"value: $it\")\r\n        }\r\n    }\r\n    delay(10000)\r\n}\r\n```\r\nresult:\r\n```\r\ndelay: 200\r\nvalue: 1\r\ndelay: 200\r\nvalue: 3\r\ndelay: 200\r\ndelay: 200\r\nvalue: 4\r\nvalue: 5\r\ndelay: 200\r\nvalue: 6\r\ndelay: 200\r\nvalue: 8\r\ndelay: 200\r\nvalue: 10\r\ndelay: 200\r\nvalue: 12\r\ndelay: 200\r\nvalue: 14\r\ndelay: 200\r\nvalue: 16\r\ndelay: 200\r\ndelay: 200\r\nvalue: 17\r\nvalue: 18\r\ndelay: 200\r\nvalue: 19\r\ndelay: 200\r\nvalue: 21\r\ndelay: 200\r\nvalue: 23\r\ndelay: 200\r\nvalue: 25\r\ndelay: 200\r\nvalue: 27\r\ndelay: 2000\r\nvalue: 45\r\ndelay: 2000\r\nvalue: 49\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2783/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2783/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2775","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2775/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2775/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2775/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2775","id":925576507,"node_id":"MDU6SXNzdWU5MjU1NzY1MDc=","number":2775,"title":"Guide: withTimeout: missing info on statements being executed in atomically","user":{"login":"arberg","id":2171240,"node_id":"MDQ6VXNlcjIxNzEyNDA=","avatar_url":"https://avatars.githubusercontent.com/u/2171240?v=4","gravatar_id":"","url":"https://api.github.com/users/arberg","html_url":"https://github.com/arberg","followers_url":"https://api.github.com/users/arberg/followers","following_url":"https://api.github.com/users/arberg/following{/other_user}","gists_url":"https://api.github.com/users/arberg/gists{/gist_id}","starred_url":"https://api.github.com/users/arberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arberg/subscriptions","organizations_url":"https://api.github.com/users/arberg/orgs","repos_url":"https://api.github.com/users/arberg/repos","events_url":"https://api.github.com/users/arberg/events{/privacy}","received_events_url":"https://api.github.com/users/arberg/received_events","type":"User","site_admin":false},"labels":[{"id":396785982,"node_id":"MDU6TGFiZWwzOTY3ODU5ODI=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question","name":"question","color":"cc317c","default":true,"description":null},{"id":742220755,"node_id":"MDU6TGFiZWw3NDIyMjA3NTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/docs","name":"docs","color":"6b87ce","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-20T11:19:22Z","updated_at":"2021-06-22T12:50:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm learning, I read the withTimeout and it's claim that the second example will not leak resources. This can only be true if kotlin coroutines withTimeout guarantees that a statement is atomic, either it executes completely (including the assignment) or not at all. It would be nice if this was explicitly stated, and possibly with link to details if it's not so simple. \n https://kotlinlang.org/docs/cancellation-and-timeouts.html\n\nOtherwise really nice and clear writeup. Thank you to whoever wrote it. ","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2775/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2775/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2774","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2774/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2774/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2774/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2774","id":925135752,"node_id":"MDU6SXNzdWU5MjUxMzU3NTI=","number":2774,"title":"`CoroutineScope.future {}` behaves differently to `FutureTask` when cancelled","user":{"login":"yorickhenning","id":23535960,"node_id":"MDQ6VXNlcjIzNTM1OTYw","avatar_url":"https://avatars.githubusercontent.com/u/23535960?v=4","gravatar_id":"","url":"https://api.github.com/users/yorickhenning","html_url":"https://github.com/yorickhenning","followers_url":"https://api.github.com/users/yorickhenning/followers","following_url":"https://api.github.com/users/yorickhenning/following{/other_user}","gists_url":"https://api.github.com/users/yorickhenning/gists{/gist_id}","starred_url":"https://api.github.com/users/yorickhenning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yorickhenning/subscriptions","organizations_url":"https://api.github.com/users/yorickhenning/orgs","repos_url":"https://api.github.com/users/yorickhenning/repos","events_url":"https://api.github.com/users/yorickhenning/events{/privacy}","received_events_url":"https://api.github.com/users/yorickhenning/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-18T19:01:30Z","updated_at":"2021-09-27T15:28:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I think we've found another cancellation corner case in `CoroutineScope.future {}`.\r\n\r\nIn a race between asynchronous cancellation from `Future.cancel()` and cancellation from failure of the executing `Job`, `ListenableFutureCoroutine.onCancelled()` may execute after the `Future` has already been completed as cancelled.\r\n\r\nWhen `onCancelled()` runs after the `Future` is complete, it invokes the `CoroutineExceptionHandler` and escalates the failure:\r\n\r\n```\r\n    override fun onCancelled(cause: Throwable, handled: Boolean) {\r\n        if (!future.completeExceptionallyOrCancel(cause) && !handled) {\r\n            // prevents loss of exception that was not handled by parent & could not be set to JobListenableFuture\r\n            handleCoroutineException(context, cause)\r\n        }\r\n    }\r\n```\r\n\r\nThis is different from how `FutureTask` treats failure after cancellation.\r\n\r\nI haven't minimized a test case, but my reading is:\r\n\r\n1. `Future.cancel()` is called on the returned `Future`\r\n2. The cancelling thread of control executes [`JobListenableFuture.cancel()`](https://github.com/Kotlin/kotlinx.coroutines/blob/65e1b84f742a4fff14c67a11a873a4977a0ba539/integration/kotlinx-coroutines-guava/src/ListenableFuture.kt#L460), succeeds in cancelling the `Future`, then calls `jobToCancel.cancel()`\r\n3. Concurrently, the thread of control executing a continuation in that `Job` completes in failure, which also calls `cancel()` on that same `Job`\r\n4. If the thread of control executing the continuation wins the race, `onCancelled()` gets called with a failure, fails to complete the already-complete-as-cancelled `Future` with that failure, and so invokes the `CoroutineExceptionHandler`\r\n\r\nIn contrast, `FutureTask` uses CAS from NEW -> COMPLETING when the submitted function finishes for any reason. If that CAS fails, the completion is dropped, whether or not the completion is a failure. Cancellation makes the same CAS away from `NEW`, and there's no `else` case if completion of the running function with an `Exception` doesn't win the race.\r\n\r\nSince `future {}` calls the `CoroutineExceptionHandler`, errors that would be ignored in a function run with an `Executor` instead execute a failure handler. So at the moment, under cancellation, futures from `myCoroutineScope.future(::myFunc)` are incompatible with those returned from `myExecutor.submit(::myFunc)`.\r\n\r\nI think to maintain compatibility, `future {}` would have to attempt to complete its `Future`, but return from the stack and drop the completion if the future is already complete, for any reason? \r\n\r\nIncidentally, I think the documentation on `ListenableFutureCoroutine` is out of date. That class is only used by `future {}`, but the docstring refers to its use in `asListenableFuture {}`.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2774/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2774/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2763","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2763/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2763/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2763/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2763","id":920373156,"node_id":"MDU6SXNzdWU5MjAzNzMxNTY=","number":2763,"title":"Exception in coroutines machinery (ClassCastException) affecting only few android 5 users ","user":{"login":"Dmitry-Borodin","id":11879032,"node_id":"MDQ6VXNlcjExODc5MDMy","avatar_url":"https://avatars.githubusercontent.com/u/11879032?v=4","gravatar_id":"","url":"https://api.github.com/users/Dmitry-Borodin","html_url":"https://github.com/Dmitry-Borodin","followers_url":"https://api.github.com/users/Dmitry-Borodin/followers","following_url":"https://api.github.com/users/Dmitry-Borodin/following{/other_user}","gists_url":"https://api.github.com/users/Dmitry-Borodin/gists{/gist_id}","starred_url":"https://api.github.com/users/Dmitry-Borodin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dmitry-Borodin/subscriptions","organizations_url":"https://api.github.com/users/Dmitry-Borodin/orgs","repos_url":"https://api.github.com/users/Dmitry-Borodin/repos","events_url":"https://api.github.com/users/Dmitry-Borodin/events{/privacy}","received_events_url":"https://api.github.com/users/Dmitry-Borodin/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":1411045241,"node_id":"MDU6TGFiZWwxNDExMDQ1MjQx","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/android","name":"android","color":"e99695","default":false,"description":""},{"id":2086327746,"node_id":"MDU6TGFiZWwyMDg2MzI3NzQ2","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/compiler-issue","name":"compiler-issue","color":"6e2bff","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":22,"created_at":"2021-06-14T12:41:36Z","updated_at":"2021-10-13T11:28:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Kotlin 1.5.10, coroutines 1.4.3 (checked changelog - looks like not fixed)\r\nThis is happening to 200 users (800 crashes) only on android 5 (I have at least 8000 android 5 users in last week.)\r\nNot reproducible.\r\n\r\n```\r\nFatal Exception: kotlinx.coroutines.m0: Fatal exception in coroutines machinery for CancellableContinuation(DispatchedContinuation[Dispatchers.Default, Continuation at package.Repository$updateCacheVariants$1.invokeSuspend(Repository.kt)@2b36bba8]){Cancelled}@a821e66. Please read KDoc to 'handleFatalException' method and report this incident to maintainers\r\n       at kotlinx.coroutines.DispatchedTask.handleFatalException(DispatchedTask.java:144)\r\n       at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.java:115)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.java:571)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.java:750)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.java:678)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.java:665)\r\nCaused by java.lang.ClassCastException: kotlin.a0.k.a.c cannot be cast to kotlinx.coroutines.internal.e\r\n       at kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation(CoroutineDispatcher.java:104)\r\n       at kotlin.coroutines.jvm.internal.ContinuationImpl.releaseIntercepted(ContinuationImpl.java:118)\r\n       at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(BaseContinuationImpl.java:39)\r\n       at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.java:104)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.java:571)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.java:750)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.java:678)\r\n       at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.java:665)\r\n```\r\n      \r\n While I'm investigating why stacktrace is obfuscated (Firebase should deobfuscate stacktraces automatically), reporting it now so you may have some feedback.\r\n \r\n The code in referenced repository is as following\r\n \r\n```\r\n \t\tGlobalScope.launch {\r\n\t\t\ttry {\r\n// generated retrofit suspend function and access property of response model\r\n\t\t\t\tval response: List<Variants> = retrofitService.getAllVariants(request).variants \r\n\t\t\t\tcachedVariants.saveVariantsToCache(response)\r\n\t\t\t}\r\n\t\t\tcatch (e: Exception) {\r\n\t\t\t\tlogCouldntSaveCache()\r\n\t\t\t}\r\n                 }\r\n```      \r\n  ","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2763/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2758","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2758/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2758/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2758/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2758","id":919236569,"node_id":"MDU6SXNzdWU5MTkyMzY1Njk=","number":2758,"title":"Utility for creating child scopes","user":{"login":"circusmagnus","id":22617780,"node_id":"MDQ6VXNlcjIyNjE3Nzgw","avatar_url":"https://avatars.githubusercontent.com/u/22617780?v=4","gravatar_id":"","url":"https://api.github.com/users/circusmagnus","html_url":"https://github.com/circusmagnus","followers_url":"https://api.github.com/users/circusmagnus/followers","following_url":"https://api.github.com/users/circusmagnus/following{/other_user}","gists_url":"https://api.github.com/users/circusmagnus/gists{/gist_id}","starred_url":"https://api.github.com/users/circusmagnus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/circusmagnus/subscriptions","organizations_url":"https://api.github.com/users/circusmagnus/orgs","repos_url":"https://api.github.com/users/circusmagnus/repos","events_url":"https://api.github.com/users/circusmagnus/events{/privacy}","received_events_url":"https://api.github.com/users/circusmagnus/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-11T21:38:57Z","updated_at":"2021-06-15T13:02:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have noticed in my immediate surroundings, that quite a few developers are struggling with scoping their coroutines in easy way. Exemplary problem:\r\n\r\n- We have an android ViewModel class. It has a built-in `viewModelScope`, which people commonly use to launch coroutines. It gets automatically canceled, when an android screen goes away. Super useful.\r\n- A user searches for some items in an online shop. Our ViewModel collects a few Flows concurrently, with a given search query as an input.\r\n- There are some other concurrent coroutines in action (say - loading an image or updating user gps location)\r\n- A user cancels its search by tapping an `X`. All search-related coroutines should stop. But other coroutines scoped to this viewmodel should continue, so we cannot use `viewModelScope.coroutineContext.cancelChildren()`\r\n- Alternatively, user goes away from our screen. We need to cancel all corotuines - search-related and others. So our `searchScope` should not be a completely standalone scope, that needs to be canceled manually. It should go down along viewmodelScope automatically\r\n\r\nUsual solutions usually include some collection of jobs, like:\r\n```\r\nclass ViewModel {\r\n   val searchJobs = emptyList<Job>()\r\n   ...\r\n   fun search() {\r\n      searchJobs += viewModelScope.launch { ... }\r\n      searchJobs += viewModelScope.launch { ... }\r\n   }\r\n\r\n   fun searchCanceled() {\r\n      searchJobs.forEach { cancel }\r\n      }\r\n      \r\n```\r\nThat is a bit boilerplaty and error-prone. If one forgets to add some well-camouflaged job to an appriopiate collection, it will not be canceled. Same problem, that RxJava has with its syntax not forcing a developer to properly scope his async operation.\r\n\r\nCoroutines offer an IMHO more neat solution with an `CoroutineScope` construct:\r\n```\r\nclass ViewModel {\r\n   val searchScope = viewModelScope.newChildScope()\r\n   ...\r\n   fun search() {\r\n      searchScope.launch { ... }\r\n      searchScope.launch { ... }\r\n   }\r\n\r\n   fun searchCanceled() {\r\n      searchScope.cancelChildren()\r\n      }\r\n\r\n// searchScope gets automatically canceled, when viewModelScope is canceled and inherits all coroutineContext elements from it.\r\n      \r\n```\r\nThing is - there is no utility, that I know of, that would facilitate construction of such childScopes. It needs to be written along this lines:\r\n` val childScope = parentScope + Job(parent = parentScope.coroutineContext[Job])`\r\nor even\r\n`val childScope = CoroutineScope(parentScope.coroutineContext + Job(parent = parentScope.coroutineContext[Job])`\r\n\r\nIt is especially easy to miss attaching of child`s scope Job to parent`s Job.\r\n\r\nThus I would propose to add one or two utility functions, that could direct people to (I hope) better solution:\r\n`fun CoroutineScope.newChildScope(): CoroutineScope = this + Job(parent = coroutineContext[Job])`\r\n\r\n`fun CoroutineScope.cancelChildren() = coroutineContext.cancelChildren()`\r\n\r\nThe second one I find personally using quite a bit, even if it is just simple shortcut (Just as `coroutineContext.cancelChildren()` is just a shortcut to `coroutineContext[Job].cancelChildren()`)\r\n\r\n`newChildScope()` function could optionally have a flag, whether a new job should be a Supervisor or an ordinary one.\r\n\r\nOther usecases:\r\n\r\n- Launching a job only when fragment / activity is between certain Lifecycle stages:\r\n```\r\nfun Lifecycle.repeatWhenStarted(job: suspend () -> Unit): Job {\r\n    val innerScope: CoroutineScope = coroutineScope.newChildScope()\r\n    val innerJob = requireNotNull(innerScope.coroutineContext[Job])\r\n    val observer = LifecycleEventObserver { _, event ->\r\n        when (event) {\r\n            Lifecycle.Event.ON_START -> innerScope.launch { job() }\r\n            Lifecycle.Event.ON_STOP  -> innerScope.cancelChildren()\r\n            else                     -> Unit\r\n        }\r\n    }\r\n    innerJob.invokeOnCompletion { removeObserver(observer) }\r\n\r\n    addObserver(observer)\r\n    return innerJob\r\n}\r\n```\r\n(Android X is going to introduce similar function in next release)\r\n\r\n- Launching a self-supervising Actor:\r\n```\r\nclass SelfRestartingActor(scope: CoroutineScope) {\r\n    \r\n    val innerScope: CoroutineScope = scope.newChildScope(superVisor = true) + CoroutineExceptionHandler { _, _ -> \r\n       startActor() \r\n   }\r\n    \r\n    fun startActor() = innerScope.launch { ... }\r\n}\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2758/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2758/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2756","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2756/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2756/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2756/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2756","id":917937324,"node_id":"MDU6SXNzdWU5MTc5MzczMjQ=","number":2756,"title":"`TestCoroutineDispatcher`'s threading policy is undocumented behavior","user":{"login":"kevincianfarini","id":13242326,"node_id":"MDQ6VXNlcjEzMjQyMzI2","avatar_url":"https://avatars.githubusercontent.com/u/13242326?v=4","gravatar_id":"","url":"https://api.github.com/users/kevincianfarini","html_url":"https://github.com/kevincianfarini","followers_url":"https://api.github.com/users/kevincianfarini/followers","following_url":"https://api.github.com/users/kevincianfarini/following{/other_user}","gists_url":"https://api.github.com/users/kevincianfarini/gists{/gist_id}","starred_url":"https://api.github.com/users/kevincianfarini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kevincianfarini/subscriptions","organizations_url":"https://api.github.com/users/kevincianfarini/orgs","repos_url":"https://api.github.com/users/kevincianfarini/repos","events_url":"https://api.github.com/users/kevincianfarini/events{/privacy}","received_events_url":"https://api.github.com/users/kevincianfarini/received_events","type":"User","site_admin":false},"labels":[{"id":1435915404,"node_id":"MDU6TGFiZWwxNDM1OTE1NDA0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test","name":"test","color":"c94240","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"assignees":[{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2021-06-10T21:18:37Z","updated_at":"2021-06-11T17:03:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Recently I was bitten by the threading policy of `TestCoroutineDispatcher`. In our work application, we were testing that a certain action always gets invoked on the main thread. When testing this using `TestCoroutineDispatcher`, we were getting failing tests. Omitting `TestCoroutineDispatcher` in favor of regular `runBlocking` fixed the tests. \r\n\r\nWe ventured to figure out why and ultimately isolated a test case that fails. \r\n\r\n```kotlin\r\n@Test fun isolate() = runBlocking(TestCoroutineDispatcher()) {\r\n  val job = launch {\r\n    val inner = withContext(newSingleThreadContext(\"test\")) {\r\n      Thread.currentThread()\r\n    }\r\n    val outer = Thread.currentThread()\r\n    assertThat(outer).isNotEqualTo(inner)\r\n  }\r\n  job.join()\r\n}\r\n```\r\nWhen running this test, we received the following error. \r\n\r\n```\r\nexpected not to be: Thread[test @coroutine#2,5,main]\r\n```\r\n\r\nAfter several hours of debugging and reading through documentation, it was brought to our attention that it's possible `TestCoroutineDispatcher`'s threading policy might be similar to `Dispatchers.Unconfined`. If this is true, it is undocumented behavior. \r\n\r\nIf the team would like, I can update the documentation to reflect this functionality. ","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2756/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2756/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2752","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2752/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2752/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2752/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2752","id":915203251,"node_id":"MDU6SXNzdWU5MTUyMDMyNTE=","number":2752,"title":"Propose shortcut for Iterable<Deferred<T>> → Flow<T> e.g. map { it::await.asFlow() }.merge()","user":{"login":"jablko","id":78493,"node_id":"MDQ6VXNlcjc4NDkz","avatar_url":"https://avatars.githubusercontent.com/u/78493?v=4","gravatar_id":"","url":"https://api.github.com/users/jablko","html_url":"https://github.com/jablko","followers_url":"https://api.github.com/users/jablko/followers","following_url":"https://api.github.com/users/jablko/following{/other_user}","gists_url":"https://api.github.com/users/jablko/gists{/gist_id}","starred_url":"https://api.github.com/users/jablko/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jablko/subscriptions","organizations_url":"https://api.github.com/users/jablko/orgs","repos_url":"https://api.github.com/users/jablko/repos","events_url":"https://api.github.com/users/jablko/events{/privacy}","received_events_url":"https://api.github.com/users/jablko/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-06-08T15:54:43Z","updated_at":"2021-06-12T20:45:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"What do you think about adding the following to the library:\r\n```Kotlin\r\n/**\r\n * Creates a flow from a collection of deferreds. Elements are emitted in the order they complete.\r\n */\r\nfun <T> Iterable<Deferred<T>>.race(): Flow<T> = map { it::await.asFlow() }.merge()\r\n```\r\n\r\nCall it:\r\n- `Iterable<Deferred<T>>.merge()` like [`Iterable<Flow<T>>.merge()`](https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/kotlin.collections.-iterable/merge.html)\r\n- or `asCompleted()` like [Python `concurrent.futures.as_completed()`](https://github.com/Kotlin/kotlinx.coroutines/issues/171#issuecomment-348100811)\r\n- or my personal favorite, `race()` like [`Promise.race()`](https://tc39.es/ecma262/#sec-promise.race)\r\n\r\nCurrently I use `deferreds.map { it::await.asFlow() }.merge().filterNotNull().firstOrNull()` to [get the first in a collection of deferreds to complete with a non-null value](https://github.com/Kotlin/kotlinx.coroutines/issues/171#issuecomment-849705067).\r\n\r\nThe proposed shortcut isn't *much* shorter, but:\r\n- I think a shortcut for `Iterable<Deferred<T>>` → `Flow<T>` has general utility\r\n- it's analogous to other libraries, i.e. Python `concurrent.futures.as_completed()`, `Promise.race()`\r\n- I think naming this idiom (`map { it::await.asFlow() }.merge()`) makes it clearer and easier to find and use?\r\n\r\nUnless there's already a better way of doing the same thing?\r\n\r\n[Previously proposed](https://github.com/Kotlin/kotlinx.coroutines/issues/171#issuecomment-348100811) during the discussion of #171","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2752/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2752/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2751","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2751/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2751/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2751/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2751","id":914125725,"node_id":"MDU6SXNzdWU5MTQxMjU3MjU=","number":2751,"title":"Proposal kotlin flow repeatUntil operator","user":{"login":"jeziellago","id":8452419,"node_id":"MDQ6VXNlcjg0NTI0MTk=","avatar_url":"https://avatars.githubusercontent.com/u/8452419?v=4","gravatar_id":"","url":"https://api.github.com/users/jeziellago","html_url":"https://github.com/jeziellago","followers_url":"https://api.github.com/users/jeziellago/followers","following_url":"https://api.github.com/users/jeziellago/following{/other_user}","gists_url":"https://api.github.com/users/jeziellago/gists{/gist_id}","starred_url":"https://api.github.com/users/jeziellago/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeziellago/subscriptions","organizations_url":"https://api.github.com/users/jeziellago/orgs","repos_url":"https://api.github.com/users/jeziellago/repos","events_url":"https://api.github.com/users/jeziellago/events{/privacy}","received_events_url":"https://api.github.com/users/jeziellago/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-06-08T01:06:56Z","updated_at":"2021-09-09T15:09:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello folks 👋🏼\r\n\r\nI have a pooling use-case and I'd like some operator for repeat operations.\r\n## My use-case\r\n```kotlin\r\n// returns Processing, Completed, or Failure\r\nfun getTransformationStatus(): Flow<Message> { ... }\r\n``` \r\n```kotlin\r\nsealed class Message {\r\n    object Processing : Message()\r\n    object Completed : Message()\r\n    object Failed : Message()\r\n}\r\n```\r\nThe `Flow<Message>` should complete with `Completed` or `Failure` status, otherwise must repeat (with `delay()` and some attempts).\r\n\r\nWe have the `retry` and `retryWhen` operators, but I don't have exceptions propagation to control my flow.\r\n## Proposal operator repeatUntil\r\nInspired by `retryWhen` operator, I created the extension `repeatUntil`.\r\n```kotlin\r\nfun <T> Flow<T>.repeatUntil(predicate: suspend (value: T, attempt: Long) -> Boolean): Flow<T> =\r\n    flow {\r\n        var attempt = 0L\r\n        var shallRepeat: Boolean\r\n        do {\r\n            shallRepeat = false\r\n            val value = this@repeatUntil.singleOrNull()\r\n            if (value != null) {\r\n                if (!predicate(value, attempt)) {\r\n                    shallRepeat = true\r\n                    attempt++\r\n                } else {\r\n                    emit(value)\r\n                }\r\n            }\r\n        } while (shallRepeat)\r\n    }\r\n```\r\n## Using repeatUntil in my use-case:\r\n```kotlin\r\ngetTransformationStatus()\r\n    .repeatUntil { value, attempt ->\r\n        if (value is Message.Completed ||\r\n            value is Message.Failed ||\r\n            attempt == MAX_ATTEMPT\r\n        ) {\r\n            true\r\n        } else {\r\n            delay(POOLING_INTERVAL)\r\n            false\r\n        }\r\n    }.collect {\r\n        println(it)\r\n    }\r\n```\r\nIt works well for me, but I'd like to know if there is a better way to do that.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2751/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2751/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2722","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2722/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2722/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2722/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2722","id":897829370,"node_id":"MDU6SXNzdWU4OTc4MjkzNzA=","number":2722,"title":"Can't use `TestCoroutineDispatcher` with `stateIn()`","user":{"login":"NinoDLC","id":11870220,"node_id":"MDQ6VXNlcjExODcwMjIw","avatar_url":"https://avatars.githubusercontent.com/u/11870220?v=4","gravatar_id":"","url":"https://api.github.com/users/NinoDLC","html_url":"https://github.com/NinoDLC","followers_url":"https://api.github.com/users/NinoDLC/followers","following_url":"https://api.github.com/users/NinoDLC/following{/other_user}","gists_url":"https://api.github.com/users/NinoDLC/gists{/gist_id}","starred_url":"https://api.github.com/users/NinoDLC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NinoDLC/subscriptions","organizations_url":"https://api.github.com/users/NinoDLC/orgs","repos_url":"https://api.github.com/users/NinoDLC/repos","events_url":"https://api.github.com/users/NinoDLC/events{/privacy}","received_events_url":"https://api.github.com/users/NinoDLC/received_events","type":"User","site_admin":false},"labels":[{"id":1435915404,"node_id":"MDU6TGFiZWwxNDM1OTE1NDA0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test","name":"test","color":"c94240","default":false,"description":""},{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-05-21T08:45:49Z","updated_at":"2021-06-11T17:10:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Consider this code : \r\n\r\n```\r\n@Test\r\nfun `with delay`() {\r\n    val testCoroutineDispatcher = TestCoroutineDispatcher()\r\n    val testCoroutineScope = TestCoroutineScope(testCoroutineDispatcher)\r\n\r\n    Dispatchers.setMain(testCoroutineDispatcher)\r\n\r\n    testCoroutineScope.runBlockingTest {\r\n\r\n        val uiStateFlow = flow {\r\n            emit(1)\r\n            delay(500)\r\n            emit(2)\r\n        }.mapLatest { integer ->\r\n            integer.toString()\r\n        }.stateIn(\r\n            scope = CoroutineScope(SupervisorJob() + testCoroutineDispatcher),\r\n            started = SharingStarted.WhileSubscribed(5_000),\r\n            initialValue = \"\"\r\n        )\r\n\r\n        testCoroutineDispatcher.advanceTimeBy(1_000)\r\n\r\n        val result = uiStateFlow.first()\r\n\r\n        assertEquals(\"2\", result) // fails !! result = \"1\"\r\n    }\r\n\r\n    Dispatchers.resetMain()\r\n    testCoroutineScope.cleanupTestCoroutines()\r\n}\r\n```\r\n\r\nTo my knowledge, it is impossible to set the `Dispatcher` a `StateFlow` is using. This is due to the fact the `SharingConfig` has an `EmptyCoroutineContext` (`Share.kt:189` with coroutine version to 1.5.0). \r\n\r\nIs this a bug or ~~a feature~~ intended ?\r\n\r\nIf this is intended, how could we \"manipulate time\" with the `TestCoroutineDispatcher`, using a `StateFlow` ?","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2722/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2713","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2713/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2713/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2713/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2713","id":893111459,"node_id":"MDU6SXNzdWU4OTMxMTE0NTk=","number":2713,"title":"Stabilize flatten/flatMap family of operators ","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-17T09:01:25Z","updated_at":"2021-05-26T22:02:28Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"While it's still closely bound to #1147, it's worth investigating and draft-designing the original operators stabilization, so our `flatMap` analogue will be available for users who don't use any experimental API","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2713/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2713/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2692","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2692/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2692/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2692/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2692","id":883045451,"node_id":"MDU6SXNzdWU4ODMwNDU0NTE=","number":2692,"title":"Attempt to invoke interface method 'java.lang.Object kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)' on a null object reference","user":{"login":"ScottPierce","id":871169,"node_id":"MDQ6VXNlcjg3MTE2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/871169?v=4","gravatar_id":"","url":"https://api.github.com/users/ScottPierce","html_url":"https://github.com/ScottPierce","followers_url":"https://api.github.com/users/ScottPierce/followers","following_url":"https://api.github.com/users/ScottPierce/following{/other_user}","gists_url":"https://api.github.com/users/ScottPierce/gists{/gist_id}","starred_url":"https://api.github.com/users/ScottPierce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ScottPierce/subscriptions","organizations_url":"https://api.github.com/users/ScottPierce/orgs","repos_url":"https://api.github.com/users/ScottPierce/repos","events_url":"https://api.github.com/users/ScottPierce/events{/privacy}","received_events_url":"https://api.github.com/users/ScottPierce/received_events","type":"User","site_admin":false},"labels":[{"id":864692605,"node_id":"MDU6TGFiZWw4NjQ2OTI2MDU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/waiting%20for%20clarification","name":"waiting for clarification","color":"c98842","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-05-10T00:33:05Z","updated_at":"2021-09-27T09:13:56Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Kotlin 1.4.31\r\nkotlinx.coroutines 1.4.2\r\n\r\nI saw this crash come in on the crash reporter for Android. The crash doesn't appear to come from my code though. I cannot reproduce it at will. I'm unsure what's causing it.\r\n\r\nOne potential hint is that the crash happened very quickly (~300 millis) after the app launched.\r\n\r\nHere is the stacktrace:\r\n```\r\njava.lang.NullPointerException: Attempt to invoke interface method 'java.lang.Object kotlinx.coroutines.flow.Flow.collect(kotlinx.coroutines.flow.FlowCollector, kotlin.coroutines.Continuation)' on a null object reference\r\n        at kotlinx.coroutines.flow.FlowKt__TransformKt$filterNotNull$$inlined$unsafeTransform$1.collect(SafeCollector.common.kt:114)\r\n        at kotlinx.coroutines.flow.DistinctFlowImpl.collect(Distinct.kt:87)\r\n        at com.scottpierce.repository.DeviceActiveManager$1.invokeSuspend(DeviceRepository.kt:348)\r\n        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n        at java.lang.Thread.run(Thread.java:761)\r\n```\r\n\r\nHere is the class that it looks like it's coming from. It appears to be originating from the `.filterNotNull()` call chain. That's the only place in the file that calls `filterNotNull` which is clearly referenced in the stacktrace.\r\n```Kotlin\r\ninternal class DeviceActiveManager(\r\n    private val scope: CoroutineScope,\r\n    private val deviceRepository: DeviceRepository,\r\n    private val timeout: Duration,\r\n    private val clock: Clock = Clock.System\r\n) {\r\n    companion object {\r\n        private val logger = Logger<DeviceActiveManager>()\r\n    }\r\n\r\n    private val _isDeviceActiveStateFlow = MutableStateFlow(true)\r\n    val isDeviceActiveStateFlow: StateFlow<Boolean> get() = _isDeviceActiveStateFlow\r\n\r\n    private var checkConnectivityJob: Job? = null\r\n    private var lastConnectionInstant: Instant = clock.now()\r\n\r\n    private val requestDelay = timeout / 2.0\r\n    private var timeoutJob: Job? = null\r\n\r\n    init {\r\n        scope.launch {\r\n            deviceRepository\r\n                .isDeviceLinkedStateFlow\r\n                .filterNotNull()\r\n                .distinctUntilChanged()\r\n                .collect { isLinked ->\r\n                    checkConnectivityJob?.cancel()\r\n                    checkConnectivityJob = null\r\n\r\n                    if (isLinked) {\r\n                        checkConnectivityJob = scope.launch { doWhileLinked() }\r\n                    } else {\r\n                        timeoutJob?.cancel()\r\n                        timeoutJob = null\r\n                        _isDeviceActiveStateFlow.value = true\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    suspend fun retry() {\r\n        deviceRepository.isDeviceLinked()\r\n        startTimeout()\r\n        logger.i { \"Device link was retried successfully. Device marked active.\" }\r\n        _isDeviceActiveStateFlow.value = true\r\n    }\r\n\r\n    private fun startTimeout() {\r\n        logger.i { \"Starting timeout\" }\r\n        timeoutJob?.cancel()\r\n        timeoutJob = scope.launch {\r\n            delay(timeout)\r\n            logger.i { \"Device link timed out. Device is now inactive.\" }\r\n            _isDeviceActiveStateFlow.value = false\r\n        }\r\n    }\r\n\r\n    private suspend fun doWhileLinked() {\r\n        startTimeout()\r\n\r\n        while (true) {\r\n            retryOnServiceException(\r\n                logger = logger,\r\n                startRetryDelay = 5.seconds,\r\n                maxRetryDelay = 1.minutes,\r\n            ) {\r\n                deviceRepository.isDeviceLinked()\r\n                lastConnectionInstant = clock.now()\r\n            }\r\n\r\n            startTimeout()\r\n\r\n            logger.i { \"Device link validated. Device is active.\" }\r\n            _isDeviceActiveStateFlow.value = true\r\n            delay(requestDelay)\r\n        }\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2692/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2680","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2680/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2680/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2680/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2680","id":868991268,"node_id":"MDU6SXNzdWU4Njg5OTEyNjg=","number":2680,"title":"Consider keeping BroadcastChannel in a deprecated state for longer","user":{"login":"Artraxon","id":26012150,"node_id":"MDQ6VXNlcjI2MDEyMTUw","avatar_url":"https://avatars.githubusercontent.com/u/26012150?v=4","gravatar_id":"","url":"https://api.github.com/users/Artraxon","html_url":"https://github.com/Artraxon","followers_url":"https://api.github.com/users/Artraxon/followers","following_url":"https://api.github.com/users/Artraxon/following{/other_user}","gists_url":"https://api.github.com/users/Artraxon/gists{/gist_id}","starred_url":"https://api.github.com/users/Artraxon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Artraxon/subscriptions","organizations_url":"https://api.github.com/users/Artraxon/orgs","repos_url":"https://api.github.com/users/Artraxon/repos","events_url":"https://api.github.com/users/Artraxon/events{/privacy}","received_events_url":"https://api.github.com/users/Artraxon/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":2057982217,"node_id":"MDU6TGFiZWwyMDU3OTgyMjE3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-sharing","name":"flow-sharing","color":"d4c5f9","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-04-27T15:42:55Z","updated_at":"2021-04-29T13:05:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have just read the news that Broadcast Channel is going to be completely removed with next release.\r\nWhy? I have build my [unexBot](https://github.com/Artraxon/unexBot) and [tihibot](https://github.com/Artraxon/tihibot) using the Channel API **because** it was simpler and less prone the change. The Flow API was and is still constantly changing and I simply do not need the added functionality.\r\n\r\nI understand that this is an experimental API, but If you leave an \"experimental\" API out there for 4 years, It should be expected that people are going to use it. And two major versions (effectively 2 years), of which one is also unmature, so 1 year in the end, for swapping out ALL Channel usage is completely reckless. What is really the point in removing it? Mark it as deprecated and refer to the alternatives and then leave it at that for some years, it does not do any harm, only removing it does.\r\n\r\nThe people that are building many of the open-source libraries for kotlin are not working full-time on there open-source projects. I'm not. I already started refactoring these bots to move the Framework that I've written into a separate library, but now I don't see the point because it's going to be broken anyway in a year and I do not have the time to fix it.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2680/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2680/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2664","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2664/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2664/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2664/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2664","id":863478637,"node_id":"MDU6SXNzdWU4NjM0Nzg2Mzc=","number":2664,"title":"Add any, all, none operators","user":{"login":"RinOrz","id":58068445,"node_id":"MDQ6VXNlcjU4MDY4NDQ1","avatar_url":"https://avatars.githubusercontent.com/u/58068445?v=4","gravatar_id":"","url":"https://api.github.com/users/RinOrz","html_url":"https://github.com/RinOrz","followers_url":"https://api.github.com/users/RinOrz/followers","following_url":"https://api.github.com/users/RinOrz/following{/other_user}","gists_url":"https://api.github.com/users/RinOrz/gists{/gist_id}","starred_url":"https://api.github.com/users/RinOrz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RinOrz/subscriptions","organizations_url":"https://api.github.com/users/RinOrz/orgs","repos_url":"https://api.github.com/users/RinOrz/repos","events_url":"https://api.github.com/users/RinOrz/events{/privacy}","received_events_url":"https://api.github.com/users/RinOrz/received_events","type":"User","site_admin":false},"labels":[{"id":844322915,"node_id":"MDU6TGFiZWw4NDQzMjI5MTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/use-case%20needed","name":"use-case needed","color":"18187c","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-04-21T05:59:32Z","updated_at":"2021-06-18T15:29:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This can make the collect result more concise, just like `list.any {it.is..}`","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2664/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2664/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2656","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2656/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2656/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2656/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2656","id":859953175,"node_id":"MDU6SXNzdWU4NTk5NTMxNzU=","number":2656,"title":"Stabilize Deferred.getCompleted and related","user":{"login":"cy6erGn0m","id":762598,"node_id":"MDQ6VXNlcjc2MjU5OA==","avatar_url":"https://avatars.githubusercontent.com/u/762598?v=4","gravatar_id":"","url":"https://api.github.com/users/cy6erGn0m","html_url":"https://github.com/cy6erGn0m","followers_url":"https://api.github.com/users/cy6erGn0m/followers","following_url":"https://api.github.com/users/cy6erGn0m/following{/other_user}","gists_url":"https://api.github.com/users/cy6erGn0m/gists{/gist_id}","starred_url":"https://api.github.com/users/cy6erGn0m/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cy6erGn0m/subscriptions","organizations_url":"https://api.github.com/users/cy6erGn0m/orgs","repos_url":"https://api.github.com/users/cy6erGn0m/repos","events_url":"https://api.github.com/users/cy6erGn0m/events{/privacy}","received_events_url":"https://api.github.com/users/cy6erGn0m/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-04-16T16:04:33Z","updated_at":"2021-04-19T15:10:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"At the moment, `Deferred.getCompleted()` and `Deferred.getCompletionExceptionOrNull()` are experimental and marked with `@ExperimentalCoroutinesApi`.\r\n\r\nThe functions above are useful for polling and accessing the deferred result from a non-suspend context where it's impossible to wait for the completion. The related function `invokeOnCompletion {}` is usually used with these experimental function to access the computation result after its completion. And of course, the callback handler is a regular non-suspend lambda. So without using experimental functions, the only solution is to launch a coroutine in the handler or trigger some existing coroutine (via channel or something). This is too much boilerplate. Fortunately, we have the experimental function providing a way to access the computation result just in place.\r\n\r\nThe typical usages I've faced are the following.\r\n\r\nGenerally using the pair looks like:\r\n```kotlin\r\ndeferred.invokeOnCompletion { cause ->\r\n    when (cause) {\r\n        null -> deferred.getCompleted()\r\n        else -> ....\r\n    }\r\n}\r\n```\r\n\r\nHandle only if successful:\r\n```kotlin\r\ndeferred.invokeOnCompletion { cause ->\r\n    if (cause != null) {\r\n        handle(deferred.getCompleted())\r\n    }\r\n}\r\n```\r\n\r\ngetCompletedOrNull:\r\n```kotlin\r\ndeferred.invokeOnCompletion { cause ->\r\n    handle(when (cause) {\r\n        null -> deferred.getCompleted()\r\n        else -> null\r\n    })\r\n}\r\n```\r\n\r\nEnsure resource cleanup:\r\n```kotlin\r\ndeferred.invokeOnCompletion { cause ->\r\n    if (cause != null) {\r\n        deferred.getCompleted().close()\r\n    }\r\n}\r\n```\r\n\r\nBridge two deferred:\r\n```kotlin\r\ndeferred.invokeOnCompletion { cause ->\r\n    when (cause) {\r\n        null -> publicDeferred.complete(deferred.getCompleted())\r\n        else -> publicDeferred.completeExceptionally(cause)\r\n    }\r\n}\r\n```\r\n\r\nTracking instant async job status (e.g. in web UI without websockets and instant notification):\r\n```kotlin\r\nonPageLoad {\r\n    when {\r\n        !deferred.isCompleted -> putInProgressLabel()\r\n        deferred.isCancelled -> putCancelledLabel()\r\n        deferred.getCompletionException() != null -> putFailedLabel()\r\n        else -> putSuccessLabel(deferred.getCompled())\r\n}\r\n```\r\n\r\n\r\n\r\nThe alternative API could be\r\n\r\n```kotlin\r\nfun Deferred<T>.getCompletionResult(): Result<T>\r\nfun Deferred<T>.invokeOnCompleteionWithResult(handler: (Result<T>) -> Unit)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2656/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2656/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2655","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2655/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2655/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2655/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2655","id":859940314,"node_id":"MDU6SXNzdWU4NTk5NDAzMTQ=","number":2655,"title":"sample should not start sampling until after the first element is received","user":{"login":"jonschmidt","id":513206,"node_id":"MDQ6VXNlcjUxMzIwNg==","avatar_url":"https://avatars.githubusercontent.com/u/513206?v=4","gravatar_id":"","url":"https://api.github.com/users/jonschmidt","html_url":"https://github.com/jonschmidt","followers_url":"https://api.github.com/users/jonschmidt/followers","following_url":"https://api.github.com/users/jonschmidt/following{/other_user}","gists_url":"https://api.github.com/users/jonschmidt/gists{/gist_id}","starred_url":"https://api.github.com/users/jonschmidt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jonschmidt/subscriptions","organizations_url":"https://api.github.com/users/jonschmidt/orgs","repos_url":"https://api.github.com/users/jonschmidt/repos","events_url":"https://api.github.com/users/jonschmidt/events{/privacy}","received_events_url":"https://api.github.com/users/jonschmidt/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""},{"id":2220684277,"node_id":"MDU6TGFiZWwyMjIwNjg0Mjc3","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow-timer","name":"flow-timer","color":"4101a8","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-16T15:47:04Z","updated_at":"2021-04-19T15:18:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I don't think the sampling of Flow.sample() should start until after the first element is received. There is even a comment to back that up:\r\nhttps://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/common/src/flow/operators/Delay.kt#L298\r\n\r\nI am currently running into this problem as I am sampling user drag input and sending network requests to do geo-location. I am using sample to not send too many requests, but it seems that it is delaying the first request as well.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2655/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2642","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2642/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2642/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2642/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2642","id":855819209,"node_id":"MDU6SXNzdWU4NTU4MTkyMDk=","number":2642,"title":"Flow with resources","user":{"login":"whyoleg","id":50462752,"node_id":"MDQ6VXNlcjUwNDYyNzUy","avatar_url":"https://avatars.githubusercontent.com/u/50462752?v=4","gravatar_id":"","url":"https://api.github.com/users/whyoleg","html_url":"https://github.com/whyoleg","followers_url":"https://api.github.com/users/whyoleg/followers","following_url":"https://api.github.com/users/whyoleg/following{/other_user}","gists_url":"https://api.github.com/users/whyoleg/gists{/gist_id}","starred_url":"https://api.github.com/users/whyoleg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/whyoleg/subscriptions","organizations_url":"https://api.github.com/users/whyoleg/orgs","repos_url":"https://api.github.com/users/whyoleg/repos","events_url":"https://api.github.com/users/whyoleg/events{/privacy}","received_events_url":"https://api.github.com/users/whyoleg/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-12T10:23:12Z","updated_at":"2021-04-12T17:22:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"On current moment, looks like there is no way to safely pass resources through Flow. Like f.e. files, or buffers, as if cancellation appears somewhere during `emit`, resource will be just leaked. It's possible to handle it on user level, by catching exceptions from emit.\r\n\r\nExample code, which simply emulates `cancellation` (can be done in other way of course):\r\n```kotlin\r\nclass A: Closeable {\r\n    init {\r\n        println(\"Create $this\")\r\n    }\r\n    override fun close() {\r\n        println(\"Close  $this\")\r\n    }\r\n}\r\n\r\nsuspend fun main() {\r\n    flow<A> {\r\n        repeat(10) {\r\n            emit(A())\r\n        }\r\n    }.onEach { /*some logic here*/ it.close() }.launchIn(GlobalScope).cancelAndJoin()\r\n}\r\n```\r\nIt will print just one line about creation of object, and not closing.\r\nIt can be fixed by using extension function like this instead of `emit`:\r\n```kotlin\r\nsuspend fun <T: Closeable> FlowCollector<T>.safeEmit(value: T) {\r\n    try {\r\n        emit(value)\r\n    } catch(cause: Throwable) {\r\n        value.close()\r\n        throw cause\r\n    }\r\n}\r\n```\r\nBut it would be cool to have some possibility to handle it using some operator, that will be applied to upstream like `onDrop`:\r\n```kotlin\r\nsuspend fun main() {\r\n    flow<A> {\r\n        repeat(10) {\r\n            emit(A())\r\n        }\r\n    }.onDrop { it.close() } //safely close resource if it dropped\r\n     .onEach { /*some logic here*/ it.close() }.launchIn(GlobalScope).cancelAndJoin()\r\n}\r\n```\r\nOn current moment, I was not able to implement it on my own... Also, this would be also helpful for flows with buffer (with channel under the hood, using `onUndeliveredElement).\r\n\r\nI haven't found any similar issue in repository to track.\r\nBTW availability of such operator will reduce complexity of using libraries such as [rsocket-kotlin](https://github.com/rsocket/rsocket-kotlin), where `flow` of resources is using heavily","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2642/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2642/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2631","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2631/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2631/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2631/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2631","id":851317117,"node_id":"MDU6SXNzdWU4NTEzMTcxMTc=","number":2631,"title":"Map StateFlows to StateFlow","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-04-06T11:10:36Z","updated_at":"2021-07-08T14:30:53Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Duplicating the content of https://youtrack.jetbrains.com/issue/KT-45502 for further discussion and use-cases.\r\n\r\n===\r\nI have a pattern that I use often while developing an UI (in Compose). The current Flow API lacks methods for mapping StateFlows to StateFlow that leads to increasing code complexity.\r\n\r\nImagine you have a ViewModel that has some data fields and one method that can be invoked only if the fields have correct values.\r\n\r\nIf we implemented it with LiveData it would look like this:\r\n\r\n```\r\nclass MyLiveDataViewModel {\r\n\r\n    private val _firstField = MutableLiveData(\"value1\")\r\n    val firstField: LiveData<String> = _firstField\r\n\r\n    private val _secondField = MutableLiveData(300)\r\n    val secondField: LiveData<Int> = _secondField\r\n\r\n    val canDoSomethingScary = MediatorLiveData<Boolean>()\r\n        .apply {\r\n            fun update() {\r\n                val first = firstField.value\r\n                val second = secondField.value\r\n\r\n                value = !first.isNullOrBlank() && second != null && second > 0 && second < 10\r\n            }\r\n\r\n            addSource(firstField) { update() }\r\n            addSource(secondField) { update() }\r\n\r\n            update()\r\n        }\r\n\r\n    fun doSomethingScary() {\r\n        if (canDoSomethingScary.value != true) return\r\n\r\n        // do something scary\r\n    }\r\n}\r\n```\r\n\r\nNothing special, let's try to implement it with the current Flow API:\r\n```\r\nclass MyFlowViewModel(\r\n    // We have to have coroutineScope\r\n    val coroutineScope: CoroutineScope\r\n) {\r\n\r\n    private val _firstField = MutableStateFlow(\"value1\")\r\n    val firstField: StateFlow<String> = _firstField\r\n\r\n    private val _secondField = MutableStateFlow(300)\r\n    val secondField: StateFlow<Int> = _secondField\r\n\r\n    val canDoSomethingScary: Flow<Boolean> = combine(firstField, secondField) { first, second ->\r\n        first.isNotBlank() && second > 0 && second < 10\r\n    }\r\n\r\n    // method became suspended\r\n    suspend fun doSomethingScary1() {\r\n        if (!canDoSomethingScary.stateIn(coroutineScope).value) return\r\n\r\n        // do something scary\r\n    }\r\n\r\n    // or code duplication\r\n    fun doSomethingScary2() {\r\n        if (firstField.value.isNotBlank() && secondField.value > 0 && secondField.value < 10) return\r\n\r\n        // do something scary\r\n    }\r\n}\r\n```\r\n\r\nBoth methods look over complicated. We don't like them. We have to have coroutineScope or code duplication for such simple tasks (imagine how real world examples look).\r\n\r\nBut if we added some quite simple primitives that allow us to map StateFlows to StateFlow, the code would look fine:\r\n```\r\nclass LastStateFlow<T>(\r\n    private val getValue: () -> T,\r\n    private val flow: Flow<T>\r\n) : StateFlow<T> {\r\n\r\n    override val replayCache: List<T>\r\n        get () = listOf(value)\r\n\r\n    override val value: T\r\n        get () = getValue()\r\n\r\n    @InternalCoroutinesApi\r\n    override suspend fun collect(collector: FlowCollector<T>) {\r\n        flow.collect(collector)\r\n    }\r\n}\r\n\r\nfun <T1, T2, R> combineStates(flow: StateFlow<T1>, flow2: StateFlow<T2>, transform: (a: T1, b: T2) -> R): StateFlow<R> {\r\n    return LastStateFlow(\r\n        getValue = { transform(flow.value, flow2.value) },\r\n        flow = combine(flow, flow2) { a, b -> transform(a, b) }\r\n    )\r\n}\r\n\r\nclass MyStateFlowViewModel {\r\n\r\n    private val _firstField = MutableStateFlow(\"value1\")\r\n    val firstField: StateFlow<String> = _firstField\r\n\r\n    private val _secondField = MutableStateFlow(300)\r\n    val secondField: StateFlow<Int> = _secondField\r\n\r\n    val canDoSomethingScary: StateFlow<Boolean> = combineStates(firstField, secondField) { first, second ->\r\n        first.isNotBlank() && second > 0 && second < 10\r\n    }\r\n\r\n    fun doSomethingScary() {\r\n        if (!canDoSomethingScary.value) return\r\n\r\n        // do something scary\r\n    }\r\n}\r\n```\r\n\r\nIt seems that it would be really useful to have such primitives in the standard coroutines library. I don't insist on the implementation (it is obviously naive).\r\n\r\n===","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2631/reactions","total_count":26,"+1":26,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2631/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2624","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2624/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2624/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2624/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2624","id":849951925,"node_id":"MDU6SXNzdWU4NDk5NTE5MjU=","number":2624,"title":"Add timeout operator to Flow","user":{"login":"pablobaxter","id":12305694,"node_id":"MDQ6VXNlcjEyMzA1Njk0","avatar_url":"https://avatars.githubusercontent.com/u/12305694?v=4","gravatar_id":"","url":"https://api.github.com/users/pablobaxter","html_url":"https://github.com/pablobaxter","followers_url":"https://api.github.com/users/pablobaxter/followers","following_url":"https://api.github.com/users/pablobaxter/following{/other_user}","gists_url":"https://api.github.com/users/pablobaxter/gists{/gist_id}","starred_url":"https://api.github.com/users/pablobaxter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pablobaxter/subscriptions","organizations_url":"https://api.github.com/users/pablobaxter/orgs","repos_url":"https://api.github.com/users/pablobaxter/repos","events_url":"https://api.github.com/users/pablobaxter/events{/privacy}","received_events_url":"https://api.github.com/users/pablobaxter/received_events","type":"User","site_admin":false},"labels":[{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-04-04T20:10:19Z","updated_at":"2021-07-30T20:54:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Enhancement: Add `timeout` operator to Flow\r\n\r\nThis is in response to the updated contribution guidelines, and to push for a `timeout` mechanism for Flow (https://github.com/Kotlin/kotlinx.coroutines/pull/2597). Currently, there is no easy way to timeout a flow if the upstream takes too long to produce an event.\r\n\r\nUse case:\r\nA flow when collected may not always emit items at a regular interval. If this flow is using some resource intensive process or enabling some hardware, leaving it active with no events for an extended period of time is wasteful. By having a timeout operator on the flow if no events have emitted, it allows for creating flows based with a defined timeout strategy, to ensure these resources aren't being accidentally misused.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2624/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2624/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2607","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2607/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2607/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2607/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2607","id":839845784,"node_id":"MDU6SXNzdWU4Mzk4NDU3ODQ=","number":2607,"title":"Provide an API to recover stacktrace of the exception when it does not cross coroutine boundary","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":396785980,"node_id":"MDU6TGFiZWwzOTY3ODU5ODA=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/help%20wanted","name":"help wanted","color":"128A0C","default":true,"description":null},{"id":844322915,"node_id":"MDU6TGFiZWw4NDQzMjI5MTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/use-case%20needed","name":"use-case needed","color":"18187c","default":false,"description":""},{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-24T15:28:45Z","updated_at":"2021-03-24T15:28:45Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"`kotlinx.coroutines` provides a [stacktrace recovery](https://github.com/Kotlin/kotlinx.coroutines/blob/master/docs/topics/debugging.md#stacktrace-recovery) machinery in order to provide complete stacktraces that preserve information about all suspended functions in the stracktrace.\r\n\r\nBut the exception recovery only works through coroutine boundaries.\r\n\r\nFor example, the following code:\r\n```\r\nsuspend fun foo() {\r\n    yield() // Suspend\r\n    bar()\r\n    yield()\r\n}\r\n\r\nsuspend fun bar() {\r\n    yield() // Suspend\r\n    throw IllegalStateException()\r\n}\r\n\r\nrunBlocking { // Could've been 'launch' or any other coroutine builder\r\n    foo()\r\n}\r\n```\r\n\r\nwill be missing `foo` function from the stacktrace because `IllegalStateException` does not cross any suspendable coroutine boundaries and stacktrace recovery machinery don't have a chance to kick in.\r\n\r\nInstead, we could've provided a new top-level suspend function that recovers the stacktrace. Library authors and application developers could've been using that along with stacktrace-sensitive exceptions and/or \"expected\" failures.\r\n\r\nThere is a lot of shape for such API, e.g. `throw IllegalStateException().recoverStacktrace()` or \r\n```\r\nrecovering {\r\n    require(myArg >= 1, \"Expected myArg to be >= 1\")\r\n}\r\n```\r\n\r\nbut the biggest question of this issue is whether it is useful for other developers.\r\nOpinions regarding usefulness of such API are welcomed","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2607/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2607/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2605","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2605/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2605/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2605/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2605","id":839476077,"node_id":"MDU6SXNzdWU4Mzk0NzYwNzc=","number":2605,"title":"delay() and yield() behave differently in test setup than in real life","user":{"login":"Zordid","id":4798822,"node_id":"MDQ6VXNlcjQ3OTg4MjI=","avatar_url":"https://avatars.githubusercontent.com/u/4798822?v=4","gravatar_id":"","url":"https://api.github.com/users/Zordid","html_url":"https://github.com/Zordid","followers_url":"https://api.github.com/users/Zordid/followers","following_url":"https://api.github.com/users/Zordid/following{/other_user}","gists_url":"https://api.github.com/users/Zordid/gists{/gist_id}","starred_url":"https://api.github.com/users/Zordid/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zordid/subscriptions","organizations_url":"https://api.github.com/users/Zordid/orgs","repos_url":"https://api.github.com/users/Zordid/repos","events_url":"https://api.github.com/users/Zordid/events{/privacy}","received_events_url":"https://api.github.com/users/Zordid/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":1435915404,"node_id":"MDU6TGFiZWwxNDM1OTE1NDA0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/test","name":"test","color":"c94240","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"assignees":[{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2021-03-24T08:25:26Z","updated_at":"2021-07-07T13:59:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"For our project, we have developed a special kind of coroutine scope: the InfiniteCoroutineScope.\r\n\r\nFor the understanding here, I hope it is enough to describe it like this:\r\n- inside this scope, any launched job with the extension fun `launchInfinite(block: ()->Unit)` is monitored never to actually stop. So, multiple \"while true\" loops are expected to be launched and stay alive infinitely.\r\n- in contrast to a regular coroutineScope, when a single one of those jobs quits working, e.g. ends normally, all other jobs launched via `launchInfinite` will be cancelled and brought to an end.\r\n- so the biggest difference is, that the shortest running job determines the overall run time - and not the longest running job.\r\n\r\nThis example demonstrates it:\r\nnormal coroutineScope behavior:\r\n```\r\nrunBlockingTest {\r\n    coroutineScope {\r\n        launch { delay(10_000) }\r\n        launch { delay(5000) }\r\n        launch { delay(4000) }\r\n    }\r\n    assertEquals(10_000, currentTime)\r\n}\r\n```\r\nour infiniteCoroutineScope does this:\r\n```\r\nrunBlockingTest {\r\n    infiniteCoroutineScope {\r\n        launchInfinite { delay(10_000) }\r\n        launchInfinite { delay(5000) }\r\n        launchInfinite { delay(4000) }\r\n    }\r\n    assertEquals(4000, currentTime)\r\n}\r\n```\r\n(the shortest running \"infinite\" job will kill all other's)\r\n\r\nIn *real* life this of course also works very fine when instead of using delay, yield is called in an endless loop to allow cooperative coroutine behaviour: \r\n```\r\ninfiniteCoroutineScope {\r\n    launchInfinite { while (true) yield() }\r\n    launchInfinite { delay(5000) }\r\n    launchInfinite { delay(4000) }\r\n}\r\n// time spent in this block above will also be 4000ms!\r\n```\r\n\r\n*BUT*: this in a test does not work at all. It runs forever and does not terminate. So, as far as I understand: there must be a conceptional difference in runBlockingTest in such that yield and delay do not automatically do the same thing in terms of eager execution and virtual time. But I do not know what that might be...\r\n\r\nAll I can see is that even by just replacing\r\n`while (true) yield()` with `while (true) delay(1)` makes it all work fine, while `delay(0)` breaks it, too!\r\n\r\nAnd that is my problem: I always took `yield()` as a \"non existent delay\" to allow coroutines to properly work together and used this instead of a not needed delay of an arbitrarily small amount of time.\r\n\r\nCould it be, that for coroutines-test, yield tries to auto-advance virtual time by 0 and as such, we are stuck in my endless loop and never actually get forward in time?\r\n\r\nEDIT:\r\nI proved my assumption above by outputting the current virtual time - and was spot on. In an endless loop with yield, the `currentTime` stays at 0 forever. Replacing yield with delay and a value >0 does the trick. Time passes, and everything works just fine!","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2605/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2596","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2596/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2596/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2596/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2596","id":837139511,"node_id":"MDU6SXNzdWU4MzcxMzk1MTE=","number":2596,"title":"make CoroutineId public","user":{"login":"caplan","id":4442803,"node_id":"MDQ6VXNlcjQ0NDI4MDM=","avatar_url":"https://avatars.githubusercontent.com/u/4442803?v=4","gravatar_id":"","url":"https://api.github.com/users/caplan","html_url":"https://github.com/caplan","followers_url":"https://api.github.com/users/caplan/followers","following_url":"https://api.github.com/users/caplan/following{/other_user}","gists_url":"https://api.github.com/users/caplan/gists{/gist_id}","starred_url":"https://api.github.com/users/caplan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/caplan/subscriptions","organizations_url":"https://api.github.com/users/caplan/orgs","repos_url":"https://api.github.com/users/caplan/repos","events_url":"https://api.github.com/users/caplan/events{/privacy}","received_events_url":"https://api.github.com/users/caplan/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-03-21T17:44:08Z","updated_at":"2021-06-28T18:03:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"A coroutine object's toString() debug output is sometimes a bit too much info. It would be useful to be able to access more fine-grained coroutine info for the sake of logging/debugging. We already have access to `kotlinx.coroutines.CoroutineName`, but `kotlinx.coroutines.CoroutineId` is internal. Could it be public?","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2596/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2595","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2595/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2595/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2595/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2595","id":836746357,"node_id":"MDU6SXNzdWU4MzY3NDYzNTc=","number":2595,"title":"Exceptions when trying to run kotlinx-coroutines-android:test","user":{"login":"clydebarrow","id":2366188,"node_id":"MDQ6VXNlcjIzNjYxODg=","avatar_url":"https://avatars.githubusercontent.com/u/2366188?v=4","gravatar_id":"","url":"https://api.github.com/users/clydebarrow","html_url":"https://github.com/clydebarrow","followers_url":"https://api.github.com/users/clydebarrow/followers","following_url":"https://api.github.com/users/clydebarrow/following{/other_user}","gists_url":"https://api.github.com/users/clydebarrow/gists{/gist_id}","starred_url":"https://api.github.com/users/clydebarrow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/clydebarrow/subscriptions","organizations_url":"https://api.github.com/users/clydebarrow/orgs","repos_url":"https://api.github.com/users/clydebarrow/repos","events_url":"https://api.github.com/users/clydebarrow/events{/privacy}","received_events_url":"https://api.github.com/users/clydebarrow/received_events","type":"User","site_admin":false},"labels":[{"id":2869593679,"node_id":"MDU6TGFiZWwyODY5NTkzNjc5","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/build","name":"build","color":"585A1E","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-20T07:41:32Z","updated_at":"2021-03-30T14:01:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using the current HEAD of the develop branch, running:\r\n\r\n````\r\ngradlew kotlinx-coroutines-android:test\r\n````\r\n\r\nGives 8 test failures like this:\r\n````\r\nkotlinx.coroutines.android.HandlerDispatcherTest > testToString FAILED\r\n    java.lang.RuntimeException at ReflectionHelpers.java:220\r\n        Caused by: java.lang.RuntimeException at ReflectionHelpers.java:205\r\n            Caused by: java.lang.IllegalAccessException at UnsafeFieldAccessorImpl.java:76\r\n````\r\nI don't have JDK1.6 installed so have set:\r\n````\r\nJDK_16 = /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/\r\nJAVA_HOME = /Library/Java/JavaVirtualMachines/adoptopenjdk-13.jdk/Contents/Home/\r\n````\r\nBut I don't think the JDK_16 setting is related to the problem. I tried changing the robolectric version to 4.4 and 4.5.1 but got different failures when doing so.\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2595/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2595/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2593","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2593/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2593/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2593/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2593","id":835288946,"node_id":"MDU6SXNzdWU4MzUyODg5NDY=","number":2593,"title":"SharedFlow and flatMapLatest to work well with together in Kotlin/Native","user":{"login":"worldsnas","id":27624716,"node_id":"MDQ6VXNlcjI3NjI0NzE2","avatar_url":"https://avatars.githubusercontent.com/u/27624716?v=4","gravatar_id":"","url":"https://api.github.com/users/worldsnas","html_url":"https://github.com/worldsnas","followers_url":"https://api.github.com/users/worldsnas/followers","following_url":"https://api.github.com/users/worldsnas/following{/other_user}","gists_url":"https://api.github.com/users/worldsnas/gists{/gist_id}","starred_url":"https://api.github.com/users/worldsnas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/worldsnas/subscriptions","organizations_url":"https://api.github.com/users/worldsnas/orgs","repos_url":"https://api.github.com/users/worldsnas/repos","events_url":"https://api.github.com/users/worldsnas/events{/privacy}","received_events_url":"https://api.github.com/users/worldsnas/received_events","type":"User","site_admin":false},"labels":[{"id":396785977,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzc=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/bug","name":"bug","color":"ee0701","default":true,"description":null},{"id":1109675638,"node_id":"MDU6TGFiZWwxMTA5Njc1NjM4","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/native","name":"native","color":"3ce1ea","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-18T21:42:01Z","updated_at":"2021-03-18T22:28:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We have a multiplatform project for Android and IOS. \r\nMost of our code is in a common module and our architecture is based on `Flow`.\r\n[Reyan](https://github.com/islamversity/Reyan)\r\n\r\nWe came across this weird bug that blocks our `Flow`s from emitting every time we use `flatMapLatest` on our `SharedFlow`s.\r\nThis bug only happens in IOS, and it's not reproducible in Jvm or Android.\r\n\r\nIn short, all we need is a `SharedFlow` and a `flatMapLatest` operator on the chain to break the chain. none of the operators before or after the `flatMapLatest` will work and basically, the SharedFlow will stop emitting.\r\n\r\nHere is a sample code in the main application:\r\n[from](https://github.com/islamversity/Reyan/blob/b6f9b98bdc5396ffa339e5638464be1ffceb7d6a/core/src/commonMain/kotlin/com/islamversity/core/mvi/MviPresenter.kt#L46) - [to](https://github.com/islamversity/Reyan/blob/b6f9b98bdc5396ffa339e5638464be1ffceb7d6a/core/src/commonMain/kotlin/com/islamversity/core/mvi/MviPresenter.kt#L67)\r\n\r\n[Emitting in Swift](https://github.com/islamversity/Reyan/blob/b6f9b98bdc5396ffa339e5638464be1ffceb7d6a/reyanIOS/reyan/Surah/SurahView.swift#L35)\r\n[Collecting in Swift](https://github.com/islamversity/Reyan/blob/b6f9b98bdc5396ffa339e5638464be1ffceb7d6a/reyanIOS/reyan/QuranHome/SurahStateCollector.swift#L20)\r\n\r\n\r\nI also managed to reproduce it in this Demo project which I guess makes the issue more visible and easier to understand.\r\n[SharedFlowFlatMapLatest](https://github.com/worldsnas/SharedFlowFlatMapLatest)\r\n\r\n[Common Module Flow Factory](https://github.com/worldsnas/SharedFlowFlatMapLatest/blob/9059b04a19f947e74c17a8c26b5fc4327e76c6fc/app/src/commonMain/kotlin/com/worldsnas/sharedflow/FlowFactory.kt#L5)\r\n[Collecting and Emitting in swift](https://github.com/worldsnas/SharedFlowFlatMapLatest/blob/9059b04a19f947e74c17a8c26b5fc4327e76c6fc/FlowSample/FlowSample/ContentView.swift#L14)\r\n\r\nhere is the IOS console log output:\r\n\r\n```\r\nContentView init\r\nrecieved from normal flow: 1\r\nrecieved from normal flow: 2\r\nrecieved from state flow: 2\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2593/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2593/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2582","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2582/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2582/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2582/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2582","id":831208691,"node_id":"MDU6SXNzdWU4MzEyMDg2OTE=","number":2582,"title":"Provide an API to check that the current coroutine is created via runBlocking","user":{"login":"khovanskiy","id":3956925,"node_id":"MDQ6VXNlcjM5NTY5MjU=","avatar_url":"https://avatars.githubusercontent.com/u/3956925?v=4","gravatar_id":"","url":"https://api.github.com/users/khovanskiy","html_url":"https://github.com/khovanskiy","followers_url":"https://api.github.com/users/khovanskiy/followers","following_url":"https://api.github.com/users/khovanskiy/following{/other_user}","gists_url":"https://api.github.com/users/khovanskiy/gists{/gist_id}","starred_url":"https://api.github.com/users/khovanskiy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/khovanskiy/subscriptions","organizations_url":"https://api.github.com/users/khovanskiy/orgs","repos_url":"https://api.github.com/users/khovanskiy/repos","events_url":"https://api.github.com/users/khovanskiy/events{/privacy}","received_events_url":"https://api.github.com/users/khovanskiy/received_events","type":"User","site_admin":false},"labels":[{"id":844322915,"node_id":"MDU6TGFiZWw4NDQzMjI5MTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/use-case%20needed","name":"use-case needed","color":"18187c","default":false,"description":""},{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-03-14T17:14:18Z","updated_at":"2021-03-23T21:51:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This is a useful option for optimizing blocking calls. For example, we have a large external thread pool (like Jetty) and want to run coroutines in it, so we can spend only these threads and save threads of Dispatchers. I understand that the best way is to use reactive libraries like Netty and Reactor, but in the real enterprise code, this migration is not fast, so there is a need to have some wrappers.\r\n\r\n## Example\r\nWe have a common function. This function can be run from a lot of places: Reactor/Netty/Jetty/Ktor. If we don't know about the context, the proper way is to run blocking code on `Dispatcher.IO`:\r\n```\r\nsuspend fun someMethod() {\r\n   runInterruptible(context = Dispatchers.IO) {\r\n      someBlockingMethod()\r\n   }\r\n}\r\n```\r\nSo we can invoke this method in the following cases:\r\n```\r\nGlobalScope.launch {\r\n    someMethod()\r\n}\r\n```\r\nor\r\n```\r\nrunBlocking {\r\n    someMethod()\r\n}\r\n```\r\nIn the second case, we spent one thread from `Dispatcher.IO` having the already blocked current thread. Also, we switched the context.\r\n\r\nMeanwhile, if we could check that the current context is running on the blocking event loop, we could run blocking code without using `Dispatcher.IO`:\r\n\r\n```\r\nsuspend fun someMethod() {\r\n   val isBlocking = ... // call the API\r\n   if (isBlocking) {\r\n      runInterruptible(context = EmptyCoroutineContext) {\r\n         someBlockingMethod()\r\n      }\r\n   } else {\r\n      runInterruptible(context = Dispatchers.IO) {\r\n         someBlockingMethod()\r\n      }\r\n   }\r\n}\r\n```\r\n\r\nIt will be nice if the API can provide the method to check it or support this internal optimization in  `runInterruptible`.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2582/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2582/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2580","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2580/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2580/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2580/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2580","id":830878879,"node_id":"MDU6SXNzdWU4MzA4Nzg4Nzk=","number":2580,"title":"statefulTransform for flow","user":{"login":"phiSgr","id":13439232,"node_id":"MDQ6VXNlcjEzNDM5MjMy","avatar_url":"https://avatars.githubusercontent.com/u/13439232?v=4","gravatar_id":"","url":"https://api.github.com/users/phiSgr","html_url":"https://github.com/phiSgr","followers_url":"https://api.github.com/users/phiSgr/followers","following_url":"https://api.github.com/users/phiSgr/following{/other_user}","gists_url":"https://api.github.com/users/phiSgr/gists{/gist_id}","starred_url":"https://api.github.com/users/phiSgr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/phiSgr/subscriptions","organizations_url":"https://api.github.com/users/phiSgr/orgs","repos_url":"https://api.github.com/users/phiSgr/repos","events_url":"https://api.github.com/users/phiSgr/events{/privacy}","received_events_url":"https://api.github.com/users/phiSgr/received_events","type":"User","site_admin":false},"labels":[{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""},{"id":1312872054,"node_id":"MDU6TGFiZWwxMzEyODcyMDU0","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/flow","name":"flow","color":"8917ed","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-13T11:29:49Z","updated_at":"2021-03-23T16:11:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Sorry for not being able to provide a real life use-case as I don't get to write Kotlin at work.\r\n\r\n---\r\n\r\nIn this [SO question](https://stackoverflow.com/questions/66586852/kotlin-flow-missing-many-trivial-functions-like-any-distinct/66587779), OP asks for a `distinct` method for `Flow`.\r\n\r\nAs of opening this issue, the answer given is:\r\n\r\n```kotlin\r\nfun <T> Flow<T>.distinct(): Flow<T> = with(mutableSetOf<T>()) {\r\n    this@distinct.filter{ add(it) }\r\n}\r\n```\r\n\r\nIt is subtly wrong, as the flow has one shared mutable state, the mutable set, that is reused over multiple collections.\r\n\r\n---\r\n\r\nI suggest the following HOF to be added\r\nThis is inspired by [statefulMapConcat](https://doc.akka.io/docs/akka/current/stream/operators/Source-or-Flow/statefulMapConcat.html) from Akka Streams.\r\n\r\n```kotlin\r\nfun <T> Flow<T>.statefulTransform(\r\n    transformSupplier: () -> suspend FlowCollector<R>.(value: T) -> Unit\r\n): Flow<T> = flow {\r\n    val transform = transformSupplier()\r\n    collect { value ->\r\n        return@collect transform(value)\r\n    }\r\n}\r\n```\r\n\r\nThen `distinct` can be written as\r\n\r\n```kotlin\r\nfun <T> Flow<T>.distinct(): Flow<T> = statefulTransform<T, T> {\r\n    with(mutableSetOf<T>()) {\r\n        { if (add(it)) emit (it) }\r\n    }\r\n}\r\n```\r\n\r\nBTW I cannot make `@BuilderInference` work with this.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2580/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2580/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2573","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2573/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2573/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2573/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2573","id":825580090,"node_id":"MDU6SXNzdWU4MjU1ODAwOTA=","number":2573,"title":"RunningThreadStackMergeTest fails","user":{"login":"dkhalanskyjb","id":52952525,"node_id":"MDQ6VXNlcjUyOTUyNTI1","avatar_url":"https://avatars.githubusercontent.com/u/52952525?v=4","gravatar_id":"","url":"https://api.github.com/users/dkhalanskyjb","html_url":"https://github.com/dkhalanskyjb","followers_url":"https://api.github.com/users/dkhalanskyjb/followers","following_url":"https://api.github.com/users/dkhalanskyjb/following{/other_user}","gists_url":"https://api.github.com/users/dkhalanskyjb/gists{/gist_id}","starred_url":"https://api.github.com/users/dkhalanskyjb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkhalanskyjb/subscriptions","organizations_url":"https://api.github.com/users/dkhalanskyjb/orgs","repos_url":"https://api.github.com/users/dkhalanskyjb/repos","events_url":"https://api.github.com/users/dkhalanskyjb/events{/privacy}","received_events_url":"https://api.github.com/users/dkhalanskyjb/received_events","type":"User","site_admin":false},"labels":[{"id":2869593679,"node_id":"MDU6TGFiZWwyODY5NTkzNjc5","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/build","name":"build","color":"585A1E","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-09T09:10:54Z","updated_at":"2021-03-30T14:03:00Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Two tests fail intermittently on Linux.\r\n\r\n`testStackMergeWithContext`:\r\n\r\n```\r\nCoroutine \"coroutine#3\":BlockingCoroutine{Active}@3c5bc629, state: RUNNING\r\n\tat java.base/java.lang.Thread.getStackTrace(Thread.java:1607)\r\n\tat kotlinx.coroutines.debug.internal.DebugProbesImpl.enhanceStackTraceWithThreadDumpImpl(DebugProbesImpl.kt:260)\r\n\tat kotlinx.coroutines.debug.internal.DebugProbesImpl.dumpCoroutinesSynchronized(DebugProbesImpl.kt:215)\r\n\tat kotlinx.coroutines.debug.internal.DebugProbesImpl.dumpCoroutines(DebugProbesImpl.kt:187)\r\n\tat kotlinx.coroutines.debug.DebugProbes.dumpCoroutines(DebugProbes.kt:144)\r\n\tat kotlinx.coroutines.debug.StacktraceUtilsKt.verifyDump(StacktraceUtils.kt:92)\r\n\tat kotlinx.coroutines.debug.StacktraceUtilsKt.verifyDump(StacktraceUtils.kt:59)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest$testStackMergeEscapeSuspendMethod$1.invokeSuspend(RunningThreadStackMergeTest.kt:82)\r\n\t(Coroutine creation stacktrace)\r\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\r\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\r\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:27)\r\n\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110)\r\n\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:158)\r\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:58)\r\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n\tat kotlinx.coroutines.TestBase.runTest(TestBase.kt:194)\r\n\tat kotlinx.coroutines.TestBase.runTest$default(TestBase.kt:188)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest.testStackMergeEscapeSuspendMethod(RunningThreadStackMergeTest.kt:78)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:23)\r\n\tat kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:12)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n\r\nCoroutine \"coroutine#4\":StandaloneCoroutine{Active}@268366bc, state: SUSPENDED\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest.suspendingFunctionWithContext(RunningThreadStackMergeTest.kt:111)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest$launchEscapingCoroutine$1.invokeSuspend(RunningThreadStackMergeTest.kt:105)\r\n\t(Coroutine creation stacktrace)\r\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\r\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\r\n\tat kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:27)\r\n\tat kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110)\r\n\tat kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:158)\r\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.launch(Builders.common.kt:56)\r\n\tat kotlinx.coroutines.BuildersKt.launch(Unknown Source)\r\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.launch$default(Builders.common.kt:49)\r\n\tat kotlinx.coroutines.BuildersKt.launch$default(Unknown Source)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest.launchEscapingCoroutine(RunningThreadStackMergeTest.kt:104)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest.access$launchEscapingCoroutine(RunningThreadStackMergeTest.kt:14)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest$testStackMergeEscapeSuspendMethod$1.invokeSuspend(RunningThreadStackMergeTest.kt:79)\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\r\n\tat kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\r\n\tat kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:84)\r\n\tat kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\r\n\tat kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n\tat kotlinx.coroutines.TestBase.runTest(TestBase.kt:194)\r\n\tat kotlinx.coroutines.TestBase.runTest$default(TestBase.kt:188)\r\n\tat kotlinx.coroutines.debug.RunningThreadStackMergeTest.testStackMergeEscapeSuspendMethod(RunningThreadStackMergeTest.kt:78)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:23)\r\n\tat kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:12)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n```\r\n\r\n`testStackMergeWithContext`:\r\n```\r\n    Coroutine \"coroutine#1\":BlockingCoroutine{Active}@492f64d6, state: RUNNING\r\n        at java.base/java.lang.Thread.getStackTrace(Thread.java:1607)\r\n        at kotlinx.coroutines.debug.internal.DebugProbesImpl.enhanceStackTraceWithThreadDumpImpl(DebugProbesImpl.kt:260)\r\n        at kotlinx.coroutines.debug.internal.DebugProbesImpl.dumpCoroutinesSynchronized(DebugProbesImpl.kt:215)\r\n        at kotlinx.coroutines.debug.internal.DebugProbesImpl.dumpCoroutines(DebugProbesImpl.kt:187)\r\n        at kotlinx.coroutines.debug.DebugProbes.dumpCoroutines(DebugProbes.kt:144)\r\n        at kotlinx.coroutines.debug.StacktraceUtilsKt.verifyDump(StacktraceUtils.kt:92)\r\n        at kotlinx.coroutines.debug.StacktraceUtilsKt.verifyDump(StacktraceUtils.kt:59)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest$testStackMergeWithContext$1.invokeSuspend(RunningThreadStackMergeTest.kt:27)\r\n        (Coroutine creation stacktrace)\r\n        at kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\r\n        at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\r\n        at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:27)\r\n        at kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110)\r\n        at kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:158)\r\n        at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:58)\r\n        at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n        at kotlinx.coroutines.TestBase.runTest(TestBase.kt:194)\r\n        at kotlinx.coroutines.TestBase.runTest$default(TestBase.kt:188)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.testStackMergeWithContext(RunningThreadStackMergeTest.kt:24)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n        at kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:23)\r\n        at kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:12)\r\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n        at java.base/java.lang.Thread.run(Thread.java:834)    Coroutine \"coroutine#2\":StandaloneCoroutine{Active}@5734a907, state: SUSPENDED\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.suspendingFunction(RunningThreadStackMergeTest.kt:64)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest$launchCoroutine$1.invokeSuspend(RunningThreadStackMergeTest.kt:57)\r\n        (Coroutine creation stacktrace)\r\n        at kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\r\n        at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\r\n        at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:27)\r\n        at kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110)\r\n        at kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:158)\r\n        at kotlinx.coroutines.BuildersKt__Builders_commonKt.launch(Builders.common.kt:56)\r\n        at kotlinx.coroutines.BuildersKt.launch(Unknown Source)\r\n        at kotlinx.coroutines.BuildersKt__Builders_commonKt.launch$default(Builders.common.kt:49)\r\n        at kotlinx.coroutines.BuildersKt.launch$default(Unknown Source)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.launchCoroutine(RunningThreadStackMergeTest.kt:56)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.access$launchCoroutine(RunningThreadStackMergeTest.kt:14)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest$testStackMergeWithContext$1.invokeSuspend(RunningThreadStackMergeTest.kt:25)\r\n        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\r\n        at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\r\n        at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:84)\r\n        at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\r\n        at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n        at kotlinx.coroutines.TestBase.runTest(TestBase.kt:194)\r\n        at kotlinx.coroutines.TestBase.runTest$default(TestBase.kt:188)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.testStackMergeWithContext(RunningThreadStackMergeTest.kt:24)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n        at kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:23)\r\n        at kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:12)\r\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n        at java.base/java.lang.Thread.run(Thread.java:834)\r\n\r\nCoroutine \"coroutine#2\":StandaloneCoroutine{Active}@5734a907, state: SUSPENDED\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.suspendingFunction(RunningThreadStackMergeTest.kt:64)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest$launchCoroutine$1.invokeSuspend(RunningThreadStackMergeTest.kt:57)\r\n        (Coroutine creation stacktrace)\r\n        at kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt.createCoroutineUnintercepted(IntrinsicsJvm.kt:122)\r\n        at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable(Cancellable.kt:30)\r\n        at kotlinx.coroutines.intrinsics.CancellableKt.startCoroutineCancellable$default(Cancellable.kt:27)\r\n        at kotlinx.coroutines.CoroutineStart.invoke(CoroutineStart.kt:110)\r\n        at kotlinx.coroutines.AbstractCoroutine.start(AbstractCoroutine.kt:158)\r\n        at kotlinx.coroutines.BuildersKt__Builders_commonKt.launch(Builders.common.kt:56)\r\n        at kotlinx.coroutines.BuildersKt.launch(Unknown Source)\r\n        at kotlinx.coroutines.BuildersKt__Builders_commonKt.launch$default(Builders.common.kt:49)\r\n        at kotlinx.coroutines.BuildersKt.launch$default(Unknown Source)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.launchCoroutine(RunningThreadStackMergeTest.kt:56)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.access$launchCoroutine(RunningThreadStackMergeTest.kt:14)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest$testStackMergeWithContext$1.invokeSuspend(RunningThreadStackMergeTest.kt:25)\r\n        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\r\n        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\r\n        at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)\r\n        at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:84)\r\n        at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)\r\n        at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)\r\n        at kotlinx.coroutines.TestBase.runTest(TestBase.kt:194)\r\n        at kotlinx.coroutines.TestBase.runTest$default(TestBase.kt:188)\r\n        at kotlinx.coroutines.debug.RunningThreadStackMergeTest.testStackMergeWithContext(RunningThreadStackMergeTest.kt:24)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n        at kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:23)\r\n        at kotlinx.coroutines.debug.junit4.CoroutinesTimeoutStatement$testResult$1.call(CoroutinesTimeoutStatement.kt:12)\r\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n        at java.base/java.lang.Thread.run(Thread.java:834)\r\n```","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2573/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2558","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2558/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2558/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2558/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2558","id":818992166,"node_id":"MDU6SXNzdWU4MTg5OTIxNjY=","number":2558,"title":"Provide an API to close Dispatchers.Default and Dispatchers.IO","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null},{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-01T15:42:50Z","updated_at":"2021-08-25T14:50:53Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"In containerized environments (Gradle build scripts, application containers, IDEA plugins), it is important to be able to unload the bundle of classes when the job is done.\r\n\r\nUnfortunately, any code that touches our dispatchers (e.g. transitively, or via `GlobalScope`) cannot be unloaded: few indefinitely parked scheduler threads retain a strong reference to its class loader and cannot be terminated in any public way. For that, we should provide a public API to shutdown our dispatchers, destroy all their threads and make the outer classloader free.\r\n\r\nThe open question is how to establish a method contract in a way that nicely interacts with the fact that `IO` and `Default` are closely tightened and also take into account that depending on the system property, `Dispatchers.Default` can be backed by `ForkJoinPool.commonPool` that cannot be shut down (it doesn't suffer from this problem tho, because it's a JDK class that is always loaded by a bootstrap classloader).","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2558/reactions","total_count":12,"+1":12,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2558/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2552","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2552/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2552/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2552/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2552","id":816084958,"node_id":"MDU6SXNzdWU4MTYwODQ5NTg=","number":2552,"title":"`handleCoroutineException()` prevents crashing JVM threads on fatal errors","user":{"login":"yorickhenning","id":23535960,"node_id":"MDQ6VXNlcjIzNTM1OTYw","avatar_url":"https://avatars.githubusercontent.com/u/23535960?v=4","gravatar_id":"","url":"https://api.github.com/users/yorickhenning","html_url":"https://github.com/yorickhenning","followers_url":"https://api.github.com/users/yorickhenning/followers","following_url":"https://api.github.com/users/yorickhenning/following{/other_user}","gists_url":"https://api.github.com/users/yorickhenning/gists{/gist_id}","starred_url":"https://api.github.com/users/yorickhenning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yorickhenning/subscriptions","organizations_url":"https://api.github.com/users/yorickhenning/orgs","repos_url":"https://api.github.com/users/yorickhenning/repos","events_url":"https://api.github.com/users/yorickhenning/events{/privacy}","received_events_url":"https://api.github.com/users/yorickhenning/received_events","type":"User","site_admin":false},"labels":[{"id":3126370303,"node_id":"MDU6TGFiZWwzMTI2MzcwMzAz","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/For%201.6","name":"For 1.6","color":"C807F3","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"assignees":[{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2021-02-25T05:00:00Z","updated_at":"2021-09-29T11:54:49Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"In a JVM, a coroutine should be able to handle a fatal error by crashing its `Thread`.\r\n\r\nIn the JVM default, [`handleCoroutineExceptionImpl()`](https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/jvm/src/CoroutineExceptionHandlerImpl.kt) calls a `ServiceLoader` in the error handling execution path. That's not safe, because the call to the `ServiceLoader` can itself throw.\r\n\r\nThis prompted investigating coroutine crashes, which showed some `Thread` crashes, but not for all fatal errors. The only `Thread` crashes had the coroutine's fatal error hidden by the `ServiceLoader` call throwing during error handling - either because the first error was an `OutOfMemoryError`, or because the `ServiceLoader`’s (internally lazy) iterator crashed by reading from disk during error handling, on a `Thread` that’s prevented from doing I/O.\r\n\r\nError handling is customizable with `CoroutineExceptionHandler`. I thought we'd be able to avoid the `ServiceLoader` problem with a custom handler, and pass fatal exceptions to the `Executor` just by throwing. Unfortunately, if a `CoroutineExceptionHandler` tries to crash, [`handleCoroutineException()`](https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/common/src/CoroutineExceptionHandler.kt#L21) catches and starts executing the default `handleCoroutineExceptionImpl()`!\r\n\r\nSo, I see two issues:\r\n\r\n1) By falling-back-to-default on a crash, `handleCoroutineException()` prevents a `CoroutineExceptionHandler` from crashing its `Thread` if it would like to do that\r\n2) The JVM implementation of `handleCoroutineExceptionImpl()` can throw more exceptions when trying to handle an existing one\r\n\r\nTo fix the first issue, I'd like to propose this implementation of `handleCoroutineException()`:\r\n\r\n```kt\r\n@InternalCoroutinesApi\r\npublic fun handleCoroutineException(context: CoroutineContext, exception: Throwable) {\r\n    // Invoke an exception handler from the context if one is present. Otherwise, fall back\r\n    // to the default Exception handler.\r\n\r\n    val handler = context[CoroutineExceptionHandler]\r\n    if (handler != null) {\r\n      handler.handleException(context, exception)\r\n    } else {\r\n      handleCoroutineExceptionImpl(context, exception)\r\n    }\r\n}\r\n```\r\n\r\nThis would make a `CoroutineExceptionHandler` a proper override.\r\n\r\nIn existing (big) JVM applications, crash handlers are configured for `Threads` or `Executors`. Letting coroutines crash would let the one set of loggers, monitoring, test instrumentation, etc. deal with any fatal errors consistently. By preventing coroutines from crashing, unhandled errors in coroutines need to be configured with their own entirely separate error handlers, in addition to any the program has at the `Executor` or `Thread` level.","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2552/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2552/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2551","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2551/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2551/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2551/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2551","id":815580643,"node_id":"MDU6SXNzdWU4MTU1ODA2NDM=","number":2551,"title":"Provide an API to check whether debug mode is enabled","user":{"login":"qwwdfsad","id":2780116,"node_id":"MDQ6VXNlcjI3ODAxMTY=","avatar_url":"https://avatars.githubusercontent.com/u/2780116?v=4","gravatar_id":"","url":"https://api.github.com/users/qwwdfsad","html_url":"https://github.com/qwwdfsad","followers_url":"https://api.github.com/users/qwwdfsad/followers","following_url":"https://api.github.com/users/qwwdfsad/following{/other_user}","gists_url":"https://api.github.com/users/qwwdfsad/gists{/gist_id}","starred_url":"https://api.github.com/users/qwwdfsad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qwwdfsad/subscriptions","organizations_url":"https://api.github.com/users/qwwdfsad/orgs","repos_url":"https://api.github.com/users/qwwdfsad/repos","events_url":"https://api.github.com/users/qwwdfsad/events{/privacy}","received_events_url":"https://api.github.com/users/qwwdfsad/received_events","type":"User","site_admin":false},"labels":[{"id":396785979,"node_id":"MDU6TGFiZWwzOTY3ODU5Nzk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-24T15:23:33Z","updated_at":"2021-04-19T15:22:19Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We already have a notion of debug mode in our documentation, but we do not have an API to check whether the mode is enabled.\r\n\r\nIt can be useful in multiple scenarios:\r\n\r\n* To write unit tests that work both with and without debug mode\r\n    * We already do that in our MPP tests\r\n* To verify and debug program behaviour (see #2550)\r\n* To write your own extensions to coroutines that may exhibit an additional behaviour when debug mode is enabled (stacktrace for cancellation exception subclasses, context markers and so on)","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2551/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2539","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2539/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2539/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2539/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2539","id":809554928,"node_id":"MDU6SXNzdWU4MDk1NTQ5Mjg=","number":2539,"title":"Help to understand behaviour in coroutine native-mt","user":{"login":"francismariano","id":21108555,"node_id":"MDQ6VXNlcjIxMTA4NTU1","avatar_url":"https://avatars.githubusercontent.com/u/21108555?v=4","gravatar_id":"","url":"https://api.github.com/users/francismariano","html_url":"https://github.com/francismariano","followers_url":"https://api.github.com/users/francismariano/followers","following_url":"https://api.github.com/users/francismariano/following{/other_user}","gists_url":"https://api.github.com/users/francismariano/gists{/gist_id}","starred_url":"https://api.github.com/users/francismariano/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/francismariano/subscriptions","organizations_url":"https://api.github.com/users/francismariano/orgs","repos_url":"https://api.github.com/users/francismariano/repos","events_url":"https://api.github.com/users/francismariano/events{/privacy}","received_events_url":"https://api.github.com/users/francismariano/received_events","type":"User","site_admin":false},"labels":[{"id":396785982,"node_id":"MDU6TGFiZWwzOTY3ODU5ODI=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/question","name":"question","color":"cc317c","default":true,"description":null},{"id":1109675638,"node_id":"MDU6TGFiZWwxMTA5Njc1NjM4","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/native","name":"native","color":"3ce1ea","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-16T18:37:25Z","updated_at":"2021-03-01T16:02:53Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello guys.\r\n\r\nI have the following object\r\n\r\n```\r\nobject SharedFlowRepository {\r\n\r\n    init {\r\n        println(\"SharedFlowRepository - init\")\r\n    }\r\n\r\n    private val _devices = MutableSharedFlow<Int>()\r\n    val devices = _devices.asSharedFlow()\r\n\r\n    suspend fun startScanLeDevice() {\r\n        println(\"SharedFlowRepository - startScanLeDevice\")\r\n        withContext(Dispatchers.Default) {\r\n            println(\"SharedFlowRepository - startScanLeDevice:launch\")\r\n            testeFlow().collect {\r\n                println(\"SharedFlowRepository - startScanLeDevice:collect = $it\")\r\n                _devices.emit(it)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun stopScanLeDevice() {\r\n        println(\"SharedFlowRepository - stopScanLeDevice\")\r\n    }\r\n\r\n    private fun testeFlow() = flow {\r\n        for (i in 1..5) {\r\n            delay(1000)\r\n            println(\"presenter - testeFlow:emitting = $i\")\r\n            emit(i)\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd the following class\r\n\r\n```\r\nclass SharedFlowPresenter {\r\n\r\n    private val mainScope = MainScope()\r\n    private var scan: Job? = null\r\n\r\n    init {\r\n        println(\"SharedFlowPresenter - SharedFlowPresenter:init\")\r\n        ensureNeverFrozen()\r\n        deviceScanDevice()\r\n        stopScanLeDevice()      // LINE 1\r\n    }\r\n\r\n    private val repository = SharedFlowRepository\r\n\r\n    private fun stopScanLeDevice() {\r\n        repository.stopScanLeDevice()\r\n    }\r\n\r\n    private fun deviceScanDevice() {\r\n        println(\"SharedFlowPresenter - deviceScanDevice\")\r\n        scan = mainScope.launch {\r\n            println(\"SharedFlowPresenter - deviceScanDevice:launch\")\r\n            try {\r\n                println(\"SharedFlowPresenter - deviceScanDevice:try\")\r\n                withTimeout(20000) {\r\n                    println(\"SharedFlowPresenter - deviceScanDevice:withTimeout:withTimeout\")\r\n                    repository.devices.collect {\r\n                        println(\"SharedFlowPresenter - deviceScanDevice:withTimeout:collect INT ====== $it\")\r\n                    }\r\n                }\r\n            } catch (e: TimeoutCancellationException) {\r\n                println(\"SharedFlowPresenter - deviceScanDevice:catch : ${e.message}\")\r\n            }\r\n        }.apply {\r\n            invokeOnCompletion {\r\n                println(\"SharedFlowPresenter - deviceScanDevice:invokeOnCompletation\")\r\n//                stopScanLeDevice()            // LINE 2\r\n            }\r\n        }\r\n        mainScope.launch {\r\n            println(\"SharedFlowPresenter - deviceScanDevice:startScanLeDevice\")\r\n            repository.startScanLeDevice()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nMain function\r\n```\r\nfun main() {\r\n    println(\"START\")\r\n    SharedFlowPresenter()\r\n    CFRunLoopRun() // run event loop\r\n}\r\n```\r\nThe code above works fine but if I comment the LINE 1 and uncomment the LINE 2 I get `kotlin.native.concurrent.FreezingException` when calls `repository.devices.collect` . Can anyone help me to understand that?\r\n\r\nThank you so much\r\n","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2539/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2539/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2531","repository_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines","labels_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2531/labels{/name}","comments_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2531/comments","events_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2531/events","html_url":"https://github.com/Kotlin/kotlinx.coroutines/issues/2531","id":804874683,"node_id":"MDU6SXNzdWU4MDQ4NzQ2ODM=","number":2531,"title":"Proposal: Condition Variables","user":{"login":"paulo-raca","id":1072660,"node_id":"MDQ6VXNlcjEwNzI2NjA=","avatar_url":"https://avatars.githubusercontent.com/u/1072660?v=4","gravatar_id":"","url":"https://api.github.com/users/paulo-raca","html_url":"https://github.com/paulo-raca","followers_url":"https://api.github.com/users/paulo-raca/followers","following_url":"https://api.github.com/users/paulo-raca/following{/other_user}","gists_url":"https://api.github.com/users/paulo-raca/gists{/gist_id}","starred_url":"https://api.github.com/users/paulo-raca/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulo-raca/subscriptions","organizations_url":"https://api.github.com/users/paulo-raca/orgs","repos_url":"https://api.github.com/users/paulo-raca/repos","events_url":"https://api.github.com/users/paulo-raca/events{/privacy}","received_events_url":"https://api.github.com/users/paulo-raca/received_events","type":"User","site_admin":false},"labels":[{"id":844322915,"node_id":"MDU6TGFiZWw4NDQzMjI5MTU=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/use-case%20needed","name":"use-case needed","color":"18187c","default":false,"description":""},{"id":846419469,"node_id":"MDU6TGFiZWw4NDY0MTk0Njk=","url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/labels/design","name":"design","color":"8a9edb","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-09T19:58:47Z","updated_at":"2021-04-08T15:45:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"[Condition Variables](https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html) are an useful concurrency primitive, which I have been missing since starting with Kotlin Coroutines\r\n\r\nAlthough it has not been optimised, I have written a very simple implementation and tests [here](https://gist.github.com/paulo-raca/ef6a827046a5faec95024ff406d3a692)","reactions":{"url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Kotlin/kotlinx.coroutines/issues/2531/timeline","performed_via_github_app":null}],"issuesCount":75,"contributors":195,"pullRequests":36,"projectUrl":"https://github.com/Kotlin/kotlinx.coroutines","issuesUrl":"https://github.com/Kotlin/kotlinx.coroutines/issues","stars":9924,"watchers":9924,"forks":1434,"githubLicenseName":"Apache-2.0","openIssues":297,"createdAt":"2016-06-22T13:49:21Z","updatedAt":"2021-10-15T10:26:10Z","monthsSinceUpdated":0},{"id":"kotlin-script-runtime@1.5.0","groupId":"org.jetbrains.kotlin","artifactId":"kotlin-script-runtime","version":"1.5.0","name":"Kotlin Script Runtime","description":"The Kotlin Programming Language. ","licenses":{"license":{"name":"The Apache License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.txt"}},"github":"https://github.com/JetBrains/kotlin","latestVersion":"1.6.0-RC","issues":[],"issuesCount":0,"contributors":705,"pullRequests":130,"projectUrl":"https://github.com/JetBrains/kotlin","issuesUrl":"https://github.com/JetBrains/kotlin/issues","stars":39016,"watchers":39016,"forks":4749,"openIssues":132,"createdAt":"2012-02-13T17:29:58Z","updatedAt":"2021-10-15T17:17:06Z","monthsSinceUpdated":0},{"id":"kotlin-test-junit@1.5.0","groupId":"org.jetbrains.kotlin","artifactId":"kotlin-test-junit","version":"1.5.0","name":"Kotlin Test Junit","description":"The Kotlin Programming Language. ","licenses":{"license":{"name":"The Apache License, Version 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.txt"}},"github":"https://github.com/JetBrains/kotlin","latestVersion":"1.6.0-RC","issues":[],"issuesCount":0,"contributors":705,"pullRequests":130,"projectUrl":"https://github.com/JetBrains/kotlin","issuesUrl":"https://github.com/JetBrains/kotlin/issues","stars":39016,"watchers":39016,"forks":4749,"openIssues":132,"createdAt":"2012-02-13T17:29:58Z","updatedAt":"2021-10-15T17:17:06Z","monthsSinceUpdated":0},{"id":"junit@4.13.1","groupId":"junit","artifactId":"junit","version":"4.13.1","name":"JUnit","description":"A programmer-oriented testing framework for Java.","licenses":{"license":{"name":"Eclipse Public License 1.0","url":"http://www.eclipse.org/legal/epl-v10.html","distribution":"repo"}},"github":"https://github.com/junit-team/junit4","latestVersion":"4.13.2","issues":[{"url":"https://api.github.com/repos/junit-team/junit4/issues/1720","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1720/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1720/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1720/events","html_url":"https://github.com/junit-team/junit4/issues/1720","id":1020922970,"node_id":"I_kwDOAAGfRs482gxa","number":1720,"title":"Validate actual rule object instead of Field#type for @Rule","user":{"login":"vlsi","id":213894,"node_id":"MDQ6VXNlcjIxMzg5NA==","avatar_url":"https://avatars.githubusercontent.com/u/213894?v=4","gravatar_id":"","url":"https://api.github.com/users/vlsi","html_url":"https://github.com/vlsi","followers_url":"https://api.github.com/users/vlsi/followers","following_url":"https://api.github.com/users/vlsi/following{/other_user}","gists_url":"https://api.github.com/users/vlsi/gists{/gist_id}","starred_url":"https://api.github.com/users/vlsi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vlsi/subscriptions","organizations_url":"https://api.github.com/users/vlsi/orgs","repos_url":"https://api.github.com/users/vlsi/repos","events_url":"https://api.github.com/users/vlsi/events{/privacy}","received_events_url":"https://api.github.com/users/vlsi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2021-10-08T10:05:07Z","updated_at":"2021-10-10T11:18:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently, JUnit validates field's type, and it wants the declaration to implement `TestRule`.\r\n\r\nIs there a reason for that? What if JUnit4 validated the actual value rather than field type?\r\n\r\nThe validation makes it harder to implement code that supports both JUnit4 and JUnit5.\r\n\r\nSample issue: https://github.com/testcontainers/testcontainers-java/issues/970 (/cc @bsideup, @baev)\r\n\r\nTL;DR: Testcontainers has to implement junit4-specific interfaces in Testcontainers APIs, thus Testcontainers forces everybody to have JUnit4 on the classpath which is sad.\r\n\r\nhttps://github.com/testcontainers/testcontainers-java/blob/aa273b5c0136d8bf8d9eb308040b30006ad98144/core/src/main/java/org/testcontainers/containers/Network.java#L20\r\n\r\n```java\r\npublic interface Network extends AutoCloseable, TestRule { // <-- it would be so much better to be able to remove TestRule here\r\n...\r\n```\r\n\r\nHowever, if `Network extends TestRule` is replaced with `NetworkImpl implements Network, TestRule`, then JUnit4 fails as follows:\r\n\r\n```java\r\n@RunWith(Enclosed.class)\r\npublic class NetworkTest {\r\n\r\n    public static class WithRules {\r\n\r\n        @Rule\r\n        public Network network = newNetwork();\r\n```\r\n\r\n```\r\nGradle Test Executor 1 > org.testcontainers.containers.NetworkTest > org.testcontainers.containers.NetworkTest$WithRules.initializationError FAILED\r\n    org.junit.runners.model.InvalidTestClassError: Invalid test class 'org.testcontainers.containers.NetworkTest$WithRules':\r\n      1. The @Rule 'network' must implement MethodRule or TestRule.\r\n        at org.junit.runners.ParentRunner.validate(ParentRunner.java:525)\r\n        at org.junit.runners.ParentRunner.<init>(ParentRunner.java:102)\r\n        at org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:84)\r\n        at org.junit.runners.JUnit4.<init>(JUnit4.java:23)\r\n        at org.junit.internal.builders.JUnit4Builder.runnerForClass(JUnit4Builder.java:10)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:125)\r\n        at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:111)\r\n        at org.junit.runners.Suite.<init>(Suite.java:102)\r\n        at org.junit.experimental.runners.Enclosed.<init>(Enclosed.java:31)\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n        at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:107)\r\n        at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.internal.requests.ClassRequest.createRunner(ClassRequest.java:28)\r\n        at org.junit.internal.requests.MemoizingRequest.getRunner(MemoizingRequest.java:19)\r\n        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:78)\r\n        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\r\n        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\r\n        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\r\n        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\n```\r\n\r\nSee also https://github.com/junit-team/junit4/pull/1020","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1720/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":2},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1720/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1705","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1705/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1705/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1705/events","html_url":"https://github.com/junit-team/junit4/issues/1705","id":829118576,"node_id":"MDU6SXNzdWU4MjkxMTg1NzY=","number":1705,"title":"Mvn test failed with TemporaryFolderUsageTest","user":{"login":"fubingting","id":72855012,"node_id":"MDQ6VXNlcjcyODU1MDEy","avatar_url":"https://avatars.githubusercontent.com/u/72855012?v=4","gravatar_id":"","url":"https://api.github.com/users/fubingting","html_url":"https://github.com/fubingting","followers_url":"https://api.github.com/users/fubingting/followers","following_url":"https://api.github.com/users/fubingting/following{/other_user}","gists_url":"https://api.github.com/users/fubingting/gists{/gist_id}","starred_url":"https://api.github.com/users/fubingting/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fubingting/subscriptions","organizations_url":"https://api.github.com/users/fubingting/orgs","repos_url":"https://api.github.com/users/fubingting/repos","events_url":"https://api.github.com/users/fubingting/events{/privacy}","received_events_url":"https://api.github.com/users/fubingting/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-11T12:45:50Z","updated_at":"2021-09-17T03:13:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When I test with mvn test, the error is as follows:\r\n\r\n>Running org.junit.rules.TemporaryFolderUsageTest\r\nTests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.105 sec <<< FAILURE! - in org.junit.rules.TemporaryFolderUsageTest\r\nnewFolderWithGivenFolderThrowsIOExceptionWhenFolderCannotBeCreated(org.junit.rules.TemporaryFolderUsageTest)  Time elapsed: 0.012 sec  <<< FAILURE!\r\njava.lang.AssertionError: Expected test to throw (an instance of java.io.IOException and exception with message a string containing \"could not create a folder with the path 'level1'\")\r\n\r\n\r\n**test env:**\r\njunit4@4.13.2\r\nmaven@3.6.3\r\nopenjdk@11.0.0-2020-01-01\r\nos:centos\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1705/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1705/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1703","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1703/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1703/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1703/events","html_url":"https://github.com/junit-team/junit4/issues/1703","id":819957502,"node_id":"MDU6SXNzdWU4MTk5NTc1MDI=","number":1703,"title":"Don't convert assumption failures to errors in ErrorCollector.addError()","user":{"login":"prbprbprb","id":44170157,"node_id":"MDQ6VXNlcjQ0MTcwMTU3","avatar_url":"https://avatars.githubusercontent.com/u/44170157?v=4","gravatar_id":"","url":"https://api.github.com/users/prbprbprb","html_url":"https://github.com/prbprbprb","followers_url":"https://api.github.com/users/prbprbprb/followers","following_url":"https://api.github.com/users/prbprbprb/following{/other_user}","gists_url":"https://api.github.com/users/prbprbprb/gists{/gist_id}","starred_url":"https://api.github.com/users/prbprbprb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/prbprbprb/subscriptions","organizations_url":"https://api.github.com/users/prbprbprb/orgs","repos_url":"https://api.github.com/users/prbprbprb/repos","events_url":"https://api.github.com/users/prbprbprb/events{/privacy}","received_events_url":"https://api.github.com/users/prbprbprb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-02T12:09:03Z","updated_at":"2021-07-07T23:30:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This was previously discussed in #1363 and I think the new treatment of `ErrorCollector. checkSucceeds()` is correct.  However `ErrorCollector.addError()` is more commonly used when calling sub-methods or in wrapper `Rules` ([AOSP example](https://cs.android.com/android/platform/superproject/+/master:cts/tests/framework/base/windowmanager/util/src/android/server/wm/ActivityManagerTestBase.java;l=2476;drc=97181d9dbd5b13275a88120c1cd66af7fb7eeae2)) so it seems clearer (to me) to pass assumption failures through.\r\n\r\n#1702 is potential fix, although this has similar properties to what #1363 complained about, i.e. if `addError()` is used to add multiple assumption failures then they'll get re-thrown as a  `MultipleFailureException` causing the test to fail.  It seems to me that in that case the test probably needs restructuring anyway (e.g. to check its assumptions *before* calling multiple sub-methods), but I'm open to opinions.","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1703/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1703/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1701","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1701/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1701/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1701/events","html_url":"https://github.com/junit-team/junit4/issues/1701","id":813591021,"node_id":"MDU6SXNzdWU4MTM1OTEwMjE=","number":1701,"title":"OrderWith in parameterized tests","user":{"login":"phoenix384","id":3883662,"node_id":"MDQ6VXNlcjM4ODM2NjI=","avatar_url":"https://avatars.githubusercontent.com/u/3883662?v=4","gravatar_id":"","url":"https://api.github.com/users/phoenix384","html_url":"https://github.com/phoenix384","followers_url":"https://api.github.com/users/phoenix384/followers","following_url":"https://api.github.com/users/phoenix384/following{/other_user}","gists_url":"https://api.github.com/users/phoenix384/gists{/gist_id}","starred_url":"https://api.github.com/users/phoenix384/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/phoenix384/subscriptions","organizations_url":"https://api.github.com/users/phoenix384/orgs","repos_url":"https://api.github.com/users/phoenix384/repos","events_url":"https://api.github.com/users/phoenix384/events{/privacy}","received_events_url":"https://api.github.com/users/phoenix384/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-22T15:13:20Z","updated_at":"2021-03-15T20:55:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The ordering introduced with #1130 is a great feature. Also the fact that the annotation is inherited is really helpful in some cases.\r\n\r\nBut when a parameterized test inherits an OrderWith annotation, its parameters get reordered as well.\r\nAnother case where this behaviour could be a problem would be a parameterized test with more than one test method, where you add an OrderWith annotation in order to sort the test methods but not the parameters.\r\n\r\nAs long as the parameters name value starts with \"{index}\" and the amount of parameters is <10 there is no problem, because the order remains the same (at least with the provided alphanumeric ordering). If there are >10 parameters, the alphabetical order is 1, 10, 11, 2, 3, ...\r\n\r\nI could think of the following possibilites to solve this:\r\n- OrderWith should only sort test methods - not parameters. You have enough control over the parameter order in the parameters method and that order should not get changed.\r\n- Add leading zeros to the {index} placeholder value or add an additional placeholder that outputs the index with leading zeros.\r\n- Add an ordering to use with the OrderWith annotation using the org.junit.runner.manipulation.Sorter.NULL sorter to be able to override an inherited ordering (only solves case 1)","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1701/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1701/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1696","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1696/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1696/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1696/events","html_url":"https://github.com/junit-team/junit4/issues/1696","id":802122925,"node_id":"MDU6SXNzdWU4MDIxMjI5MjU=","number":1696,"title":"Build failure with OpenJDK 17","user":{"login":"ebourg","id":54304,"node_id":"MDQ6VXNlcjU0MzA0","avatar_url":"https://avatars.githubusercontent.com/u/54304?v=4","gravatar_id":"","url":"https://api.github.com/users/ebourg","html_url":"https://github.com/ebourg","followers_url":"https://api.github.com/users/ebourg/followers","following_url":"https://api.github.com/users/ebourg/following{/other_user}","gists_url":"https://api.github.com/users/ebourg/gists{/gist_id}","starred_url":"https://api.github.com/users/ebourg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ebourg/subscriptions","organizations_url":"https://api.github.com/users/ebourg/orgs","repos_url":"https://api.github.com/users/ebourg/repos","events_url":"https://api.github.com/users/ebourg/events{/privacy}","received_events_url":"https://api.github.com/users/ebourg/received_events","type":"User","site_admin":false},"labels":[{"id":3631703,"node_id":"MDU6TGFiZWwzNjMxNzAz","url":"https://api.github.com/repos/junit-team/junit4/labels/javadoc","name":"javadoc","color":"e102d8","default":false,"description":null},{"id":3631716,"node_id":"MDU6TGFiZWwzNjMxNzE2","url":"https://api.github.com/repos/junit-team/junit4/labels/maven","name":"maven","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-05T12:23:51Z","updated_at":"2021-02-13T13:52:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"There is a build failure with OpenJDK 17 caused by javadoc errors:\r\n\r\n    [INFO] -------------------------------------------------------------\r\n    [ERROR] COMPILATION ERROR :\r\n    [INFO] -------------------------------------------------------------\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/runners/Parameterized.java:[125,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/Test.java:[31,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/ClassRule.java:[34,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/rules/ExpectedException.java:[19,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/Rule.java:[26,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [INFO] 5 errors\r\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1696/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1696/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1648","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1648/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1648/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1648/events","html_url":"https://github.com/junit-team/junit4/issues/1648","id":561685104,"node_id":"MDU6SXNzdWU1NjE2ODUxMDQ=","number":1648,"title":"`@FromDataPoints(\"misspelled\") EnumType` shouldn't test all enum values","user":{"login":"awturner","id":9278052,"node_id":"MDQ6VXNlcjkyNzgwNTI=","avatar_url":"https://avatars.githubusercontent.com/u/9278052?v=4","gravatar_id":"","url":"https://api.github.com/users/awturner","html_url":"https://github.com/awturner","followers_url":"https://api.github.com/users/awturner/followers","following_url":"https://api.github.com/users/awturner/following{/other_user}","gists_url":"https://api.github.com/users/awturner/gists{/gist_id}","starred_url":"https://api.github.com/users/awturner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/awturner/subscriptions","organizations_url":"https://api.github.com/users/awturner/orgs","repos_url":"https://api.github.com/users/awturner/repos","events_url":"https://api.github.com/users/awturner/events{/privacy}","received_events_url":"https://api.github.com/users/awturner/received_events","type":"User","site_admin":false},"labels":[{"id":14312,"node_id":"MDU6TGFiZWwxNDMxMg==","url":"https://api.github.com/repos/junit-team/junit4/labels/bug","name":"bug","color":"ff0000","default":true,"description":null},{"id":3631648,"node_id":"MDU6TGFiZWwzNjMxNjQ4","url":"https://api.github.com/repos/junit-team/junit4/labels/theories","name":"theories","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-02-07T14:53:47Z","updated_at":"2020-11-15T22:34:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"```java\r\n@RunWith(Theories.class)\r\npublic class NonExistentTheory {\r\n  @DataPoints(\"foo\")\r\n  public static final ImmutableSet<MetaSyntacticVariable> FOOS =\r\n      ImmutableSet.of(MetaSyntacticVariable.FOO);\r\n\r\n  @Theory\r\n  public void doWithTheFoo(@FromDataPoints(\"bar\") MetaSyntacticVariable whatever) {\r\n    System.err.println(whatever);\r\n  }\r\n\r\n  @Theory\r\n  public void doWithTheBoolean(@FromDataPoints(\"bar\") boolean whatever) {\r\n    System.err.println(whatever);\r\n  }\r\n\r\n  enum MetaSyntacticVariable {\r\n    FOO, BAR, BAZ\r\n  }\r\n}\r\n```\r\n\r\nIt is surprising that these `@FromDataPoints`-annotated parameters receive the same values as if the annotation were omitted. This means that typos in data point names aren't flagged as errors.\r\n\r\nIf the `@FromDataPoints` is present, and nothing matches, it would be helpful to raise \"Never found parameters that satisfied method assumptions.\".","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1648/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1648/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1629","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1629/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1629/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1629/events","html_url":"https://github.com/junit-team/junit4/issues/1629","id":504602826,"node_id":"MDU6SXNzdWU1MDQ2MDI4MjY=","number":1629,"title":"Performance issue: @DataPoints from functions and @Theory with multiple arguments","user":{"login":"dev930018","id":56113485,"node_id":"MDQ6VXNlcjU2MTEzNDg1","avatar_url":"https://avatars.githubusercontent.com/u/56113485?v=4","gravatar_id":"","url":"https://api.github.com/users/dev930018","html_url":"https://github.com/dev930018","followers_url":"https://api.github.com/users/dev930018/followers","following_url":"https://api.github.com/users/dev930018/following{/other_user}","gists_url":"https://api.github.com/users/dev930018/gists{/gist_id}","starred_url":"https://api.github.com/users/dev930018/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dev930018/subscriptions","organizations_url":"https://api.github.com/users/dev930018/orgs","repos_url":"https://api.github.com/users/dev930018/repos","events_url":"https://api.github.com/users/dev930018/events{/privacy}","received_events_url":"https://api.github.com/users/dev930018/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-09T11:57:06Z","updated_at":"2019-10-09T11:57:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This is still an issue as of 4.12 and can cause a huge unexpected performance hit.\r\n\r\n## Minimal example\r\nFor `N=5` datapoints of type `T=int` and `M=3` arguments of type `T` to a Theory\r\n```\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n@RunWith(Theories.class)\r\npublic class DataPointsBug {\r\n\r\n    @DataPoints\r\n    public static int[] generateDataPoints() {\r\n        System.out.println(\"generateDataPoints()\");\r\n        // Expensive operation\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException ex) {\r\n        }\r\n        return new int[] {1,2,3,4,5};\r\n    }\r\n\r\n    @Theory\r\n    public void manyArguments(int a, int b, int c) {\r\n        // Cheap test\r\n        assertTrue(a > 0 && b > 0 && c > 0);\r\n    }\r\n}\r\n```\r\n\r\n## Output\r\n```\r\ngenerateDataPoints()\r\n<line repeated 30 more times>\r\n\r\nFinished in 31s 45ms\r\n```\r\n\r\nIn general, for `N` datapoints of type `T` and a Theory taking `M` arguments of type `T`, this requires `S = sum(1 + N + N^2 + ... + N^M) ~ O(N^M)`, which seems pretty excessive...\r\n\r\n## Workaround\r\nIt is an easy-enough workaround to store the generator output once and annotate the variable with `@DataPoints`:\r\n\r\n```\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n@RunWith(Theories.class)\r\npublic class DataPointsBug {\r\n\r\n    private static int[] generateDataPoints() {\r\n        System.out.println(\"generateDataPoints()\");\r\n        // Expensive operation\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException ex) {\r\n        }\r\n        return new int[] {1,2,3,4,5};\r\n    }\r\n    @DataPoints\r\n    public static int[] dataPoints = generateDataPoints();\r\n\r\n    @Theory\r\n    public void manyArguments(int a, int b, int c) {\r\n        // Cheap test\r\n        assertTrue(a > 0 && b > 0 && c > 0);\r\n    }\r\n}\r\n```\r\n\r\n## Output\r\n```\r\ngenerateDataPoints()\r\n\r\nFinished in 1s 37ms\r\n```\r\n\r\nShould this be re-opened and addressed?\r\n\r\n_Originally posted by @dev930018 in https://github.com/junit-team/junit4/issues/82#issuecomment-539967865_","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1629/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1629/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1626","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1626/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1626/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1626/events","html_url":"https://github.com/junit-team/junit4/issues/1626","id":489991768,"node_id":"MDU6SXNzdWU0ODk5OTE3Njg=","number":1626,"title":"`failNotSame` message could emphasize reference equality","user":{"login":"sabi0","id":11509875,"node_id":"MDQ6VXNlcjExNTA5ODc1","avatar_url":"https://avatars.githubusercontent.com/u/11509875?v=4","gravatar_id":"","url":"https://api.github.com/users/sabi0","html_url":"https://github.com/sabi0","followers_url":"https://api.github.com/users/sabi0/followers","following_url":"https://api.github.com/users/sabi0/following{/other_user}","gists_url":"https://api.github.com/users/sabi0/gists{/gist_id}","starred_url":"https://api.github.com/users/sabi0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sabi0/subscriptions","organizations_url":"https://api.github.com/users/sabi0/orgs","repos_url":"https://api.github.com/users/sabi0/repos","events_url":"https://api.github.com/users/sabi0/events{/privacy}","received_events_url":"https://api.github.com/users/sabi0/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-09-05T20:43:18Z","updated_at":"2019-09-10T18:30:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When calling `assertSame` for two different instances of identical objects the failure message will be quite confusing: \"expected same:<[1, 2]> was not:<[1, 2]>\".\r\nSee https://github.com/junit-team/junit4/blob/8c9e81daf38efa8b4af9ba5c55fe83765ac434d6/src/main/java/org/junit/Assert.java#L829\r\n\r\nI think the clarity could be improved by adding identityHashCode to the message, like this:\r\n\"expected same:<[1, 2]@ba38e> was not:<[1, 2]@de440>\"\r\nOr maybe even with the class name:\r\n\"expected same:<java.util.List@ba38e [1, 2]> was not:<java.util.List@de440 [1, 2]>\"","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1626/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1626/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1619","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1619/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1619/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1619/events","html_url":"https://github.com/junit-team/junit4/issues/1619","id":458231532,"node_id":"MDU6SXNzdWU0NTgyMzE1MzI=","number":1619,"title":"Feature request: add java.time.Duration support to org.junit.rules.Timeout","user":{"login":"kluever","id":2036304,"node_id":"MDQ6VXNlcjIwMzYzMDQ=","avatar_url":"https://avatars.githubusercontent.com/u/2036304?v=4","gravatar_id":"","url":"https://api.github.com/users/kluever","html_url":"https://github.com/kluever","followers_url":"https://api.github.com/users/kluever/followers","following_url":"https://api.github.com/users/kluever/following{/other_user}","gists_url":"https://api.github.com/users/kluever/gists{/gist_id}","starred_url":"https://api.github.com/users/kluever/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kluever/subscriptions","organizations_url":"https://api.github.com/users/kluever/orgs","repos_url":"https://api.github.com/users/kluever/repos","events_url":"https://api.github.com/users/kluever/events{/privacy}","received_events_url":"https://api.github.com/users/kluever/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2019-06-19T21:18:47Z","updated_at":"2019-06-20T17:38:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Representing durations as `long`s can easily lead to unit mismatch problems.\r\nRepresenting durations as `long, TimeUnit` pairs can require plumbing 2 values through multiple layers (and can suffer from unit mismatch or truncation issues).\r\n\r\nCould proper `java.time.Duration` support be added to the `Timeout` class?\r\n\r\n(If this should be filed under junit5, please let me know and I'll open it there.)","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1619/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1619/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1604","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1604/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1604/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1604/events","html_url":"https://github.com/junit-team/junit4/issues/1604","id":432437229,"node_id":"MDU6SXNzdWU0MzI0MzcyMjk=","number":1604,"title":"Attempting to rerun failing JUnit 4 Parameterized tests in IDEA fails","user":{"login":"Panthro","id":1565421,"node_id":"MDQ6VXNlcjE1NjU0MjE=","avatar_url":"https://avatars.githubusercontent.com/u/1565421?v=4","gravatar_id":"","url":"https://api.github.com/users/Panthro","html_url":"https://github.com/Panthro","followers_url":"https://api.github.com/users/Panthro/followers","following_url":"https://api.github.com/users/Panthro/following{/other_user}","gists_url":"https://api.github.com/users/Panthro/gists{/gist_id}","starred_url":"https://api.github.com/users/Panthro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Panthro/subscriptions","organizations_url":"https://api.github.com/users/Panthro/orgs","repos_url":"https://api.github.com/users/Panthro/repos","events_url":"https://api.github.com/users/Panthro/events{/privacy}","received_events_url":"https://api.github.com/users/Panthro/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-04-12T08:00:51Z","updated_at":"2021-08-18T17:07:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When I have a test with \r\n\r\n`@Parameterized.Parameters(name = \"{1} : {0}\")`\r\n\r\nIf I try to rerun failed tests in Intellij Idea, then I get:\r\n```\r\njava.lang.Exception: No tests found matching Tests from org.junit.runner.Request$1@5ae50ce6\r\n\r\n\tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:40)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n\r\n```\r\n\r\nIf I leave the @Parameterized.Parameters without name it works, any idea?\r\n\r\nFound a Junit5 related issue, https://github.com/junit-team/junit5/issues/1386\r\n\r\nJunit version 4.12, can this be related or should I open another issue?","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1604/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1604/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1600","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1600/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1600/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1600/events","html_url":"https://github.com/junit-team/junit4/issues/1600","id":425898484,"node_id":"MDU6SXNzdWU0MjU4OTg0ODQ=","number":1600,"title":"Cartesian product of base and derived class parameter ","user":{"login":"noviceamateur","id":36193793,"node_id":"MDQ6VXNlcjM2MTkzNzkz","avatar_url":"https://avatars.githubusercontent.com/u/36193793?v=4","gravatar_id":"","url":"https://api.github.com/users/noviceamateur","html_url":"https://github.com/noviceamateur","followers_url":"https://api.github.com/users/noviceamateur/followers","following_url":"https://api.github.com/users/noviceamateur/following{/other_user}","gists_url":"https://api.github.com/users/noviceamateur/gists{/gist_id}","starred_url":"https://api.github.com/users/noviceamateur/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/noviceamateur/subscriptions","organizations_url":"https://api.github.com/users/noviceamateur/orgs","repos_url":"https://api.github.com/users/noviceamateur/repos","events_url":"https://api.github.com/users/noviceamateur/events{/privacy}","received_events_url":"https://api.github.com/users/noviceamateur/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-03-27T11:12:53Z","updated_at":"2019-04-13T13:03:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have parameters in both the base and derived test classes. So I want the tests in derived class to run for the cartesian product of those.\r\n\r\nSample code -\r\n\r\n```\r\n@RunWith(Parameterized.class)\r\npublic class BaseTest {\r\n\r\n  public BaseTest() {\r\n  }\r\n\r\n  @BeforeClass\r\n  public static void setupbase() {\r\n  }\r\n\r\n  @Parameterized.Parameter(0)\r\n  public String baseParam;\r\n\r\n  @Parameterized.Parameters\r\n  public static Collection<Object[]> data() {\r\n    return Arrays.asList(new Object[][] {\r\n        { \"base1\" }, { \"base2\" }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\npublic class Test1 extends BaseTest {\r\n\r\n  @BeforeClass\r\n  public static void setup() {\r\n  }\r\n\r\n  @Parameterized.Parameter(0)\r\n  public  String derivedParam;\r\n\r\n  @Parameterized.Parameters\r\n  public static Collection<Object[]> data() {\r\n    return Arrays.asList(new Object[][] {\r\n        { \"derived1\" }, { \"derived2\" }\r\n    });\r\n  }\r\n\r\n  @Test\r\n  public void testcase1() {\r\n    System.out.println(\"Base Param = \" + baseParam);\r\n    System.out.println(\"Derived Param = \" + derivedParam);\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\nThe expected output - \r\n\r\n```\r\nBase Param = base1\r\nDerived Param = derived1\r\nBase Param = base1\r\nDerived Param = derived2\r\nBase Param = base2\r\nDerived Param = derived1\r\nBase Param = base2\r\nDerived Param = derived2\r\n```\r\n\r\n\r\nPresent error while running - \r\n\r\n```\r\n> java.lang.Exception: @Parameter(0) is used more than once (2).\r\n> \r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.validateFields(BlockJUnit4ClassRunnerWithParameters.java:119)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:129)\r\n> \tat org.junit.runners.ParentRunner.validate(ParentRunner.java:416)\r\n> \tat org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.<init>(BlockJUnit4ClassRunnerWithParameters.java:27)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(BlockJUnit4ClassRunnerWithParametersFactory.java:16)\r\n> \tat org.junit.runners.Parameterized.createRunnersForParameters(Parameterized.java:313)\r\n> \tat org.junit.runners.Parameterized.<init>(Parameterized.java:248)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n> \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n> \tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n> \tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:36)\r\n> \tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\r\n> \tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n> \tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n> \tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n> \r\n> \r\n> java.lang.Exception: @Parameter(1) is never used.\r\n> \r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.validateFields(BlockJUnit4ClassRunnerWithParameters.java:116)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:129)\r\n> \tat org.junit.runners.ParentRunner.validate(ParentRunner.java:416)\r\n> \tat org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.<init>(BlockJUnit4ClassRunnerWithParameters.java:27)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(BlockJUnit4ClassRunnerWithParametersFactory.java:16)\r\n> \tat org.junit.runners.Parameterized.createRunnersForParameters(Parameterized.java:313)\r\n> \tat org.junit.runners.Parameterized.<init>(Parameterized.java:248)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n> \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n> \tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n> \tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:36)\r\n```\r\n\r\n\r\nVersion - Junit 4.12","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1600/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1600/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1587","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1587/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1587/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1587/events","html_url":"https://github.com/junit-team/junit4/issues/1587","id":399349477,"node_id":"MDU6SXNzdWUzOTkzNDk0Nzc=","number":1587,"title":"Problem executing remote Spock test due to java.lang.Exception failure","user":{"login":"hellboy81","id":341600,"node_id":"MDQ6VXNlcjM0MTYwMA==","avatar_url":"https://avatars.githubusercontent.com/u/341600?v=4","gravatar_id":"","url":"https://api.github.com/users/hellboy81","html_url":"https://github.com/hellboy81","followers_url":"https://api.github.com/users/hellboy81/followers","following_url":"https://api.github.com/users/hellboy81/following{/other_user}","gists_url":"https://api.github.com/users/hellboy81/gists{/gist_id}","starred_url":"https://api.github.com/users/hellboy81/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hellboy81/subscriptions","organizations_url":"https://api.github.com/users/hellboy81/orgs","repos_url":"https://api.github.com/users/hellboy81/repos","events_url":"https://api.github.com/users/hellboy81/events{/privacy}","received_events_url":"https://api.github.com/users/hellboy81/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-01-15T13:40:40Z","updated_at":"2019-06-21T00:31:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Trying to execute remote tests using JUnit 4.12 with Groovy&co steroids from IDEA:\r\n\r\n![image](https://user-images.githubusercontent.com/341600/51183675-3ef5b680-18d2-11e9-8749-559fb053d759.png)\r\n\r\n```java\r\n java.lang.Exception: No tests found matching method name filter from org.junit.runner.Request$1@3af039ed\r\n\r\n at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:40)\r\n at org.junit.runner.JUnitCore.run(JUnitCore.java:115)\r\n at org.junit.runner.JUnitCore$run$0.call(Unknown Source)\r\n at com.onresolve.scriptrunner.canned.common.admin.RunUnitTests.doScript(RunUnitTests.groovy:320)\r\n\r\n```\r\n\r\nSee [also](https://community.atlassian.com/t5/Adaptavist-questions/Scriptrunner-remote-Spock-test-failing-due-to-java-lang/qaq-p/740603)\r\n\r\nIssue can be reproduces also by another JUnit users on this [repo](https://bitbucket.org/Adaptavist/scriptrunner-samples/src/master/)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1587/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1587/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1585","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1585/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1585/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1585/events","html_url":"https://github.com/junit-team/junit4/issues/1585","id":396945788,"node_id":"MDU6SXNzdWUzOTY5NDU3ODg=","number":1585,"title":"\"latest\" Javadoc folder should not contain beta documentation","user":{"login":"sbrannen","id":104798,"node_id":"MDQ6VXNlcjEwNDc5OA==","avatar_url":"https://avatars.githubusercontent.com/u/104798?v=4","gravatar_id":"","url":"https://api.github.com/users/sbrannen","html_url":"https://github.com/sbrannen","followers_url":"https://api.github.com/users/sbrannen/followers","following_url":"https://api.github.com/users/sbrannen/following{/other_user}","gists_url":"https://api.github.com/users/sbrannen/gists{/gist_id}","starred_url":"https://api.github.com/users/sbrannen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sbrannen/subscriptions","organizations_url":"https://api.github.com/users/sbrannen/orgs","repos_url":"https://api.github.com/users/sbrannen/repos","events_url":"https://api.github.com/users/sbrannen/events{/privacy}","received_events_url":"https://api.github.com/users/sbrannen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-01-08T15:02:58Z","updated_at":"2019-01-08T15:32:05Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"## Status Quo\r\n\r\nThe https://junit.org/junit4/javadoc/latest/ folder currently contains documentation for `JUnit 4.13-beta-1`.\r\n\r\nThe net result is that projects that link to https://junit.org/junit4/javadoc/latest/ in order to generate links to external documentation will currently link to *beta* software APIs instead of the latest release.\r\n\r\n## Expectation\r\n\r\n- The \"latest\" folder should point to the latest GA release, which is currently `JUnit 4.12`.\r\n- Documentation for beta releases should be published to a different folder -- for example, https://junit.org/junit4/javadoc/beta/, https://junit.org/junit4/javadoc/4.13-beta-1/, etc.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1585/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1585/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1566","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1566/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1566/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1566/events","html_url":"https://github.com/junit-team/junit4/issues/1566","id":373196495,"node_id":"MDU6SXNzdWUzNzMxOTY0OTU=","number":1566,"title":"ExpectedException fails when assumption fails","user":{"login":"smithkm","id":2184425,"node_id":"MDQ6VXNlcjIxODQ0MjU=","avatar_url":"https://avatars.githubusercontent.com/u/2184425?v=4","gravatar_id":"","url":"https://api.github.com/users/smithkm","html_url":"https://github.com/smithkm","followers_url":"https://api.github.com/users/smithkm/followers","following_url":"https://api.github.com/users/smithkm/following{/other_user}","gists_url":"https://api.github.com/users/smithkm/gists{/gist_id}","starred_url":"https://api.github.com/users/smithkm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/smithkm/subscriptions","organizations_url":"https://api.github.com/users/smithkm/orgs","repos_url":"https://api.github.com/users/smithkm/repos","events_url":"https://api.github.com/users/smithkm/events{/privacy}","received_events_url":"https://api.github.com/users/smithkm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-10-23T20:53:42Z","updated_at":"2018-10-24T16:30:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have tests that `Assume.assumeTrue(false)` under some circumstances to indicate the test is not relevant.  Some of these tests are using an `ExpectedException` rule to check for other exceptions.  Under JUnit 4.11 the test gets ignored as expected, under JUnit 4.12 the rule tries to match the `AssumptionViolatedException` and fails.\r\n\r\nProbably related to the fix for #687","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1566/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1566/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1542","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1542/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1542/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1542/events","html_url":"https://github.com/junit-team/junit4/issues/1542","id":341580140,"node_id":"MDU6SXNzdWUzNDE1ODAxNDA=","number":1542,"title":"BlockJUnit4ClassRunner no runnable methods","user":{"login":"BogdanAlexandru11","id":22599921,"node_id":"MDQ6VXNlcjIyNTk5OTIx","avatar_url":"https://avatars.githubusercontent.com/u/22599921?v=4","gravatar_id":"","url":"https://api.github.com/users/BogdanAlexandru11","html_url":"https://github.com/BogdanAlexandru11","followers_url":"https://api.github.com/users/BogdanAlexandru11/followers","following_url":"https://api.github.com/users/BogdanAlexandru11/following{/other_user}","gists_url":"https://api.github.com/users/BogdanAlexandru11/gists{/gist_id}","starred_url":"https://api.github.com/users/BogdanAlexandru11/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BogdanAlexandru11/subscriptions","organizations_url":"https://api.github.com/users/BogdanAlexandru11/orgs","repos_url":"https://api.github.com/users/BogdanAlexandru11/repos","events_url":"https://api.github.com/users/BogdanAlexandru11/events{/privacy}","received_events_url":"https://api.github.com/users/BogdanAlexandru11/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-07-16T16:01:54Z","updated_at":"2021-02-05T01:31:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi. \r\n\r\nI have made my own suite \"MySuite.class\", and I'm trying to run all the tests from the project using that suite. I have declared AllTests.class as \r\n\"@RunWith(ClasspathSuite.class)\r\npublic class AllTests {}\"\r\n\r\nAnd my tests are being triggered as follows \r\n\"@RunWith(MySuite.class)\r\n@Suite.SuiteClasses( { AllTests.class })\r\npublic class RunAllMyTests {}\"\r\n\r\nI'm getting the following errors\r\n\"java.lang.Exception: No runnable methods\r\norg.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(BlockJUnit4ClassRunner.java:191)\r\n org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:128)\r\n\tat org.junit.runners.ParentRunner.validate(ParentRunner.java:416)\r\n\tat org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)\"\r\n\r\nIf I replace AllTests.Class in Suite.SuiteClasses annotation with one test: \"@Suite.SuiteClasses( { Test1.class })\" or even multiple tests : \"@Suite.SuiteClasses( { Test1.class, Test2class, Test3.class})\" it runs fine, but if I'm trying to run all the tests as described above it crashes.\r\n\r\nAny suggestions? \r\nThanks !\r\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1542/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1542/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1525","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1525/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1525/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1525/events","html_url":"https://github.com/junit-team/junit4/issues/1525","id":326813602,"node_id":"MDU6SXNzdWUzMjY4MTM2MDI=","number":1525,"title":"Assumption violation is not reflected on text UI","user":{"login":"davido","id":347173,"node_id":"MDQ6VXNlcjM0NzE3Mw==","avatar_url":"https://avatars.githubusercontent.com/u/347173?v=4","gravatar_id":"","url":"https://api.github.com/users/davido","html_url":"https://github.com/davido","followers_url":"https://api.github.com/users/davido/followers","following_url":"https://api.github.com/users/davido/following{/other_user}","gists_url":"https://api.github.com/users/davido/gists{/gist_id}","starred_url":"https://api.github.com/users/davido/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/davido/subscriptions","organizations_url":"https://api.github.com/users/davido/orgs","repos_url":"https://api.github.com/users/davido/repos","events_url":"https://api.github.com/users/davido/events{/privacy}","received_events_url":"https://api.github.com/users/davido/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":18,"created_at":"2018-05-27T12:45:22Z","updated_at":"2018-06-02T09:38:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It would be helpful if assumption violations would be reflected on the text UI. For this test class with three test methods:\r\n\r\n```java\r\npackage org.gerritcon.mv2016;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assume.assumeTrue;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class PrintyTest {\r\n  @Test\r\n  public void test_passed() {\r\n    assertEquals(\"foo\", \"foo\");\r\n  }\r\n\r\n  @Test\r\n  public void test_failed() {\r\n    assertEquals(\"foo\", \"bar\");\r\n  }\r\n\r\n  @Test\r\n  public void test_assumption_violation() {\r\n    assumeTrue(false);\r\n  }\r\n}\r\n```\r\n\r\nJUnit text UI produces this result:\r\n\r\n```\r\n$ java -classpath buck-out/gen/lib__printy_tests#testsjar__output/printy_tests#testsjar.jar:/home/davido/Downloads/hamcrest-core-1.3.jar:/home/davido/Downloads/junit-4.12.jar org.junit.runner.JUnitCore org.gerritcon.mv2016.PrintyTest\r\nJUnit version 4.12\r\n..E.\r\nTime: 0.008\r\nThere was 1 failure:\r\n1) test_failed(org.gerritcon.mv2016.PrintyTest)\r\norg.junit.ComparisonFailure: expected:<[foo]> but was:<[bar]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n[...]\r\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\r\n\r\nFAILURES!!!\r\nTests run: 3,  Failures: 1\r\n```\r\n\r\nThe impression is that 2 tests were successful even though, only single test was successful and another one failed with assumption violation. This information is lost.\r\n \r\nCompared to it the output from [Buck build tool](https://buckbuild.com/) is:\r\n\r\n```\r\n$ buck test :printy_tests\r\nFAILURE org.gerritcon.mv2016.PrintyTest test_failed: expected:<[foo]> but was:<[bar]>\r\n[-] PROCESSING BUCK FILES...FINISHED 0.0s 🏖  (Watchman reported no changes)\r\n[-] DOWNLOADING... (0.00 B/S AVG, TOTAL: 0.00 B, 0 Artifacts)\r\n[-] BUILDING...FINISHED 0.0s [100%] (6/6 JOBS, 0 UPDATED, 0 [0.0%] CACHE MISS)\r\n[-] TESTING...FINISHED 0.3s (1 PASS/1 SKIP/1 FAIL)\r\nRESULTS FOR //:printy_tests\r\nFAIL    <100ms  1 Passed   1 Skipped   1 Failed   org.gerritcon.mv2016.PrintyTest\r\nFAILURE org.gerritcon.mv2016.PrintyTest test_failed: expected:<[foo]> but was:<[bar]>\r\norg.junit.ComparisonFailure: expected:<[foo]> but was:<[bar]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n[...]\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n\r\nTESTS FAILED: 1 FAILURE\r\nFailed target: //:printy_tests\r\n```\r\n\r\nThis line reflects more accurately what happened:\r\n\r\n```\r\nFAIL    <100ms  1 Passed   1 Skipped   1 Failed   org.gerritcon.mv2016.PrintyTest\r\n```\r\n\r\nYou may wonder, why would I care to improve text JUnit UI; in the end devs are using dedicated build tools and IDE integrations and not `java -classpath sut.jar:junit.jar org.junit.runner.JUnitCore <test class>`?\r\n\r\nIt turns out, that other build tools rely on JUnit text UI to report test outcome. Given that assumption violation is lost here, the other build tools also cannot offer more accurate test outcome.","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1525/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1525/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1492","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1492/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1492/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1492/events","html_url":"https://github.com/junit-team/junit4/issues/1492","id":279163976,"node_id":"MDU6SXNzdWUyNzkxNjM5NzY=","number":1492,"title":"Feature request: be able to query time remaining on a test","user":{"login":"carl-mastrangelo","id":8943572,"node_id":"MDQ6VXNlcjg5NDM1NzI=","avatar_url":"https://avatars.githubusercontent.com/u/8943572?v=4","gravatar_id":"","url":"https://api.github.com/users/carl-mastrangelo","html_url":"https://github.com/carl-mastrangelo","followers_url":"https://api.github.com/users/carl-mastrangelo/followers","following_url":"https://api.github.com/users/carl-mastrangelo/following{/other_user}","gists_url":"https://api.github.com/users/carl-mastrangelo/gists{/gist_id}","starred_url":"https://api.github.com/users/carl-mastrangelo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/carl-mastrangelo/subscriptions","organizations_url":"https://api.github.com/users/carl-mastrangelo/orgs","repos_url":"https://api.github.com/users/carl-mastrangelo/repos","events_url":"https://api.github.com/users/carl-mastrangelo/events{/privacy}","received_events_url":"https://api.github.com/users/carl-mastrangelo/received_events","type":"User","site_admin":false},"labels":[{"id":6156902,"node_id":"MDU6TGFiZWw2MTU2OTAy","url":"https://api.github.com/repos/junit-team/junit4/labels/rules","name":"rules","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-12-04T21:53:14Z","updated_at":"2018-01-09T20:05:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using the `Timeout` rule, it would sometimes be convenient to be able to get how much time is remaining in the test.  That would allow code that calls `Future.get(long, Timeout)`, `CountDownLatch.await(long, Timeunit)`, `Thread.sleep(long)`,  `Object.wait(long)`, and any other code that waits to cooperate with the testing framework.  \r\n\r\nThe use case for this is when bumping the timeout for a test, it becomes necessary to update all of the other uses of time.   For example:\r\n\r\n```java\r\n@Rule public final Timeout timeout = Timeout.seconds(5);\r\n\r\n@Test public void foo() {\r\n  future.get(5, Timeunit.SECONDS);\r\n // ...\r\n}\r\n```\r\n\r\nSuppose this test is slow or possibly flaky.   Just incrementing the `timeout` to be higher won't work because the get is still going to fail early.  Modifying the call to be `future.get(Integer.MAX_VALUE, TimeUnit.SECONDS)` is cumbersome and doesn't convey the intent of the test.  As a strawman API, I would suggest something like the following:\r\n\r\n```java\r\n@Rule public final Timeout timeout = Timeout.seconds(5);\r\n\r\n@Test public void foo() {\r\n  future.get(timeout.getRemaining(Timeunit.SECONDS), Timeunit.SECONDS);\r\n // ...\r\n}\r\n```\r\n\r\nIt would be okay for this to not be exactly accurate (as compared with \"deadlines\").  It's more about letting the reader know that the waiting will happen to the end of the test, rather than some seemingly arbitrary duration.","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1492/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1492/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1489","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1489/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1489/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1489/events","html_url":"https://github.com/junit-team/junit4/issues/1489","id":270900496,"node_id":"MDU6SXNzdWUyNzA5MDA0OTY=","number":1489,"title":"History of API changes for JUnit","user":{"login":"lvc","id":1517837,"node_id":"MDQ6VXNlcjE1MTc4Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1517837?v=4","gravatar_id":"","url":"https://api.github.com/users/lvc","html_url":"https://github.com/lvc","followers_url":"https://api.github.com/users/lvc/followers","following_url":"https://api.github.com/users/lvc/following{/other_user}","gists_url":"https://api.github.com/users/lvc/gists{/gist_id}","starred_url":"https://api.github.com/users/lvc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lvc/subscriptions","organizations_url":"https://api.github.com/users/lvc/orgs","repos_url":"https://api.github.com/users/lvc/repos","events_url":"https://api.github.com/users/lvc/events{/privacy}","received_events_url":"https://api.github.com/users/lvc/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2017-11-03T07:55:49Z","updated_at":"2017-11-05T15:42:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nI'd like to share report on API changes and backward compatibility for the JUnit library: https://abi-laboratory.pro/java/tracker/timeline/junit/\r\n\r\nReport for JUnit5: https://abi-laboratory.pro/java/tracker/timeline/junit-jupiter-api/\r\n\r\nBC — binary compatibility\r\nSC — source compatibility\r\n\r\nThe report is generated according to the article https://wiki.eclipse.org/Evolving_Java-based_APIs_2 by the https://github.com/lvc/japi-tracker tool.\r\n\r\nHope it will be helpful for users and maintainers of the library.\r\n\r\nThank you.\r\n\r\n![junit-1](https://user-images.githubusercontent.com/1517837/32363145-d701da1a-c07e-11e7-8377-d1e618114a85.png)\r\n\r\n![junit-2](https://user-images.githubusercontent.com/1517837/32363144-d6e69624-c07e-11e7-84a4-4d6519222bc9.png)","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1489/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1489/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1488","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1488/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1488/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1488/events","html_url":"https://github.com/junit-team/junit4/issues/1488","id":268485896,"node_id":"MDU6SXNzdWUyNjg0ODU4OTY=","number":1488,"title":"JUnit 4.12 converts null string parameters to \"null\"s","user":{"login":"MGhareeb32","id":1168334,"node_id":"MDQ6VXNlcjExNjgzMzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1168334?v=4","gravatar_id":"","url":"https://api.github.com/users/MGhareeb32","html_url":"https://github.com/MGhareeb32","followers_url":"https://api.github.com/users/MGhareeb32/followers","following_url":"https://api.github.com/users/MGhareeb32/following{/other_user}","gists_url":"https://api.github.com/users/MGhareeb32/gists{/gist_id}","starred_url":"https://api.github.com/users/MGhareeb32/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MGhareeb32/subscriptions","organizations_url":"https://api.github.com/users/MGhareeb32/orgs","repos_url":"https://api.github.com/users/MGhareeb32/repos","events_url":"https://api.github.com/users/MGhareeb32/events{/privacy}","received_events_url":"https://api.github.com/users/MGhareeb32/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2017-10-25T17:38:25Z","updated_at":"2021-01-02T21:01:24Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When running the following test with `junitLibVersion = \"4.12\"`:\r\n\r\n```java\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Parameterized;\r\nimport org.junit.runners.Parameterized.Parameters;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n@RunWith(Parameterized.class)\r\npublic class TestNull {\r\n\r\n    private final String mInput;\r\n\r\n    @Parameters\r\n    public static Iterable<Object[]> data() {\r\n        return Arrays.asList(new Object[][] { {null} });\r\n    }\r\n\r\n    public TestNull(String input) {\r\n        mInput = input;\r\n    }\r\n    @Test\r\n    public void test() {\r\n        assertEquals(null, mInput);\r\n    }\r\n}\r\n```\r\n\r\nI get the following assertion failure:\r\n\r\n```\r\njava.lang.AssertionError: expected: null<null> but was: java.lang.String<null>\r\nat org.junit.Assert.fail(Assert.java:88)\r\nat org.junit.Assert.failNotEquals(Assert.java:834)\r\nat org.junit.Assert.assertEquals(Assert.java:118)\r\nat org.junit.Assert.assertEquals(Assert.java:144)\r\nat com.myapp.android.regression.TestNull.test(TestNull.java:27)\r\nat java.lang.reflect.Method.invoke(Native Method)\r\nat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\nat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\nat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\nat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat org.junit.runners.Suite.runChild(Suite.java:128)\r\nat org.junit.runners.Suite.runChild(Suite.java:27)\r\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat org.junit.runners.Suite.runChild(Suite.java:128)\r\nat org.junit.runners.Suite.runChild(Suite.java:27)\r\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\nat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\r\nat android.support.test.internal.runner.TestExecutor.execute(TestExecutor.java:59)\r\nat android.support.test.runner.AndroidJUnitRunner.onStart(AndroidJUnitRunner.java:262)\r\nat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1879)\r\n```","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1488/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1488/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1432","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1432/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1432/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1432/events","html_url":"https://github.com/junit-team/junit4/issues/1432","id":215198854,"node_id":"MDU6SXNzdWUyMTUxOTg4NTQ=","number":1432,"title":"Asserts for CharSequence contents","user":{"login":"sabi0","id":11509875,"node_id":"MDQ6VXNlcjExNTA5ODc1","avatar_url":"https://avatars.githubusercontent.com/u/11509875?v=4","gravatar_id":"","url":"https://api.github.com/users/sabi0","html_url":"https://github.com/sabi0","followers_url":"https://api.github.com/users/sabi0/followers","following_url":"https://api.github.com/users/sabi0/following{/other_user}","gists_url":"https://api.github.com/users/sabi0/gists{/gist_id}","starred_url":"https://api.github.com/users/sabi0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sabi0/subscriptions","organizations_url":"https://api.github.com/users/sabi0/orgs","repos_url":"https://api.github.com/users/sabi0/repos","events_url":"https://api.github.com/users/sabi0/events{/privacy}","received_events_url":"https://api.github.com/users/sabi0/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null},{"id":39198624,"node_id":"MDU6TGFiZWwzOTE5ODYyNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/up-for-grabs","name":"up-for-grabs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2017-03-18T14:50:36Z","updated_at":"2017-10-04T20:04:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"A lot of APIs in Android deal with `CharSequence`. And using `assertEquals()` with `CharSequence` arguments is cumbersome and unstable. One has to reproduce the exact same type which might change later.\r\nAnd sometimes it just does not work (e.g. `StringBuilder` uses default `Object.equals()` implementation).\r\n\r\nTherefore I would suggest to add new methods like\r\n`assertContentEquals(CharSequence expected, CharSequence actual)`\r\nthat would compare just the content, irregardless of the type it's been wrapped into.\r\n\r\n(Pull request #949 was trying to do that with generic `assertEquals()` which is indeed questionable)\r\n\r\nI can create a pull request if you find this proposal reasonable.","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1432/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1432/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1416","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1416/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1416/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1416/events","html_url":"https://github.com/junit-team/junit4/issues/1416","id":205241161,"node_id":"MDU6SXNzdWUyMDUyNDExNjE=","number":1416,"title":"Throw ComparisonFailure rather than AssertionError for all equals methods","user":{"login":"liamsharp","id":6429288,"node_id":"MDQ6VXNlcjY0MjkyODg=","avatar_url":"https://avatars.githubusercontent.com/u/6429288?v=4","gravatar_id":"","url":"https://api.github.com/users/liamsharp","html_url":"https://github.com/liamsharp","followers_url":"https://api.github.com/users/liamsharp/followers","following_url":"https://api.github.com/users/liamsharp/following{/other_user}","gists_url":"https://api.github.com/users/liamsharp/gists{/gist_id}","starred_url":"https://api.github.com/users/liamsharp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liamsharp/subscriptions","organizations_url":"https://api.github.com/users/liamsharp/orgs","repos_url":"https://api.github.com/users/liamsharp/repos","events_url":"https://api.github.com/users/liamsharp/events{/privacy}","received_events_url":"https://api.github.com/users/liamsharp/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2017-02-03T19:00:51Z","updated_at":"2021-01-04T16:48:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'd like to propose a change that I think would make the `assertEquals` methods easier to work with - apologies if I've missed something.\r\n\r\nWhen a test fails in Eclipse with `assertEquals()` and the parameters are not strings, an `AssertionError` is thrown. This gives a backtrace, but to see what was not equal, I have to copy and paste out the error into another editor to read the top line. Here's a screen shot:\r\n\r\n<img width=\"229\" alt=\"screen shot 2017-02-03 at 18 49 26\" src=\"https://cloud.githubusercontent.com/assets/6429288/22604053/a6ec2e5c-ea41-11e6-9274-dc3fff9e3545.png\">\r\n \r\nIt would be great if could throw a `ComparisonFailure`. I'd still see pretty much the same failure trace:\r\n\r\n<img width=\"460\" alt=\"screen shot 2017-02-03 at 18 52 05\" src=\"https://cloud.githubusercontent.com/assets/6429288/22604115/fbc98596-ea41-11e6-9ffc-4c00be615206.png\">\r\n\r\nbut I'd be about to double click it/click the \"Compare with Expected Results\" button and get this:\r\n\r\n<img width=\"746\" alt=\"screen shot 2017-02-03 at 18 52 20\" src=\"https://cloud.githubusercontent.com/assets/6429288/22604142/17998bb8-ea42-11e6-8278-4b38c78592b0.png\">\r\n\r\nwhich would be a tremendous help to my work flow. \r\n\r\nWhen looking into this I did think surely Eclipse could do something better, but I don't think it can. An `AssertionError` doesn't have the expected and actual results. They are thrown away by the call to `failNotEquals` which calls 'format' that then concatenates a single string to pass to `AssertionError`\r\n\r\nSo looking at `assertEquals` for `Object`'s could we just do away with the `instanceof` checks?\r\n\r\n```\r\npublic static void assertEquals(String message, Object expected,\r\n            Object actual) {\r\n        if (equalsRegardingNull(expected, actual)) {\r\n            return;\r\n        }\r\n        if (expected instanceof String && actual instanceof String) {\r\n            String cleanMessage = message == null ? \"\" : message;\r\n            throw new ComparisonFailure(cleanMessage, (String) expected,\r\n                    (String) actual);\r\n        } else {\r\n            failNotEquals(message, expected, actual);\r\n        }\r\n    }\r\n```\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1416/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1416/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1350","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1350/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1350/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1350/events","html_url":"https://github.com/junit-team/junit4/issues/1350","id":167244810,"node_id":"MDU6SXNzdWUxNjcyNDQ4MTA=","number":1350,"title":"Code base doesn't comply with JUnit's own coding style","user":{"login":"PeterWippermann","id":12392888,"node_id":"MDQ6VXNlcjEyMzkyODg4","avatar_url":"https://avatars.githubusercontent.com/u/12392888?v=4","gravatar_id":"","url":"https://api.github.com/users/PeterWippermann","html_url":"https://github.com/PeterWippermann","followers_url":"https://api.github.com/users/PeterWippermann/followers","following_url":"https://api.github.com/users/PeterWippermann/following{/other_user}","gists_url":"https://api.github.com/users/PeterWippermann/gists{/gist_id}","starred_url":"https://api.github.com/users/PeterWippermann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PeterWippermann/subscriptions","organizations_url":"https://api.github.com/users/PeterWippermann/orgs","repos_url":"https://api.github.com/users/PeterWippermann/repos","events_url":"https://api.github.com/users/PeterWippermann/events{/privacy}","received_events_url":"https://api.github.com/users/PeterWippermann/received_events","type":"User","site_admin":false},"labels":[{"id":409633009,"node_id":"MDU6TGFiZWw0MDk2MzMwMDk=","url":"https://api.github.com/repos/junit-team/junit4/labels/cleanup","name":"cleanup","color":"bfd4f2","default":false,"description":null}],"state":"open","locked":false,"assignee":{"login":"kcooney","id":478190,"node_id":"MDQ6VXNlcjQ3ODE5MA==","avatar_url":"https://avatars.githubusercontent.com/u/478190?v=4","gravatar_id":"","url":"https://api.github.com/users/kcooney","html_url":"https://github.com/kcooney","followers_url":"https://api.github.com/users/kcooney/followers","following_url":"https://api.github.com/users/kcooney/following{/other_user}","gists_url":"https://api.github.com/users/kcooney/gists{/gist_id}","starred_url":"https://api.github.com/users/kcooney/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kcooney/subscriptions","organizations_url":"https://api.github.com/users/kcooney/orgs","repos_url":"https://api.github.com/users/kcooney/repos","events_url":"https://api.github.com/users/kcooney/events{/privacy}","received_events_url":"https://api.github.com/users/kcooney/received_events","type":"User","site_admin":false},"assignees":[{"login":"kcooney","id":478190,"node_id":"MDQ6VXNlcjQ3ODE5MA==","avatar_url":"https://avatars.githubusercontent.com/u/478190?v=4","gravatar_id":"","url":"https://api.github.com/users/kcooney","html_url":"https://github.com/kcooney","followers_url":"https://api.github.com/users/kcooney/followers","following_url":"https://api.github.com/users/kcooney/following{/other_user}","gists_url":"https://api.github.com/users/kcooney/gists{/gist_id}","starred_url":"https://api.github.com/users/kcooney/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kcooney/subscriptions","organizations_url":"https://api.github.com/users/kcooney/orgs","repos_url":"https://api.github.com/users/kcooney/repos","events_url":"https://api.github.com/users/kcooney/events{/privacy}","received_events_url":"https://api.github.com/users/kcooney/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2016-07-24T17:48:44Z","updated_at":"2016-11-01T22:17:13Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I'd like to suggest to reformat all code under `org.junit.*` once to meet the defined [formatting guidelines](https://github.com/junit-team/junit4/blob/master/CODING_STYLE.txt).\n\nAt the moment not all the files are formatted accordingly to that standard. This causes problems for contributors - especially in pull request. If you format the code you get a lot of extraneous diffs - just because of the reformatting - in addition to your actual changes.\n\nI think it's not too late to do this formatting.\nRegarding existing PRs that tried to preserve the outdated styling: They would get extraneous diffs then of course, but if they apply the new format as well everything would be fine again. In addition, I think many of PRs are dead anyway, since many of them haven't seen any updates for months or even years.\n\nAs a result, contributing to JUnit 4 and reviewing the changes by the core team should become easier in the future.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1350/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1338","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1338/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1338/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1338/events","html_url":"https://github.com/junit-team/junit4/issues/1338","id":164793551,"node_id":"MDU6SXNzdWUxNjQ3OTM1NTE=","number":1338,"title":"Allow functionality of Suite, Parameterized and BlockJUnit4ClassRunnerWithParameters to be reused in custom Runners","user":{"login":"PeterWippermann","id":12392888,"node_id":"MDQ6VXNlcjEyMzkyODg4","avatar_url":"https://avatars.githubusercontent.com/u/12392888?v=4","gravatar_id":"","url":"https://api.github.com/users/PeterWippermann","html_url":"https://github.com/PeterWippermann","followers_url":"https://api.github.com/users/PeterWippermann/followers","following_url":"https://api.github.com/users/PeterWippermann/following{/other_user}","gists_url":"https://api.github.com/users/PeterWippermann/gists{/gist_id}","starred_url":"https://api.github.com/users/PeterWippermann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PeterWippermann/subscriptions","organizations_url":"https://api.github.com/users/PeterWippermann/orgs","repos_url":"https://api.github.com/users/PeterWippermann/repos","events_url":"https://api.github.com/users/PeterWippermann/events{/privacy}","received_events_url":"https://api.github.com/users/PeterWippermann/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2016-07-11T09:19:17Z","updated_at":"2016-10-04T20:07:35Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"As of version 4.12 there is much encapsulated functionality in `Suite`, `Parameterized` and `BlockJUnit4ClassRunnerWithParameters`, which is hidden in private methods and not available for custom implementations of `Runner` for reuse.\n\nI find it very interesting to implement a parameterized Suite. But since accessing the code of the already existing classes is not possible, I'd have to copy a lot of private methods from there. Instead I'd like to **refactor the classes and make this functionality publicly available** via `static` methods, e.g. from Parameterized: `public static allParameters(TestClass)`.\n\nIf I prepare a pull request for these changes, would it be accepted by the team? Does is make sense at all in regard to the upcoming release of JUnit5? When will JUnit 4.13 be released?\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1338/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1338/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1317","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1317/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1317/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1317/events","html_url":"https://github.com/junit-team/junit4/issues/1317","id":157917636,"node_id":"MDU6SXNzdWUxNTc5MTc2MzY=","number":1317,"title":"Filter.matchMethodDescription(Description) has confusing behavior","user":{"login":"Reissner","id":5049888,"node_id":"MDQ6VXNlcjUwNDk4ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5049888?v=4","gravatar_id":"","url":"https://api.github.com/users/Reissner","html_url":"https://github.com/Reissner","followers_url":"https://api.github.com/users/Reissner/followers","following_url":"https://api.github.com/users/Reissner/following{/other_user}","gists_url":"https://api.github.com/users/Reissner/gists{/gist_id}","starred_url":"https://api.github.com/users/Reissner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Reissner/subscriptions","organizations_url":"https://api.github.com/users/Reissner/orgs","repos_url":"https://api.github.com/users/Reissner/repos","events_url":"https://api.github.com/users/Reissner/events{/privacy}","received_events_url":"https://api.github.com/users/Reissner/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2016-06-01T14:14:47Z","updated_at":"2016-07-17T17:47:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I think the documentation of this method is misleadinig. \nWhat it really does is: \nIf desiredDescription does not describe a single test, no test is executed at all. \nIf desiredDescription describes a single test, then each description is run containing this single test. \n\nI think this is not what is documented and also it is not what is wanted: \nit is used in \n\n Request.filterWith(final Description desiredDescription)\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1317/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1314","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1314/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1314/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1314/events","html_url":"https://github.com/junit-team/junit4/issues/1314","id":157654490,"node_id":"MDU6SXNzdWUxNTc2NTQ0OTA=","number":1314,"title":"more javadocs would be helpful","user":{"login":"Reissner","id":5049888,"node_id":"MDQ6VXNlcjUwNDk4ODg=","avatar_url":"https://avatars.githubusercontent.com/u/5049888?v=4","gravatar_id":"","url":"https://api.github.com/users/Reissner","html_url":"https://github.com/Reissner","followers_url":"https://api.github.com/users/Reissner/followers","following_url":"https://api.github.com/users/Reissner/following{/other_user}","gists_url":"https://api.github.com/users/Reissner/gists{/gist_id}","starred_url":"https://api.github.com/users/Reissner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Reissner/subscriptions","organizations_url":"https://api.github.com/users/Reissner/orgs","repos_url":"https://api.github.com/users/Reissner/repos","events_url":"https://api.github.com/users/Reissner/events{/privacy}","received_events_url":"https://api.github.com/users/Reissner/received_events","type":"User","site_admin":false},"labels":[{"id":39198624,"node_id":"MDU6TGFiZWwzOTE5ODYyNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/up-for-grabs","name":"up-for-grabs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2016-05-31T12:00:11Z","updated_at":"2016-08-16T07:44:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I use JUnit for a while. \nI also wrote a graphical wrapper for it, because i do not use the usual ide but emacs with jdee. \nFor people like me, more detailed javadocs would be helpful. \n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1314/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1307","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1307/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1307/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1307/events","html_url":"https://github.com/junit-team/junit4/issues/1307","id":156520128,"node_id":"MDU6SXNzdWUxNTY1MjAxMjg=","number":1307,"title":"JUnit enhancements for Android and other environments","user":{"login":"paulduffin","id":4938819,"node_id":"MDQ6VXNlcjQ5Mzg4MTk=","avatar_url":"https://avatars.githubusercontent.com/u/4938819?v=4","gravatar_id":"","url":"https://api.github.com/users/paulduffin","html_url":"https://github.com/paulduffin","followers_url":"https://api.github.com/users/paulduffin/followers","following_url":"https://api.github.com/users/paulduffin/following{/other_user}","gists_url":"https://api.github.com/users/paulduffin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulduffin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulduffin/subscriptions","organizations_url":"https://api.github.com/users/paulduffin/orgs","repos_url":"https://api.github.com/users/paulduffin/repos","events_url":"https://api.github.com/users/paulduffin/events{/privacy}","received_events_url":"https://api.github.com/users/paulduffin/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2016-05-24T14:19:08Z","updated_at":"2016-07-17T17:48:15Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I have been working on Android for a while now and have spent a lot of that time working on various parts of the Android testing infrastructure. As part of that work I noticed a few issues with the support that JUnit has for integrating into different environments. In order to address those limitations I would like to make a number of changes:\n- Make JUnit 3 tests run more like JUnit 4 tests, use Statement and ParentRunner where possible and fallback to JUnit38ClassRunner only when required to maintain backwards compatibility.\n- Add a rule that is generic like TestRule but is passed the object like FrameworkMethod to make it as widely and generally useful as possible; call it TargetedTestRule\n- Add support for global parameters, call them RunnerParams that can be used to customize and configure JUnit behavior.\n- Add support for globally configured TargetedTestRule to be applied to all tests being run.\n\nOne thing to bear in mind is that the large majority of Android tests are JUnit 3 tests, i.e. extend TestCase. I'm talking around ten thousand classes, with hundreds of thousands of individuals tests. Many tests are imported from upstream sources and so modification of the tests themselves is not a practical solution.\n# Android Testing Overview\n\nAndroid testing has a number of features not provided by JUnit:\n1. A global default timeout that is used for any test that does not have its own @Test(timeout) set.\n2. A dry run mode where events are fired as if the tests were run and passed but without actually running the tests.\n3. Injection of environment specific objects into tests.\n4. Lazy creation of TestCase objects so that they are created just before the test is started.\n5. Early cleanup of the TestCase objects so that they are released just after the test has finished.\n6. Defer validation of methods until as late as possible. This ensures that as many methods as possible are run. JUnit will not run any methods in a JUnit 4 test class if even one is invalid.\n7. The global timeout is a pragmatic solution. A lot of the tests that are run do not belong to Android but rather they are pulled from an upstream source and there is just not enough time to go through them all and specify a timeout. The tests are also run within what are essentially untrusted environments as it is the passing of the tests that make the environment trustworthy. Having a global timeout can ensure that test runs complete in a reasonable amount of time which is important when trying to detect and debug lots of issues.\n\nThe dry run mode is used to allow the test runner to create a list of all the tests that will be run in advance so that it can track the run's progress, restart if necessary, etc. It's possible that it could get the same result by traversing the Description but custom implementations of junit.framework.Test could cause problems.\n\nThe annotation driven injection into JUnit 4 classes was removed because they could not get it to work consistently across all tests. However, it is still done for JUnit 3 tests. Instead they use a global registry which is nowhere near as clean as using method injection.\n\nThe lazy creation and early release are important to minimise the size of the memory footprint over the lifetime of the test run. In some cases not having it will result in OOM and fail the whole run. It's not an issue for JUnit 4 based tests as the lifespan of test objects is already limited to the duration of a single test.\n\nThe AndroidJUnitRunner (AJUR) class is the main entry point for all this code and it uses the AndroidRunnerBuilder (extends AllDefaultPossibilitiesBuilder) indirectly to customize the JUnit behavior. The code has to jump through an awful lot of hoops in order to implement the above capabilities.\n# Vogar\n\nThere is another tool Vogar, which is a little lower level and used by developers of the core Android libraries. At the moment it has its own JUnit implementation (that implements a subset of JUnit 3/4 in a slightly different way). The main reason that custom implementation was created was to do lazy creation/early release of the TestCase objects when running JUnit 3.8. I am working on moving it over to using standard JUnit 4.10.\n# Other users\n\nThere are more users that want global rules or at least capabilities that can easily be implemented using global rules. e.g.\n- Gradle asked for a global timeout (https://discuss.gradle.org/t/timeouts-in-junit-tests/318).\n- Global JUnit rules revisited (https://github.com/junit-team/junit4/issues/1219) - has details of other requests for global rules.\n\nBased off those discussions I know that the JUnit team are loathe to add support for things like global timeout, global rules and while I can understand your reasoning I'm hoping that I can convince you that pragmatically they are necessary.\n# Global Rules\n\nThe first three features of the Android testing infrastructure can be easily supported once global rules are available.\n1. The Timeout rule already provides a test class specific timeout.\n2. A dry run can simply be a rule that returns a Statement that does nothing.\n3. Injection can be done by a TargetedTestRule as it would have access to the test object.\n\nThe remaining changes will require specific changes within JUnit and the last one cannot be done by default, it would have to be a configurable option.\n\nThese changes would allow AJUR (and other users) to customise JUnit behavior a lot more easily, more consistently and more generally that it can at the moment. e.g. It cannot handle any custom Runners that it does not yet have explicit support for because there is no common way to request a timeout or dry run. A built in global rule mechanism would make it possible for providers of custom Runner classes to integrate properly into the Android testing environment.\n\nNone of these changes is intended to change the behavior of tests, other than as required to ensure that the tests run correctly. Similarly, they should not prevent tests being run inside an IDE unless they cannot be run inside an IDE. e.g. A test that requires say a real instance of android.content.Context to be supplied cannot run directly within an IDE, it must run within an Android environment, which could itself run within an IDE. If global rules/parameters are supported then IDEs will add support for configuring their test runners in the appropriate way.\n# Global Parameters\n\nGlobal parameters will make it possible to change JUnit behavior in ways that are backwardly incompatible by making the new behavior optional which gives the junit team a lot more flexibility in what and how they do it.\n# JUnit 5\n\nI understand that JUnit 4 is largely in maintenance mode and has no new features planned and that the focus in on JUnit 5. However, there is no way that we can move to JUnit 5 anytime soon (I'm not sure if it can actually run JUnit 3 tests) and we have a huge amount of testing infrastructure code that depends on JUnit 4. These changes are just part of a (for now) speculative plan to iteratively improve Android's testing infrastructure.\n1. Switch Vogar over to depending on JUnit rather than have it roll its own, that will allow us to use JUnit 4 tests, including many tests from upstream that are not currently supported.\n2. Upgrade version of JUnit that Android depends on from 4.10 to 4.12.\n3. Migrate tests off JUnit 3 to JUnit 4 - specifically to allow use of TestRules in order to reuse the logic and make the tests more robust.\n4. Allow tests to use custom Runners, such as JUnit Params; at the moment they are limited to the ones explicitly supported by AJUR itself, using other ones will result in them at the very least being run twice.\n\nIf it helps I'd be quite happy to do the grunt work of maintaining JUnit 4.x along with these changes.\n# Current Changes\n\nI have done most of the prototyping work already, see https://github.com/paulduffin/junit/tree/wip-junit-enhancements for details. Obviously, nothing that I've done is set in stone.\n\nThey can roughly be grouped into the following:\n- Add Parameterized high level tests to allow the 'runner' to be supplied as a parameter allowing easy verification of new ways to run the tests and changes in the runner structure.\n- Avoid using JUnit38ClassRunner where possible. Instead convert TestCase/TestSuite instances directly into Runner instances that use Statement. JU38CR is only used for those tests whose behavior depends on a TestResult.\n- Add a global RunnerParams object for passing a type safe, immutable collection of options into the runners. This opens up the possibility for changing the behavior of JUnit without breaking existing users.\n- Leverage the RunnerParams to allow some aspects of JUnit's behavior to be customised. e.g. defer method validation until methods are invoked.\n- Add a new TargetedTestRule, abstract and generally applicable like TestRule but passed a reference to the test object like FrameworkMethod. Add TargetedRuleChain which can take both TargetedTestRule and TestRule.\n- Add a global option to specify a TargetedTestRule and apply that to all Statements, including the ones created for JUnit 3 based tests. JU38CR will fail if an attempt is made to use it in combination with a non-identity TargetedTestRule because the rules cannot be applied to custom Tests and so it would not be safe to just run the tests.\n\nBeware that I often rebase/force push to clean up the history and fix issues that I find while working on later changes.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1307/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1307/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1298","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1298/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1298/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1298/events","html_url":"https://github.com/junit-team/junit4/issues/1298","id":154705579,"node_id":"MDU6SXNzdWUxNTQ3MDU1Nzk=","number":1298,"title":"Unit test UnsuccessfulWithDataPointFields#reportBadParams","user":{"login":"alb-i986","id":2717169,"node_id":"MDQ6VXNlcjI3MTcxNjk=","avatar_url":"https://avatars.githubusercontent.com/u/2717169?v=4","gravatar_id":"","url":"https://api.github.com/users/alb-i986","html_url":"https://github.com/alb-i986","followers_url":"https://api.github.com/users/alb-i986/followers","following_url":"https://api.github.com/users/alb-i986/following{/other_user}","gists_url":"https://api.github.com/users/alb-i986/gists{/gist_id}","starred_url":"https://api.github.com/users/alb-i986/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alb-i986/subscriptions","organizations_url":"https://api.github.com/users/alb-i986/orgs","repos_url":"https://api.github.com/users/alb-i986/repos","events_url":"https://api.github.com/users/alb-i986/events{/privacy}","received_events_url":"https://api.github.com/users/alb-i986/received_events","type":"User","site_admin":false},"labels":[{"id":409633009,"node_id":"MDU6TGFiZWw0MDk2MzMwMDk=","url":"https://api.github.com/repos/junit-team/junit4/labels/cleanup","name":"cleanup","color":"bfd4f2","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-05-13T12:56:48Z","updated_at":"2016-07-17T17:50:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"https://github.com/junit-team/junit4/blob/master/src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java#L63\n\n```\n    @RunWith(Theories.class)\n    public static class DoesntUseParams {\n        @DataPoint\n        public static int ONE = 1;\n\n        @Theory\n        public void everythingIsZero(int x, int y) {\n            assertThat(2, is(3));\n        }\n    }\n\n    @Test\n    public void reportBadParams() throws Exception {\n        assertThat(testResult(DoesntUseParams.class),\n                hasSingleFailureContaining(\"everythingIsZero(\\\"1\\\" <from ONE>, \\\"1\\\" <from ONE>)\"));\n    }\n```\n\nThe test is called \"reportBadParams\", which I guess is talking about the fact that the theory method `everythingIsZero` is not using the params `x` and `y`.\nBut it's not asserting anything about that specific fact.\n\nActually Theories doesn't seem to have any validation logic like that at all.\n\nIf you run the class DoesntUseParams, the theory fails with `Caused by: java.lang.AssertionError: Expected: is <3>     but: was <2>`\n\n```\norg.junit.experimental.theories.internal.ParameterizedAssertionError: everythingIsZero(\"1\" <from ONE>, \"1\" <from ONE>)\n\n    at org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(Theories.java:288)\n    at org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate(Theories.java:237)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(Theories.java:260)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:204)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(Theories.java:212)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:202)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(Theories.java:212)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:202)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.evaluate(Theories.java:187)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:88)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:58)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\nCaused by: java.lang.AssertionError: \nExpected: is <3>\n     but: was <2>\n    at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n    at org.junit.Assert.assertThat(Assert.java:960)\n    at org.junit.Assert.assertThat(Assert.java:925)\n    at org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$DoesntUseParams.everythingIsZero(UnsuccessfulWithDataPointFields.java:58)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:52)\n    at org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate(Theories.java:274)\n    at org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate(Theories.java:232)\n    ... 21 more\n```\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1298/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1298/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1253","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1253/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1253/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1253/events","html_url":"https://github.com/junit-team/junit4/issues/1253","id":139581264,"node_id":"MDU6SXNzdWUxMzk1ODEyNjQ=","number":1253,"title":"Improve ErrorReportingRunner, make it support Filterable, accept a class name and support better test names","user":{"login":"paulduffin","id":4938819,"node_id":"MDQ6VXNlcjQ5Mzg4MTk=","avatar_url":"https://avatars.githubusercontent.com/u/4938819?v=4","gravatar_id":"","url":"https://api.github.com/users/paulduffin","html_url":"https://github.com/paulduffin","followers_url":"https://api.github.com/users/paulduffin/followers","following_url":"https://api.github.com/users/paulduffin/following{/other_user}","gists_url":"https://api.github.com/users/paulduffin/gists{/gist_id}","starred_url":"https://api.github.com/users/paulduffin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paulduffin/subscriptions","organizations_url":"https://api.github.com/users/paulduffin/orgs","repos_url":"https://api.github.com/users/paulduffin/repos","events_url":"https://api.github.com/users/paulduffin/events{/privacy}","received_events_url":"https://api.github.com/users/paulduffin/received_events","type":"User","site_admin":false},"labels":[{"id":79994,"node_id":"MDU6TGFiZWw3OTk5NA==","url":"https://api.github.com/repos/junit-team/junit4/labels/needs%20more%20info","name":"needs more info","color":"4ae6c7","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-03-09T13:46:53Z","updated_at":"2016-07-22T18:17:49Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"ErrorReportingRunner does not support Filterable which means it doesn't play well with Filters that are trying to remove known issues. Filters often ignore descriptions that have children so that they do not filter out whole suites of tests and instead rely on a Runner that has children to support Filterable. ErrorReportingRunner has children but doesn't support Filterable so it is impossible to exclude specific problems.\n\nAll its children (in its Description) are called initializationError, that makes it impossible to filter out specific error messages.\n\nIt expects a Class<?> as its parameter which means that it cannot be used to handle exceptions resulting from a failure to load a class. It should also take a String parameter.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1253/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1219","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1219/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1219/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1219/events","html_url":"https://github.com/junit-team/junit4/issues/1219","id":117338790,"node_id":"MDU6SXNzdWUxMTczMzg3OTA=","number":1219,"title":"Global JUnit rules revisited","user":{"login":"tburny","id":1007327,"node_id":"MDQ6VXNlcjEwMDczMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1007327?v=4","gravatar_id":"","url":"https://api.github.com/users/tburny","html_url":"https://github.com/tburny","followers_url":"https://api.github.com/users/tburny/followers","following_url":"https://api.github.com/users/tburny/following{/other_user}","gists_url":"https://api.github.com/users/tburny/gists{/gist_id}","starred_url":"https://api.github.com/users/tburny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tburny/subscriptions","organizations_url":"https://api.github.com/users/tburny/orgs","repos_url":"https://api.github.com/users/tburny/repos","events_url":"https://api.github.com/users/tburny/events{/privacy}","received_events_url":"https://api.github.com/users/tburny/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null},{"id":6156902,"node_id":"MDU6TGFiZWw2MTU2OTAy","url":"https://api.github.com/repos/junit-team/junit4/labels/rules","name":"rules","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2015-11-17T11:52:02Z","updated_at":"2018-04-17T04:31:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"A word in advance: I never have written such an extensive request in such a major project before, so please bear with me. :) My goal was to provide a comprehensive background as well as concrete suggestions for a solution. I hope that does not seem impolite :)\n\nDue to the topic dating back as far as 2009, I tried to sum up previous discussions, so this issue has become a bit lengthy (sorry :/).\n\nTLDR:\n-   some users in the JUnit community would love to have global rules\n-   I coin these global rules _Guards_, to differentiate from normal `TestRule`s, `RunListener`s and `Runner`s which mostly are scoped to test class level only\n-   Guards should be deactivated by default, with a global opt-in so they don't have to be declared inside every test class.\n-   Guards should not cause too much friction with existing code or tools (e.g. Maven Surefire)\n-   I would like to contribute time and code to solve the problem (as a prototype at first, then as a real solution)\n-   Your feedback is very much appreciated :)\n# Problem setting\n\nAt our company we want to run a set of global checks against each test to ensure it complies with company standards. If not, the according tests should fail.\n\nSome actual use cases are:\n-   nothing is printed to standard error\n-   our dependency injection container has been shut down properly in `@After(Class)#tearDown()`).\n\nThere are more cases I can name on demand, but I wanted to keep the list short. All these cases have in common that they are some sort of global `TestRule`. In some cases it's not that obvious that a rule has been violated or someone simply forgot a line of code(nobody is perfect).\n# History\n\n\"Global rules\" have been [initially requested in 2009 on the JUnit mailing list](https://groups.yahoo.com/neo/groups/junit/conversations/topics/22133), which resulted in [#69 Global rules](https://github.com/junit-team/junit/issues/69). This discussion then has been continued in [#444 JUnit should have an exhaustive listener framework](https://github.com/junit-team/junit/issues/444) in 2012. I will pick up some suggestions from these issues far further below. Besides the discussion of other use cases, @BenRomberg has been making some important arguments for having such a feature.\n\nSome of the main arguments **against** global rules have been\n-   integration with other tools that use their custom runners, like Maven or other IDEs\n-   Tests should not fail due to some \"obscure\" magic (package level annotations, junit.properties).\n-   The same could be achieved with: `TestListener`, `Runner`, ...\n\nHowever it seems a part of the community is asking for a long time. There has been a lot of discussion and I guess that JUnit also evolved much more in the past 3 years (hence \"revisited\").\n# Tried approaches\n\nWe tried to solve the \"no standard error output\" and the \"container is always destroyed problem\". These are basically additional assertions/rules after the tests in a test class are run.\n-   For the first, we tried using a JUnit `RunListener` configured into Maven Surefire. However the `RunListener` is removed from the test run if an exception (such an `AssertionError` thrown by `Assert.*` methods) is thrown. My colleague @globalworming [asked on Stackoverflow](http://stackoverflow.com/questions/33207996/junit-runlistener-is-removed-on-fail) (suggesting using a custom `Runner`) and [the JUnit mailing list](https://groups.yahoo.com/neo/groups/junit/conversations/topics/24713), however there was no global solution. As stated by @dsaff in #444 `RunListener`s are read-only and I totally agree this should stay the way it is.\n-   Using a custom runner would not work with `Parameterized` tests(which also requires `@RunWith(Parameterized.class)`) and adding a rule (a set of rules) to every single class is not an option.\n-   Using a \"company TestRule\" which delegates to all other rules we need would still require changing every test class.\n# Suggestion\n\nWith hundreds of test classes in mind, changing every single one of them is no viable option.\n\nTo distinguish from existing terms (such as runner, listener or rule) which are declared in classes, I would like to introduce the term **Guard**. Here, imagine a historic city with solid high walls and one or more guards standing in front. These are checking on people (tests) going in(`@Before`) and out(`@After`). Any people which fail their criteria will be put to jail(`AssertionError`).\n\nBy default there are no guards in front of the city and everyone is allowed in and out as they please (current JUnit), although there might be laws in the city (->`TestRule`) for certain groups of people (test classes). You can then opt-in to place Guards in front of your city gates.\n\nSome folk tend to come to the city and, as they leave, they are shouting mean things. This is a very polite city, so we tell the guards to put these visitors into jail for their offensive behaviour. That is, we ensure there is no output on standard error. (I can also provide a more comprehensive example, but I left it out to keep things short)\n\nMy intention using this analogy was to have an abstract, extensible story for this problem. This takes the focus away from the details towards the main problem.\n## How to implement this?\n\nI'm not an JUnit expert as many of you are, so I would be glad for ideas and feedback especially on this part.\n\nBefore opening this issue, I already tried taking a look at JUnit's and also Maven Surefire's source code to evaluate some options. The goal is to create a global opt-in based approach to Guards which doesn't interfere with existing code, such as test runners + annotations (e.g. parameterized tests). The solution should be resilient to human failure, i.e. it should be possible to declare it in one place instead of for every test class.\n\n`RunListener`s can already be declared in the `JUnitCore`. As far as I know, this is JUnits common entry point for all applications, such as IDE's, build systems, command line, etc. Adding guards at this point would allow seamless integration with existing test runners (e.g. `@RunWith(Parameterized.class)`) and leaving existing test code unchanged.\n### Confguring Guards\n\nA common question in the past was how Guards should be configured. I could think of the following options\n1.  Adding a method addGuard(Guard) to `JUnitCore`. I think this should always be possible, as external applications (e.g. an IDE, Command line tools or Maven Surefire) can integrate themself here (i.e. adding a Guard to the Maven build via Surefire's configuration)\n2.  Having a `junit.properties` file. However I fear that it takes away much of the flexibility(extensibility) available in normal source code. Also this is error prone to renaming tests/packages and simply _not inside the code_, which is the way users are used to.\n3.  Automatic discovery of configured guards using (package) annotations and normal source code. Renaming things inside an IDE would also integrate with the according changes in the configuration automatically. Also exclusions can be managed on source code vs properties file level.\n\n(Note: The basic ideas of 2. and 3. were already mentioned in #69 and #444) Any of these options would allow leaving pre-Guard code in user projects as is (no change required whatsoever).\n\nFrom my point of view options 1) and 3) are the best, with 3) extending 1) with auto-config.\n\nTo keep the initial post shorter, I will put my suggestion for a package-based configuration into a separate comment below.\n\nInside a `Guard`, it would be nice to reuse the normal JUnit infrastructure using rules and class rules:\n\n```\npublic class MyGuard {\n  // Checks before/after each test class\n  @ClassRule\n  public final NoContainerExistsRule noContainerExistsRule = new ContainerExistsRule();\n\n  // Checks before/after each method\n  @Rule\n  public final NoSystemErrorRule noSystemErrorRule = new NoSystemErrorRule();\n\n  // Chaining rules would also be possible if the @Rule annotations above are removed\n  @Rule\n  public final RuleChain dependantRule =\n    // This would check that destroying the container does not output to stderr\n    RuleChain\n    .outerRule(noSystemErrorRule)\n    .around(noContainerExistsRule);\n}\n```\n\nThis comes quite close to the `TestFragments` idea in #444. (Side note: Guards must not contain test cases O:-) )\n\nWhat do you think of my ideas so far? Would it be good if MyGuard implemented a certain interface (similar to `RunListener`, but with the ability to fail tests) for lifecycle events? I'm not certain, but if we used `@Before` and `@After` annotations any JUnit user could easily create/adapt his/her own Guards.\n\nOn the technical side, it may be better to manage Guards similar to the existing RunListener/RunNotifier code? However, because to the \"Exceptions remove the listener\" rule, we must not reuse this.\n\nIf a guard fails, the error should be reported in a way that it's very clear where it came from, e.g.\n\n```\nAssertionError: A rule in com.example.MyGuard declared in the package-info.java file for package com.example failed.\n  at org.junit.runner.JUnitCore.run(Runner):132\n  [...]\nCause: AssertionError: There has been output to System.err\n  at NoSystemErrorRule:42\n```\n\nThis should weaken the \"my test fails and I don't know why as I didn't declare anything in the test class\" argument a bit.\n## Possible next steps\n\nI really would like to contribute to JUnit if possible, so my proposal would be the following:\n-   to discuss possible approaches and find a consensus on open questions\n-   after that, I'd like to implement a prototype according to JUnit's contribution guidelines\n-   Make the prototype production-ready and ship it as part of the next upcoming release as soon as possible to receive more feedback from the community. For that reason, I would like use JUnit `4.x` as a foundation (porting it to JUnit 5 afterwards).\n\n**So, what do you think? :)**\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1219/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1219/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1215","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1215/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1215/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1215/events","html_url":"https://github.com/junit-team/junit4/issues/1215","id":114026697,"node_id":"MDU6SXNzdWUxMTQwMjY2OTc=","number":1215,"title":"Feature: @FromDataPoints applicable to fields","user":{"login":"mbjelac","id":7265651,"node_id":"MDQ6VXNlcjcyNjU2NTE=","avatar_url":"https://avatars.githubusercontent.com/u/7265651?v=4","gravatar_id":"","url":"https://api.github.com/users/mbjelac","html_url":"https://github.com/mbjelac","followers_url":"https://api.github.com/users/mbjelac/followers","following_url":"https://api.github.com/users/mbjelac/following{/other_user}","gists_url":"https://api.github.com/users/mbjelac/gists{/gist_id}","starred_url":"https://api.github.com/users/mbjelac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mbjelac/subscriptions","organizations_url":"https://api.github.com/users/mbjelac/orgs","repos_url":"https://api.github.com/users/mbjelac/repos","events_url":"https://api.github.com/users/mbjelac/events{/privacy}","received_events_url":"https://api.github.com/users/mbjelac/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null},{"id":3631648,"node_id":"MDU6TGFiZWwzNjMxNjQ4","url":"https://api.github.com/repos/junit-team/junit4/labels/theories","name":"theories","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-10-29T11:03:25Z","updated_at":"2016-07-17T18:09:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Example:\n\n```\n@DataPoints\npublic static int[] numbers = new int[]{1, 2, 3, 4};\n\n@DataPoints\npublic static String[] strings = new String[]{\"a\", \"b\", \"c\"};\n\n@FromDataPoints\npublic int number; // this will be injected with 1, 2, 3 and 4 for each theory run\n\n@Before\npublic void setUp() {\n    Assume.assumeTrue(number % 2 == 0); // not supported\n    initializeSystemWithAmount(number);\n}\n\n@Theory\npublic void theory(String string) {\n    assertOnString(string);\n}\n```\n\nAllows SUT initialization with datapoint values.\nAlso allows global skipping of theories for a certain combination of datapoints.\n\nThe example shows a mix of datapoints used as fields and used as theory parameters.\n\nAlternative 1: Allow datapoint injection in `@Before` and `@After` methods.\n\nAlternative 2: Create `@BeforeTheory` and `@AfterTheory` method annotations which work like `@Before` and `@After` but their methods allow datapoint injection.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1215/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1215/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1208","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1208/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1208/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1208/events","html_url":"https://github.com/junit-team/junit4/issues/1208","id":111461840,"node_id":"MDU6SXNzdWUxMTE0NjE4NDA=","number":1208,"title":"ParameterSignature class does not have getSupplierAnnotation() method","user":{"login":"shubozhang","id":14019888,"node_id":"MDQ6VXNlcjE0MDE5ODg4","avatar_url":"https://avatars.githubusercontent.com/u/14019888?v=4","gravatar_id":"","url":"https://api.github.com/users/shubozhang","html_url":"https://github.com/shubozhang","followers_url":"https://api.github.com/users/shubozhang/followers","following_url":"https://api.github.com/users/shubozhang/following{/other_user}","gists_url":"https://api.github.com/users/shubozhang/gists{/gist_id}","starred_url":"https://api.github.com/users/shubozhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shubozhang/subscriptions","organizations_url":"https://api.github.com/users/shubozhang/orgs","repos_url":"https://api.github.com/users/shubozhang/repos","events_url":"https://api.github.com/users/shubozhang/events{/privacy}","received_events_url":"https://api.github.com/users/shubozhang/received_events","type":"User","site_admin":false},"labels":[{"id":3631703,"node_id":"MDU6TGFiZWwzNjMxNzAz","url":"https://api.github.com/repos/junit-team/junit4/labels/javadoc","name":"javadoc","color":"e102d8","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-10-14T18:33:19Z","updated_at":"2016-07-17T18:14:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was running @Theory examples and found the following code cannot pass compilation.\n\n``` java\npublic static class BetweenSupplier extends ParameterSupplier {\n         @Override\n         public List<PotentialAssignment> getValueSources(ParameterSignature sig) {\n             List<PotentialAssignment> list = new ArrayList<PotentialAssignment>();\n             Between annotation = (Between) sig.getSupplierAnnotation(); // cannot resolve method\n\n             for (int i = annotation.first(); i <= annotation.last(); i++)\n                 list.add(PotentialAssignment.forValue(\"ints\", i));\n             return list;\n         }\n}\n```\n\nDoc: http://junit.org/apidocs/org/junit/experimental/theories/ParameterSupplier.html\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1208/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1208/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1194","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1194/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1194/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1194/events","html_url":"https://github.com/junit-team/junit4/issues/1194","id":103209199,"node_id":"MDU6SXNzdWUxMDMyMDkxOTk=","number":1194,"title":"Truely random test order with posibility for externaly given seed","user":{"login":"cardil","id":540893,"node_id":"MDQ6VXNlcjU0MDg5Mw==","avatar_url":"https://avatars.githubusercontent.com/u/540893?v=4","gravatar_id":"","url":"https://api.github.com/users/cardil","html_url":"https://github.com/cardil","followers_url":"https://api.github.com/users/cardil/followers","following_url":"https://api.github.com/users/cardil/following{/other_user}","gists_url":"https://api.github.com/users/cardil/gists{/gist_id}","starred_url":"https://api.github.com/users/cardil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cardil/subscriptions","organizations_url":"https://api.github.com/users/cardil/orgs","repos_url":"https://api.github.com/users/cardil/repos","events_url":"https://api.github.com/users/cardil/events{/privacy}","received_events_url":"https://api.github.com/users/cardil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2015-08-26T08:37:33Z","updated_at":"2018-05-18T13:41:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"By default junit executes test in default order that is based on method name hash code. In java hashcodes of string doesn't change between executions, so the order is random, but constant for given computer. That could lead to unpredictable errors. \n\nRef: https://github.com/junit-team/junit/blob/master/src/main/java/org/junit/internal/MethodSorter.java#L13\n\n``` bash\n$ groovysh \nGroovy Shell (1.8.6, JVM: 1.7.0_79)\nType 'help' or '\\h' for help.\n---------------------------------------------------------------------------------------------------------------------------------------------------------\ngroovy:000> a = 'testSample'\n===> testSample\ngroovy:000> a.hashCode()\n===> 1710059740\ngroovy:000>\n$ groovysh \nGroovy Shell (1.8.6, JVM: 1.7.0_79)\nType 'help' or '\\h' for help.\n---------------------------------------------------------------------------------------------------------------------------------------------------------\ngroovy:000> a = 'testSample'\n===> testSample\ngroovy:000> a.hashCode()\n===> 1710059740\ngroovy:000>\n```\n\nTo fix this enchantment, there should be truly random order option to explicitly specify in test case using `@FixMethodOrder`.\n\nI propose to follow Rspec `--order` random option implementation. It actually makes random order for execution but seed used for this is displayed and logged into reports. This gives developers a chance to execute the same execution with `--order rand:3455`. It guarantees that tests will be executed in the same order, therefore it's possible to hunt for execution order bugs.\n\nCite:\n\n> When you use --order random, RSpec prints out the random number it used to seed the randomizer. When you think you’ve found an order-dependency bug, you can pass the seed along and the order will remain consistent:\n> \n> --order rand:3455\n\nExample execution:\n\n```\n$ rspec test.rb --order rand\n\nRandomized with seed 64539\n\ntesting\n  should equal 5\n  should contain 'test'\n\nFinished in 0.02 seconds (files took 0.0092 seconds to load)\n2 examples, 0 failures\n\nRandomized with seed 64539\n\n$ rspec test.rb --order rand\n\nRandomized with seed 12834\n\ntesting\n  should contain 'test'\n  should equal 5\n\nFinished in 0.02 seconds (files took 0.0088 seconds to load)\n2 examples, 0 failures\n\nRandomized with seed 12834\n\n$ rspec test.rb --order rand:12834\n\nRandomized with seed 12834\n\ntesting\n  should contain 'test'\n  should equal 5\n\nFinished in 0.02 seconds (files took 0.0083 seconds to load)\n2 examples, 0 failures\n\nRandomized with seed 12834\n```\n\nRspec random refenrence: http://blog.davidchelimsky.net/blog/2012/01/04/rspec-28-is-released/\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1194/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1186","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1186/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1186/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1186/events","html_url":"https://github.com/junit-team/junit4/issues/1186","id":98364930,"node_id":"MDU6SXNzdWU5ODM2NDkzMA==","number":1186,"title":"fireTestRunFinished not called after throwing StoppedByUserException","user":{"login":"Tibor17","id":1045063,"node_id":"MDQ6VXNlcjEwNDUwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/1045063?v=4","gravatar_id":"","url":"https://api.github.com/users/Tibor17","html_url":"https://github.com/Tibor17","followers_url":"https://api.github.com/users/Tibor17/followers","following_url":"https://api.github.com/users/Tibor17/following{/other_user}","gists_url":"https://api.github.com/users/Tibor17/gists{/gist_id}","starred_url":"https://api.github.com/users/Tibor17/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tibor17/subscriptions","organizations_url":"https://api.github.com/users/Tibor17/orgs","repos_url":"https://api.github.com/users/Tibor17/repos","events_url":"https://api.github.com/users/Tibor17/events{/privacy}","received_events_url":"https://api.github.com/users/Tibor17/received_events","type":"User","site_admin":false},"labels":[{"id":14312,"node_id":"MDU6TGFiZWwxNDMxMg==","url":"https://api.github.com/repos/junit-team/junit4/labels/bug","name":"bug","color":"ff0000","default":true,"description":null},{"id":39198624,"node_id":"MDU6TGFiZWwzOTE5ODYyNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/up-for-grabs","name":"up-for-grabs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2015-07-31T10:43:30Z","updated_at":"2020-11-26T17:27:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"In JUnitCore the fireTestRunFinished should be placed in finally block.\nThis call is placed after `runner.run(notifier);`.\nThe notifier method `fireTestRunFinished()` cannot be called after JUnit threw StoppedByUserException.\nThe begin and the end of test-set should be completed. If started, then it must be finished. The problem is that we are not able to call `RunNotifier` outside because this is private variable in JUnitCore class. I made a hook to a Runner and took the notifier instance from run method. This is of course bad workaround. It would be great idea to have public `pleaseStop()` method on JUnitCore class and move notifier `fireTestRunFinished` in finally block.\n\nhttps://github.com/junit-team/junit/blob/master/src/main/java/org/junit/runner/JUnitCore.java#L138\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1186/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1186/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1180","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1180/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1180/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1180/events","html_url":"https://github.com/junit-team/junit4/issues/1180","id":93769302,"node_id":"MDU6SXNzdWU5Mzc2OTMwMg==","number":1180,"title":"Add possibility to set ParametersRunnerFactory programatically.","user":{"login":"rhopp","id":1215011,"node_id":"MDQ6VXNlcjEyMTUwMTE=","avatar_url":"https://avatars.githubusercontent.com/u/1215011?v=4","gravatar_id":"","url":"https://api.github.com/users/rhopp","html_url":"https://github.com/rhopp","followers_url":"https://api.github.com/users/rhopp/followers","following_url":"https://api.github.com/users/rhopp/following{/other_user}","gists_url":"https://api.github.com/users/rhopp/gists{/gist_id}","starred_url":"https://api.github.com/users/rhopp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rhopp/subscriptions","organizations_url":"https://api.github.com/users/rhopp/orgs","repos_url":"https://api.github.com/users/rhopp/repos","events_url":"https://api.github.com/users/rhopp/events{/privacy}","received_events_url":"https://api.github.com/users/rhopp/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2015-07-08T11:45:12Z","updated_at":"2015-07-25T20:00:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I want to be able to create my own runners for parameterized tests. This was possible, when PR #564 was merged. \nThis was reworked in #773, so that user can use @RunWiht(Parameterized.class) followed by @UseParametersRunnerFactory. This is fine for simple scenarios.\nOur scenario is as follows:\nWe have class extending Suite (let's call it SuperSuite), which reads some configuration and creates runners for each class in that suite, if it satisfies that configuration(we don't want some classes to be run with some configurations and vice versa). The tree of runners looks like this:\n\n```\nSuperSuite\n |___Config1Runner\n |        |____Class1\n |        |          |____method1\n |        |          |____method2\n |        |____Class2\n |                  |____method1\n |                  |____method2\n |___Config2Runner\n         |____Class1\n         |          |____method1\n         |          |____method2\n         |____Class2 (skipped, did not meet configuration requirement)\n\n```\n\nNow I want to implement mechanism of parameterized classes. Let's say I want Class 1 to be parameterized. The tree would look something like this:\n\n```\nSuperSuite\n |___Config1Runner\n |        |____Class1 -parameterized\n |        |          |____Class1 -param1\n |        |          |            |____method1\n |        |          |            |____method2\n |        |          |____Class1 -param2\n |        |          |            |____method1\n |        |          |            |____method2\n |        |          |____Class1 -param3\n |        |                       |____method1\n |        |                       |____method2\n |        |____Class2\n |                  |____method1\n |                  |____method2\n |___Config2Runner\n         |____Class1 -parameterized\n         |          |____Class1 -param1\n         |          |            |____method1\n         |          |            |____method2\n         |          |____Class1 -param2\n         |          |            |____method1\n         |          |            |____method2\n         |          |____Class1 -param3\n         |                       |____method1\n         |                       |____method2\n         |____Class2 (skipped, did not meet configuration requirement)\n```\n\nI hope I described my intentions clearly.\n\nWith current situation I was almost able to do it:\n I added @UseParametersRunnerFactory(MyFactory.class) annotation to Class1 and in the SuperSuite I've created the Parameterized programatically for classes annotated with \n@UseParametersRunnerFactory. Unfortunately I need to pass some parameters to my MyFactory to be able to correctly create child runners (This is the part I'm unable to do right now).\n\nNow for solutions:\nWith PR #564, the solution would be pretty simple. I would just create my own Parameterized suite (extending Parameterized) overriding createRunner method.\n\nOr... Put back constructor `protected Parameterized(Class<?> klass, ParametersRunnerFactory runnerFactory)` from PR #773. \n\nI hope I made myself clear and sorry for the long post.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1180/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1179","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1179/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1179/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1179/events","html_url":"https://github.com/junit-team/junit4/issues/1179","id":93720906,"node_id":"MDU6SXNzdWU5MzcyMDkwNg==","number":1179,"title":"Replacement API for Hamcrest methods in ExpectedException and ErrorCollector","user":{"login":"marcphilipp","id":214207,"node_id":"MDQ6VXNlcjIxNDIwNw==","avatar_url":"https://avatars.githubusercontent.com/u/214207?v=4","gravatar_id":"","url":"https://api.github.com/users/marcphilipp","html_url":"https://github.com/marcphilipp","followers_url":"https://api.github.com/users/marcphilipp/followers","following_url":"https://api.github.com/users/marcphilipp/following{/other_user}","gists_url":"https://api.github.com/users/marcphilipp/gists{/gist_id}","starred_url":"https://api.github.com/users/marcphilipp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcphilipp/subscriptions","organizations_url":"https://api.github.com/users/marcphilipp/orgs","repos_url":"https://api.github.com/users/marcphilipp/repos","events_url":"https://api.github.com/users/marcphilipp/events{/privacy}","received_events_url":"https://api.github.com/users/marcphilipp/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null},{"id":3658186,"node_id":"MDU6TGFiZWwzNjU4MTg2","url":"https://api.github.com/repos/junit-team/junit4/labels/hamcrest","name":"hamcrest","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-07-08T07:43:55Z","updated_at":"2021-01-02T20:46:24Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"We need to decide if we need replacement APIs for the methods that take Hamcrest matchers as parameters.\n\nThe discussion has started in #1150.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1179/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1179/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1167","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1167/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1167/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1167/events","html_url":"https://github.com/junit-team/junit4/issues/1167","id":90769395,"node_id":"MDU6SXNzdWU5MDc2OTM5NQ==","number":1167,"title":"Parameterized test methods don't display name properly when given escape sequences","user":{"login":"aporo69","id":7985664,"node_id":"MDQ6VXNlcjc5ODU2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/7985664?v=4","gravatar_id":"","url":"https://api.github.com/users/aporo69","html_url":"https://github.com/aporo69","followers_url":"https://api.github.com/users/aporo69/followers","following_url":"https://api.github.com/users/aporo69/following{/other_user}","gists_url":"https://api.github.com/users/aporo69/gists{/gist_id}","starred_url":"https://api.github.com/users/aporo69/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aporo69/subscriptions","organizations_url":"https://api.github.com/users/aporo69/orgs","repos_url":"https://api.github.com/users/aporo69/repos","events_url":"https://api.github.com/users/aporo69/events{/privacy}","received_events_url":"https://api.github.com/users/aporo69/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-06-24T20:06:40Z","updated_at":"2015-06-29T07:11:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello everyone,\n\nWe had a little issue at work today using a parameterized test runner which was given characters as arguments which happened to be escape sequences.\n\nThe issue happens when using a name attribute in the @Parameter annotation. For example:\n\n``` java\n@Parameter(name = \"This won't display properly when given some special characters: {0}\")\npublic static Collection<Character[]> parameters() {\n    return Arrays.asList(new Character[][]{\n        { '\\0' }\n    });\n}\n```\n\nThe test does not fail but it creates issues through the rest of our tool chain.\n\nWe are using JUnit 4.11 but the issue exists in JUnit 4.12 too. I happened to make a small Maven project to illustrate the problem and I also made a patch for JUnit 4.11 and 4.12. Feel free to use everything.\n\nThank you for all your hard work.\n\nBoth Maven project and patches can be found there: https://github.com/aporo69/junit-issue-1167.git\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1167/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1167/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1160","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1160/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1160/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1160/events","html_url":"https://github.com/junit-team/junit4/issues/1160","id":85975555,"node_id":"MDU6SXNzdWU4NTk3NTU1NQ==","number":1160,"title":"Better Theories support for generative testing","user":{"login":"rschmitt","id":3725049,"node_id":"MDQ6VXNlcjM3MjUwNDk=","avatar_url":"https://avatars.githubusercontent.com/u/3725049?v=4","gravatar_id":"","url":"https://api.github.com/users/rschmitt","html_url":"https://github.com/rschmitt","followers_url":"https://api.github.com/users/rschmitt/followers","following_url":"https://api.github.com/users/rschmitt/following{/other_user}","gists_url":"https://api.github.com/users/rschmitt/gists{/gist_id}","starred_url":"https://api.github.com/users/rschmitt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rschmitt/subscriptions","organizations_url":"https://api.github.com/users/rschmitt/orgs","repos_url":"https://api.github.com/users/rschmitt/repos","events_url":"https://api.github.com/users/rschmitt/events{/privacy}","received_events_url":"https://api.github.com/users/rschmitt/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-06-08T01:12:00Z","updated_at":"2015-06-11T04:08:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The execution model for `@Theory`-based tests is virtually tailor-made for generative testing: you take some parameters and assert an invariant over them. However, based on my reading of the current Javadoc, all data points have to be known up front. They can still technically be _generated_ if you use a `@DataPoints`-annotated factory method, but this results in all of the randomly generated test data being buffered in memory up-front.\n\nMy hunch is that this limitation can be traced back to one of the many, many limitations of the JUnit execution model (maybe it's unacceptable to not know all the test methods/cases up front?). If not, however, it would be really nice if an `Iterator<T>` (or `Iterable<T>`) could be returned from a `@DataPoints` method, rather than just an array.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1160/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1160/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1145","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1145/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1145/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1145/events","html_url":"https://github.com/junit-team/junit4/issues/1145","id":79562165,"node_id":"MDU6SXNzdWU3OTU2MjE2NQ==","number":1145,"title":"Decouple JUnit from Hamcrest","user":{"login":"marcphilipp","id":214207,"node_id":"MDQ6VXNlcjIxNDIwNw==","avatar_url":"https://avatars.githubusercontent.com/u/214207?v=4","gravatar_id":"","url":"https://api.github.com/users/marcphilipp","html_url":"https://github.com/marcphilipp","followers_url":"https://api.github.com/users/marcphilipp/followers","following_url":"https://api.github.com/users/marcphilipp/following{/other_user}","gists_url":"https://api.github.com/users/marcphilipp/gists{/gist_id}","starred_url":"https://api.github.com/users/marcphilipp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcphilipp/subscriptions","organizations_url":"https://api.github.com/users/marcphilipp/orgs","repos_url":"https://api.github.com/users/marcphilipp/repos","events_url":"https://api.github.com/users/marcphilipp/events{/privacy}","received_events_url":"https://api.github.com/users/marcphilipp/received_events","type":"User","site_admin":false},"labels":[{"id":3658186,"node_id":"MDU6TGFiZWwzNjU4MTg2","url":"https://api.github.com/repos/junit-team/junit4/labels/hamcrest","name":"hamcrest","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2015-05-22T18:35:34Z","updated_at":"2021-01-02T20:44:29Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"@npryce has nicely summed up the reasons to do this in his blog:\nhttp://www.natpryce.com/articles/000806.html\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1145/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1144","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1144/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1144/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1144/events","html_url":"https://github.com/junit-team/junit4/issues/1144","id":78506234,"node_id":"MDU6SXNzdWU3ODUwNjIzNA==","number":1144,"title":"Drop the need for rules, setup and test methods to be public","user":{"login":"odrotbohm","id":128577,"node_id":"MDQ6VXNlcjEyODU3Nw==","avatar_url":"https://avatars.githubusercontent.com/u/128577?v=4","gravatar_id":"","url":"https://api.github.com/users/odrotbohm","html_url":"https://github.com/odrotbohm","followers_url":"https://api.github.com/users/odrotbohm/followers","following_url":"https://api.github.com/users/odrotbohm/following{/other_user}","gists_url":"https://api.github.com/users/odrotbohm/gists{/gist_id}","starred_url":"https://api.github.com/users/odrotbohm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/odrotbohm/subscriptions","organizations_url":"https://api.github.com/users/odrotbohm/orgs","repos_url":"https://api.github.com/users/odrotbohm/repos","events_url":"https://api.github.com/users/odrotbohm/events{/privacy}","received_events_url":"https://api.github.com/users/odrotbohm/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2015-05-20T12:32:46Z","updated_at":"2015-06-06T07:51:49Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"As JUnit is interacting with a test class by reflection anyway, there's absolutely no need to insist on `@Rule` fields to be declared as `public`. Neither that's the case for setup methods or test methods in general.\n\nA framework interacting with the developer's types by reflection shouldn't impose visibility rules to standard type components like fields or methods unless absolutely necessary. Right now I find myself having to add `public` virtually everywhere with the only effect of losing control of visibilities in my code.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1144/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1144/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1135","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1135/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1135/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1135/events","html_url":"https://github.com/junit-team/junit4/issues/1135","id":72217467,"node_id":"MDU6SXNzdWU3MjIxNzQ2Nw==","number":1135,"title":"Create  additional Description.createSuiteDescription builder method.","user":{"login":"scottresnik","id":1135749,"node_id":"MDQ6VXNlcjExMzU3NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1135749?v=4","gravatar_id":"","url":"https://api.github.com/users/scottresnik","html_url":"https://github.com/scottresnik","followers_url":"https://api.github.com/users/scottresnik/followers","following_url":"https://api.github.com/users/scottresnik/following{/other_user}","gists_url":"https://api.github.com/users/scottresnik/gists{/gist_id}","starred_url":"https://api.github.com/users/scottresnik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scottresnik/subscriptions","organizations_url":"https://api.github.com/users/scottresnik/orgs","repos_url":"https://api.github.com/users/scottresnik/repos","events_url":"https://api.github.com/users/scottresnik/events{/privacy}","received_events_url":"https://api.github.com/users/scottresnik/received_events","type":"User","site_admin":false},"labels":[{"id":77558396,"node_id":"MDU6TGFiZWw3NzU1ODM5Ng==","url":"https://api.github.com/repos/junit-team/junit4/labels/descriptions","name":"descriptions","color":"009800","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-04-30T16:44:35Z","updated_at":"2015-05-11T13:49:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Add the following builder method:\n`public static Description createSuiteDescription(Class<?> clazz, String name, Annotation... annotations)` which calls the `private Description(Class<?> clazz, String displayName, Annotation... annotations)` constructor.\n\nThis would be an alternative to #117.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1135/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1126","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1126/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1126/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1126/events","html_url":"https://github.com/junit-team/junit4/issues/1126","id":69316750,"node_id":"MDU6SXNzdWU2OTMxNjc1MA==","number":1126,"title":"Timeout parameter on @Test Annotation does not override Timeout Rule","user":{"login":"AndreSchulzBerlin","id":9573863,"node_id":"MDQ6VXNlcjk1NzM4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/9573863?v=4","gravatar_id":"","url":"https://api.github.com/users/AndreSchulzBerlin","html_url":"https://github.com/AndreSchulzBerlin","followers_url":"https://api.github.com/users/AndreSchulzBerlin/followers","following_url":"https://api.github.com/users/AndreSchulzBerlin/following{/other_user}","gists_url":"https://api.github.com/users/AndreSchulzBerlin/gists{/gist_id}","starred_url":"https://api.github.com/users/AndreSchulzBerlin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AndreSchulzBerlin/subscriptions","organizations_url":"https://api.github.com/users/AndreSchulzBerlin/orgs","repos_url":"https://api.github.com/users/AndreSchulzBerlin/repos","events_url":"https://api.github.com/users/AndreSchulzBerlin/events{/privacy}","received_events_url":"https://api.github.com/users/AndreSchulzBerlin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2015-04-18T15:04:00Z","updated_at":"2015-05-01T14:48:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I refer to https://github.com/junit-team/junit/wiki/Timeout-for-tests\n\nIf I use\n\n``` java\n@Rule\npublic Timeout globalTimeout = Timeout.seconds(10);\n\n@Test(timeout=20000)\npublic void testWithTimeout() {\n  ...\n}\n```\n\nthe test schould timeout afer 20s but it times out after 10s\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1126/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1126/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1125","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1125/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1125/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1125/events","html_url":"https://github.com/junit-team/junit4/issues/1125","id":68977277,"node_id":"MDU6SXNzdWU2ODk3NzI3Nw==","number":1125,"title":"Stop request is not properly handled if @AfterClass throws exception","user":{"login":"ghost","id":10137,"node_id":"MDQ6VXNlcjEwMTM3","avatar_url":"https://avatars.githubusercontent.com/u/10137?v=4","gravatar_id":"","url":"https://api.github.com/users/ghost","html_url":"https://github.com/ghost","followers_url":"https://api.github.com/users/ghost/followers","following_url":"https://api.github.com/users/ghost/following{/other_user}","gists_url":"https://api.github.com/users/ghost/gists{/gist_id}","starred_url":"https://api.github.com/users/ghost/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ghost/subscriptions","organizations_url":"https://api.github.com/users/ghost/orgs","repos_url":"https://api.github.com/users/ghost/repos","events_url":"https://api.github.com/users/ghost/events{/privacy}","received_events_url":"https://api.github.com/users/ghost/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-04-16T17:56:49Z","updated_at":"2015-04-16T18:09:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Consider the following code example:\n\n```\n@RunWith(Suite.class)\n@Suite.SuiteClasses({Example1.class, Example2.class})\npublic class SuiteExample {\n}\n\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class Example1 {\n    @Test\n    public void test1() throws InterruptedException {\n        Thread.sleep(5000);\n    }\n\n    @Test\n    public void test2() {}\n\n    @AfterClass\n    public static void afterClass() {\n        throw new RuntimeException(\"Exception\");\n    }\n}\n\n\npublic class Example2 {\n    @BeforeClass\n    public static void beforeClass() {\n        System.out.println(\"This is not expected to be invoked\");\n    }\n\n    @Test\n    public void test() {}\n\n    @AfterClass\n    public static void afterClass() throws IOException {\n        System.out.println(\"This is not expected to be invoked\");\n    }\n}\n```\n1. Execute `SuiteExample` class in the Eclipse IDE \n2. While execution of `Example1.test1()` is in the progress, hit the \"Stop request\" red button in the JUnit view (not in the console view, which will kill the process)\n3. Execution process will be interrupted after `Example1.test1()` has been completed\n4. Method `Example1.afterClass()` will be invoked, which will throw exception\n\nResult: Method `Example2.test()` will not be invoked as expected, but methods `Example2.beforeClass()` and `Example2.afterClass()` will be invoked, while they should not be.\n\nAfter successful triaging of this issue, if you don't mind I wish to create pull request for this issue. It shouldn't be too hard to fix that.\n\nThanks.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1125/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1095","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1095/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1095/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1095/events","html_url":"https://github.com/junit-team/junit4/issues/1095","id":60410186,"node_id":"MDU6SXNzdWU2MDQxMDE4Ng==","number":1095,"title":"ParentRunner does not document itself as calling collectInitializationErrors in it's constructor.","user":{"login":"eatnumber1","id":17551,"node_id":"MDQ6VXNlcjE3NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17551?v=4","gravatar_id":"","url":"https://api.github.com/users/eatnumber1","html_url":"https://github.com/eatnumber1","followers_url":"https://api.github.com/users/eatnumber1/followers","following_url":"https://api.github.com/users/eatnumber1/following{/other_user}","gists_url":"https://api.github.com/users/eatnumber1/gists{/gist_id}","starred_url":"https://api.github.com/users/eatnumber1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eatnumber1/subscriptions","organizations_url":"https://api.github.com/users/eatnumber1/orgs","repos_url":"https://api.github.com/users/eatnumber1/repos","events_url":"https://api.github.com/users/eatnumber1/events{/privacy}","received_events_url":"https://api.github.com/users/eatnumber1/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2015-03-09T21:08:26Z","updated_at":"2015-05-19T02:30:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"ParentRunner and it's subclasses should document the methods which are meant to be overridden, but are transitively called from ParentRunner's constructor.\n\nArguably, this is a design flaw in ParentRunner, as with the current behavior, subclasses which override these methods will be called before those subclasses begin initialization which severely limits the usefulness of overriding these methods.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1095/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1094","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1094/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1094/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1094/events","html_url":"https://github.com/junit-team/junit4/issues/1094","id":60404023,"node_id":"MDU6SXNzdWU2MDQwNDAyMw==","number":1094,"title":"No documentation for how to create custom RunnerBuilders","user":{"login":"eatnumber1","id":17551,"node_id":"MDQ6VXNlcjE3NTUx","avatar_url":"https://avatars.githubusercontent.com/u/17551?v=4","gravatar_id":"","url":"https://api.github.com/users/eatnumber1","html_url":"https://github.com/eatnumber1","followers_url":"https://api.github.com/users/eatnumber1/followers","following_url":"https://api.github.com/users/eatnumber1/following{/other_user}","gists_url":"https://api.github.com/users/eatnumber1/gists{/gist_id}","starred_url":"https://api.github.com/users/eatnumber1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eatnumber1/subscriptions","organizations_url":"https://api.github.com/users/eatnumber1/orgs","repos_url":"https://api.github.com/users/eatnumber1/repos","events_url":"https://api.github.com/users/eatnumber1/events{/privacy}","received_events_url":"https://api.github.com/users/eatnumber1/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-03-09T20:25:42Z","updated_at":"2017-04-15T03:04:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"There's no documentation on how to create a custom RunnerBuilder.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1094/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1092","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1092/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1092/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1092/events","html_url":"https://github.com/junit-team/junit4/issues/1092","id":60179905,"node_id":"MDU6SXNzdWU2MDE3OTkwNQ==","number":1092,"title":"Request: Add \"Otherwise\" to Theories","user":{"login":"EarthCitizen","id":1094129,"node_id":"MDQ6VXNlcjEwOTQxMjk=","avatar_url":"https://avatars.githubusercontent.com/u/1094129?v=4","gravatar_id":"","url":"https://api.github.com/users/EarthCitizen","html_url":"https://github.com/EarthCitizen","followers_url":"https://api.github.com/users/EarthCitizen/followers","following_url":"https://api.github.com/users/EarthCitizen/following{/other_user}","gists_url":"https://api.github.com/users/EarthCitizen/gists{/gist_id}","starred_url":"https://api.github.com/users/EarthCitizen/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/EarthCitizen/subscriptions","organizations_url":"https://api.github.com/users/EarthCitizen/orgs","repos_url":"https://api.github.com/users/EarthCitizen/repos","events_url":"https://api.github.com/users/EarthCitizen/events{/privacy}","received_events_url":"https://api.github.com/users/EarthCitizen/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2015-03-07T00:37:11Z","updated_at":"2015-05-07T00:02:48Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"My appologies in advance if there is a way to do this, but in my search I could not find one.\n\nIt would be immensly useful if there were an @Otherwise for theories. What this would do is execute for a datapoint or set of datapoints if, and only if, no theory method had a passing assume. This would allow the avoidance of a theory or theories that are basically just negations of all the other assumes.\n\nIn the example below, without the @Otherwise, it would be necessary to write multiple @Theory methods to have all of the paths leading to false. The other alternative would be have another set of datapoints that should all return false, but that does not allow the potential to catch possible holes in logic that are not obvious at first glance. Additionally, if the datapoints are large-volume and generated with a supplier, it could be a daunting task to make sure you catch all the \"other\" scenarios. Simply catching \"everything else\" is much easier than making sure you capture all the reverse scenarios.\n\nObviously this specific scenario below is not very complex, but is is just to demonstrate the purpose of @Otherwise.\n\n``` Java\n@RunWith(Theories.class)\npublic class BooleanTest {\n\n    @DataPoints\n    public static Object[] values = {\n        true, false, \"true\", \"false\", \"1\", \"0\", 1, 0, new Object(), null \n    };\n\n    @Theory\n    public void booleanTrue(Object value) {\n        assumeThat(value, instanceOf(Boolean.class));\n\n        assertThat(convertToBoolean(value), equalTo(value));\n    }\n\n    @Theory\n    public void stringTrue(Object value) {\n        assumeThat(value, instanceOf(String.class));\n        assumeThat((String) value, equalTo(\"true\"));\n\n        assertThat(convertToBoolean(value), equalTo(true));\n    }\n\n    @Theory\n    public void stringOne(Object value) {\n        assumeThat(value, instanceOf(String.class));\n        assumeThat((String) value, equalTo(\"1\"));\n\n        assertThat(convertToBoolean(value), equalTo(true));\n    }\n\n    @Theory\n    public void integerOne(Object value) {\n        assumeThat(value, instanceOf(Integer.class));\n        assumeThat((Integer) value, not(equalTo(0)));\n\n        assertThat(convertToBoolean(value), equalTo(true));\n    }\n\n    @Otherwise\n    public void allOtherCases(Object value) {\n        assertThat(convertToBoolean(value), equalTo(false));\n    }\n\n    public static boolean convertToBoolean(Object value) {\n        if (value instanceof Boolean) {\n            return ((Boolean) value).booleanValue();\n        } else if (value instanceof String) {\n            if (\"true\".equalsIgnoreCase((String) value)) {\n                return true;\n            } else if (\"1\".equalsIgnoreCase((String) value)) {\n                return true;\n            }\n        } else if (value instanceof Integer) {\n            if (((Integer)value) != 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n```\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1092/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1092/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1077","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1077/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1077/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1077/events","html_url":"https://github.com/junit-team/junit4/issues/1077","id":55784975,"node_id":"MDU6SXNzdWU1NTc4NDk3NQ==","number":1077,"title":"api to modify created hierarchy of descriptors would help IDE integration","user":{"login":"akozlova","id":4306070,"node_id":"MDQ6VXNlcjQzMDYwNzA=","avatar_url":"https://avatars.githubusercontent.com/u/4306070?v=4","gravatar_id":"","url":"https://api.github.com/users/akozlova","html_url":"https://github.com/akozlova","followers_url":"https://api.github.com/users/akozlova/followers","following_url":"https://api.github.com/users/akozlova/following{/other_user}","gists_url":"https://api.github.com/users/akozlova/gists{/gist_id}","starred_url":"https://api.github.com/users/akozlova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akozlova/subscriptions","organizations_url":"https://api.github.com/users/akozlova/orgs","repos_url":"https://api.github.com/users/akozlova/repos","events_url":"https://api.github.com/users/akozlova/events{/privacy}","received_events_url":"https://api.github.com/users/akozlova/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-01-28T17:08:44Z","updated_at":"2015-04-07T13:34:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In IntelliJ IDEA test's tree is build upon descriptors hierarchy. So if one would like to change it, he need to change the descriptors hierarchy. In some simple cases it's done by the IDE. E.g. if user ask to run one test method for a test class, descriptor for class with exactly one child is created but the IDE hides  the top level node with the following reflection abuse\n\n``` java\n private static Description getFilteredDescription(Request request, Description description) throws NoSuchFieldException, IllegalAccessException {\n    Field field;\n    try {\n      field = FilterRequest.class.getDeclaredField(\"fFilter\");\n    }\n    catch (NoSuchFieldException e) {\n      field = FilterRequest.class.getDeclaredField(\"filter\");\n    }\n    field.setAccessible(true);\n    final Filter filter = (Filter)field.get(request);\n    final String filterDescription = filter.describe();\n    if (filterDescription != null) {\n      boolean isMethodFilter = filterDescription.startsWith(\"Method\");\n      if (isMethodFilter && canCompress(description)) return (Description)description.getChildren().get(0);   \n    }\n    return description;\n  }\n```\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1077/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1076","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1076/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1076/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1076/events","html_url":"https://github.com/junit-team/junit4/issues/1076","id":55782773,"node_id":"MDU6SXNzdWU1NTc4Mjc3Mw==","number":1076,"title":"ignore @Ignore annotation when exactly this method is run","user":{"login":"akozlova","id":4306070,"node_id":"MDQ6VXNlcjQzMDYwNzA=","avatar_url":"https://avatars.githubusercontent.com/u/4306070?v=4","gravatar_id":"","url":"https://api.github.com/users/akozlova","html_url":"https://github.com/akozlova","followers_url":"https://api.github.com/users/akozlova/followers","following_url":"https://api.github.com/users/akozlova/following{/other_user}","gists_url":"https://api.github.com/users/akozlova/gists{/gist_id}","starred_url":"https://api.github.com/users/akozlova/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/akozlova/subscriptions","organizations_url":"https://api.github.com/users/akozlova/orgs","repos_url":"https://api.github.com/users/akozlova/repos","events_url":"https://api.github.com/users/akozlova/events{/privacy}","received_events_url":"https://api.github.com/users/akozlova/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2015-01-28T16:53:23Z","updated_at":"2015-01-28T16:53:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"For now IntelliJ IDEA has code \n\n``` java\n          final RunWith clazzAnnotation = (RunWith)clazz.getAnnotation(RunWith.class);\n          final Description testMethodDescription = Description.createTestDescription(clazz, methodName);\n          if (clazzAnnotation == null) { //do not override external runners\n            try {\n              final Method method = clazz.getMethod(methodName, null);\n              if (method != null && notForked && (method.getAnnotation(Ignore.class) != null || clazz.getAnnotation(Ignore.class) != null)) { //override ignored case only\n                final Request classRequest = createIgnoreIgnoredClassRequest(clazz, true);\n                final Filter ignoredTestFilter = Filter.matchMethodDescription(testMethodDescription);\n                return classRequest.filterWith(new Filter() {\n                  public boolean shouldRun(Description description) {\n                    return ignoredTestFilter.shouldRun(description);\n                  }\n\n                  public String describe() {\n                    return \"Ignored \" + methodName;\n                  }\n                });\n              }\n            }\n            catch (Exception ignored) {\n              //return simple method runner\n            }\n          }\n```\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1076/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1076/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1074","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1074/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1074/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1074/events","html_url":"https://github.com/junit-team/junit4/issues/1074","id":55135138,"node_id":"MDU6SXNzdWU1NTEzNTEzOA==","number":1074,"title":"Feature idea: Annotation Rules","user":{"login":"BenRomberg","id":1444621,"node_id":"MDQ6VXNlcjE0NDQ2MjE=","avatar_url":"https://avatars.githubusercontent.com/u/1444621?v=4","gravatar_id":"","url":"https://api.github.com/users/BenRomberg","html_url":"https://github.com/BenRomberg","followers_url":"https://api.github.com/users/BenRomberg/followers","following_url":"https://api.github.com/users/BenRomberg/following{/other_user}","gists_url":"https://api.github.com/users/BenRomberg/gists{/gist_id}","starred_url":"https://api.github.com/users/BenRomberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BenRomberg/subscriptions","organizations_url":"https://api.github.com/users/BenRomberg/orgs","repos_url":"https://api.github.com/users/BenRomberg/repos","events_url":"https://api.github.com/users/BenRomberg/events{/privacy}","received_events_url":"https://api.github.com/users/BenRomberg/received_events","type":"User","site_admin":false},"labels":[{"id":6156902,"node_id":"MDU6TGFiZWw2MTU2OTAy","url":"https://api.github.com/repos/junit-team/junit4/labels/rules","name":"rules","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2015-01-22T10:08:36Z","updated_at":"2015-11-23T21:46:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I've recently run into the problem that I wanted to use an annotation on certain test-methods, but didn't require the explicit rule as a field.\n\nConsidering an example, let's say there's a `DatabaseUnavailable` annotation and a corresponding `DatabaseUnavailableRule` setting up a defect database connection in case the annotation is present.\n\n```\n@Rule\npublic DatabaseUnavailableRule databaseUnavailableRule = new DatabaseUnavailableRule();\n\n@Test\n@DatabaseUnavailable\npublic void databaseUnavailable_ThrowsException() {\n  // ...\n}\n\n// more tests not requiring @DatabaseUnavailable\n```\n\nThe rule is completely unnecessary if the test doesn't need to reference the rule's field. We could instead let the annotation reference the rule through a class reference in the annotation. This would change our example to:\n\n```\n// no Rule declaration necessary\n\n@Test\n@DatabaseUnavailable\npublic void databaseUnavailable_ThrowsException() {\n  // ...\n}\n```\n\nWith the `DatabaseUnavailable` annotation referencing `DatabaseUnavailableRule` within a meta annotation, e.g. looking like:\n\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@AnnotationRule(DatabaseUnavailableRule.class)\npublic @interface DatabaseUnavailable {\n\n}\n```\n\nThe only limitation I can think of is that the `DatabaseUnavailableRule` would have to have a constructor with no parameters so we can instantiate it with reflection. It would only be instantiated for tests annotated with the annotation.\n\nWhat do you think? I'd be happy to submit a pull-request if it sounds viable.\n\nCould also think of this working as a class annotation for all test-methods.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1074/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1070","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1070/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1070/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1070/events","html_url":"https://github.com/junit-team/junit4/issues/1070","id":54665757,"node_id":"MDU6SXNzdWU1NDY2NTc1Nw==","number":1070,"title":"standarize/introduce Description links","user":{"login":"piotrturski","id":3491230,"node_id":"MDQ6VXNlcjM0OTEyMzA=","avatar_url":"https://avatars.githubusercontent.com/u/3491230?v=4","gravatar_id":"","url":"https://api.github.com/users/piotrturski","html_url":"https://github.com/piotrturski","followers_url":"https://api.github.com/users/piotrturski/followers","following_url":"https://api.github.com/users/piotrturski/following{/other_user}","gists_url":"https://api.github.com/users/piotrturski/gists{/gist_id}","starred_url":"https://api.github.com/users/piotrturski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/piotrturski/subscriptions","organizations_url":"https://api.github.com/users/piotrturski/orgs","repos_url":"https://api.github.com/users/piotrturski/repos","events_url":"https://api.github.com/users/piotrturski/events{/privacy}","received_events_url":"https://api.github.com/users/piotrturski/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":27,"created_at":"2015-01-17T16:05:04Z","updated_at":"2015-04-07T13:26:19Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"currently the only way to interact with IDE is a Description. based on the Description IDE has to create nice looking tree and navigate to source when user clicks on this tree.\n\nthere are more and more custom Runners that introduces new things (parameters, nested tests etc). but still there is no standard, portable way to link to correct method. it would be good to separate what's displayed in the tree from what method that node is linked to. then intermediate nodes in parameter tests could be named as user/library creator wants yet still after double-click they will link to correct methods. same with leaf nodes\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1070/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/1039","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/1039/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/1039/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/1039/events","html_url":"https://github.com/junit-team/junit4/issues/1039","id":51195283,"node_id":"MDU6SXNzdWU1MTE5NTI4Mw==","number":1039,"title":"Update Javadoc stylesheet for JDK6/7","user":{"login":"marcphilipp","id":214207,"node_id":"MDQ6VXNlcjIxNDIwNw==","avatar_url":"https://avatars.githubusercontent.com/u/214207?v=4","gravatar_id":"","url":"https://api.github.com/users/marcphilipp","html_url":"https://github.com/marcphilipp","followers_url":"https://api.github.com/users/marcphilipp/followers","following_url":"https://api.github.com/users/marcphilipp/following{/other_user}","gists_url":"https://api.github.com/users/marcphilipp/gists{/gist_id}","starred_url":"https://api.github.com/users/marcphilipp/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcphilipp/subscriptions","organizations_url":"https://api.github.com/users/marcphilipp/orgs","repos_url":"https://api.github.com/users/marcphilipp/repos","events_url":"https://api.github.com/users/marcphilipp/events{/privacy}","received_events_url":"https://api.github.com/users/marcphilipp/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2014-12-06T20:42:27Z","updated_at":"2014-12-06T20:42:34Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"If we decide to move on to JDK 6 or 7 for JUnit 5.0 we need to update the CSS. Maybe use the one from #887.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/1039/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/1039/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/966","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/966/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/966/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/966/events","html_url":"https://github.com/junit-team/junit4/issues/966","id":38904621,"node_id":"MDU6SXNzdWUzODkwNDYyMQ==","number":966,"title":"Promote categories from experimental","user":{"login":"benmccann","id":322311,"node_id":"MDQ6VXNlcjMyMjMxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/322311?v=4","gravatar_id":"","url":"https://api.github.com/users/benmccann","html_url":"https://github.com/benmccann","followers_url":"https://api.github.com/users/benmccann/followers","following_url":"https://api.github.com/users/benmccann/following{/other_user}","gists_url":"https://api.github.com/users/benmccann/gists{/gist_id}","starred_url":"https://api.github.com/users/benmccann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/benmccann/subscriptions","organizations_url":"https://api.github.com/users/benmccann/orgs","repos_url":"https://api.github.com/users/benmccann/repos","events_url":"https://api.github.com/users/benmccann/events{/privacy}","received_events_url":"https://api.github.com/users/benmccann/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2014-07-28T15:59:23Z","updated_at":"2014-08-02T10:50:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"[Maven, Gradle, and SBT all have built-in support for categories](https://github.com/junit-team/junit/wiki/Categories). Given that this feature has been so widely adopted, I think it makes sense to think about promoting it from the experimental package.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/966/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/966/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/958","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/958/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/958/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/958/events","html_url":"https://github.com/junit-team/junit4/issues/958","id":38244363,"node_id":"MDU6SXNzdWUzODI0NDM2Mw==","number":958,"title":"Add timeout attribute to @BeforeClass, @Before, @After, and @AfterClass","user":{"login":"garydgregory","id":1187639,"node_id":"MDQ6VXNlcjExODc2Mzk=","avatar_url":"https://avatars.githubusercontent.com/u/1187639?v=4","gravatar_id":"","url":"https://api.github.com/users/garydgregory","html_url":"https://github.com/garydgregory","followers_url":"https://api.github.com/users/garydgregory/followers","following_url":"https://api.github.com/users/garydgregory/following{/other_user}","gists_url":"https://api.github.com/users/garydgregory/gists{/gist_id}","starred_url":"https://api.github.com/users/garydgregory/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/garydgregory/subscriptions","organizations_url":"https://api.github.com/users/garydgregory/orgs","repos_url":"https://api.github.com/users/garydgregory/repos","events_url":"https://api.github.com/users/garydgregory/events{/privacy}","received_events_url":"https://api.github.com/users/garydgregory/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2014-07-19T20:40:46Z","updated_at":"2016-05-03T16:13:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Please add a timeout attribute to @BeforeClass, @Before, @After, and @AfterClass.\n\nThis will allow set ups and tear downs to databases and other expensive remote resources to gracefully stop and kill tests that cannot be set up properly.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/958/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/958/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/874","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/874/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/874/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/874/events","html_url":"https://github.com/junit-team/junit4/issues/874","id":31412347,"node_id":"MDU6SXNzdWUzMTQxMjM0Nw==","number":874,"title":"Listener based Runner","user":{"login":"gege83","id":2462334,"node_id":"MDQ6VXNlcjI0NjIzMzQ=","avatar_url":"https://avatars.githubusercontent.com/u/2462334?v=4","gravatar_id":"","url":"https://api.github.com/users/gege83","html_url":"https://github.com/gege83","followers_url":"https://api.github.com/users/gege83/followers","following_url":"https://api.github.com/users/gege83/following{/other_user}","gists_url":"https://api.github.com/users/gege83/gists{/gist_id}","starred_url":"https://api.github.com/users/gege83/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gege83/subscriptions","organizations_url":"https://api.github.com/users/gege83/orgs","repos_url":"https://api.github.com/users/gege83/repos","events_url":"https://api.github.com/users/gege83/events{/privacy}","received_events_url":"https://api.github.com/users/gege83/received_events","type":"User","site_admin":false},"labels":[{"id":6156902,"node_id":"MDU6TGFiZWw2MTU2OTAy","url":"https://api.github.com/repos/junit-team/junit4/labels/rules","name":"rules","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2014-04-13T17:14:39Z","updated_at":"2015-01-12T11:42:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi Junit team,\n\nI like your framework it is very useful for me. The only thing what is a bit pain for me is that how to extend your framework with multiple requirement.\nPlease see my extension https://bitbucket.org/gege83/junit-extension/wiki/Home\nIf you can use please notify me.\n\nThankyou\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/874/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/874/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/799","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/799/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/799/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/799/events","html_url":"https://github.com/junit-team/junit4/issues/799","id":25399772,"node_id":"MDU6SXNzdWUyNTM5OTc3Mg==","number":799,"title":"Thread created with FailOnTimeout should be named sometime more useful than \"Thread-#\"","user":{"login":"mkw","id":451208,"node_id":"MDQ6VXNlcjQ1MTIwOA==","avatar_url":"https://avatars.githubusercontent.com/u/451208?v=4","gravatar_id":"","url":"https://api.github.com/users/mkw","html_url":"https://github.com/mkw","followers_url":"https://api.github.com/users/mkw/followers","following_url":"https://api.github.com/users/mkw/following{/other_user}","gists_url":"https://api.github.com/users/mkw/gists{/gist_id}","starred_url":"https://api.github.com/users/mkw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mkw/subscriptions","organizations_url":"https://api.github.com/users/mkw/orgs","repos_url":"https://api.github.com/users/mkw/repos","events_url":"https://api.github.com/users/mkw/events{/privacy}","received_events_url":"https://api.github.com/users/mkw/received_events","type":"User","site_admin":false},"labels":[{"id":39198624,"node_id":"MDU6TGFiZWwzOTE5ODYyNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/up-for-grabs","name":"up-for-grabs","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2014-01-10T15:01:10Z","updated_at":"2017-02-28T00:42:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When debugging or profiling highly threaded tests, leaving the JUnit timeout threads as \"Thread-#\" is not very useful.\n\nThe obvious name for threads would probably be the full name for the test.  This could be passed in from both BlockJUnit4ClassRunner#withPotentialTimeout, which has access to the Method object, and Timeout#apply, which has access to the Description object.\n\nThe fix for #657 names these threads \"Time-limited test,\" which somewhat more useful, but still ambiguous when a large number of tests are run.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/799/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/799/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/793","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/793/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/793/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/793/events","html_url":"https://github.com/junit-team/junit4/issues/793","id":24785342,"node_id":"MDU6SXNzdWUyNDc4NTM0Mg==","number":793,"title":"Is it / should it be possible to have a single rule act before, between, and after tests?","user":{"login":"rowanhill","id":2607287,"node_id":"MDQ6VXNlcjI2MDcyODc=","avatar_url":"https://avatars.githubusercontent.com/u/2607287?v=4","gravatar_id":"","url":"https://api.github.com/users/rowanhill","html_url":"https://github.com/rowanhill","followers_url":"https://api.github.com/users/rowanhill/followers","following_url":"https://api.github.com/users/rowanhill/following{/other_user}","gists_url":"https://api.github.com/users/rowanhill/gists{/gist_id}","starred_url":"https://api.github.com/users/rowanhill/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rowanhill/subscriptions","organizations_url":"https://api.github.com/users/rowanhill/orgs","repos_url":"https://api.github.com/users/rowanhill/repos","events_url":"https://api.github.com/users/rowanhill/events{/privacy}","received_events_url":"https://api.github.com/users/rowanhill/received_events","type":"User","site_admin":false},"labels":[{"id":6156902,"node_id":"MDU6TGFiZWw2MTU2OTAy","url":"https://api.github.com/repos/junit-team/junit4/labels/rules","name":"rules","color":"0b02e1","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2013-12-26T11:12:02Z","updated_at":"2015-05-16T16:08:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hi,\n\nAs of 4.11 (and specifically #343 / #339), it's no longer possible to annotate a single rule as both `@ClassRule` and `@Rule` (as the former must be static and the latter non-static).\n\nIs it still possible to have a single rule which acts both before & after the class' tests (e.g. to set up and tear down an external resource) _and_ between each tests (e.g. to reset the external resource)?\n\nIf not, is there any appetite for allowing such a thing?\n\nNote that there are currently work-arounds:\n1. Split the responsibilities into independent `@ClassRule` and `@Rule` implementations.\n2. Define a static `@ClassRule` field, then declare a non-static `@Rule` and set it's value to that of the static field.\n3. Create a `@Rule` that keeps static state (e.g. the external resource), and infers whether it should perform a before-class type action (e.g. set up the resource) or a per-test type action (e.g. reset the resource).\n\nThey have drawbacks, however: 1 and 2 require a developer to remember to do two things when writing their test (i.e. there are two coupled rules, and the test won't work as they expect if either is missing); 3 doesn't allow for after-class type actions (e.g. cleaning up an external resource), although these can be provided via an `@AfterClass` method (although, again, that couples two elements in the test).\n\nI'd be interested to hear of any other suggestions (either in terms of workarounds or, if there is any interest, in how support for this could be implemented as a JUnit feature).\n\nThanks,\nRowan\n\nP.S. See also [my question on StackOverflow](http://stackoverflow.com/questions/20767486/) about the same subject.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/793/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/793/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/785","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/785/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/785/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/785/events","html_url":"https://github.com/junit-team/junit4/issues/785","id":24129972,"node_id":"MDU6SXNzdWUyNDEyOTk3Mg==","number":785,"title":"Site reports having Changes linked with GitHub","user":{"login":"Tibor17","id":1045063,"node_id":"MDQ6VXNlcjEwNDUwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/1045063?v=4","gravatar_id":"","url":"https://api.github.com/users/Tibor17","html_url":"https://github.com/Tibor17","followers_url":"https://api.github.com/users/Tibor17/followers","following_url":"https://api.github.com/users/Tibor17/following{/other_user}","gists_url":"https://api.github.com/users/Tibor17/gists{/gist_id}","starred_url":"https://api.github.com/users/Tibor17/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tibor17/subscriptions","organizations_url":"https://api.github.com/users/Tibor17/orgs","repos_url":"https://api.github.com/users/Tibor17/repos","events_url":"https://api.github.com/users/Tibor17/events{/privacy}","received_events_url":"https://api.github.com/users/Tibor17/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":20,"created_at":"2013-12-11T19:10:58Z","updated_at":"2014-12-10T01:21:32Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"My proposal is to have a Project Site for JUnit generated by every release/build.\n\nThis site (part of project webpage) will have project documentation as well as will include links to Issues/PullRequests for the particular Release on\nhttps://github.com/junit-team/junit/\n\nThe only thing the contributor has to do is to add a new line into `changes.xml` for his pull. The file will be located in the root of project.\nFor instance the issue appears in `changes.xml`:\n`<action dev=\"aramirez\" type=\"fix\" issue=\"800\">Fix for release JUnit 4.12</action>`\n\nAs far as I remember Stephen Connolly was working on Maven Site for the JUnit. This extends the site.\n\nFor more info, see the configuration in pom.xml and usage of changes.xml\nhttp://maven.apache.org/plugins/maven-changes-plugin/usage.html\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/785/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/784","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/784/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/784/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/784/events","html_url":"https://github.com/junit-team/junit4/issues/784","id":23870065,"node_id":"MDU6SXNzdWUyMzg3MDA2NQ==","number":784,"title":"BeforeClass assumption failures handled differently than in other scopes","user":{"login":"jnersasi","id":3757889,"node_id":"MDQ6VXNlcjM3NTc4ODk=","avatar_url":"https://avatars.githubusercontent.com/u/3757889?v=4","gravatar_id":"","url":"https://api.github.com/users/jnersasi","html_url":"https://github.com/jnersasi","followers_url":"https://api.github.com/users/jnersasi/followers","following_url":"https://api.github.com/users/jnersasi/following{/other_user}","gists_url":"https://api.github.com/users/jnersasi/gists{/gist_id}","starred_url":"https://api.github.com/users/jnersasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jnersasi/subscriptions","organizations_url":"https://api.github.com/users/jnersasi/orgs","repos_url":"https://api.github.com/users/jnersasi/repos","events_url":"https://api.github.com/users/jnersasi/events{/privacy}","received_events_url":"https://api.github.com/users/jnersasi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2013-12-06T16:50:25Z","updated_at":"2013-12-06T16:50:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am using a subclass of RunListener to listen and respond to JUnit events.  I'm having an issue handling assumptionFailures in @BeforeClass annotated methods...\n\nIn other scopes (@Test or @Before methods) assumptionFailures seem to correctly call EachTestNotifier's addFailedAssumption() and in time fireTestAssumptionFailed methods as I would expect.  This is from the ParentRunner class:\n\n```\nprotected final void runLeaf(Statement statement, Description description,\n        RunNotifier notifier) {\n    EachTestNotifier eachNotifier = new EachTestNotifier(notifier, description);\n    eachNotifier.fireTestStarted();\n    try {\n        statement.evaluate();\n    } catch (AssumptionViolatedException e) {\n        eachNotifier.addFailedAssumption(e);\n    } catch (Throwable e) {\n        eachNotifier.addFailure(e);\n    } finally {\n        eachNotifier.fireTestFinished();\n    }\n} \n```\n\nWhen an AssumptionViolatedException is caught, listeners are notified of this.\n\nHowever, when an assumption failure is raised in a @BeforeClass annotated method instead we get a call to fireTestIgnored as can be seen here:\n\n```\npublic void run(final RunNotifier notifier) {\n    EachTestNotifier testNotifier = new EachTestNotifier(notifier,\n            getDescription());\n    try {\n        Statement statement = classBlock(notifier);\n        statement.evaluate();\n    } catch (AssumptionViolatedException e) {\n        testNotifier.fireTestIgnored();\n    } catch (StoppedByUserException e) {\n        throw e;\n    } catch (Throwable e) {\n        testNotifier.addFailure(e);\n    }\n}\n```\n\nNow an assumption failure looks the same as an ignored test although there is no corresponding @Ignore attribute to glean any information from.\n\nWhy is an assumption failure being turned into an ignored test only in this case?  Is there a reason it can't be treated as a normal assumptionFailure?  Since there is still logic being used to determine the validity of the assumption, this isn't the same as a straight up @Ignored test.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/784/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/784/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/781","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/781/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/781/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/781/events","html_url":"https://github.com/junit-team/junit4/issues/781","id":23643257,"node_id":"MDU6SXNzdWUyMzY0MzI1Nw==","number":781,"title":"Feature: assert comparsion result method","user":{"login":"voho","id":1161187,"node_id":"MDQ6VXNlcjExNjExODc=","avatar_url":"https://avatars.githubusercontent.com/u/1161187?v=4","gravatar_id":"","url":"https://api.github.com/users/voho","html_url":"https://github.com/voho","followers_url":"https://api.github.com/users/voho/followers","following_url":"https://api.github.com/users/voho/following{/other_user}","gists_url":"https://api.github.com/users/voho/gists{/gist_id}","starred_url":"https://api.github.com/users/voho/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/voho/subscriptions","organizations_url":"https://api.github.com/users/voho/orgs","repos_url":"https://api.github.com/users/voho/repos","events_url":"https://api.github.com/users/voho/events{/privacy}","received_events_url":"https://api.github.com/users/voho/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2013-12-03T13:48:33Z","updated_at":"2014-03-17T15:46:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, when testing comparable entities, some method for asserting the correct behavior - like this - would be useful and maybe generic enough to be in junit:\n\n``` java\n    public static void assertComparsionResult(Comparable lower, Comparable greater) {\n        assertTrue(\"first argument must be lower than second argument\", lower.compareTo(greater) < 0);\n        assertTrue(\"second argument must be greater than first argument\", greater.compareTo(lower) > 0);\n        assertEquals(\"first argument must be equal to itself\", 0L, lower.compareTo(lower));\n        assertEquals(\"second argument must be equal to itself\", greater.compareTo(greater));\n    }\n```\n\nWith possible extension to methods like this (array or iterable of comparables):\n\n``` java\npublic static void assertComparsionResult(Comparable... itemsInOrder) {\n  // ...\n}\n```\n\nThanks for considering and have a nice day :).\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/781/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/781/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/748","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/748/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/748/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/748/events","html_url":"https://github.com/junit-team/junit4/issues/748","id":20951244,"node_id":"MDU6SXNzdWUyMDk1MTI0NA==","number":748,"title":"Depending tests","user":{"login":"lstrzelecki","id":230871,"node_id":"MDQ6VXNlcjIzMDg3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/230871?v=4","gravatar_id":"","url":"https://api.github.com/users/lstrzelecki","html_url":"https://github.com/lstrzelecki","followers_url":"https://api.github.com/users/lstrzelecki/followers","following_url":"https://api.github.com/users/lstrzelecki/following{/other_user}","gists_url":"https://api.github.com/users/lstrzelecki/gists{/gist_id}","starred_url":"https://api.github.com/users/lstrzelecki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lstrzelecki/subscriptions","organizations_url":"https://api.github.com/users/lstrzelecki/orgs","repos_url":"https://api.github.com/users/lstrzelecki/repos","events_url":"https://api.github.com/users/lstrzelecki/events{/privacy}","received_events_url":"https://api.github.com/users/lstrzelecki/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2013-10-14T11:28:09Z","updated_at":"2014-01-02T13:13:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I want create One test which should be run at begining. Then should run or not other dependent test.\n\nReal example.\nWant create test which starts spring context. When its green than it run all tests which try crerate spring context. If this test will fail. Than rest of test shouldn't be invoked.\n\nCurrntly when you have multiple tests with spring. All test try to create spring in each test. And it take ages.\n\nI dont wont to use some configuration in maven/gradle plugins.\n\nTHIS feature request is NOT for creating tests which use same data. Each test should be independent.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/748/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/748/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/728","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/728/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/728/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/728/events","html_url":"https://github.com/junit-team/junit4/issues/728","id":18502783,"node_id":"MDU6SXNzdWUxODUwMjc4Mw==","number":728,"title":"Make Enclosed runner not try to run the tests in static nested classes without test methods","user":{"login":"vinaybansal","id":5299022,"node_id":"MDQ6VXNlcjUyOTkwMjI=","avatar_url":"https://avatars.githubusercontent.com/u/5299022?v=4","gravatar_id":"","url":"https://api.github.com/users/vinaybansal","html_url":"https://github.com/vinaybansal","followers_url":"https://api.github.com/users/vinaybansal/followers","following_url":"https://api.github.com/users/vinaybansal/following{/other_user}","gists_url":"https://api.github.com/users/vinaybansal/gists{/gist_id}","starred_url":"https://api.github.com/users/vinaybansal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vinaybansal/subscriptions","organizations_url":"https://api.github.com/users/vinaybansal/orgs","repos_url":"https://api.github.com/users/vinaybansal/repos","events_url":"https://api.github.com/users/vinaybansal/events{/privacy}","received_events_url":"https://api.github.com/users/vinaybansal/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2013-08-24T07:06:45Z","updated_at":"2017-01-27T09:06:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The Enclosed runner treats all static nested classes as test classes. If any static nested classes have no methods annotated with `@Test` you will get a failure. This prevents you from having a nested class that is a helper class. It would be great if Enclosed would ignore those classes.\n\nSuggestion: Make Enclosed runner ignore all the inner classes annotated with @Ignore just like it works for ignoring the tests with @Ignore.\n\n```\n@RunWith(Enclosed.class)\npublic class RootTest {\n\n  @Ignore\n  public static class B {\n    ......\n  }\n\n  public static class FooTest {\n    @Test\n    public void testFoo() {\n      B b = new B();\n      ....\n    }\n  }\n}\n```\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/728/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/728/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/695","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/695/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/695/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/695/events","html_url":"https://github.com/junit-team/junit4/issues/695","id":15602142,"node_id":"MDU6SXNzdWUxNTYwMjE0Mg==","number":695,"title":"@Ignore not taking effect when used on an overriden test method","user":{"login":"triceo","id":247403,"node_id":"MDQ6VXNlcjI0NzQwMw==","avatar_url":"https://avatars.githubusercontent.com/u/247403?v=4","gravatar_id":"","url":"https://api.github.com/users/triceo","html_url":"https://github.com/triceo","followers_url":"https://api.github.com/users/triceo/followers","following_url":"https://api.github.com/users/triceo/following{/other_user}","gists_url":"https://api.github.com/users/triceo/gists{/gist_id}","starred_url":"https://api.github.com/users/triceo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/triceo/subscriptions","organizations_url":"https://api.github.com/users/triceo/orgs","repos_url":"https://api.github.com/users/triceo/repos","events_url":"https://api.github.com/users/triceo/events{/privacy}","received_events_url":"https://api.github.com/users/triceo/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2013-06-16T08:07:03Z","updated_at":"2013-11-05T01:48:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When I have a test in super class which I then override in subclass and add the Ignore annotation to this overriden test, the test is run anyway. (Not ignored.)\n\nReproducer for the issue can be found here:\nhttps://github.com/triceo/junit/commit/14e5d37f09d7c822d93a172481796524017735ee\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/695/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/692","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/692/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/692/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/692/events","html_url":"https://github.com/junit-team/junit4/issues/692","id":15241904,"node_id":"MDU6SXNzdWUxNTI0MTkwNA==","number":692,"title":"Allow tests to notify listeners of saved files","user":{"login":"mc1arke","id":1250331,"node_id":"MDQ6VXNlcjEyNTAzMzE=","avatar_url":"https://avatars.githubusercontent.com/u/1250331?v=4","gravatar_id":"","url":"https://api.github.com/users/mc1arke","html_url":"https://github.com/mc1arke","followers_url":"https://api.github.com/users/mc1arke/followers","following_url":"https://api.github.com/users/mc1arke/following{/other_user}","gists_url":"https://api.github.com/users/mc1arke/gists{/gist_id}","starred_url":"https://api.github.com/users/mc1arke/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mc1arke/subscriptions","organizations_url":"https://api.github.com/users/mc1arke/orgs","repos_url":"https://api.github.com/users/mc1arke/repos","events_url":"https://api.github.com/users/mc1arke/events{/privacy}","received_events_url":"https://api.github.com/users/mc1arke/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2013-06-06T19:55:45Z","updated_at":"2014-11-09T20:33:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Tests that save files (screenshots, logs, data extracts etc) currently have no way of notifying external programs where these files have been saved, other than possibly by printing a line to a logger or System.out or by writing to a file that other programs are aware of. It would be nice for tests to be able to notify additional events (e.g file saved) to test listeners so that IDEs, CI servers or any other calling program can link to or load these for a user.\n\nKohsuke Kawaguchi did write a blog post sometime back about this: http://kohsuke.org/?s=junit+attachment which shows the hack created to allow Jenkins to attach files to test reports.\n\nActually implementing this is a bit of a challenge since tests don't have visibility of listeners. A couple of options I can think of for approaching this:\n1. Allow tests to have a constructor that takes a`FileListener` parameter for reporting file events to (with `FileListener` just being a wrapper round a list of `TestListener`s).\n2. Allow test to declare a `setFileEventListener(FileListener)` method, possibly from a new `FileHandlingTest` interface\n3. Create a `FileListenerRule` rule that records a list of saved files then throws a `FilesSaved` exception which runners pick up (similar to how `ErrorCollector` works).\n4. Create a special `FileListenerRule` rule which runners look for whilst constructing the test and inject any `TestListener`s into.\n\nOut of these options, 1 and 2 seem to be reverting to JUnit3 style structures so I'm not convinced they're particularly suitable. Option 3 isn't brilliant since it's using exceptions to handle flow control for non error scenarios, wouldn't work with custom runners (failures/errors would be reports for file saves) and may cause issues with some Rules. Option 4 wouldn't report file events for any custom runners that didn't inject listeners into the rule but wouldn't cause failures in this scenario, although does require runners interact directly with a particular rule type which some people may object to.\n\nI'm happy to create some code for the different options but want to know initial opinions about whether anyone wants this feature, and whether anyone has any strong opinions about how this should (or shouldn't) work.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/692/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/677","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/677/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/677/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/677/events","html_url":"https://github.com/junit-team/junit4/issues/677","id":14449867,"node_id":"MDU6SXNzdWUxNDQ0OTg2Nw==","number":677,"title":"Run a single test from a parameterized testclass by setting an environment variable.","user":{"login":"ge0ffrey","id":176880,"node_id":"MDQ6VXNlcjE3Njg4MA==","avatar_url":"https://avatars.githubusercontent.com/u/176880?v=4","gravatar_id":"","url":"https://api.github.com/users/ge0ffrey","html_url":"https://github.com/ge0ffrey","followers_url":"https://api.github.com/users/ge0ffrey/followers","following_url":"https://api.github.com/users/ge0ffrey/following{/other_user}","gists_url":"https://api.github.com/users/ge0ffrey/gists{/gist_id}","starred_url":"https://api.github.com/users/ge0ffrey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ge0ffrey/subscriptions","organizations_url":"https://api.github.com/users/ge0ffrey/orgs","repos_url":"https://api.github.com/users/ge0ffrey/repos","events_url":"https://api.github.com/users/ge0ffrey/events{/privacy}","received_events_url":"https://api.github.com/users/ge0ffrey/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2013-05-17T12:26:29Z","updated_at":"2014-11-18T16:29:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"See [this question on stackoverflow](http://stackoverflow.com/questions/16517300/junit-parameterized-tests-how-do-i-run-only-1-specific-test-from-intellij-eclip).\n\nIt seems there's no way to do this. If there's a way, it should be documented on the parameterized testclass wiki.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/677/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/677/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/673","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/673/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/673/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/673/events","html_url":"https://github.com/junit-team/junit4/issues/673","id":13962862,"node_id":"MDU6SXNzdWUxMzk2Mjg2Mg==","number":673,"title":"JUnit 4.12 issue when using theory + enum type + DataPoint that contains a null","user":{"login":"willix","id":1015622,"node_id":"MDQ6VXNlcjEwMTU2MjI=","avatar_url":"https://avatars.githubusercontent.com/u/1015622?v=4","gravatar_id":"","url":"https://api.github.com/users/willix","html_url":"https://github.com/willix","followers_url":"https://api.github.com/users/willix/followers","following_url":"https://api.github.com/users/willix/following{/other_user}","gists_url":"https://api.github.com/users/willix/gists{/gist_id}","starred_url":"https://api.github.com/users/willix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/willix/subscriptions","organizations_url":"https://api.github.com/users/willix/orgs","repos_url":"https://api.github.com/users/willix/repos","events_url":"https://api.github.com/users/willix/events{/privacy}","received_events_url":"https://api.github.com/users/willix/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2013-05-04T10:39:36Z","updated_at":"2013-09-04T22:38:13Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have a Theory with a parameter list that includes a String, a boolean, and an\nenum. The latter 2 should be automatically assigned and should not need any\nexplicit @DataPoint declaration (per the release note description below. When I\nrun the test, the enum param is assigned the null value instead of being\nassigned each value of the enum, and I'm not sure why this is not working for\nme. I would appreciate any help you can offer, please.\n\nI cloned master from here:\n\nhttps://github.com/junit-team/junit\n\n...and looked at the JUnit 4.12 release notes:\n\nhttps://github.com/junit-team/junit/wiki/4.12-release-notes\n\n...and scrolled-down to pull request #654 which says:\n\n\"Any theory method parameters with boolean or enum types that can't be supplied\nwith values by any other sources will be automatically supplied with default\nvalues: true and false, or every value of the given enum. If other explicitly\ndefined values are available (e.g. from a specified ParameterSupplier or some\nDataPoints method in the theory class), only those explicitly defined values\nwill be used.\"\n\nOn that same release notes page, I also see the comment under pull request #549,\nwhich says that a @DataPoint-annotated array field can contain null values.\n\nSo here's my test:\n\nimport org.junit.experimental.theories.DataPoints;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\n\n@RunWith(Theories.class)\npublic class QuickTest {\n\n@DataPoints\npublic static String[] platforms = new String[]{\"windows\", \"linux\", null};\n\npublic static enum JDKS {\nJDK6,\nJDK7,\n}\n\n@Theory\npublic void testFoo(String platform, boolean truth, JDKS j) throws Exception {\nSystem.out.println(platform + \":\" + truth + \":\" + j);\n}\n\n}\n\n...and here's the output:\nwindows:true:null\nwindows:false:null\nlinux:true:null\nlinux:false:null\nnull:true:null\nnull:false:null\n\n...which is not what I expected... I expected the 3rd value to be JDK6 or JDK7.\nI run a 2nd test, but this time I remove the null array element from the\n'platforms' field, and the results are expected:\n\nimport org.junit.experimental.theories.DataPoints;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\n\n@RunWith(Theories.class)\npublic class QuickTest {\n\n@DataPoints\npublic static String[] platforms = new String[]{\"windows\", \"linux\"};\n\npublic static enum JDKS {\nJDK6,\nJDK7,\n}\n\n@Theory\npublic void testFoo(String platform, boolean truth, JDKS j) throws Exception {\nSystem.out.println(platform + \":\" + truth + \":\" + j);\n}\n\n}\n\n...which results in:\nwindows:true:JDK6\nwindows:true:JDK7\nwindows:false:JDK6\nwindows:false:JDK7\nlinux:true:JDK6\nlinux:true:JDK7\nlinux:false:JDK6\nlinux:false:JDK7\n\nCool. But now just for fun, I remove the 'platform' param from testFoo and I\nrestore the null array element to 'platforms' field. Since there is no longer\nany String param in the param list (and since String is a final class so there's\nno possibility of an assignable subclass), I expect that the 'platforms'\nDataPoint will just be silently ignored and I would get the expected output. But\nI actually see the unexpected output, as if a null array element that exists in\na field (that's not even used in the Theory's param list) is affecting the\nvalues of a totally different type, the enum type (causing the enum param to\nreceive only a null value):\n\nimport org.junit.experimental.theories.DataPoints;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\n\n@RunWith(Theories.class)\npublic class QuickTest {\n\n@DataPoints\npublic static String[] platforms = new String[]{\"windows\", \"linux\", null};\n\npublic static enum JDKS {\nJDK6,\nJDK7,\n}\n\n@Theory\npublic void testFoo(boolean truth, JDKS j) throws Exception {\nSystem.out.println(truth + \":\" + j);\n}\n\n}\n\n...which results in:\ntrue:null\nfalse:null\n\nMy understanding is that this part of JUnit is relevant to recent work on theories by @pimterry.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/673/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/673/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/672","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/672/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/672/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/672/events","html_url":"https://github.com/junit-team/junit4/issues/672","id":13941741,"node_id":"MDU6SXNzdWUxMzk0MTc0MQ==","number":672,"title":"Custom data for the result XML report","user":{"login":"OndraZizka","id":644904,"node_id":"MDQ6VXNlcjY0NDkwNA==","avatar_url":"https://avatars.githubusercontent.com/u/644904?v=4","gravatar_id":"","url":"https://api.github.com/users/OndraZizka","html_url":"https://github.com/OndraZizka","followers_url":"https://api.github.com/users/OndraZizka/followers","following_url":"https://api.github.com/users/OndraZizka/following{/other_user}","gists_url":"https://api.github.com/users/OndraZizka/gists{/gist_id}","starred_url":"https://api.github.com/users/OndraZizka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OndraZizka/subscriptions","organizations_url":"https://api.github.com/users/OndraZizka/orgs","repos_url":"https://api.github.com/users/OndraZizka/repos","events_url":"https://api.github.com/users/OndraZizka/events{/privacy}","received_events_url":"https://api.github.com/users/OndraZizka/received_events","type":"User","site_admin":false},"labels":[{"id":79994,"node_id":"MDU6TGFiZWw3OTk5NA==","url":"https://api.github.com/repos/junit-team/junit4/labels/needs%20more%20info","name":"needs more info","color":"4ae6c7","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2013-05-03T16:27:44Z","updated_at":"2015-06-11T11:21:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In certain scenarios, it would be very handy to be able to add custom data to the xml report.\nExamples:\n- Mapping the test to set of requirements\n- Adding paths of screenshots taken during the test\n- Metrics taken during the test\n\nIt could be either taken from static data - annotations, or through an API.\n\n@Test @CustomReportData(\"foo=bar\")\nfooStatic() { ... }\n\nfooDynamic(){\n    this.setCustomReportData(\"name\", \"value\")\n}\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/672/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/671","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/671/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/671/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/671/events","html_url":"https://github.com/junit-team/junit4/issues/671","id":13897831,"node_id":"MDU6SXNzdWUxMzg5NzgzMQ==","number":671,"title":"@Parameters method is executed before @ClassRule initialization. Could it be the way around?","user":{"login":"javornikolov","id":203471,"node_id":"MDQ6VXNlcjIwMzQ3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/203471?v=4","gravatar_id":"","url":"https://api.github.com/users/javornikolov","html_url":"https://github.com/javornikolov","followers_url":"https://api.github.com/users/javornikolov/followers","following_url":"https://api.github.com/users/javornikolov/following{/other_user}","gists_url":"https://api.github.com/users/javornikolov/gists{/gist_id}","starred_url":"https://api.github.com/users/javornikolov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javornikolov/subscriptions","organizations_url":"https://api.github.com/users/javornikolov/orgs","repos_url":"https://api.github.com/users/javornikolov/repos","events_url":"https://api.github.com/users/javornikolov/events{/privacy}","received_events_url":"https://api.github.com/users/javornikolov/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2013-05-02T16:01:15Z","updated_at":"2021-05-11T14:17:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have the following problem (using _junit 4.11_):\n\n``` java\n    @ClassRule\n    public static TemporaryFolder tmp = new TemporaryFolder();\n    ...\n    @Parameters\n    public static Collection<Object[]> data() throws Exception {\n        return java.util.Arrays.asList(new Object[][] {\n            {0, tmp.getRoot().getPath()}\n        });\n    }\n```\n\nThis results in **initializationError**\n\n```\njava.lang.IllegalStateException: the temporary folder has not yet been created\n    at org.junit.rules.TemporaryFolder.getRoot(TemporaryFolder.java:127)\n```\n\nSo seems the _@Parameters_ method is executed before the _ClassRule_ initialization phase which makes scenarios like above one a bit complicated.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/671/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/671/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/670","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/670/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/670/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/670/events","html_url":"https://github.com/junit-team/junit4/issues/670","id":13889747,"node_id":"MDU6SXNzdWUxMzg4OTc0Nw==","number":670,"title":"JUnit should process annoations in package-info.java","user":{"login":"brianegge","id":175930,"node_id":"MDQ6VXNlcjE3NTkzMA==","avatar_url":"https://avatars.githubusercontent.com/u/175930?v=4","gravatar_id":"","url":"https://api.github.com/users/brianegge","html_url":"https://github.com/brianegge","followers_url":"https://api.github.com/users/brianegge/followers","following_url":"https://api.github.com/users/brianegge/following{/other_user}","gists_url":"https://api.github.com/users/brianegge/gists{/gist_id}","starred_url":"https://api.github.com/users/brianegge/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brianegge/subscriptions","organizations_url":"https://api.github.com/users/brianegge/orgs","repos_url":"https://api.github.com/users/brianegge/repos","events_url":"https://api.github.com/users/brianegge/events{/privacy}","received_events_url":"https://api.github.com/users/brianegge/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":22,"created_at":"2013-05-02T12:53:21Z","updated_at":"2017-04-05T07:20:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It would be useful to be able to add package level annotations to package-info.java. For example adding @org.junit.Ignore to the package should ignore all tests in that package.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/670/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/670/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/664","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/664/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/664/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/664/events","html_url":"https://github.com/junit-team/junit4/issues/664","id":13046999,"node_id":"MDU6SXNzdWUxMzA0Njk5OQ==","number":664,"title":"Run only a test of a class with Parameterized runner","user":{"login":"diogoeag","id":758998,"node_id":"MDQ6VXNlcjc1ODk5OA==","avatar_url":"https://avatars.githubusercontent.com/u/758998?v=4","gravatar_id":"","url":"https://api.github.com/users/diogoeag","html_url":"https://github.com/diogoeag","followers_url":"https://api.github.com/users/diogoeag/followers","following_url":"https://api.github.com/users/diogoeag/following{/other_user}","gists_url":"https://api.github.com/users/diogoeag/gists{/gist_id}","starred_url":"https://api.github.com/users/diogoeag/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/diogoeag/subscriptions","organizations_url":"https://api.github.com/users/diogoeag/orgs","repos_url":"https://api.github.com/users/diogoeag/repos","events_url":"https://api.github.com/users/diogoeag/events{/privacy}","received_events_url":"https://api.github.com/users/diogoeag/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null},{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":35,"created_at":"2013-04-11T00:09:09Z","updated_at":"2017-08-22T04:16:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using the Parameterized runner there is no possibility to run only a test method of a test class.\n\nFor example when running in maven: mvn test -Dtest=TesClass#testName\n\nNo tests are run when using the Parameterized runner.\n\nThat would be great to have this feature, has for development is comon to the developers trying to run only the test they are working on.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/664/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/664/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/656","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/656/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/656/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/656/events","html_url":"https://github.com/junit-team/junit4/issues/656","id":12426970,"node_id":"MDU6SXNzdWUxMjQyNjk3MA==","number":656,"title":"RunWith(Enclosed.class) should run tests in outer class","user":{"login":"christophsturm","id":1999,"node_id":"MDQ6VXNlcjE5OTk=","avatar_url":"https://avatars.githubusercontent.com/u/1999?v=4","gravatar_id":"","url":"https://api.github.com/users/christophsturm","html_url":"https://github.com/christophsturm","followers_url":"https://api.github.com/users/christophsturm/followers","following_url":"https://api.github.com/users/christophsturm/following{/other_user}","gists_url":"https://api.github.com/users/christophsturm/gists{/gist_id}","starred_url":"https://api.github.com/users/christophsturm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/christophsturm/subscriptions","organizations_url":"https://api.github.com/users/christophsturm/orgs","repos_url":"https://api.github.com/users/christophsturm/repos","events_url":"https://api.github.com/users/christophsturm/events{/privacy}","received_events_url":"https://api.github.com/users/christophsturm/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":15,"created_at":"2013-03-25T22:53:36Z","updated_at":"2017-06-16T13:18:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"in this example:\n\n<pre>\n@RunWith(Enclosed.class)\npublic class OuterClassTest  {\n    @Before\n    public void startStore() throws Exception {\n...\n    }\n\n    @Test\n    public void outerTest1() {\n...\n    }\n\n    public static class PoolTest extends JedisPoolTestBase {\n        private StatisticsStore storer;\n\n        @Before\n        public void setupStorer() {\n        }\n\n\n         @Test\n         public void innerTest1() {\n          ...  \n         }\n    }\n}\n</pre>\n\nonly innerTest1 runs. \nIt would be more useful if outerTest1 was also run.\nalso @Before classes in the outer class should run for tests in the inner class.\nthats how nested tests work in other languages.\nis this easily possible?\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/656/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/656/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/650","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/650/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/650/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/650/events","html_url":"https://github.com/junit-team/junit4/issues/650","id":11768601,"node_id":"MDU6SXNzdWUxMTc2ODYwMQ==","number":650,"title":"Implement RuleFactories to unify rule target generation sites.","user":{"login":"dsaff","id":46155,"node_id":"MDQ6VXNlcjQ2MTU1","avatar_url":"https://avatars.githubusercontent.com/u/46155?v=4","gravatar_id":"","url":"https://api.github.com/users/dsaff","html_url":"https://github.com/dsaff","followers_url":"https://api.github.com/users/dsaff/followers","following_url":"https://api.github.com/users/dsaff/following{/other_user}","gists_url":"https://api.github.com/users/dsaff/gists{/gist_id}","starred_url":"https://api.github.com/users/dsaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dsaff/subscriptions","organizations_url":"https://api.github.com/users/dsaff/orgs","repos_url":"https://api.github.com/users/dsaff/repos","events_url":"https://api.github.com/users/dsaff/events{/privacy}","received_events_url":"https://api.github.com/users/dsaff/received_events","type":"User","site_admin":false},"labels":[{"id":62034,"node_id":"MDU6TGFiZWw2MjAzNA==","url":"https://api.github.com/repos/junit-team/junit4/labels/feature","name":"feature","color":"3b7d2e","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2013-03-07T16:57:20Z","updated_at":"2014-10-27T18:49:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"See https://docs.google.com/document/d/1B6Z45BSGsY08rZqe2KUZTJ3RVsnUE1-HcXjl5MFm9ls/edit?usp=sharing\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/650/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/650/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/638","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/638/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/638/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/638/events","html_url":"https://github.com/junit-team/junit4/issues/638","id":11088753,"node_id":"MDU6SXNzdWUxMTA4ODc1Mw==","number":638,"title":"Multi-valued DataPoints methods are evaluated only once, but each single-valued DataPoint method is called once for each assignment","user":{"login":"pimterry","id":1526883,"node_id":"MDQ6VXNlcjE1MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/1526883?v=4","gravatar_id":"","url":"https://api.github.com/users/pimterry","html_url":"https://github.com/pimterry","followers_url":"https://api.github.com/users/pimterry/followers","following_url":"https://api.github.com/users/pimterry/following{/other_user}","gists_url":"https://api.github.com/users/pimterry/gists{/gist_id}","starred_url":"https://api.github.com/users/pimterry/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pimterry/subscriptions","organizations_url":"https://api.github.com/users/pimterry/orgs","repos_url":"https://api.github.com/users/pimterry/repos","events_url":"https://api.github.com/users/pimterry/events{/privacy}","received_events_url":"https://api.github.com/users/pimterry/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2013-02-17T16:32:05Z","updated_at":"2013-02-18T18:19:57Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"(This is primarily a note for me to look into this more shortly, since I've come up against it in #639)\n\n`@DataPoints` array methods are called once in AllMembersSupplier, and the values then reused for each theory. \n\nSingle DataPoint methods are instead called once for each possible assignment (for each unique and complete set of values for the given theory method)\n\nThis means that mutable values in DataPoints return values can be changed and then easily cause interactions between tests. Single DataPoint values can't though, and indeed there's a test specifically checking this (WithDataPointMethod.mutableObjectsAreCreatedAfresh).\n\nMeanwhile field values are always reused (since they clearly can't be regenerated).\n\nI think (debatable) both these datapoint method evaluation mechanisms should really be made to match instead, one way or the other, either by deferring array method execution somehow (quite complicated and hard to define), or by making single DataPoint values shared, as all other DataPoint values are.\n\nI think (very very debatable) just running each DataPoint method once at the start and reusing all the values consistently is better myself (more intuitive to use, much simpler to implement). Datapoints also arguably really shouldn't be mutable in normal usage anyway. Finally users that do desire this behaviour can instead create a ParameterSupplier to support their specific instances of this case (where values must be regenerated) fairly simply: define a ParameterSupplier that returns a PotentialAssignment subclass where getValue() generates the new value in some way, rather than just returning the same one.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/638/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/638/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/603","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/603/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/603/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/603/events","html_url":"https://github.com/junit-team/junit4/issues/603","id":9826231,"node_id":"MDU6SXNzdWU5ODI2MjMx","number":603,"title":"Discussing the checkstyle, code coverage and code analysis plugins in new build process.","user":{"login":"Tibor17","id":1045063,"node_id":"MDQ6VXNlcjEwNDUwNjM=","avatar_url":"https://avatars.githubusercontent.com/u/1045063?v=4","gravatar_id":"","url":"https://api.github.com/users/Tibor17","html_url":"https://github.com/Tibor17","followers_url":"https://api.github.com/users/Tibor17/followers","following_url":"https://api.github.com/users/Tibor17/following{/other_user}","gists_url":"https://api.github.com/users/Tibor17/gists{/gist_id}","starred_url":"https://api.github.com/users/Tibor17/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Tibor17/subscriptions","organizations_url":"https://api.github.com/users/Tibor17/orgs","repos_url":"https://api.github.com/users/Tibor17/repos","events_url":"https://api.github.com/users/Tibor17/events{/privacy}","received_events_url":"https://api.github.com/users/Tibor17/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":33,"created_at":"2013-01-09T23:49:23Z","updated_at":"2013-01-23T19:28:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"After #511 we may now discuss addons of Maven plugins which may automate the development process we are doing manually like checking the code style, checking code issues and test coverage.\n\n@avandeursen mentioned his link in #511 which forced me to start this discussion.\nhttp://avandeursen.wordpress.com/2012/12/21/line-coverage-lessons-from-junit\n\nAfter little searching on google:\n- checkstyle plugins\n  http://maven.apache.org/plugins/maven-checkstyle-plugin/index.html\n- code analysis plugins FindBug, PMD plugin maven 1x?\n- code coverage plugins JaCoCo, EMMA\n\nEMMA does not integrate with JUnit, and there might be more other plugins in these categories.\n\nHow much can we benefit from reports produced by these plugins ?\nHow can we integrate these reports in CloudBees/Jenkins ?\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/603/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/573","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/573/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/573/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/573/events","html_url":"https://github.com/junit-team/junit4/issues/573","id":9231541,"node_id":"MDU6SXNzdWU5MjMxNTQx","number":573,"title":"Theory that fails may return a more explanatory message","user":{"login":"olivierdemeijer","id":1926468,"node_id":"MDQ6VXNlcjE5MjY0Njg=","avatar_url":"https://avatars.githubusercontent.com/u/1926468?v=4","gravatar_id":"","url":"https://api.github.com/users/olivierdemeijer","html_url":"https://github.com/olivierdemeijer","followers_url":"https://api.github.com/users/olivierdemeijer/followers","following_url":"https://api.github.com/users/olivierdemeijer/following{/other_user}","gists_url":"https://api.github.com/users/olivierdemeijer/gists{/gist_id}","starred_url":"https://api.github.com/users/olivierdemeijer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/olivierdemeijer/subscriptions","organizations_url":"https://api.github.com/users/olivierdemeijer/orgs","repos_url":"https://api.github.com/users/olivierdemeijer/repos","events_url":"https://api.github.com/users/olivierdemeijer/events{/privacy}","received_events_url":"https://api.github.com/users/olivierdemeijer/received_events","type":"User","site_admin":false},"labels":[{"id":3631648,"node_id":"MDU6TGFiZWwzNjMxNjQ4","url":"https://api.github.com/repos/junit-team/junit4/labels/theories","name":"theories","color":"0b02e1","default":false,"description":null},{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2012-12-12T20:51:15Z","updated_at":"2016-01-02T08:27:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Actually, when a @theory fails, it throws a ParameterizedAssertionError that gives theory's method name and used argument(s) : ok, we know **what** failed. \nBut to know **why** it failed, one have to go deep down the stack trace (20+ lines of call stack) to retrieve the root cause of the failure, obviously the message returned by the failing assertion.\n\n_Example :_\nThere was 1 failure:\n    1) returnFizzWhenValueIsAMultipleOfThree(FizzBuzzTest)\n    org.junit.experimental.theories.internal.ParameterizedAssertionError: returnFizzWhenValueIsAMultipleOfThree(three)\n    at \n   **\\* Starting from here, information is irrelevant when trying to understand why a theory failed***\norg.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(Theories.java:183)\n   <26 lines of call stack cut>\n   ...  \n   at org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\n*\\*    Caused by: org.junit.ComparisonFailure: expected:<[fizz]> but was:<[a string]>*\\* At least !!\n    at org.junit.Assert.assertEquals(Assert.java:124)\n...\n\nI would suggest to add assertion failure message as a part of the ParameterizedAssertionError, in order to have all relevant and needed information on the very first line of the stack trace.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/573/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/560","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/560/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/560/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/560/events","html_url":"https://github.com/junit-team/junit4/issues/560","id":8803912,"node_id":"MDU6SXNzdWU4ODAzOTEy","number":560,"title":"Default method order should be taken from a project configuration option","user":{"login":"kretes","id":1224887,"node_id":"MDQ6VXNlcjEyMjQ4ODc=","avatar_url":"https://avatars.githubusercontent.com/u/1224887?v=4","gravatar_id":"","url":"https://api.github.com/users/kretes","html_url":"https://github.com/kretes","followers_url":"https://api.github.com/users/kretes/followers","following_url":"https://api.github.com/users/kretes/following{/other_user}","gists_url":"https://api.github.com/users/kretes/gists{/gist_id}","starred_url":"https://api.github.com/users/kretes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kretes/subscriptions","organizations_url":"https://api.github.com/users/kretes/orgs","repos_url":"https://api.github.com/users/kretes/repos","events_url":"https://api.github.com/users/kretes/events{/privacy}","received_events_url":"https://api.github.com/users/kretes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2012-11-29T10:15:11Z","updated_at":"2012-11-29T10:15:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It can be a system property, environment variable, anything so that it is easy to set the method order once for a whole project\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/560/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/560/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/559","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/559/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/559/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/559/events","html_url":"https://github.com/junit-team/junit4/issues/559","id":8803870,"node_id":"MDU6SXNzdWU4ODAzODcw","number":559,"title":"Provide an API or annotation to specify a class to use to order the test methods","user":{"login":"kretes","id":1224887,"node_id":"MDQ6VXNlcjEyMjQ4ODc=","avatar_url":"https://avatars.githubusercontent.com/u/1224887?v=4","gravatar_id":"","url":"https://api.github.com/users/kretes","html_url":"https://github.com/kretes","followers_url":"https://api.github.com/users/kretes/followers","following_url":"https://api.github.com/users/kretes/following{/other_user}","gists_url":"https://api.github.com/users/kretes/gists{/gist_id}","starred_url":"https://api.github.com/users/kretes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kretes/subscriptions","organizations_url":"https://api.github.com/users/kretes/orgs","repos_url":"https://api.github.com/users/kretes/repos","events_url":"https://api.github.com/users/kretes/events{/privacy}","received_events_url":"https://api.github.com/users/kretes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2012-11-29T10:13:49Z","updated_at":"2015-04-25T18:47:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When adding this annotation to a test super class -> it is not taken into account\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/559/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/559/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/530","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/530/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/530/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/530/events","html_url":"https://github.com/junit-team/junit4/issues/530","id":7625433,"node_id":"MDU6SXNzdWU3NjI1NDMz","number":530,"title":"Create a Rule-like structure that can replicate the behavior of Parameterized without using a custom runner","user":{"login":"dsaff","id":46155,"node_id":"MDQ6VXNlcjQ2MTU1","avatar_url":"https://avatars.githubusercontent.com/u/46155?v=4","gravatar_id":"","url":"https://api.github.com/users/dsaff","html_url":"https://github.com/dsaff","followers_url":"https://api.github.com/users/dsaff/followers","following_url":"https://api.github.com/users/dsaff/following{/other_user}","gists_url":"https://api.github.com/users/dsaff/gists{/gist_id}","starred_url":"https://api.github.com/users/dsaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dsaff/subscriptions","organizations_url":"https://api.github.com/users/dsaff/orgs","repos_url":"https://api.github.com/users/dsaff/repos","events_url":"https://api.github.com/users/dsaff/events{/privacy}","received_events_url":"https://api.github.com/users/dsaff/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2012-10-16T13:57:04Z","updated_at":"2015-08-06T17:35:44Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Highly speculative at this point.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/530/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/501","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/501/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/501/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/501/events","html_url":"https://github.com/junit-team/junit4/issues/501","id":6734907,"node_id":"MDU6SXNzdWU2NzM0OTA3","number":501,"title":"createSuiteDescription(\"foo\").isSuite() returning false","user":{"login":"schaarsc","id":2072104,"node_id":"MDQ6VXNlcjIwNzIxMDQ=","avatar_url":"https://avatars.githubusercontent.com/u/2072104?v=4","gravatar_id":"","url":"https://api.github.com/users/schaarsc","html_url":"https://github.com/schaarsc","followers_url":"https://api.github.com/users/schaarsc/followers","following_url":"https://api.github.com/users/schaarsc/following{/other_user}","gists_url":"https://api.github.com/users/schaarsc/gists{/gist_id}","starred_url":"https://api.github.com/users/schaarsc/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/schaarsc/subscriptions","organizations_url":"https://api.github.com/users/schaarsc/orgs","repos_url":"https://api.github.com/users/schaarsc/repos","events_url":"https://api.github.com/users/schaarsc/events{/privacy}","received_events_url":"https://api.github.com/users/schaarsc/received_events","type":"User","site_admin":false},"labels":[{"id":14312,"node_id":"MDU6TGFiZWwxNDMxMg==","url":"https://api.github.com/repos/junit-team/junit4/labels/bug","name":"bug","color":"ff0000","default":true,"description":null},{"id":77441,"node_id":"MDU6TGFiZWw3NzQ0MQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/nonregression","name":"nonregression","color":"ededed","default":false,"description":null},{"id":77558396,"node_id":"MDU6TGFiZWw3NzU1ODM5Ng==","url":"https://api.github.com/repos/junit-team/junit4/labels/descriptions","name":"descriptions","color":"009800","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2012-09-08T17:53:42Z","updated_at":"2014-06-15T17:22:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"with current implementation a Description is considered a Test unless it has children. the following test will fail\n<code>\nassertTrue( createSuiteDescription(\"foo\").isSuite() );\n</code>\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/501/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/501/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/497","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/497/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/497/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/497/events","html_url":"https://github.com/junit-team/junit4/issues/497","id":6639359,"node_id":"MDU6SXNzdWU2NjM5MzU5","number":497,"title":"Added an experimental Combination and Parameterized test suite.","user":{"login":"ccorsi","id":225037,"node_id":"MDQ6VXNlcjIyNTAzNw==","avatar_url":"https://avatars.githubusercontent.com/u/225037?v=4","gravatar_id":"","url":"https://api.github.com/users/ccorsi","html_url":"https://github.com/ccorsi","followers_url":"https://api.github.com/users/ccorsi/followers","following_url":"https://api.github.com/users/ccorsi/following{/other_user}","gists_url":"https://api.github.com/users/ccorsi/gists{/gist_id}","starred_url":"https://api.github.com/users/ccorsi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ccorsi/subscriptions","organizations_url":"https://api.github.com/users/ccorsi/orgs","repos_url":"https://api.github.com/users/ccorsi/repos","events_url":"https://api.github.com/users/ccorsi/events{/privacy}","received_events_url":"https://api.github.com/users/ccorsi/received_events","type":"User","site_admin":false},"labels":[{"id":80119535,"node_id":"MDU6TGFiZWw4MDExOTUzNQ==","url":"https://api.github.com/repos/junit-team/junit4/labels/parameterized","name":"parameterized","color":"0052cc","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2012-09-04T16:29:56Z","updated_at":"2014-02-12T15:37:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I was looking at how the Parameterized test suite works and thought of some extension to its current implementation.\n\nI want to extend it such that it was able to use a constructor or public fields/methods to pass the value{s} for each test.  \n\nThe other extension that I wanted was the ability to associate one or more Parameters annotation for a given test class and be able to associate these value{s} to specific test{s} within the test class.\n\nI have then extended the pre-Parameter annotation addition of the Parameterized test suite.\n\nThis current one has the ability to associate one or more Parameters annotation static public methods containing input values that can be associated to zero or more tests of the test class.\n\nThe Parameters annotation includes a tests field that is used to associate the parameters to zero or more tests using a regular expression, defaults to .*.\n\nThe Parameters annotation includes a attributes field that is used to associate the field/method that the values are going to be \napplied to, defaults to an empty array of Strings which defaults to using the constructor to pass the values. \n\nWhile the Combination test suite has the same capability as the Parameterized test suite.  The difference is that is passes all\npossible combinations of the input values.  The difference is that in the parameterized input values expects that each object array is a given set of values that will be injected for a given test.  While the Combination input values expects that each object array contains values for a given field/attribute. \n\nThis work is part of the https://github.com/ccorsi/junit fork.\n\nIt contains the two new experimental suites and associated tests.\n\nTake a look and let me know if you are interested in including these updates.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/497/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/497/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/486","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/486/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/486/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/486/events","html_url":"https://github.com/junit-team/junit4/issues/486","id":6302715,"node_id":"MDU6SXNzdWU2MzAyNzE1","number":486,"title":"Provide option for FilterRequest to not fail upon leaving no tests remaining","user":{"login":"cmosher01","id":1248516,"node_id":"MDQ6VXNlcjEyNDg1MTY=","avatar_url":"https://avatars.githubusercontent.com/u/1248516?v=4","gravatar_id":"","url":"https://api.github.com/users/cmosher01","html_url":"https://github.com/cmosher01","followers_url":"https://api.github.com/users/cmosher01/followers","following_url":"https://api.github.com/users/cmosher01/following{/other_user}","gists_url":"https://api.github.com/users/cmosher01/gists{/gist_id}","starred_url":"https://api.github.com/users/cmosher01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cmosher01/subscriptions","organizations_url":"https://api.github.com/users/cmosher01/orgs","repos_url":"https://api.github.com/users/cmosher01/repos","events_url":"https://api.github.com/users/cmosher01/events{/privacy}","received_events_url":"https://api.github.com/users/cmosher01/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2012-08-18T03:12:11Z","updated_at":"2013-11-15T21:47:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Currently, if FilterRequest filters out all tests leaving none remaining, it generates a bogus test \"Filter.class\" that automatically FAILs with \"No tests found matching...\" error message. Would like to have a way to disable this; having no matching tests could be perfectly acceptable in some situations. If this were disabled, FilterRunner.getRunner could instead return a new IgnoredClassRunner.\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/486/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/486/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/468","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/468/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/468/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/468/events","html_url":"https://github.com/junit-team/junit4/issues/468","id":5935673,"node_id":"MDU6SXNzdWU1OTM1Njcz","number":468,"title":"bug in ignore an overriding method","user":{"login":"inbarsto","id":2069057,"node_id":"MDQ6VXNlcjIwNjkwNTc=","avatar_url":"https://avatars.githubusercontent.com/u/2069057?v=4","gravatar_id":"","url":"https://api.github.com/users/inbarsto","html_url":"https://github.com/inbarsto","followers_url":"https://api.github.com/users/inbarsto/followers","following_url":"https://api.github.com/users/inbarsto/following{/other_user}","gists_url":"https://api.github.com/users/inbarsto/gists{/gist_id}","starred_url":"https://api.github.com/users/inbarsto/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/inbarsto/subscriptions","organizations_url":"https://api.github.com/users/inbarsto/orgs","repos_url":"https://api.github.com/users/inbarsto/repos","events_url":"https://api.github.com/users/inbarsto/events{/privacy}","received_events_url":"https://api.github.com/users/inbarsto/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2012-07-31T04:55:36Z","updated_at":"2013-11-05T01:48:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"i dont know if that is a bug or a \"feature\" but when tring to @Override  a method and then putting that overridden method in @Ignore then the method is not Ignored unless the parent method is also Ignored...\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/468/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/junit-team/junit4/issues/463","repository_url":"https://api.github.com/repos/junit-team/junit4","labels_url":"https://api.github.com/repos/junit-team/junit4/issues/463/labels{/name}","comments_url":"https://api.github.com/repos/junit-team/junit4/issues/463/comments","events_url":"https://api.github.com/repos/junit-team/junit4/issues/463/events","html_url":"https://github.com/junit-team/junit4/issues/463","id":5649466,"node_id":"MDU6SXNzdWU1NjQ5NDY2","number":463,"title":"Add ability for timeout to print full thread stack dump","user":{"login":"toddlipcon","id":14135,"node_id":"MDQ6VXNlcjE0MTM1","avatar_url":"https://avatars.githubusercontent.com/u/14135?v=4","gravatar_id":"","url":"https://api.github.com/users/toddlipcon","html_url":"https://github.com/toddlipcon","followers_url":"https://api.github.com/users/toddlipcon/followers","following_url":"https://api.github.com/users/toddlipcon/following{/other_user}","gists_url":"https://api.github.com/users/toddlipcon/gists{/gist_id}","starred_url":"https://api.github.com/users/toddlipcon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/toddlipcon/subscriptions","organizations_url":"https://api.github.com/users/toddlipcon/orgs","repos_url":"https://api.github.com/users/toddlipcon/repos","events_url":"https://api.github.com/users/toddlipcon/events{/privacy}","received_events_url":"https://api.github.com/users/toddlipcon/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":17,"created_at":"2012-07-16T20:44:21Z","updated_at":"2013-11-22T19:40:24Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using JUnit to run integration-style tests which involve several threads, or to test multi-threaded components, a deadlock or livelock bug can often result in a test timeout. The current behavior only provides the stack trace of the main test thread, which is not always sufficient to understand the true cause of the deadlock (the main thread may just be blocked on another worker thread).\n\nI'd like to add the ability to dump all of the thread stacks to stderr when a timeout is triggered. Does this seem like a reasonable default behavior, or something best enabled via some kind of property/configuration?\n","reactions":{"url":"https://api.github.com/repos/junit-team/junit4/issues/463/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/junit-team/junit4/issues/463/timeline","performed_via_github_app":null}],"issuesCount":81,"contributors":211,"pullRequests":19,"projectUrl":"https://github.com/junit-team/junit4","issuesUrl":"https://github.com/junit-team/junit4/issues","stars":8204,"watchers":8204,"forks":3113,"githubLicenseName":"EPL-1.0","openIssues":129,"createdAt":"2009-01-13T03:41:26Z","updatedAt":"2021-10-15T09:33:46Z","monthsSinceUpdated":0},{"id":"mockito-core@3.5.5","groupId":"org.mockito","artifactId":"mockito-core","version":"3.5.5","name":"mockito-core","description":"Most popular Mocking framework for unit tests written in Java","licenses":{"license":{"name":"The MIT License","url":"https://github.com/mockito/mockito/blob/master/LICENSE","distribution":"repo"}},"github":"https://github.com/mockito/mockito.git","latestVersion":"4.0.0","issues":[{"url":"https://api.github.com/repos/mockito/mockito/issues/2438","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2438/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2438/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2438/events","html_url":"https://github.com/mockito/mockito/issues/2438","id":1014190069,"node_id":"I_kwDOAF62v848c0_1","number":2438,"title":"Use appropriate Test Double terms in place of just \"Mock\"","user":{"login":"baincd","id":5075659,"node_id":"MDQ6VXNlcjUwNzU2NTk=","avatar_url":"https://avatars.githubusercontent.com/u/5075659?v=4","gravatar_id":"","url":"https://api.github.com/users/baincd","html_url":"https://github.com/baincd","followers_url":"https://api.github.com/users/baincd/followers","following_url":"https://api.github.com/users/baincd/following{/other_user}","gists_url":"https://api.github.com/users/baincd/gists{/gist_id}","starred_url":"https://api.github.com/users/baincd/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/baincd/subscriptions","organizations_url":"https://api.github.com/users/baincd/orgs","repos_url":"https://api.github.com/users/baincd/repos","events_url":"https://api.github.com/users/baincd/events{/privacy}","received_events_url":"https://api.github.com/users/baincd/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-10-02T22:36:10Z","updated_at":"2021-10-04T10:20:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"There are multiple Test Double types, of which mock is one of.  Some good references for Test Double types include posts from [Martin Fowler](https://martinfowler.com/bliki/TestDouble.html) and on [the Google Testing Blog](https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html).\r\n\r\nA \"Mock\" in Mockito (an instance create with the `@Mock` annotation, or with `Mockito.mock(...)`) can _actually_ be a Dummy Object, a Stub, a Mock, or a Spy depending on how it is used.\r\n\r\nThe use of the term \"Mock\" in Mockito leads to alot of confusion, and makes it very difficult to communicate between developers about Test Doubles.  It also leads to developers to incorrectly think a mock is the only Test Double type.\r\n\r\nI think it would greatly beneficial if the terms used in Mockito were changed/updated to reflect the Test Double terminology as commonly defined.  This is likely no small change and may need to be done as part of a new Major release.\r\n\r\nThere are also multiple possible approaches.  Below are a couple of ideas, but there very well may be better options for this migration.\r\n\r\n### \"Mock\" Option 1 - Migrate from the term \"Mock\" to \"TestDouble\"\r\n\r\nSince a \"Mock\" in Mockito can basically be any type of Test Double, just replace the term \"Mock\" with \"TestDouble\".  The type of test double would still be completely dependant on usage.\r\n\r\n- Define a new annotation `@TestDouble` and method `Mockito.testDouble(...)` that are basically aliases for  `@Mock` and `Mockito.mock(...)`\r\n- Deprecate `@Mock` and `Mockito.mock(...)` (Can be done at same time, or a later Major or Minor release)\r\n- Remove `@Mock` and `Mockito.mock(...)` (in a later Major release)\r\n\r\n### \"Mock\" Option 2 - Add \"DummyObject\", and \"Stub\" (and \"Spy\"?) as aliases for \"Mock\"\r\n\r\nAdd terms for \"DummyObject\", \"Stub\", which would be aliases for \"Mock\".  This is similar to how Spring Framework has a [service annotation that is just an aliases for component](https://www.baeldung.com/spring-component-repository-service) - this allows developers to use the term that is appropriate even though there is no difference in functionality.  If desired, in the future the functionality of the test double types could diverge.\r\n\r\nAlso should have an alias for a the Test Double term \"Spy\", but this is tricky to do without being confusing since Mockito already uses the term \"Spy\".\r\n\r\n- Define a new annotations `@DummyObject` and `@Stub` and methods `Mockito.dummyObject(...)` and `Mockito.stub(...)` that are basically aliases for `@Mock` and `Mockito.mock(...)`\r\n- Define a new annotation `@Spy` and method `Mockito.spy(...)` that are basically aliases for `@Mock` and `Mockito.mock(...)` (may need to do this after Spy is renamed, as described below)\r\n\r\n### \"Spy\"\r\nA \"Spy\" in Mockito does not match a Test Double definition of Spy.  In Mockito, a \"Spy\" adds verification to an implementation, whereas a Test Double spy is a Stub with verification.\r\n\r\n- Define a new annotation `@Verifiable` and method `Mockito.verifiable(...)` that are basically aliases for `@Spy` and `Mockito.spy(...)`\r\n- Deprecate `@Spy` and `Mockito.spy(...)` (Can be done at same time, or a later Major or Minor release)\r\n- Remove `@Spy` and `Mockito.spy(...)` (in a later Major release)\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2438/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2438/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2436","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2436/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2436/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2436/events","html_url":"https://github.com/mockito/mockito/issues/2436","id":1007443425,"node_id":"I_kwDOAF62v848DF3h","number":2436,"title":"mockito-inline on OpenJDK 17 fails to start due to ByteBuddy agent failure","user":{"login":"ascopes","id":73482956,"node_id":"MDQ6VXNlcjczNDgyOTU2","avatar_url":"https://avatars.githubusercontent.com/u/73482956?v=4","gravatar_id":"","url":"https://api.github.com/users/ascopes","html_url":"https://github.com/ascopes","followers_url":"https://api.github.com/users/ascopes/followers","following_url":"https://api.github.com/users/ascopes/following{/other_user}","gists_url":"https://api.github.com/users/ascopes/gists{/gist_id}","starred_url":"https://api.github.com/users/ascopes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ascopes/subscriptions","organizations_url":"https://api.github.com/users/ascopes/orgs","repos_url":"https://api.github.com/users/ascopes/repos","events_url":"https://api.github.com/users/ascopes/events{/privacy}","received_events_url":"https://api.github.com/users/ascopes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-09-26T16:52:22Z","updated_at":"2021-10-08T12:22:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It appears that GraalVM JDK 17 does not allow inline mocks of final classes to be made using mockito-inline or by adding the mockito inline extension file.\r\n\r\n```\r\norg.mockito.exceptions.base.MockitoInitializationException: Could not initialize inline Byte Buddy mock maker.\r\n\r\nIt appears as if your JDK does not supply a working agent attachment mechanism.\r\nJava               : 17\r\nJVM vendor name    : GraalVM Community\r\nJVM vendor version : 17+35-jvmci-21.3-b02\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 17+35-jvmci-21.3-b02\r\nJVM info           : mixed mode\r\nOS name            : Linux\r\nOS version         : 5.15.0-1-MANJARO\r\n```\r\n\r\nNot sure if this is the same issue as #2315 or #2122, so I have opened this to try and get some further clarification.\r\n\r\n---\r\n\r\nI have included the full code to reproduce, as well as the full exception trace itself below:\r\n\r\n`src/test/java/mockito/bug/FinalClassMockTest.java`\r\n```java\r\npackage mockito.bug;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\nclass FinalClassMockTest {\r\n  @Test\r\n  void try_to_mock() {\r\n    Mockito.mock(FinalClass.class);\r\n  }\r\n}\r\n```\r\n\r\n`mockito/bug/FinalClass.java`\r\n```java\r\npackage mockito.bug;\r\n\r\npublic final class FinalClass {\r\n  public void methodIWantToMock() {\r\n    System.out.println(\"I don't want to invoke this\");\r\n  }\r\n}\r\n```\r\n\r\n`pom.xml`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.example</groupId>\r\n    <artifactId>mockito-bug</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>17</maven.compiler.source>\r\n        <maven.compiler.target>17</maven.compiler.target>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter</artifactId>\r\n            <version>5.7.2</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-inline</artifactId>\r\n            <version>3.12.4</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</project>\r\n```\r\n\r\nFull error:\r\n```\r\njava.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)\r\n\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:88)\r\n\tat jdk.proxy2/jdk.proxy2.$Proxy11.isTypeMockable(Unknown Source)\r\n\tat org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:33)\r\n\tat org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:250)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:232)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:83)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1964)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1879)\r\n\tat mockito.bug.FinalClassMockTest.try_to_mock(FinalClassMockTest.java:9)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\r\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\r\nCaused by: java.lang.IllegalStateException: Failed to load interface org.mockito.plugins.MockMaker implementation declared in java.lang.CompoundEnumeration@20d3d15a\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:58)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:69)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:54)\r\n\tat org.mockito.internal.configuration.plugins.PluginRegistry.<init>(PluginRegistry.java:29)\r\n\tat org.mockito.internal.configuration.plugins.Plugins.<clinit>(Plugins.java:20)\r\n\tat org.mockito.internal.util.MockUtil.<clinit>(MockUtil.java:28)\r\n\t... 72 more\r\nCaused by: java.lang.reflect.InvocationTargetException\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:53)\r\n\t... 77 more\r\nCaused by: org.mockito.exceptions.base.MockitoInitializationException: \r\nCould not initialize inline Byte Buddy mock maker.\r\n\r\nIt appears as if your JDK does not supply a working agent attachment mechanism.\r\nJava               : 17\r\nJVM vendor name    : GraalVM Community\r\nJVM vendor version : 17+35-jvmci-21.3-b02\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 17+35-jvmci-21.3-b02\r\nJVM info           : mixed mode, sharing\r\nOS name            : Linux\r\nOS version         : 5.15.0-1-MANJARO\r\n\r\n\tat org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker.<init>(InlineDelegateByteBuddyMockMaker.java:246)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.<init>(InlineByteBuddyMockMaker.java:25)\r\n\t... 83 more\r\nCaused by: java.lang.IllegalStateException: Could not self-attach to current VM using external process\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.installExternal(ByteBuddyAgent.java:698)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:629)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:609)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:561)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:538)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker.<clinit>(InlineDelegateByteBuddyMockMaker.java:117)\r\n\t... 84 more\r\n\r\n\r\nProcess finished with exit code 255\r\n\r\n```\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2436/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2435","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2435/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2435/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2435/events","html_url":"https://github.com/mockito/mockito/issues/2435","id":1007400114,"node_id":"I_kwDOAF62v848C7Sy","number":2435,"title":"Help wanted: compiling mockito with native-image","user":{"login":"eiswind","id":1238044,"node_id":"MDQ6VXNlcjEyMzgwNDQ=","avatar_url":"https://avatars.githubusercontent.com/u/1238044?v=4","gravatar_id":"","url":"https://api.github.com/users/eiswind","html_url":"https://github.com/eiswind","followers_url":"https://api.github.com/users/eiswind/followers","following_url":"https://api.github.com/users/eiswind/following{/other_user}","gists_url":"https://api.github.com/users/eiswind/gists{/gist_id}","starred_url":"https://api.github.com/users/eiswind/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eiswind/subscriptions","organizations_url":"https://api.github.com/users/eiswind/orgs","repos_url":"https://api.github.com/users/eiswind/repos","events_url":"https://api.github.com/users/eiswind/events{/privacy}","received_events_url":"https://api.github.com/users/eiswind/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-26T14:00:57Z","updated_at":"2021-09-26T14:01:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am trying to compile mockito with mock-maker-proxy with graalvm native image, and I got stuck with the plugin mechanism (At least the stacktrace point to that). (In preparation for having some mockito suppport in spring-native https://github.com/spring-projects-experimental/spring-native/issues/1063)\r\n\r\nI know this maybe a little of topic, but having at least \"some\" mockito when running native tests made me get started with this.\r\n\r\nWhat I've got so far is\r\n- some proxy config\r\n- some reflection config\r\n- basic compiler args\r\n\r\nWhen I compile this example\r\nhttps://github.com/eiswind/native-mock-example\r\n\r\nI get a NPE at:\r\n\r\n```\r\n     Caused by: java.lang.NullPointerException\r\n       org.mockito.internal.configuration.plugins.Plugins.getStackTraceCleanerProvider(Plugins.java:26)\r\n       org.mockito.internal.exceptions.stacktrace.StackTraceFilter.<clinit>(StackTraceFilter.java:20)\r\n       com.oracle.svm.core.classinitialization.ClassInitializationInfo.invokeClassInitializer(ClassInitializationInfo.java:375)\r\n       com.oracle.svm.core.classinitialization.ClassInitializationInfo.initialize(ClassInitializationInfo.java:295)\r\n```\r\n\r\nfrom which I would guess that registry itself is null, but that makes only little sense.\r\nI added some --initialize-at-runtime for the plugins package but that didn't do it.\r\n\r\nSo for know I can only hope that this is something of interest and I really would appreciate some pointers what to try.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2435/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2435/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2423","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2423/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2423/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2423/events","html_url":"https://github.com/mockito/mockito/issues/2423","id":993170935,"node_id":"MDU6SXNzdWU5OTMxNzA5MzU=","number":2423,"title":"Mockito initialise performance","user":{"login":"keiki85","id":39191724,"node_id":"MDQ6VXNlcjM5MTkxNzI0","avatar_url":"https://avatars.githubusercontent.com/u/39191724?v=4","gravatar_id":"","url":"https://api.github.com/users/keiki85","html_url":"https://github.com/keiki85","followers_url":"https://api.github.com/users/keiki85/followers","following_url":"https://api.github.com/users/keiki85/following{/other_user}","gists_url":"https://api.github.com/users/keiki85/gists{/gist_id}","starred_url":"https://api.github.com/users/keiki85/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/keiki85/subscriptions","organizations_url":"https://api.github.com/users/keiki85/orgs","repos_url":"https://api.github.com/users/keiki85/repos","events_url":"https://api.github.com/users/keiki85/events{/privacy}","received_events_url":"https://api.github.com/users/keiki85/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-09-10T12:05:18Z","updated_at":"2021-10-03T16:01:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello it's me again :-),\r\n\r\nafter upgrading our big project from 1 to mockito 3 we have no performance problem, if all unit tests are run.\r\n\r\nYet in the daily developing work we recognised that current mockito needs round about 3 times the time to initialise Mockito itself.\r\nOn my laptop with an i7-10850H (6 normal, 6 HT, 5.1 GHz single max) CPU I see following stats for a simple Mockito.mock in a junit test.\r\n\r\nMockito 1: ~ 100ms\r\nMockito 3.2.14: 320-360 ms\r\n\r\nA bit of profiling showed me that default plugin loading and class generation for mockito itself  seems to be causing most of the time. Yet for me it's difficult to know or see the big picture here.\r\n\r\nI created a simple project to see the difference for yourself. \r\n[mockito-performance.zip](https://github.com/mockito/mockito/files/7143552/mockito-performance.zip)\r\n\r\nMaybe we can get closer to the earlier timings? \r\n\r\nThanks in advance","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2423/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2423/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2422","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2422/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2422/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2422/events","html_url":"https://github.com/mockito/mockito/issues/2422","id":992046428,"node_id":"MDU6SXNzdWU5OTIwNDY0Mjg=","number":2422,"title":"Provide result capture as well as argument capture","user":{"login":"quaff","id":143040,"node_id":"MDQ6VXNlcjE0MzA0MA==","avatar_url":"https://avatars.githubusercontent.com/u/143040?v=4","gravatar_id":"","url":"https://api.github.com/users/quaff","html_url":"https://github.com/quaff","followers_url":"https://api.github.com/users/quaff/followers","following_url":"https://api.github.com/users/quaff/following{/other_user}","gists_url":"https://api.github.com/users/quaff/gists{/gist_id}","starred_url":"https://api.github.com/users/quaff/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/quaff/subscriptions","organizations_url":"https://api.github.com/users/quaff/orgs","repos_url":"https://api.github.com/users/quaff/repos","events_url":"https://api.github.com/users/quaff/events{/privacy}","received_events_url":"https://api.github.com/users/quaff/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-09-09T10:14:05Z","updated_at":"2021-09-09T10:14:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It's common to assert or spy method return value, It would be nice if mockito provide equivalent to `ResultCaptor`:\r\n```java\r\nimport java.util.function.UnaryOperator;\r\n\r\nimport org.mockito.invocation.InvocationOnMock;\r\nimport org.mockito.stubbing.Answer;\r\n\r\npublic class ResultCaptor<T> implements Answer<T> {\r\n\r\n\tprivate T result;\r\n\r\n\tprivate final UnaryOperator<T> operator;\r\n\r\n\tpublic ResultCaptor() {\r\n\t\tthis.operator = UnaryOperator.identity();\r\n\t}\r\n\r\n\tpublic ResultCaptor(UnaryOperator<T> operator) {\r\n\t\tthis.operator = operator;\r\n\t}\r\n\r\n\tpublic T getResult() {\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\t@Override\r\n\tpublic T answer(InvocationOnMock invocationOnMock) throws Throwable {\r\n\t\tresult = operator.apply((T) invocationOnMock.callRealMethod());\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n```\r\nUsage:\r\n```java\r\n\tRedisConnectionFactory connectionFactory; // spied object\r\n\tResultCaptor<RedisConnection> resultCaptor = new ResultCaptor<>(Mockito::spy);\r\n\tgiven(connectionFactory.getConnection()).willAnswer(resultCaptor);\r\n\tdoSomething() // trigger redis publish\r\n\tverify(resultCaptor.getResult()).publish(channelCaptor.capture(), any());\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2422/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2422/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2401","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2401/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2401/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2401/events","html_url":"https://github.com/mockito/mockito/issues/2401","id":978021158,"node_id":"MDU6SXNzdWU5NzgwMjExNTg=","number":2401,"title":"Introducing the Ability to Mock Construction of Generic Types","user":{"login":"brandon1024","id":22732449,"node_id":"MDQ6VXNlcjIyNzMyNDQ5","avatar_url":"https://avatars.githubusercontent.com/u/22732449?v=4","gravatar_id":"","url":"https://api.github.com/users/brandon1024","html_url":"https://github.com/brandon1024","followers_url":"https://api.github.com/users/brandon1024/followers","following_url":"https://api.github.com/users/brandon1024/following{/other_user}","gists_url":"https://api.github.com/users/brandon1024/gists{/gist_id}","starred_url":"https://api.github.com/users/brandon1024/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brandon1024/subscriptions","organizations_url":"https://api.github.com/users/brandon1024/orgs","repos_url":"https://api.github.com/users/brandon1024/repos","events_url":"https://api.github.com/users/brandon1024/events{/privacy}","received_events_url":"https://api.github.com/users/brandon1024/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-24T12:01:26Z","updated_at":"2021-08-24T12:01:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"<!--\r\n> Hey,\r\n>\r\n> First thanks for reporting, in order to help us to classify issue can you make sure the following check boxes are checked ?\r\n>\r\n> If this is about mockito usage, the better way is to reach out to\r\n>\r\n>  - stackoverflow : https://stackoverflow.com/questions/tagged/mockito\r\n>  - the mailing-list  : https://groups.google.com/forum/#!forum/mockito / mockito@googlegroups.com\r\n>    (Note mailing-list is moderated to avoid spam)\r\n>\r\n> _This block can be removed_\r\n> _Something wrong in the template fix it here `.github/ISSUE_TEMPLATE.md`\r\n\r\n\r\ncheck that\r\n\r\n - [ ] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [ ] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [ ] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [ ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md)\r\n-->\r\n\r\nFirst of all, thank you for building an awesome testing library!\r\n\r\nI have recently started playing with mocked object construction. It's fantastic that this functionality is now available through plain ol' Mockito. It makes for some pretty elegant tests, especially when combined with `@Mock` using the `MockitoExtension`.\r\n\r\nOne limitation I've encountered is around mocking the constructions of parameterized types.\r\n\r\nHere's what I'd like to accomplish:\r\n```\r\n@ExtendWith(MockitoExtension.class)\r\nclass DefaultKafkaConsumerTest {\r\n\r\n    @Mock\r\n    private MockedConstruction<KafkaConsumer<String, String>> kafkaConsumerMockedConstruction;\r\n\r\n    @Test\r\n    void testMyThing() {\r\n        new DefaultKafkaConsumer<String, String>();\r\n        final KafkaConsumer<String, String> mockConsumer = kafkaConsumerMockedConstruction.constructed().get(0);\r\n        // ... assert\r\n    }\r\n```\r\n\r\nUnfortunately, this doesn't seem to work, as indicated by this message:\r\n```\r\nMockito cannot infer a static mock from a raw type for kafkaConsumerMockedConstruction\r\n\r\nInstead of @Mock MockedConstruction you need to specify a parameterized type\r\nFor example, if you would like to mock Sample.class, specify\r\n\r\n@Mock MockedConstruction<Sample>\r\n\r\nas the type parameter. If the type is itself parameterized, it should be specified as raw type.\r\n```\r\n\r\nAs suggested, I've updated my tests as follows:\r\n```\r\n@ExtendWith(MockitoExtension.class)\r\nclass DefaultKafkaConsumerTest {\r\n\r\n    @Mock\r\n    private MockedConstruction<KafkaConsumer> kafkaConsumerMockedConstruction;\r\n\r\n    @Test\r\n    void testMyThing() {\r\n        new DefaultKafkaConsumer<String, String>();\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        final KafkaConsumer<String, String> mockConsumer = kafkaConsumerMockedConstruction.constructed().get(0);\r\n        // ... assert\r\n    }\r\n```\r\n\r\nI'm less fond of suppressing warnings everywhere. I've extracted the unchecked operation into a helper method, but I think that just covers up the problem.\r\n\r\nI'm curious to understand the technical reason why the MockedConstruction generic parameter has to be a raw type. It's interesting that I can create generic mocks and argument captors, but I can't do this through mocked construction.\r\n\r\nThanks for your time!","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2401/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2401/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2391","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2391/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2391/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2391/events","html_url":"https://github.com/mockito/mockito/issues/2391","id":971213579,"node_id":"MDU6SXNzdWU5NzEyMTM1Nzk=","number":2391,"title":"mockStatic does not support static native methods","user":{"login":"nadernader99","id":1619657,"node_id":"MDQ6VXNlcjE2MTk2NTc=","avatar_url":"https://avatars.githubusercontent.com/u/1619657?v=4","gravatar_id":"","url":"https://api.github.com/users/nadernader99","html_url":"https://github.com/nadernader99","followers_url":"https://api.github.com/users/nadernader99/followers","following_url":"https://api.github.com/users/nadernader99/following{/other_user}","gists_url":"https://api.github.com/users/nadernader99/gists{/gist_id}","starred_url":"https://api.github.com/users/nadernader99/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nadernader99/subscriptions","organizations_url":"https://api.github.com/users/nadernader99/orgs","repos_url":"https://api.github.com/users/nadernader99/repos","events_url":"https://api.github.com/users/nadernader99/events{/privacy}","received_events_url":"https://api.github.com/users/nadernader99/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-08-15T20:06:52Z","updated_at":"2021-08-23T14:17:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Issue Summary \r\n\r\n Mockito is failing with 'MissingMethodInvocationException' while attempting to mock a class with static native methods. The class and unit test below will reproduce the issue. I am only able to mock either static methods with Mockito.mockStatic() or native methods with standard Mockito.mock(), but not methods that are both native and static.\r\n\r\n### Mockito Error Message\r\n\r\norg.mockito.exceptions.misusing.MissingMethodInvocationException: \r\nwhen() requires an argument which has to be 'a method call on a mock'.\r\nFor example:\r\n    when(mock.getArticles()).thenReturn(articles);\r\n\r\nAlso, this error might show up because:\r\n1. you stub either of: final/private/equals()/hashCode() methods.\r\n   Those methods *cannot* be stubbed/verified.\r\n   Mocking methods declared on non-public parent classes is not supported.\r\n2. inside when() you don't call method on mock but on some other object.\r\n\r\n### Code to Reproduce Issue\r\n\r\n```\r\npublic class StaticStuff {\r\n\r\n    public static native String nativeStaticNoParams();\r\n    \r\n}\r\n```\r\n\r\n```\r\n    @Test\r\n    public void testMockingStaticMethodWithoutParameters() {\r\n\r\n        try(MockedStatic<StaticStuff> attic = Mockito.mockStatic(StaticStuff.class)) {\r\n\r\n            attic.when(StaticStuff::nativeStaticNoParams).thenReturn(\"BAR\");\r\n            assertThat(StaticStuff.nativeStaticNoParams()).isEqualTo(\"BAR\");\r\n        }\r\n    }\r\n```\r\n### Version Info\r\n\r\nMockito Core and Inline version: 3.11.2\r\nJava version: 15.0.2. \r\nOS version: Windows 10 - build 19043.1165\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2391/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2370","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2370/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2370/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2370/events","html_url":"https://github.com/mockito/mockito/issues/2370","id":956632946,"node_id":"MDU6SXNzdWU5NTY2MzI5NDY=","number":2370,"title":"\"Could not initialize plugin: interface org.mockito.plugins.MockMaker\" on Android instrumented tests","user":{"login":"francescocervone","id":6197796,"node_id":"MDQ6VXNlcjYxOTc3OTY=","avatar_url":"https://avatars.githubusercontent.com/u/6197796?v=4","gravatar_id":"","url":"https://api.github.com/users/francescocervone","html_url":"https://github.com/francescocervone","followers_url":"https://api.github.com/users/francescocervone/followers","following_url":"https://api.github.com/users/francescocervone/following{/other_user}","gists_url":"https://api.github.com/users/francescocervone/gists{/gist_id}","starred_url":"https://api.github.com/users/francescocervone/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/francescocervone/subscriptions","organizations_url":"https://api.github.com/users/francescocervone/orgs","repos_url":"https://api.github.com/users/francescocervone/repos","events_url":"https://api.github.com/users/francescocervone/events{/privacy}","received_events_url":"https://api.github.com/users/francescocervone/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-07-30T10:47:31Z","updated_at":"2021-08-12T03:43:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This issue has been introduced in `3.11.2`, it doesn't occur on `3.11.1`.\r\n\r\nMockito fails mocking any class.\r\n\r\nThis code:\r\n```kotlin\r\nclass MyClassTest {\r\n  open class MyClass\r\n  private val myClass: MyClass = Mockito.mock(MyClass::class.java)\r\n}\r\n```\r\n\r\nCauses the following exception:\r\n\r\n```\r\njava.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)\r\n        at org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:84)\r\n        at java.lang.reflect.Proxy.invoke(Proxy.java:1006)\r\n        at $Proxy3.isTypeMockable(Unknown Source)\r\n        at org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:33)\r\n        at org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)\r\n        at org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:250)\r\n        at org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:232)\r\n        at org.mockito.internal.MockitoCore.mock(MockitoCore.java:83)\r\n        at org.mockito.Mockito.mock(Mockito.java:1954)\r\n        at com.example.MyClassTest.<init>(MyClassTest.kt:211)\r\n        ... 32 trimmed\r\n     Caused by: java.lang.IllegalStateException: Failed to load interface org.mockito.plugins.MockMaker implementation declared in sun.misc.CompoundEnumeration@555399f\r\n        at org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:57)\r\n        at org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:65)\r\n        at org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:50)\r\n        at org.mockito.internal.configuration.plugins.PluginRegistry.<init>(PluginRegistry.java:26)\r\n        at org.mockito.internal.configuration.plugins.Plugins.<clinit>(Plugins.java:20)\r\n        at org.mockito.internal.configuration.plugins.Plugins.getMockMaker(Plugins.java:36)\r\n        at org.mockito.internal.util.MockUtil.<clinit>(MockUtil.java:28)\r\n        ... 40 more\r\n     Caused by: java.lang.reflect.InvocationTargetException\r\n        at java.lang.reflect.Constructor.newInstance0(Native Method)\r\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:343)\r\n        at org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:52)\r\n        ... 46 more\r\n     Caused by: java.lang.ExceptionInInitializerError\r\n        at net.bytebuddy.utility.dispatcher.JavaDispatcher.of(JavaDispatcher.java:104)\r\n        at net.bytebuddy.description.type.TypeDescription$ForLoadedType.<clinit>(TypeDescription.java:8282)\r\n        at net.bytebuddy.description.type.TypeDescription$ForLoadedType.of(TypeDescription.java:8355)\r\n        at net.bytebuddy.implementation.bind.annotation.Super$Binder.<clinit>(Super.java:222)\r\n        at net.bytebuddy.implementation.bind.annotation.TargetMethodAnnotationDrivenBinder$ParameterBinder.<clinit>(TargetMethodAnnotationDrivenBinder.java:166)\r\n        at net.bytebuddy.implementation.MethodDelegation.withDefaultConfiguration(MethodDelegation.java:601)\r\n        at net.bytebuddy.implementation.MethodDelegation.to(MethodDelegation.java:271)\r\n        at org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.<init>(SubclassBytecodeGenerator.java:64)\r\n        at org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.<init>(SubclassBytecodeGenerator.java:74)\r\n        at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.<init>(SubclassByteBuddyMockMaker.java:37)\r\n        at org.mockito.android.internal.creation.AndroidByteBuddyMockMaker.<init>(AndroidByteBuddyMockMaker.java:22)\r\n        ... 49 more\r\n     Caused by: java.lang.IllegalStateException: Failed to create invoker for net.bytebuddy.utility.dispatcher.JavaDispatcher$Invoker\r\n        at net.bytebuddy.utility.dispatcher.JavaDispatcher$DynamicClassLoader.invoker(JavaDispatcher.java:1270)\r\n        at net.bytebuddy.utility.dispatcher.JavaDispatcher$Invoker$CreationAction.run(JavaDispatcher.java:431)\r\n        at net.bytebuddy.utility.dispatcher.JavaDispatcher$Invoker$CreationAction.run(JavaDispatcher.java:420)\r\n        at java.security.AccessController.doPrivileged(AccessController.java:43)\r\n        at net.bytebuddy.utility.dispatcher.JavaDispatcher.<clinit>(JavaDispatcher.java:65)\r\n        ... 60 more\r\n     Caused by: java.lang.UnsupportedOperationException: can't load this type of class file\r\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:591)\r\n        at net.bytebuddy.utility.dispatcher.JavaDispatcher$DynamicClassLoader.invoker(JavaDispatcher.java:1266)\r\n        ... 64 more\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2370/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2370/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2362","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2362/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2362/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2362/events","html_url":"https://github.com/mockito/mockito/issues/2362","id":947673077,"node_id":"MDU6SXNzdWU5NDc2NzMwNzc=","number":2362,"title":"Tests hanging when adding mockito-inline dependency and using cglib proxies","user":{"login":"marcusdacoregio","id":13255302,"node_id":"MDQ6VXNlcjEzMjU1MzAy","avatar_url":"https://avatars.githubusercontent.com/u/13255302?v=4","gravatar_id":"","url":"https://api.github.com/users/marcusdacoregio","html_url":"https://github.com/marcusdacoregio","followers_url":"https://api.github.com/users/marcusdacoregio/followers","following_url":"https://api.github.com/users/marcusdacoregio/following{/other_user}","gists_url":"https://api.github.com/users/marcusdacoregio/gists{/gist_id}","starred_url":"https://api.github.com/users/marcusdacoregio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marcusdacoregio/subscriptions","organizations_url":"https://api.github.com/users/marcusdacoregio/orgs","repos_url":"https://api.github.com/users/marcusdacoregio/repos","events_url":"https://api.github.com/users/marcusdacoregio/events{/privacy}","received_events_url":"https://api.github.com/users/marcusdacoregio/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-19T13:47:44Z","updated_at":"2021-07-19T13:55:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Problem:** When adding the `mockito-inline` dependency to the project some test classes stuck when running alone.\r\n\r\n**Example code:**\r\n```java\r\nimport net.sf.cglib.proxy.Enhancer;\r\nimport net.sf.cglib.proxy.FixedValue;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.Mockito;\r\n\r\npublic class MyClassCglibTests {\r\n\r\n//\tprivate static final MyOtherClass myOtherClass = Mockito.mock(MyOtherClass.class); // works if uncomment this line\r\n\r\n\t@Test\r\n\tpublic void stuck() {\r\n\t\tEnhancer enhancer = new Enhancer();\r\n\t\tenhancer.setSuperclass(StuckConfig.class);\r\n\t\tenhancer.setCallback((FixedValue) () -> null);\r\n\t\tStuckConfig stuckConfig = (StuckConfig) enhancer.create();\r\n\t}\r\n\r\n\tpublic static class StuckConfig {\r\n\t\tprivate static final MyOtherClass myOtherClass = Mockito.mock(MyOtherClass.class);\r\n\t}\r\n\r\n}\r\n```\r\n```groovy\r\ntestImplementation \"org.mockito:mockito-inline:3.9.0\"\r\ntestImplementation \"org.mockito:mockito-core:3.9.0\"\r\ntestImplementation \"org.junit.jupiter:junit-jupiter-engine:5.7.2\"\r\ntestImplementation \"cglib:cglib:3.2.4\"\r\n```\r\n\r\n**Sample:**\r\nhttps://github.com/marcusdacoregio/mockito-inline-stuck-bug\r\n\r\n**How to reproduce:** Run the test from `MyClassCglibTests.java` and the test will hang. To make it work you can either:\r\n - Remove the `mockito-inline` dependency\r\n - Initialize the mock in the parent class\r\n - Remove the `static` modifier from `myOtherClass` from `StuckConfig`\r\n\r\ncheck that\r\n\r\n - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2362/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2362/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2358","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2358/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2358/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2358/events","html_url":"https://github.com/mockito/mockito/issues/2358","id":944461863,"node_id":"MDU6SXNzdWU5NDQ0NjE4NjM=","number":2358,"title":"MockitoExtension while running testcases fail in Eclipse","user":{"login":"hiralketanshah","id":33491111,"node_id":"MDQ6VXNlcjMzNDkxMTEx","avatar_url":"https://avatars.githubusercontent.com/u/33491111?v=4","gravatar_id":"","url":"https://api.github.com/users/hiralketanshah","html_url":"https://github.com/hiralketanshah","followers_url":"https://api.github.com/users/hiralketanshah/followers","following_url":"https://api.github.com/users/hiralketanshah/following{/other_user}","gists_url":"https://api.github.com/users/hiralketanshah/gists{/gist_id}","starred_url":"https://api.github.com/users/hiralketanshah/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hiralketanshah/subscriptions","organizations_url":"https://api.github.com/users/hiralketanshah/orgs","repos_url":"https://api.github.com/users/hiralketanshah/repos","events_url":"https://api.github.com/users/hiralketanshah/events{/privacy}","received_events_url":"https://api.github.com/users/hiralketanshah/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-14T14:02:13Z","updated_at":"2021-08-05T09:10:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi All,\r\n\r\nWhenever I use the below line in the JUnit test class, it works well while processing using the maven build command but causes an issue when I try to run JUnit from the eclipse IDE.\r\nCode lines : \r\n```\r\n@ExtendWith({AemContextExtension.class, MockitoExtension.class})\r\n@MockitoSettings(strictness = Strictness.LENIENT)\r\n```\r\n\r\nError in Eclipse IDE : \r\n```\r\njava.lang.NoSuchMethodError: org.junit.jupiter.api.extension.ExtensionContext.getRequiredTestInstances()Lorg/junit/jupiter/api/extension/TestInstances;\r\n\tat org.mockito.junit.jupiter.MockitoExtension.beforeEach(MockitoExtension.java:141)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$null$0(TestMethodTestDescriptor.java:126)\r\n\tat org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:152)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:125)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:104)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)\r\n\tat java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)\r\n\tat java.util.Iterator.forEachRemaining(Unknown Source)\r\n\tat java.util.Spliterators$IteratorSpliterator.forEachRemaining(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.copyInto(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)\r\n\tat java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)\r\n\tat java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.evaluate(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline.forEach(Unknown Source)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)\r\n\tat org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$null$2(HierarchicalTestExecutor.java:92)\r\n\tat java.util.stream.ForEachOps$ForEachOp$OfRef.accept(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline$2$1.accept(Unknown Source)\r\n\tat java.util.Iterator.forEachRemaining(Unknown Source)\r\n\tat java.util.Spliterators$IteratorSpliterator.forEachRemaining(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.copyInto(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source)\r\n\tat java.util.stream.ForEachOps$ForEachOp.evaluateSequential(Unknown Source)\r\n\tat java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(Unknown Source)\r\n\tat java.util.stream.AbstractPipeline.evaluate(Unknown Source)\r\n\tat java.util.stream.ReferencePipeline.forEach(Unknown Source)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.lambda$execute$3(HierarchicalTestExecutor.java:92)\r\n\tat org.junit.platform.engine.support.hierarchical.SingleTestExecutor.executeSafely(SingleTestExecutor.java:66)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:77)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:51)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:43)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:170)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:154)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:90)\r\n\tat org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\r\n\tSuppressed: java.lang.NullPointerException\r\n\t\tat org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:181)\r\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$null$11(TestMethodTestDescriptor.java:214)\r\n\t\tat org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)\r\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:226)\r\n\t\tat java.util.ArrayList.forEach(Unknown Source)\r\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:224)\r\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterEachCallbacks(TestMethodTestDescriptor.java:213)\r\n\t\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:116)\r\n\t\t... 43 more\r\n```\r\n\r\nPOM Dependencies : \r\n`<dependency>\r\n                <groupId>org.junit</groupId>\r\n                <artifactId>junit-bom</artifactId>\r\n                <version>5.6.2</version>\r\n                <type>pom</type>\r\n                <scope>import</scope>\r\n            </dependency>\r\n            <dependency>\r\n\t\t\t    <groupId>org.jmockit</groupId>\r\n\t\t\t    <artifactId>jmockit</artifactId>\r\n\t\t\t    <version>1.24</version>\r\n\t\t\t    <scope>test</scope>\r\n\t\t\t</dependency>\r\n            <dependency>\r\n                <groupId>org.mockito</groupId>\r\n                <artifactId>mockito-core</artifactId>\r\n                <version>3.3.3</version>\r\n                <scope>test</scope>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.mockito</groupId>\r\n                <artifactId>mockito-junit-jupiter</artifactId>\r\n                <version>3.3.3</version>\r\n                <scope>test</scope>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>junit-addons</groupId>\r\n                <artifactId>junit-addons</artifactId>\r\n                <version>1.4</version>\r\n                <scope>test</scope>\r\n            </dependency>`\r\n\r\n\r\nRunning on : \r\nEclipse :  Oxygen.3a Release (4.7.3a)\r\n\r\nAny leads would be really helpful.\r\nThanks in advance.\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2358/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2358/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2357","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2357/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2357/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2357/events","html_url":"https://github.com/mockito/mockito/issues/2357","id":944118529,"node_id":"MDU6SXNzdWU5NDQxMTg1Mjk=","number":2357,"title":"ClassCastException in java11 (not in java8) when creating stubs for RETURNS_DEEP_STUBS","user":{"login":"marco-sanjuan","id":4165141,"node_id":"MDQ6VXNlcjQxNjUxNDE=","avatar_url":"https://avatars.githubusercontent.com/u/4165141?v=4","gravatar_id":"","url":"https://api.github.com/users/marco-sanjuan","html_url":"https://github.com/marco-sanjuan","followers_url":"https://api.github.com/users/marco-sanjuan/followers","following_url":"https://api.github.com/users/marco-sanjuan/following{/other_user}","gists_url":"https://api.github.com/users/marco-sanjuan/gists{/gist_id}","starred_url":"https://api.github.com/users/marco-sanjuan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marco-sanjuan/subscriptions","organizations_url":"https://api.github.com/users/marco-sanjuan/orgs","repos_url":"https://api.github.com/users/marco-sanjuan/repos","events_url":"https://api.github.com/users/marco-sanjuan/events{/privacy}","received_events_url":"https://api.github.com/users/marco-sanjuan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-14T07:09:43Z","updated_at":"2021-07-14T07:30:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi\r\n\r\nWe are migrating from Java8 to Java11, but this kind of test are failing, may be when using the deep stubing returns with  some complex collection structures:\r\n```\r\npackage example;\r\nimport static org.mockito.BDDMockito.*;\r\nimport java.util.*;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nclass Java8ToJava11IssueTest {\r\n    @Test\r\n    void shouldWork() {\r\n        Object1 object1 = mock(Object1.class, RETURNS_DEEP_STUBS);\r\n        given(object1.getObject2().getStructure().get(\"anyItem\")).willReturn(new HashMap<>());\r\n    }\r\n\r\n\tstatic class Object1 {\r\n\t\tpublic Object2 getObject2() { return new Object2(); }\r\n\t}\r\n\tstatic class Object2 {\r\n\t\tpublic Map<String, Map<String, List<String>>> getStructure() { return new HashMap<>(); }\r\n\t}\r\n}\r\n```\r\n\r\nWe are having ClassCastException on the willReturn casting:\r\n```\r\njava.lang.ClassCastException: class org.mockito.codegen.List$MockitoMock$710102794 cannot be cast to class java.util.Map (org.mockito.codegen.List$MockitoMock$710102794 is in unnamed module of loader 'app'; java.util.Map is in module java.base of loader 'bootstrap')\r\n\tat example.Java8ToJava11IssueTest.shouldWork(Java8ToJava11IssueTest.java:19)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\r\n```\r\n\r\nRunning on:\r\n* IntelliJ Ultimate 2021.1\r\n* OpenJDK 11\r\n* JUnit 5.5.2\r\n* Mockito 3.11.2\r\n* Windows 10\r\n\r\nExecution line: \r\n```\r\njava.exe -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:P:\\{USER}\\apps\\JetBrains\\Toolbox\\apps\\IDEA-U\\ch-0\\211.7628.21\\lib\\idea_rt.jar=52542:P:\\{USER}apps\\JetBrains\\Toolbox\\apps\\IDEA-U\\ch-0\\211.7628.21\\bin -Dfile.encoding=UTF-8 @P:\\{USER}\\AppData\\Local\\Temp\\3\\idea_arg_file1304649909 com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit5 example.Java8ToJava11IssueTest\r\n```\r\nHope it helps.\r\n\r\nThanks in advance!","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2357/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2357/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2352","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2352/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2352/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2352/events","html_url":"https://github.com/mockito/mockito/issues/2352","id":937475763,"node_id":"MDU6SXNzdWU5Mzc0NzU3NjM=","number":2352,"title":"test case should_stubbing_be_treated_as_interaction failed me when build mockito","user":{"login":"vitan","id":1930578,"node_id":"MDQ6VXNlcjE5MzA1Nzg=","avatar_url":"https://avatars.githubusercontent.com/u/1930578?v=4","gravatar_id":"","url":"https://api.github.com/users/vitan","html_url":"https://github.com/vitan","followers_url":"https://api.github.com/users/vitan/followers","following_url":"https://api.github.com/users/vitan/following{/other_user}","gists_url":"https://api.github.com/users/vitan/gists{/gist_id}","starred_url":"https://api.github.com/users/vitan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vitan/subscriptions","organizations_url":"https://api.github.com/users/vitan/orgs","repos_url":"https://api.github.com/users/vitan/repos","events_url":"https://api.github.com/users/vitan/events{/privacy}","received_events_url":"https://api.github.com/users/vitan/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-06T03:02:06Z","updated_at":"2021-07-06T03:06:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":" - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n \r\n```\r\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 s - in org.mockitousage.stubbing.SmartNullsGenericBugTest\r\n[INFO] Running org.mockitousage.stubbing.CallingRealMethodTest\r\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 s - in org.mockitousage.stubbing.CallingRealMethodTest\r\n[INFO] Running org.mockitousage.stubbing.StubbingWithCustomAnswerTest\r\n[INFO] Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in org.mockitousage.stubbing.StubbingWithCustomAnswerTest\r\n[INFO] Running org.mockitousage.stubbing.BasicStubbingTest\r\n[ERROR] Tests run: 13, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.013 s <<< FAILURE! - in org.mockitousage.stubbing.BasicStubbingTest\r\n[ERROR] should_stubbing_be_treated_as_interaction(org.mockitousage.stubbing.BasicStubbingTest)  Time elapsed: 0.005 s  <<< FAILURE!\r\njava.lang.AssertionError\r\n\tat org.mockitousage.stubbing.BasicStubbingTest.should_stubbing_be_treated_as_interaction(BasicStubbingTest.java:48)\r\n[INFO] Running org.mockitousage.stubbing.StubbingWithAdditionalAnswersTest\r\n[INFO] Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.519 s - in org.mockitousage.stubbing.StubbingWithAdditionalAnswersTest\r\n[INFO] Running org.mockitousage.stubbing.MisusingStubbingTest\r\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in org.mockitousage.stubbing.MisusingStubbingTest\r\n[INFO] Running org.mockitousage.stubbing.StubbingReturnsSelfTest\r\n[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.024 s - in org.mockitousage.stubbing.StubbingReturnsSelfTest\r\n[INFO] Running org.mockitousage.stubbing.StubbingUsingDoReturnTest\r\n[ERROR] Tests run: 21, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.012 s <<< FAILURE! - in org.mockitousage.stubbing.StubbingUsingDoReturnTest\r\n[ERROR] should_stubbing_be_treated_as_interaction(org.mockitousage.stubbing.StubbingUsingDoReturnTest)  Time elapsed: 0.001 s  <<< FAILURE!\r\njava.lang.AssertionError\r\n\tat org.mockitousage.stubbing.StubbingUsingDoReturnTest.should_stubbing_be_treated_as_interaction(StubbingUsingDoReturnTest.java:220)\r\n[INFO] Running org.mockitousage.stubbing.SmartNullsStubbingTest\r\n[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 s - in org.mockitousage.stubbing.SmartNullsStubbingTest\r\n[INFO] Running org.mockitousage.stubbing.ReturningDefaultValuesTest\r\n[INFO] Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 s - in org.mockitousage.stubbing.ReturningDefaultValuesTest\r\n[INFO] Running org.mockitousage.stubbing.StubbingWarningsTest\r\n[INFO] Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in org.mockitousage.stubbing.StubbingWarningsTest\r\n[INFO] Running org.mockitousage.stubbing.StubbingWithBadThrowablesTest\r\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 s - in org.mockitousage.stubbing.StubbingWithBadThrowablesTest\r\n\r\n.....\r\n\r\n[INFO] ------------------------------------------------------------------------\r\n[DEBUG] Full XMvn dependency report:\r\n[DEBUG] <gId>:<aId>:<ext>[:<classifier>:]<version> => <compat-version>, provided by <pkg-name> (<rpm-version>)\r\n[DEBUG]   org.fedoraproject.xmvn:xmvn-mojo:jar:SYSTEM => SYSTEM, provided by (none)\r\n[DEBUG]   org.fedoraproject.xmvn:xmvn-mojo:pom:SYSTEM => SYSTEM, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-resources-plugin:pom:2.6 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-resources-plugin:jar:2.6 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-compiler-plugin:pom:3.8.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-compiler-plugin:jar:3.8.1 => null, provided by (none)\r\n[DEBUG]   org.apache.felix:maven-bundle-plugin:pom:3.5.0 => null, provided by (none)\r\n[DEBUG]   org.apache.felix:maven-bundle-plugin:jar:3.5.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.mojo:exec-maven-plugin:pom:1.6.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.mojo:exec-maven-plugin:jar:1.6.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-surefire-plugin:pom:2.12.4 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-surefire-plugin:jar:2.12.4 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-jar-plugin:pom:3.1.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.plugins:maven-jar-plugin:jar:3.1.0 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm:pom:7.2 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy:pom:1.9.3 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy-dep:pom:1.10.3 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm-commons:pom:7.2 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm-tree:pom:7.2 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm-analysis:pom:7.2 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy-agent:pom:1.9.3 => null, provided by (none)\r\n[DEBUG]   org.objenesis:objenesis:pom:3.1 => null, provided by (none)\r\n[DEBUG]   org.opentest4j:opentest4j:pom:1.2 => null, provided by (none)\r\n[DEBUG]   org.hamcrest:hamcrest:pom:2.2 => null, provided by (none)\r\n[DEBUG]   junit:junit:pom:any => null, provided by (none)\r\n[DEBUG]   org.hamcrest:hamcrest-core:pom:1.3 => null, provided by (none)\r\n[DEBUG]   junit:junit:pom:4.12 => null, provided by (none)\r\n[DEBUG]   org.assertj:assertj-core:pom:3.13.2 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy:pom:1.10.2 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm:jar:7.2 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy:jar:1.9.3 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy-dep:jar:1.10.3 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm-commons:jar:7.2 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm-tree:jar:7.2 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm-analysis:jar:7.2 => null, provided by (none)\r\n[DEBUG]   net.bytebuddy:byte-buddy-agent:jar:1.9.3 => null, provided by (none)\r\n[DEBUG]   org.objenesis:objenesis:jar:3.1 => null, provided by (none)\r\n[DEBUG]   org.opentest4j:opentest4j:jar:1.2 => null, provided by (none)\r\n[DEBUG]   org.hamcrest:hamcrest:jar:2.2 => null, provided by (none)\r\n[DEBUG]   junit:junit:jar:4.12 => null, provided by (none)\r\n[DEBUG]   org.hamcrest:hamcrest-core:jar:1.3 => null, provided by (none)\r\n[DEBUG]   org.assertj:assertj-core:jar:3.13.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-api:pom:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.commons:commons-lang3:pom:3.8.1 => null, provided by (none)\r\n[DEBUG]   org.eclipse.sisu:org.eclipse.sisu.plexus:pom:0.3.3 => null, provided by (none)\r\n[DEBUG]   org.eclipse.sisu:org.eclipse.sisu.inject:pom:0.3.4 => null, provided by (none)\r\n[DEBUG]   javax.enterprise:cdi-api:pom:1.1 => null, provided by (none)\r\n[DEBUG]   javax.inject:javax.inject:pom:1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-classworlds:pom:2.5.2 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-component-annotations:pom:1.6 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.0.22 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-classworlds:pom:2.6.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:pom:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-settings:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-settings-builder:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-builder-support:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:pom:1.25 => null, provided by (none)\r\n[DEBUG]   org.sonatype.plexus:plexus-sec-dispatcher:pom:1.4 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:2.0.5 => null, provided by (none)\r\n[DEBUG]   org.sonatype.plexus:plexus-cipher:pom:1.4 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-repository-metadata:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-api:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model-builder:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.eclipse.sisu:org.eclipse.sisu.inject:pom:0.3.3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-resolver-provider:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-api:pom:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-spi:pom:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-util:pom:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-impl:pom:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.slf4j:slf4j-api:pom:1.7.25 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-utils:pom:3.2.1 => null, provided by (none)\r\n[DEBUG]   commons-io:commons-io:pom:2.5 => null, provided by (none)\r\n[DEBUG]   com.google.inject:guice:pom:4.2.1 => null, provided by (none)\r\n[DEBUG]   aopalliance:aopalliance:pom:1.0 => null, provided by (none)\r\n[DEBUG]   com.google.guava:guava:pom:25.1-android => null, provided by (none)\r\n[DEBUG]   com.google.guava:failureaccess:pom:1.0.1 => null, provided by (none)\r\n[DEBUG]   com.google.code.findbugs:jsr305:pom:3.0.2 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-component-annotations:pom:2.0.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model:pom:3.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.1.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-filtering:pom:3.1.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-utils:pom:3.0.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.0.24 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:pom:1.22 => null, provided by (none)\r\n[DEBUG]   org.sonatype.plexus:plexus-build-api:pom:0.0.7 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:1.5.8 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:pom:1.24 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.eclipse.sisu:org.eclipse.sisu.plexus:jar:0.3.3 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-classworlds:jar:2.6.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:jar:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-settings:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-settings-builder:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.sonatype.plexus:plexus-sec-dispatcher:jar:1.4 => null, provided by (none)\r\n[DEBUG]   org.sonatype.plexus:plexus-cipher:jar:1.4 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-builder-support:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-repository-metadata:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model-builder:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-resolver-provider:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.slf4j:slf4j-api:jar:1.7.25 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-impl:jar:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-api:jar:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-spi:jar:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.resolver:maven-resolver-util:jar:1.4.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-utils:jar:3.2.1 => null, provided by (none)\r\n[DEBUG]   org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.3 => null, provided by (none)\r\n[DEBUG]   javax.enterprise:cdi-api:jar:1.1 => null, provided by (none)\r\n[DEBUG]   com.google.inject:guice:jar:no_aop:4.2.1 => null, provided by (none)\r\n[DEBUG]   aopalliance:aopalliance:jar:1.0 => null, provided by (none)\r\n[DEBUG]   com.google.guava:guava:jar:25.1-android => null, provided by (none)\r\n[DEBUG]   com.google.guava:failureaccess:jar:1.0.1 => null, provided by (none)\r\n[DEBUG]   com.google.code.findbugs:jsr305:jar:3.0.2 => null, provided by (none)\r\n[DEBUG]   javax.inject:javax.inject:jar:1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-component-annotations:jar:2.0.0 => null, provided by (none)\r\n[DEBUG]   org.apache.commons:commons-lang3:jar:3.8.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model:jar:3.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:3.1.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-filtering:jar:3.1.1 => null, provided by (none)\r\n[DEBUG]   org.sonatype.plexus:plexus-build-api:jar:0.0.7 => null, provided by (none)\r\n[DEBUG]   commons-io:commons-io:jar:2.5 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:jar:1.24 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact:pom:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-incremental:pom:1.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-api:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-utils:pom:0.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-component-annotations:pom:1.5.5 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-java:pom:0.9.10 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm:pom:6.2 => null, provided by (none)\r\n[DEBUG]   com.thoughtworks.qdox:qdox:pom:2.0-M8 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-api:pom:2.8.4 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-manager:pom:2.8.4 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-api:pom:2.8.5 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-javac:pom:2.8.4 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:3.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact:jar:3.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:jar:1.25 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-incremental:jar:1.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-java:jar:0.9.10 => null, provided by (none)\r\n[DEBUG]   org.ow2.asm:asm:jar:6.2 => null, provided by (none)\r\n[DEBUG]   com.thoughtworks.qdox:qdox:jar:2.0-M8 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-api:jar:2.8.4 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-manager:jar:2.8.4 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-compiler-javac:jar:2.8.4 => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.core:pom:6.0.0 => null, provided by (none)\r\n[DEBUG]   biz.aQute.bnd:biz.aQute.bndlib:pom:4.2.0 => null, provided by (none)\r\n[DEBUG]   biz.aQute.bnd:biz.aQute.bnd.annotation:pom:4.3.0 => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.cmpn:pom:any => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.core:pom:any => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.annotation:pom:7.0.0 => null, provided by (none)\r\n[DEBUG]   biz.aQute.bnd:aQute.libg:pom:4.3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.felix:org.apache.felix.utils:pom:1.6.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:pom:3.3.9 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-compat:pom:3.3.9 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:pom:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:pom:3.3.3 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.2.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.reporting:maven-reporting-api:pom:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:pom:1.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.doxia:doxia-logging-api:pom:1.9 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-container-default:pom:1.7.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.1.1 => null, provided by (none)\r\n[DEBUG]   org.apache.xbean:xbean-reflect:pom:3.7 => null, provided by (none)\r\n[DEBUG]   com.google.guava:guava:pom:any => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-archiver:pom:2.6 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-archiver:pom:4.2.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.3.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-io:pom:3.2.0 => null, provided by (none)\r\n[DEBUG]   commons-io:commons-io:pom:2.6 => null, provided by (none)\r\n[DEBUG]   org.apache.commons:commons-compress:pom:1.19 => null, provided by (none)\r\n[DEBUG]   org.tukaani:xz:pom:1.8 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-dependency-tree:pom:3.0 => null, provided by (none)\r\n[DEBUG]   org.eclipse.aether:aether-util:pom:0.9.0.M2 => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.core:jar:6.0.0 => null, provided by (none)\r\n[DEBUG]   biz.aQute.bnd:biz.aQute.bndlib:jar:4.2.0 => null, provided by (none)\r\n[DEBUG]   biz.aQute.bnd:biz.aQute.bnd.annotation:jar:4.3.0 => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.annotation:jar:7.0.0 => null, provided by (none)\r\n[DEBUG]   biz.aQute.bnd:aQute.libg:jar:4.3.0 => null, provided by (none)\r\n[DEBUG]   org.osgi:osgi.cmpn:jar:any => null, provided by (none)\r\n[DEBUG]   org.apache.felix:org.apache.felix.utils:jar:1.6.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:jar:3.3.9 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:3.6.2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-compat:jar:3.3.9 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.wagon:wagon-provider-api:jar:3.3.3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.reporting:maven-reporting-api:jar:3.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.doxia:doxia-sink-api:jar:1.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.doxia:doxia-logging-api:jar:1.9 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.7.1 => null, provided by (none)\r\n[DEBUG]   org.apache.xbean:xbean-reflect:jar:3.7 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-archiver:jar:2.6 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-archiver:jar:4.2.0 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-io:jar:3.2.0 => null, provided by (none)\r\n[DEBUG]   org.apache.commons:commons-compress:jar:1.19 => null, provided by (none)\r\n[DEBUG]   org.tukaani:xz:jar:1.8 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-dependency-tree:jar:3.0 => null, provided by (none)\r\n[DEBUG]   org.eclipse.aether:aether-util:jar:0.9.0.M2 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:3.0.24 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-toolchain:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact:pom:2.2.1 => 2.2.1, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:1.5.15 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-project:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-settings:pom:2.2.1 => 2.2.1, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model:pom:2.2.1 => 2.2.1, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:pom:1.11 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-container-default:pom:1.0-alpha-9-stable-1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-profile:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact-manager:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-repository-metadata:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-registry:pom:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:pom:3.0.20 => null, provided by (none)\r\n[DEBUG]   org.apache.commons:commons-exec:pom:1.3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-toolchain:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-project:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-settings:jar:2.2.1 => 2.2.1, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-profile:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-registry:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-interpolation:jar:1.11 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-9-stable-1 => null, provided by (none)\r\n[DEBUG]   com.google.guava:guava:jar:any => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-model:jar:2.2.1 => 2.2.1, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact:jar:2.2.1 => 2.2.1, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-artifact-manager:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-repository-metadata:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-core:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-plugin-api:jar:2.2.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-utils:jar:3.0.20 => null, provided by (none)\r\n[DEBUG]   org.apache.commons:commons-exec:jar:1.3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:maven-surefire-common:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-api:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-logger-api:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-utils:pom:3.1.0 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-booter:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-toolchain:pom:3.0-alpha-2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-common-artifact-filters:pom:3.0.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-java:pom:1.0.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:maven-surefire-common:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-api:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-logger-api:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-booter:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven:maven-toolchain:jar:3.0-alpha-2 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-common-artifact-filters:jar:3.0.1 => null, provided by (none)\r\n[DEBUG]   org.codehaus.plexus:plexus-java:jar:1.0.1 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.shared:maven-shared-utils:jar:3.1.0 => null, provided by (none)\r\n[DEBUG]   commons-io:commons-io:jar:2.6 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-junit4:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:surefire-junit4:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:common-junit4:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:common-junit3:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:common-java5:pom:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:common-junit4:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:common-junit3:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG]   org.apache.maven.surefire:common-java5:jar:3.0.0-M3 => null, provided by (none)\r\n[DEBUG] Simplified XMvn dependency report:\r\n[DEBUG] <pkg-name> (<rpm-version>): <requested-versions>\r\n[DEBUG]   (none): 0.0.7, 0.1, 0.3.3, 0.3.4, 0.9.0.M2, 0.9.10, 1, 1.0, 1.0-alpha-9-stable-1, 1.0.1, 1.1, 1.10.2, 1.10.3, 1.11, 1.19, 1.2, 1.22, 1.24, 1.25, 1.3, 1.4, 1.4.1, 1.5.15, 1.5.5, 1.5.8, 1.6, 1.6.0, 1.7.1, 1.7.25, 1.8, 1.9, 1.9.3, 2.0-M8, 2.0.0, 2.0.5, 2.12.4, 2.2, 2.2.1, 2.5, 2.5.2, 2.6, 2.6.0, 2.8.4, 2.8.5, 25.1-android, 3.0, 3.0-alpha-2, 3.0.0, 3.0.0-M3, 3.0.1, 3.0.2, 3.0.20, 3.0.22, 3.0.24, 3.1, 3.1.0, 3.1.1, 3.13.2, 3.2.0, 3.2.1, 3.3.0, 3.3.3, 3.3.9, 3.5.0, 3.6.2, 3.7, 3.8.1, 4.12, 4.2.0, 4.2.1, 4.3.0, 6.0.0, 6.2, 7.0.0, 7.2, SYSTEM, any\r\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3:test (default-test) on project mockito-core: There are test failures.\r\n[ERROR] \r\n[ERROR] Please refer to /builddir/build/BUILD/mockito-3.1.2/target/surefire-reports for the individual test results.\r\n[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\r\n[ERROR] -> [Help 1]\r\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3:test (default-test) on project mockito-core: There are test failures.\r\nPlease refer to /builddir/build/BUILD/mockito-3.1.2/target/surefire-reports for the individual test results.\r\nPlease refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\r\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)\r\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)\r\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)\r\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)\r\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)\r\n    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)\r\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)\r\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)\r\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)\r\n    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)\r\n    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)\r\n    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)\r\n    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)\r\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\r\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\r\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\r\n    at java.lang.reflect.Method.invoke (Method.java:566)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)\r\nCaused by: org.apache.maven.plugin.MojoFailureException: There are test failures.\r\nPlease refer to /builddir/build/BUILD/mockito-3.1.2/target/surefire-reports for the individual test results.\r\nPlease refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.\r\n    at org.apache.maven.plugin.surefire.SurefireHelper.throwException (SurefireHelper.java:271)\r\n    at org.apache.maven.plugin.surefire.SurefireHelper.reportExecution (SurefireHelper.java:159)\r\n    at org.apache.maven.plugin.surefire.SurefirePlugin.handleSummary (SurefirePlugin.java:373)\r\n    at org.apache.maven.plugin.surefire.AbstractSurefireMojo.executeAfterPreconditionsChecked (AbstractSurefireMojo.java:1018)\r\n    at org.apache.maven.plugin.surefire.AbstractSurefireMojo.execute (AbstractSurefireMojo.java:848)\r\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)\r\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)\r\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)\r\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)\r\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)\r\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)\r\n    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)\r\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)\r\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)\r\n    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)\r\n    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)\r\n    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:956)\r\n    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:288)\r\n    at org.apache.maven.cli.MavenCli.main (MavenCli.java:192)\r\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\r\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\r\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\r\n    at java.lang.reflect.Method.invoke (Method.java:566)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)\r\n    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)\r\n[ERROR] \r\n```\r\n\r\n\r\n - [x] The problematic code (if that's possible) is copied here\r\n vim mockito-3.1.2/src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java +215\r\n```java\r\n@Test\r\npublic void should_stubbing_be_treated_as_interaction() throws Exception {\r\n         doReturn(\"foo\").when(mock).simpleMethod();\r\n         mock.simpleMethod();\r\n         try {\r\n             verifyNoMoreInteractions(mock);\r\n             fail();\r\n         } catch (NoInteractionsWanted e) {}\r\n}\r\n```\r\n\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n reproduced at version: 3.1.2 and 3.7.13\r\nI am build my mockio based on srpm:  https://download.fedoraproject.org/pub/fedora/linux/development/rawhide/Everything/source/tree/Packages/m/mockito-3.7.13-2.fc35.src.rpm\r\n\r\nhttps://koji.mbox.centos.org/pkgs/packages/mockito/3.1.2/2.module_el8.2.0+363+9996591c/src/mockito-3.1.2-2.module_el8.2.0+363+9996591c.src.rpm\r\n\r\n\r\n - [ ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2352/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2352/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2350","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2350/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2350/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2350/events","html_url":"https://github.com/mockito/mockito/issues/2350","id":936163790,"node_id":"MDU6SXNzdWU5MzYxNjM3OTA=","number":2350,"title":"Add ability to cleanly stub/verify overloaded methods","user":{"login":"jhale1805","id":47901316,"node_id":"MDQ6VXNlcjQ3OTAxMzE2","avatar_url":"https://avatars.githubusercontent.com/u/47901316?v=4","gravatar_id":"","url":"https://api.github.com/users/jhale1805","html_url":"https://github.com/jhale1805","followers_url":"https://api.github.com/users/jhale1805/followers","following_url":"https://api.github.com/users/jhale1805/following{/other_user}","gists_url":"https://api.github.com/users/jhale1805/gists{/gist_id}","starred_url":"https://api.github.com/users/jhale1805/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhale1805/subscriptions","organizations_url":"https://api.github.com/users/jhale1805/orgs","repos_url":"https://api.github.com/users/jhale1805/repos","events_url":"https://api.github.com/users/jhale1805/events{/privacy}","received_events_url":"https://api.github.com/users/jhale1805/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-03T03:59:42Z","updated_at":"2021-08-05T12:59:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Current Limitation\r\nIn the current version of Mockito (3.11.2 at the time of writing), I'm not finding a good way to stub or verify overloaded methods.\r\n\r\nConsider the following class:\r\n```java\r\nclass Foo {\r\n\r\n  int bar(boolean setting) { ... };\r\n  int bar(boolean setting, int otherSetting) { ... };\r\n\r\n}\r\n```\r\n\r\nIf I wanted to stub an invocation of *either* `bar()` method, I currently have to stub *both* versions of the method independently.\r\nSimilarly, if I wanted to verify that *either* of the `bar()` methods had been called, I'd have to verify each one independently.\r\n\r\n[This StackOverflow post](https://stackoverflow.com/q/46038220/14765128) illustrates the difficulty of finding a good workaround for this use case.\r\n\r\n## Impact\r\n- Tests become cluttered with multiple stubs/verifications, obscuring the primary purpose of the test.\r\n- The removal of an overloaded method breaks all tests that stub/verify that method.\r\n- The addition of an overloaded method creates the potential for uncaught errors in tests that stub/verify the existing overloaded methods.\r\n\r\n## Possible Solutions\r\n- Add an optional String parameter to the `when()` and `verify()` methods that will identify the overloaded method to stub/verify. \r\n     - As of yet I've never used Java's Reflection API, but a quick search inclines me to think this functionality could be powered by iterating through [Class.getDeclaredMethods()](https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#i25) and checking each `Method` object's [getName()](https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#i11) to identify which methods should be stubbed.\r\n```java\r\nFoo mockFoo = mock(Foo.class);\r\n\r\n// Proposed format\r\nverify(mockFoo, never(), 'bar');  \r\n\r\n// This would be equivalent to the following, but would still work \r\n// if `bar(String)` were added or `bar(boolean)` were removed.\r\nverify(mockFoo, never()).bar(anyBoolean());\r\nverify(mockFoo, never()).bar(anyBoolean(), anyInt());\r\n```\r\n\r\n- Create a version of an ArgumentMatcher that can match all versions of an overloaded method.\r\n```java\r\nFoo mockFoo = mock(Foo.class);\r\n\r\n// Proposed format\r\nwhen(mockFoo.bar(anyArgs()).thenReturn(42);   // `anyArgs()` returns the proposed ArgumentMatcher.\r\n\r\n// This would be equivalent to the following, but would still work \r\n// if `bar(String)` were added or `bar(boolean)` were removed.\r\nwhen(mockFoo.bar(anyBoolean())).thenReturn(42);\r\nwhen(mockFoo.bar(anyBoolean(), anyInt())).thenReturn(42);\r\n```\r\n\r\n## Forseen Complications\r\n- When stubbing overloaded methods with different return types, how would Mockito reconcile a valid value to return?\r\n- The first \"Possible Solution\" can't be updated automatically when someone refactors a method name via his/her IDE.\r\n- If using the first \"Possible Solution\", what happens if the given string doesn't match any method on the mock object?\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2350/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2348","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2348/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2348/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2348/events","html_url":"https://github.com/mockito/mockito/issues/2348","id":933107891,"node_id":"MDU6SXNzdWU5MzMxMDc4OTE=","number":2348,"title":"how to mock the static android.util.Log.i(String, String) ","user":{"login":"lannyf77","id":19765258,"node_id":"MDQ6VXNlcjE5NzY1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/19765258?v=4","gravatar_id":"","url":"https://api.github.com/users/lannyf77","html_url":"https://github.com/lannyf77","followers_url":"https://api.github.com/users/lannyf77/followers","following_url":"https://api.github.com/users/lannyf77/following{/other_user}","gists_url":"https://api.github.com/users/lannyf77/gists{/gist_id}","starred_url":"https://api.github.com/users/lannyf77/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lannyf77/subscriptions","organizations_url":"https://api.github.com/users/lannyf77/orgs","repos_url":"https://api.github.com/users/lannyf77/repos","events_url":"https://api.github.com/users/lannyf77/events{/privacy}","received_events_url":"https://api.github.com/users/lannyf77/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-29T21:13:15Z","updated_at":"2021-06-30T00:57:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"having a class which internally generates error msg and using static function of android,util.Log.i(String, String) to log the error (it could be some other static function to recored the failure).\r\n\r\n```\r\nclass Util {\r\n\r\n    public static void handleIntent(Intent intent, String Tag, String failMsg) {\r\n        ...\r\n            \r\n        if (true) { // for test\r\n            String s = failMsg; //getError(failCode);\r\n            Log.i(Tag, s);\r\n        }\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\nand the test is to verify the error message is logged (using mockito-inline 3.8.0):\r\n```\r\n @Test\r\n public void test_log() {\r\n\r\n    try (MockedStatic<Log> logMock = Mockito.mockStatic(Log.class)) {\r\n\r\n        Intent intent = getIntent();\r\n\r\n        // test\r\n        Util.handleIntent(intent, \"theTag\", \"+++TEST1\");\r\n\r\n        // verify\r\n        Mockito.verify(logMock, times(1)).i(eq(theTag), eq(\"+++TEST1\")); //<== does not compile\r\n        Log.i(eq(\"+++TEST1\"), eq(dataStr));\r\n\r\n     }\r\n }\r\n```\r\n\r\nwith `Mockito.verify(logMock, times(1))` only, it got error:\r\n```\r\norg.mockito.exceptions.misusing.NotAMockException: \r\nArgument passed to verify() is of type MockedStaticImpl and is not a mock!\r\nMake sure you place the parenthesis correctly!\r\nSee the examples of correct verifications:\r\n    verify(mock).someMethod();\r\n    verify(mock, times(10)).someMethod();\r\n    verify(mock, atLeastOnce()).someMethod();\r\n\r\n```\r\nhow to mock the `android.util.Log` and verify its `static android.util.Log.i(String, String)` has been called with the string?\r\n\r\n(powermock is not the option. it was using powermock and after update the mockito to 3.8.0 and powermock to 2.0.9, it starts to get a lot errors, and was suggested to replace the powermock with mockito-inline.)","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2348/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2346","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2346/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2346/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2346/events","html_url":"https://github.com/mockito/mockito/issues/2346","id":931797825,"node_id":"MDU6SXNzdWU5MzE3OTc4MjU=","number":2346,"title":"The order of when() with thenThrow() mocking and a null parameter matters when it should not","user":{"login":"poulok","id":82919061,"node_id":"MDQ6VXNlcjgyOTE5MDYx","avatar_url":"https://avatars.githubusercontent.com/u/82919061?v=4","gravatar_id":"","url":"https://api.github.com/users/poulok","html_url":"https://github.com/poulok","followers_url":"https://api.github.com/users/poulok/followers","following_url":"https://api.github.com/users/poulok/following{/other_user}","gists_url":"https://api.github.com/users/poulok/gists{/gist_id}","starred_url":"https://api.github.com/users/poulok/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/poulok/subscriptions","organizations_url":"https://api.github.com/users/poulok/orgs","repos_url":"https://api.github.com/users/poulok/repos","events_url":"https://api.github.com/users/poulok/events{/privacy}","received_events_url":"https://api.github.com/users/poulok/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-28T17:26:44Z","updated_at":"2021-08-08T20:54:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Mockito:** 3.11.0\r\n**JDK:** OpenJDK 12.0.2\r\n**OS:** Windows 10\r\n\r\nThe order of mocking methods using the `when()` method with `thenThrow()` matters when the mocked method accepts a null value and a non-null value. If the `when()` containing the null argument is mocked last, all mocks behave as expected. If the `when()` containing the null argument is mocked first, any successive mock for the method results in the exception defined in the previous mock to be thrown. See the example below:\r\n\r\n```\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport static org.junit.jupiter.api.Assertions.fail;\r\nimport static org.mockito.ArgumentMatchers.eq;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.when;\r\n\r\npublic class MockitoBugTest {\r\n\r\n\tinterface Foo {\r\n\t\tboolean accept(String str);\r\n\t}\r\n\r\n\tFoo foo = mock(Foo.class);\r\n\r\n\t@Test\r\n\tvoid testThatFails() {\r\n\t\twhen(foo.accept(eq(null))).thenThrow(NullPointerException.class);\r\n\t\ttry {\r\n\t\t\twhen(foo.accept(eq(\"\"))).thenThrow(IllegalArgumentException.class);\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tfail(\"Should not have encountered a NullPointerException\");\r\n\t\t}\r\n\r\n\t\tassertThrows(NullPointerException.class, () -> foo.accept(null));\r\n\t\tassertThrows(IllegalArgumentException.class, () -> foo.accept(\"\"));\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testThatPasses() {\r\n\t\twhen(foo.accept(eq(\"\"))).thenThrow(IllegalArgumentException.class);\r\n\t\twhen(foo.accept(eq(null))).thenThrow(NullPointerException.class);\r\n\r\n\t\tassertThrows(NullPointerException.class, () -> foo.accept(null));\r\n\t\tassertThrows(IllegalArgumentException.class, () -> foo.accept(\"\"));\r\n\t}\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2346/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2345","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2345/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2345/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2345/events","html_url":"https://github.com/mockito/mockito/issues/2345","id":930323279,"node_id":"MDU6SXNzdWU5MzAzMjMyNzk=","number":2345,"title":"why the mockito.when(jsonObjectSpy.put(…)).thenThrow(…), it actually changed the jsonObjectSpy","user":{"login":"lannyf77","id":19765258,"node_id":"MDQ6VXNlcjE5NzY1MjU4","avatar_url":"https://avatars.githubusercontent.com/u/19765258?v=4","gravatar_id":"","url":"https://api.github.com/users/lannyf77","html_url":"https://github.com/lannyf77","followers_url":"https://api.github.com/users/lannyf77/followers","following_url":"https://api.github.com/users/lannyf77/following{/other_user}","gists_url":"https://api.github.com/users/lannyf77/gists{/gist_id}","starred_url":"https://api.github.com/users/lannyf77/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lannyf77/subscriptions","organizations_url":"https://api.github.com/users/lannyf77/orgs","repos_url":"https://api.github.com/users/lannyf77/repos","events_url":"https://api.github.com/users/lannyf77/events{/privacy}","received_events_url":"https://api.github.com/users/lannyf77/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-25T16:23:12Z","updated_at":"2021-06-25T16:32:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"android library, using mockito-core 3.8.0\r\nmaking a setup for when calling the JSONObject.put(\"key\", value) then throw, \r\n`Mockito.when(jsonObjectSpy.put(anyString(), anyBoolean())).thenThrow(new JSONException(\"!!! test forced exception\"));`\r\n\r\nin earlier version (1.10.19) it was working without the when(...).thenThrow(...) setup, it can pass `null` to the function param annotated with `@NonNull`: \r\n```\r\nJSONObject outputObject = Util.addKeyToJson_booleanValue(jsonObjectSpy, null, true);\r\n```\r\n so that ` jsonObject.put(null, value);` can trigger the exception internally without the `when(...).thenThrow(...)` setup.\r\n\r\nbut after update to 3.8.0 (cannt pass null to the param with `@NonNull`), and added the `when(...).thenThrow(...)`\r\n```\r\n@Test\r\n    public void test_addKeyToJson_boolean_value() throws JSONException {\r\n        JSONObject jsonObjectSpy = Mockito.spy(new JSONObject());\r\n\r\n        Mockito.when(jsonObjectSpy.put(anyString(), anyBoolean())).thenThrow(new JSONException(\"!!! test forced exception\"));\r\n       \r\n        JSONObject outputObject = Util.addKeyToJson_booleanValue(jsonObjectSpy, \"null\", true);\r\n        assertEquals(0, outputObject.length()); //<=== fail\r\n    }\r\n```\r\nfor testing the `addKeyToJson_booleanValue(@NonNull JSONObject , @NonNull String, Boolean)` which it might throw internally\r\n```\r\nclass Util {\r\n    static JSONObject addKeyToJson_booleanValue(@NonNull JSONObject jsonObject, @NonNull String key, boolean value) {\r\n        try {\r\n            System.out.println(\"+++ +++ enter addKeyToJson(), jsonObject:\"+jsonObject+\", key:\"+key+\", val:\"+value);\r\n            jsonObject.put(key, value);\r\n        } catch (JSONException e) {\r\n            System.out.println(\"+++ +++ !!! exp addKeyToJson(), jsonObject:\"+jsonObject+\", key:\"+key+\", val:\"+value+\", ex:\"+e.toString());\r\n            e.printStackTrace();\r\n        }\r\n        return jsonObject;\r\n    }\r\n}\r\n```\r\nthe test is failing at `assertEquals(0, outputObject.length());` although it caught the exception from the `when(...).thenThrow(...)` setup.\r\n\r\nthe log shows after the line of `Mockito.when(jsonObjectSpy.put(anyString(), anyBoolean())).thenThrow(... ...);`, the `jsonObjectSpy` is not empty but with the key/value pair {\"\", false}.\r\n\r\nHowever if is not using the  `anyBoolean()` but `any()`, there is no key/value pair got put in jsonObjectSpy by the `when(...).thenThrow(...)`, but the `any()` does not match the condition to  trigger the exception, so it will still fail the test. \r\n\r\nIs this an expect behavior?\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2345/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2344","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2344/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2344/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2344/events","html_url":"https://github.com/mockito/mockito/issues/2344","id":929695452,"node_id":"MDU6SXNzdWU5Mjk2OTU0NTI=","number":2344,"title":"doThow(Throwable...) always return NPE","user":{"login":"nkiesel","id":1134209,"node_id":"MDQ6VXNlcjExMzQyMDk=","avatar_url":"https://avatars.githubusercontent.com/u/1134209?v=4","gravatar_id":"","url":"https://api.github.com/users/nkiesel","html_url":"https://github.com/nkiesel","followers_url":"https://api.github.com/users/nkiesel/followers","following_url":"https://api.github.com/users/nkiesel/following{/other_user}","gists_url":"https://api.github.com/users/nkiesel/gists{/gist_id}","starred_url":"https://api.github.com/users/nkiesel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nkiesel/subscriptions","organizations_url":"https://api.github.com/users/nkiesel/orgs","repos_url":"https://api.github.com/users/nkiesel/repos","events_url":"https://api.github.com/users/nkiesel/events{/privacy}","received_events_url":"https://api.github.com/users/nkiesel/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-06-24T23:36:48Z","updated_at":"2021-10-10T05:33:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have the following code\r\n\r\n```java\r\ndoThrow(SQLException.class).when(sql).getResultSet(any(Connection.class));\r\nException actual = assertThrows(Exception.class, () -> dao.getIAnnotations(con, 0L));\r\nassertTrue(actual instanceof SQLException); // works\r\n```\r\nwhich works.  However, if I change this to\r\n```java\r\nException expected = mock(SQLException.class);\r\ndoThrow(expected).when(sql).getResultSet(any(Connection.class));\r\nException actual = assertThrows(Exception.class, () -> dao.getIAnnotations(con, 0L));\r\nassertTrue(actual instanceof SQLException); // fails because `actual` is a NPE\r\n```\r\nit fails because `actual` is now a NPE.  I confirmed that the actual exception thrown by the tested code is `expected`.\r\n\r\nUpdate: I just found out that using a real instead of a mocked Exception object works!  That is good enough for me right now, but I still would like to understand why mocks do not work.\r\n```java\r\nException expected =  new SQLException();\r\ndoThrow(expected).when(sql).getResultSet(any(Connection.class));\r\nException actual = assertThrows(Exception.class, () -> dao.getIAnnotations(con, 0L));\r\nassertEquals(expected, actual); // works!\r\n```\r\n\r\n\r\nThis all is for mockito-inline-3.11.2\r\n\r\nWhat am I doing wrong here?\r\n\r\nThe motivation for the failing approach is that I want to make sure the actual exception is really thrown at the place where I expected it.\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2344/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2342","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2342/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2342/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2342/events","html_url":"https://github.com/mockito/mockito/issues/2342","id":928868127,"node_id":"MDU6SXNzdWU5Mjg4NjgxMjc=","number":2342,"title":"Can mock construction of 'new File()' with Mockito.mockConstruction","user":{"login":"popshi","id":5572421,"node_id":"MDQ6VXNlcjU1NzI0MjE=","avatar_url":"https://avatars.githubusercontent.com/u/5572421?v=4","gravatar_id":"","url":"https://api.github.com/users/popshi","html_url":"https://github.com/popshi","followers_url":"https://api.github.com/users/popshi/followers","following_url":"https://api.github.com/users/popshi/following{/other_user}","gists_url":"https://api.github.com/users/popshi/gists{/gist_id}","starred_url":"https://api.github.com/users/popshi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/popshi/subscriptions","organizations_url":"https://api.github.com/users/popshi/orgs","repos_url":"https://api.github.com/users/popshi/repos","events_url":"https://api.github.com/users/popshi/events{/privacy}","received_events_url":"https://api.github.com/users/popshi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-06-24T05:44:24Z","updated_at":"2021-09-07T00:34:48Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, \r\n\r\nI can't use Mockito.mockConstruction to mock the construction of 'File'. \r\nhttps://stackoverflow.com/questions/68097251/can-the-mockito3-mockconstruction-make-stub-on-new-file\r\n\r\nIt's better to have a way to return mock object or real object from the 'mockConstruction'. \r\n\r\n```\r\n         try (MockedConstruction<File> ignored = Mockito.mockConstruction(File.class,\r\n                (context) -> {\r\n                    if( context.arguments().get(0) == \"1\" } {\r\n                        File mock = mock(File.class);\r\n                        return mock;\r\n                    } else {\r\n                        return (File)context.constructor().newInstance(context.arguments().toArray());\r\n                    }\r\n\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2342/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2342/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2341","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2341/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2341/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2341/events","html_url":"https://github.com/mockito/mockito/issues/2341","id":927650614,"node_id":"MDU6SXNzdWU5Mjc2NTA2MTQ=","number":2341,"title":"Introduce regression test suite for Android ecosystem","user":{"login":"TimvdLippe","id":5948271,"node_id":"MDQ6VXNlcjU5NDgyNzE=","avatar_url":"https://avatars.githubusercontent.com/u/5948271?v=4","gravatar_id":"","url":"https://api.github.com/users/TimvdLippe","html_url":"https://github.com/TimvdLippe","followers_url":"https://api.github.com/users/TimvdLippe/followers","following_url":"https://api.github.com/users/TimvdLippe/following{/other_user}","gists_url":"https://api.github.com/users/TimvdLippe/gists{/gist_id}","starred_url":"https://api.github.com/users/TimvdLippe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TimvdLippe/subscriptions","organizations_url":"https://api.github.com/users/TimvdLippe/orgs","repos_url":"https://api.github.com/users/TimvdLippe/repos","events_url":"https://api.github.com/users/TimvdLippe/events{/privacy}","received_events_url":"https://api.github.com/users/TimvdLippe/received_events","type":"User","site_admin":false},"labels":[{"id":532126464,"node_id":"MDU6TGFiZWw1MzIxMjY0NjQ=","url":"https://api.github.com/repos/mockito/mockito/labels/please%20contribute","name":"please contribute","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-06-22T21:32:53Z","updated_at":"2021-07-05T20:25:21Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Per https://github.com/mockito/mockito/issues/2340#issuecomment-866347287\r\n\r\nWe should work on a test suite to prevent issues such as #2316 #2327 and #2340. Ultimately this should then also catch issues that arise in ByteBuddy with the bytecode magic that Mockito implicitly depends on.\r\n\r\nCC @robpridham-bbc","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2341/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2341/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2339","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2339/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2339/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2339/events","html_url":"https://github.com/mockito/mockito/issues/2339","id":927093543,"node_id":"MDU6SXNzdWU5MjcwOTM1NDM=","number":2339,"title":"How to mockito a new object in a method？","user":{"login":"afreetgo","id":3366292,"node_id":"MDQ6VXNlcjMzNjYyOTI=","avatar_url":"https://avatars.githubusercontent.com/u/3366292?v=4","gravatar_id":"","url":"https://api.github.com/users/afreetgo","html_url":"https://github.com/afreetgo","followers_url":"https://api.github.com/users/afreetgo/followers","following_url":"https://api.github.com/users/afreetgo/following{/other_user}","gists_url":"https://api.github.com/users/afreetgo/gists{/gist_id}","starred_url":"https://api.github.com/users/afreetgo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/afreetgo/subscriptions","organizations_url":"https://api.github.com/users/afreetgo/orgs","repos_url":"https://api.github.com/users/afreetgo/repos","events_url":"https://api.github.com/users/afreetgo/events{/privacy}","received_events_url":"https://api.github.com/users/afreetgo/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-06-22T10:44:22Z","updated_at":"2021-07-16T06:38:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"> Hey,\r\n>\r\n> How to mockito a new object in a method？\r\n>for example: \r\n`\r\n\r\n        public void add(String msg){\r\n               User user = new User();\r\n               boolean isFlag = user.send(msg);\r\n               if(isFlag){\r\n                      .....\r\n               }else{\r\n                      ....\r\n              }\r\n      }\r\n\r\n`\r\n> How to mock the send method executed by the user object?\r\n>Similar to \"whenNew\" method in powermock, is there the same function in mockito?\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2339/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2339/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2334","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2334/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2334/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2334/events","html_url":"https://github.com/mockito/mockito/issues/2334","id":926049360,"node_id":"MDU6SXNzdWU5MjYwNDkzNjA=","number":2334,"title":"Springboot project +IllegalArgumentException: object is not an instance of declaring class","user":{"login":"JingGwanWong","id":85598669,"node_id":"MDQ6VXNlcjg1NTk4NjY5","avatar_url":"https://avatars.githubusercontent.com/u/85598669?v=4","gravatar_id":"","url":"https://api.github.com/users/JingGwanWong","html_url":"https://github.com/JingGwanWong","followers_url":"https://api.github.com/users/JingGwanWong/followers","following_url":"https://api.github.com/users/JingGwanWong/following{/other_user}","gists_url":"https://api.github.com/users/JingGwanWong/gists{/gist_id}","starred_url":"https://api.github.com/users/JingGwanWong/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JingGwanWong/subscriptions","organizations_url":"https://api.github.com/users/JingGwanWong/orgs","repos_url":"https://api.github.com/users/JingGwanWong/repos","events_url":"https://api.github.com/users/JingGwanWong/events{/privacy}","received_events_url":"https://api.github.com/users/JingGwanWong/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-21T10:03:49Z","updated_at":"2021-08-03T18:45:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I use mockito to test my springboot project.\r\n SubjectService is the one I want to test. SubjectDao which extends ServiceImpl<xxxMapper,xxxEntity> class  is @Autowired in SubjectService . And I mock the SubjectDao in TestClass. Now it declare this \"IllegalArgumentException: object is not an instance of declaring class\". And how can I resolve it?\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2334/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2331","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2331/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2331/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2331/events","html_url":"https://github.com/mockito/mockito/issues/2331","id":922939350,"node_id":"MDU6SXNzdWU5MjI5MzkzNTA=","number":2331,"title":"Spy doesn't forward hashcode/equals to actual object","user":{"login":"cdalexndr","id":22418250,"node_id":"MDQ6VXNlcjIyNDE4MjUw","avatar_url":"https://avatars.githubusercontent.com/u/22418250?v=4","gravatar_id":"","url":"https://api.github.com/users/cdalexndr","html_url":"https://github.com/cdalexndr","followers_url":"https://api.github.com/users/cdalexndr/followers","following_url":"https://api.github.com/users/cdalexndr/following{/other_user}","gists_url":"https://api.github.com/users/cdalexndr/gists{/gist_id}","starred_url":"https://api.github.com/users/cdalexndr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cdalexndr/subscriptions","organizations_url":"https://api.github.com/users/cdalexndr/orgs","repos_url":"https://api.github.com/users/cdalexndr/repos","events_url":"https://api.github.com/users/cdalexndr/events{/privacy}","received_events_url":"https://api.github.com/users/cdalexndr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-06-16T18:14:49Z","updated_at":"2021-09-12T07:41:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Mockito 3.11.1\r\n\r\n```\r\npublic class MockitoTest {\r\n\r\n    private static class ValueHolder {\r\n        private final String value;\r\n\r\n        public ValueHolder( String value ) {\r\n            this.value = value;\r\n        }\r\n\r\n        public String getValue() {\r\n            return value;\r\n        }\r\n\r\n        @Override public boolean equals( Object o ) {\r\n            if (this == o) return true;\r\n            if (!(o instanceof ValueHolder)) return false;\r\n            ValueHolder that = (ValueHolder) o;\r\n            return getValue().equals( that.getValue() );\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash( getValue() );\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        ValueHolder value = new ValueHolder( \"test\" );\r\n        ValueHolder spy = Mockito.spy( value );\r\n        assert value.equals( spy );\r\n        assert spy.equals( value ); //fails\r\n        assert value.hashCode() == spy.hashCode(); //fails\r\n    }\r\n}\r\n```\r\n\r\n - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2331/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2321","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2321/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2321/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2321/events","html_url":"https://github.com/mockito/mockito/issues/2321","id":917537671,"node_id":"MDU6SXNzdWU5MTc1Mzc2NzE=","number":2321,"title":"Provide a bill of materials (BOM)","user":{"login":"realdadfish","id":208234,"node_id":"MDQ6VXNlcjIwODIzNA==","avatar_url":"https://avatars.githubusercontent.com/u/208234?v=4","gravatar_id":"","url":"https://api.github.com/users/realdadfish","html_url":"https://github.com/realdadfish","followers_url":"https://api.github.com/users/realdadfish/followers","following_url":"https://api.github.com/users/realdadfish/following{/other_user}","gists_url":"https://api.github.com/users/realdadfish/gists{/gist_id}","starred_url":"https://api.github.com/users/realdadfish/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/realdadfish/subscriptions","organizations_url":"https://api.github.com/users/realdadfish/orgs","repos_url":"https://api.github.com/users/realdadfish/repos","events_url":"https://api.github.com/users/realdadfish/events{/privacy}","received_events_url":"https://api.github.com/users/realdadfish/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-06-10T16:16:58Z","updated_at":"2021-06-11T13:20:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I figured that the number of Mockito artifacts grows, so it might be useful to provide a BOM (Bill Of Materials) that lists all versions of all artifacts in a central place.\r\n\r\nSuch a thing could then be consumed in a [Gradle multi project build](https://docs.gradle.org/current/userguide/multi_project_builds.html) through\r\n\r\n```kotlin\r\n// my.platform.project:test\r\nplugins {\r\n    id(\"java-platform\")\r\n}\r\n\r\ndependencies {\r\n    api(platform(\"org.mockito:mockito-bom:$someVersion\"))\r\n}\r\n```\r\n\r\nand this could be referenced in individual module files like so:\r\n\r\n```kotlin\r\ndependencies {\r\n    testImplementation(platform(\"my.platform.project:test\"))\r\n\r\n    testImplementation(\"org.mockito:mockito-core\")\r\n    testImplementation(\"org.mockito:mockito-junit-jupiter\")\r\n}\r\n```\r\nCreating and publishing such a BOM should be fairly easy. Thanks!","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2321/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2321/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2319","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2319/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2319/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2319/events","html_url":"https://github.com/mockito/mockito/issues/2319","id":915533725,"node_id":"MDU6SXNzdWU5MTU1MzM3MjU=","number":2319,"title":"It would be nice if `verifyNoMoreInteractions` reports actual call site inside java 8 streams","user":{"login":"rslemos","id":954487,"node_id":"MDQ6VXNlcjk1NDQ4Nw==","avatar_url":"https://avatars.githubusercontent.com/u/954487?v=4","gravatar_id":"","url":"https://api.github.com/users/rslemos","html_url":"https://github.com/rslemos","followers_url":"https://api.github.com/users/rslemos/followers","following_url":"https://api.github.com/users/rslemos/following{/other_user}","gists_url":"https://api.github.com/users/rslemos/gists{/gist_id}","starred_url":"https://api.github.com/users/rslemos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rslemos/subscriptions","organizations_url":"https://api.github.com/users/rslemos/orgs","repos_url":"https://api.github.com/users/rslemos/repos","events_url":"https://api.github.com/users/rslemos/events{/privacy}","received_events_url":"https://api.github.com/users/rslemos/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-08T21:28:20Z","updated_at":"2021-06-08T21:28:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"My test case runs a java 8 stream with a ```Stream.map(mock::method)``` inside it.\r\n\r\nOn failure, `verifyNoMoreInteractions(mock)` reports the call site  to be `java.util.stream.ReferencePipeline` (which it actually is, but also unhelpful):\r\n\r\n```\r\norg.mockito.exceptions.verification.NoInteractionsWanted: \r\nNo interactions wanted here:\r\n at .....\r\nBut found this interaction on mock 'executor':\r\n at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n***\r\n```\r\n\r\nI'm using org.mockito:mockito-core:3.11.0.\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2319/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2319/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2315","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2315/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2315/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2315/events","html_url":"https://github.com/mockito/mockito/issues/2315","id":911435459,"node_id":"MDU6SXNzdWU5MTE0MzU0NTk=","number":2315,"title":"Mock enum with methods fails on Java 17","user":{"login":"johanjanssen-sanoma","id":59596566,"node_id":"MDQ6VXNlcjU5NTk2NTY2","avatar_url":"https://avatars.githubusercontent.com/u/59596566?v=4","gravatar_id":"","url":"https://api.github.com/users/johanjanssen-sanoma","html_url":"https://github.com/johanjanssen-sanoma","followers_url":"https://api.github.com/users/johanjanssen-sanoma/followers","following_url":"https://api.github.com/users/johanjanssen-sanoma/following{/other_user}","gists_url":"https://api.github.com/users/johanjanssen-sanoma/gists{/gist_id}","starred_url":"https://api.github.com/users/johanjanssen-sanoma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/johanjanssen-sanoma/subscriptions","organizations_url":"https://api.github.com/users/johanjanssen-sanoma/orgs","repos_url":"https://api.github.com/users/johanjanssen-sanoma/repos","events_url":"https://api.github.com/users/johanjanssen-sanoma/events{/privacy}","received_events_url":"https://api.github.com/users/johanjanssen-sanoma/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false},"assignees":[{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":23,"created_at":"2021-06-04T12:09:33Z","updated_at":"2021-09-24T20:55:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The following fails on Java 17 and works on 11 and 16:\r\n```\r\npublic enum ExampleEnum {\r\n    TEST {\r\n        public String retrieve() {\r\n            return \"test\";\r\n        }\r\n    };\r\n\r\n    public String getValue() {\r\n        return \"21\";\r\n    }\r\n}\r\n```\r\n\r\n```\r\npublic class Container {\r\n    private ExampleEnum exampleEnum;\r\n    public Container(ExampleEnum exampleEnum) {\r\n        this.exampleEnum = exampleEnum;\r\n    }\r\n\r\n    public String retrieveValue() {\r\n        return exampleEnum.getValue();\r\n    }\r\n}\r\n```\r\n\r\n```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class ExampleEnumTest {\r\n\r\n    @Mock\r\n    private ExampleEnum exampleEnum;\r\n\r\n    @Test\r\n    public void testEnumWithMethods() {\r\n        Container container = new Container(exampleEnum);\r\n        Mockito.when(exampleEnum.getValue()).thenReturn(\"42\");\r\n        assertEquals(\"42\", container.retrieveValue());\r\n    }\r\n}\r\n```\r\n\r\nOn 17 it gives the following error:\r\n\r\n```\r\norg.mockito.exceptions.base.MockitoException:\r\n\r\nMockito cannot mock this class: class com.example.ExampleEnum.\r\n\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 17\r\nJVM vendor name    : Oracle Corporation\r\nJVM vendor version : 17-ea+24-2164\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 17-ea+24-2164\r\nJVM info           : mixed mode, sharing\r\nOS name            : Linux\r\nOS version         : 4.19.76-linuxkit\r\n\r\n\r\nYou are seeing this disclaimer because Mockito is configured to create inlined mocks.\r\nYou can learn about inline mocks and their limitations under item #39 of the Mockito class javadoc.\r\n\r\nUnderlying exception : org.mockito.exceptions.base.MockitoException: Could not modify all classes [interface java.lang.constant.Constable, class java.lang.Object, interface java.lang.Comparable, interface java.io.Serializable, class java.lang.Enum, class com.example.ExampleEnum]\r\nCaused by: org.mockito.exceptions.base.MockitoException: Could not modify all classes [interface java.lang.constant.Constable, class java.lang.Object, interface java.lang.Comparable, interface java.io.Serializable, class java.lang.Enum, class com.example.ExampleEnum]\r\nCaused by: java.lang.UnsupportedOperationException: class redefinition failed: attempted to change the class NestHost, NestMembers, Record, or PermittedSubclasses attribute\r\n```\r\n\r\nThe complete code example can be found here: https://github.com/johanjanssen/JavaUpgrades/tree/main/java17\r\n\r\nIt can be build with Docker for instance with (17 can be replaced with 11 and 16): \r\ndocker build -t javaupgrades -f ..\\Dockerfile --build-arg JDK_VERSION=17 .\r\n\r\nIs there some way I can work around this issue?","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2315/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2315/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2314","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2314/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2314/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2314/events","html_url":"https://github.com/mockito/mockito/issues/2314","id":909917842,"node_id":"MDU6SXNzdWU5MDk5MTc4NDI=","number":2314,"title":"Incorrect mocking default method in Mockito 3.10.0","user":{"login":"zsokolowski","id":4411391,"node_id":"MDQ6VXNlcjQ0MTEzOTE=","avatar_url":"https://avatars.githubusercontent.com/u/4411391?v=4","gravatar_id":"","url":"https://api.github.com/users/zsokolowski","html_url":"https://github.com/zsokolowski","followers_url":"https://api.github.com/users/zsokolowski/followers","following_url":"https://api.github.com/users/zsokolowski/following{/other_user}","gists_url":"https://api.github.com/users/zsokolowski/gists{/gist_id}","starred_url":"https://api.github.com/users/zsokolowski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zsokolowski/subscriptions","organizations_url":"https://api.github.com/users/zsokolowski/orgs","repos_url":"https://api.github.com/users/zsokolowski/repos","events_url":"https://api.github.com/users/zsokolowski/events{/privacy}","received_events_url":"https://api.github.com/users/zsokolowski/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-02T21:55:39Z","updated_at":"2021-06-02T21:56:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, I have newest Mockito and I see exactly the same problem with mocking default methods as in:\r\n\r\nhttps://github.com/mockito/mockito/issues/329\r\n\r\norg.mockito:mockito-core:3.10.0\r\n\r\nTo be more weird if I start test in IntelliJ and put a breakpoint into default method it works as expected! When I remove a breakpoint crashes.\r\n\r\nRegards,\r\nZbigniew\r\n\r\n> Cannot call abstract real method on java object!\r\n> Calling real methods is only possible when mocking non abstract method.\r\n>   //correct example:\r\n>   when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\r\n> org.mockito.exceptions.base.MockitoException: \r\n> Cannot call abstract real method on java object!\r\n> Calling real methods is only possible when mocking non abstract method.\r\n>   //correct example:\r\n>   when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\r\n> \tat \r\n> .....\r\n\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2314/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2304","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2304/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2304/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2304/events","html_url":"https://github.com/mockito/mockito/issues/2304","id":896685221,"node_id":"MDU6SXNzdWU4OTY2ODUyMjE=","number":2304,"title":"cannot call mockito from a class instantiated in custom classloader (possible regression)","user":{"login":"manolo","id":161853,"node_id":"MDQ6VXNlcjE2MTg1Mw==","avatar_url":"https://avatars.githubusercontent.com/u/161853?v=4","gravatar_id":"","url":"https://api.github.com/users/manolo","html_url":"https://github.com/manolo","followers_url":"https://api.github.com/users/manolo/followers","following_url":"https://api.github.com/users/manolo/following{/other_user}","gists_url":"https://api.github.com/users/manolo/gists{/gist_id}","starred_url":"https://api.github.com/users/manolo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/manolo/subscriptions","organizations_url":"https://api.github.com/users/manolo/orgs","repos_url":"https://api.github.com/users/manolo/repos","events_url":"https://api.github.com/users/manolo/events{/privacy}","received_events_url":"https://api.github.com/users/manolo/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-20T11:31:09Z","updated_at":"2021-05-25T06:01:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"We had a test able to call `Mockito.mock`  from classes created in custom classloaders working in mockito 1.x, when upgrading to 3.x it fails.\r\n\r\nThe test code demonstrating the issue is:\r\n\r\n```\r\npublic class MyTest {\r\n    \r\n    public static class MyClass {\r\n        public static class MyOtherClass {\r\n        }\r\n\r\n        public void initialize() {\r\n            MyOtherClass mock = Mockito.mock(MyOtherClass.class);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void myTest() throws Exception {\r\n        URLClassLoader customLoader = new URLClassLoader(getClasspathURLs(), null);\r\n        \r\n        Class<?> clz = customLoader.loadClass(MyClass.class.getName());\r\n        Method mtd = clz.getMethod(\"initialize\");\r\n        \r\n        Object inst = clz.newInstance();\r\n        \r\n        mtd.invoke(inst, new Object[0]);\r\n    }\r\n    private URL[] getClasspathURLs() {\r\n        return Arrays.stream(\r\n                System.getProperty(\"java.class.path\").split(File.pathSeparator))\r\n                .map(s -> {\r\n                    try {\r\n                        return new File(s).toURI().toURL();\r\n                    } catch (MalformedURLException e) {\r\n                        throw new RuntimeException(e);\r\n                    }\r\n                }).collect(Collectors.toList()).toArray(new URL[0]);\r\n    }\r\n}\r\n```\r\n\r\nThe exception I got is:\r\n\r\n```\r\nCaused by: org.mockito.exceptions.base.MockitoException: \r\nClassCastException occurred while creating the mockito mock :\r\n  class to mock : '...MyTest.MyClass.MyOtherClass', loaded by classloader : 'java.net.URLClassLoader@e73f9ac'\r\n  created class : 'org.mockito.codegen.MyOtherClass$MockitoMock$1564550697', loaded by classloader : 'net.bytebuddy.dynamic.loading.MultipleParentClassLoader@75d4a5c2'\r\n  proxy instance class : 'org.mockito.codegen.MyOtherClass$MockitoMock$1564550697', loaded by classloader : 'net.bytebuddy.dynamic.loading.MultipleParentClassLoader@75d4a5c2'\r\n  instance creation by : ObjenesisInstantiator\r\n\r\nYou might experience classloading issues, please ask the mockito mailing-list.\r\n\r\n\tat ....MyTest$MyClass.initialize(MyTest.java:23)\r\n\t... 31 more\r\nCaused by: java.lang.ClassCastException: org.mockito.codegen.MyOtherClass$MockitoMock$1564550697 cannot be cast to org.mockito.internal.creation.bytebuddy.MockAccess\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:49)\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2304/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2304/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2302","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2302/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2302/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2302/events","html_url":"https://github.com/mockito/mockito/issues/2302","id":893602034,"node_id":"MDU6SXNzdWU4OTM2MDIwMzQ=","number":2302,"title":"[mockito-android] Mockito cannot mock this class on API >= 28 (in release build only)","user":{"login":"rusmonster","id":1186549,"node_id":"MDQ6VXNlcjExODY1NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1186549?v=4","gravatar_id":"","url":"https://api.github.com/users/rusmonster","html_url":"https://github.com/rusmonster","followers_url":"https://api.github.com/users/rusmonster/followers","following_url":"https://api.github.com/users/rusmonster/following{/other_user}","gists_url":"https://api.github.com/users/rusmonster/gists{/gist_id}","starred_url":"https://api.github.com/users/rusmonster/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rusmonster/subscriptions","organizations_url":"https://api.github.com/users/rusmonster/orgs","repos_url":"https://api.github.com/users/rusmonster/repos","events_url":"https://api.github.com/users/rusmonster/events{/privacy}","received_events_url":"https://api.github.com/users/rusmonster/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-05-17T18:46:32Z","updated_at":"2021-09-10T12:25:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"check that\r\n\r\n - [ X ] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [ X ] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [ X ] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [ X ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [ X ] Read the [contributing guide](https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md)\r\n\r\n**mockito-android version:** 3.10.0\r\n**reproduced on android devices:** Pixel2 (arm-v8, API28), Pixel2(x86-Emulator, API28), Pixel2(x86-Emulator, API29)\r\n\r\nAfter removing one of my instrumentation tests I started to get the following error on devices with API > 28 and only for `release` build (for `debug` build everything still working fine):\r\n```\r\norg.mockito.exceptions.base.MockitoException:\r\nMockito cannot mock this class: interface com.twilio.conversations.app.repository.ConversationsRepository.\r\n\r\nMockito can only mock non-private & non-final classes.\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\n\r\nIMPORTANT INFORMATION FOR ANDROID USERS:\r\n\r\nThe regular Byte Buddy mock makers cannot generate code on an Android VM!\r\nTo resolve this, please use the 'mockito-android' dependency for your application:\r\nhttps://search.maven.org/artifact/org.mockito/mockito-android\r\n\r\nJava               : 0.9\r\nJVM vendor name    : The Android Project\r\nJVM vendor version : 2.1.0\r\nJVM name           : Dalvik\r\nJVM version        : 0.9\r\nJVM info           : null\r\nOS name            : Linux\r\nOS version         : 4.4.111-g8b54bcf6207d\r\n\r\n\r\nUnderlying exception : java.lang.IllegalStateException: Cannot invoke BaseDexClassLoader#addDexPath(String, boolean)\r\nat com.twilio.conversations.app.common.TestInjector.<init>(TestInjector.kt:117)\r\nat com.twilio.conversations.app.common.TestInjectorKt.setupTestInjector(TestInjector.kt:35)\r\nat com.twilio.conversations.app.ui.ConversationDetailsActivityTest$Companion.setupInjector(ConversationDetailsActivityTest.kt:172)\r\nat com.twilio.conversations.app.ui.ConversationDetailsActivityTest.setupInjector(Unknown Source:2)\r\nat java.lang.reflect.Method.invoke(Native Method)\r\nat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\nat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\nat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\nat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat androidx.test.ext.junit.runners.AndroidJUnit4.run(AndroidJUnit4.java:154)\r\nat org.junit.runners.Suite.runChild(Suite.java:128)\r\nat org.junit.runners.Suite.runChild(Suite.java:27)\r\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\nat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\r\nat androidx.test.internal.runner.TestExecutor.execute(TestExecutor.java:56)\r\nat androidx.test.runner.AndroidJUnitRunner.onStart(AndroidJUnitRunner.java:395)\r\nat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:2145)\r\nCaused by: java.lang.IllegalStateException: Cannot invoke BaseDexClassLoader#addDexPath(String, boolean)\r\nat net.bytebuddy.android.AndroidClassLoadingStrategy$Injecting$Dispatcher$ForAndroidPVm.loadDex(AndroidClassLoadingStrategy.java:779)\r\nat net.bytebuddy.android.AndroidClassLoadingStrategy$Injecting.doLoad(AndroidClassLoadingStrategy.java:648)\r\nat net.bytebuddy.android.AndroidClassLoadingStrategy.load(AndroidClassLoadingStrategy.java:145)\r\nat net.bytebuddy.android.AndroidClassLoadingStrategy$Injecting.load(AndroidClassLoadingStrategy.java:641)\r\nat net.bytebuddy.dynamic.TypeResolutionStrategy$Passive.initialize(TypeResolutionStrategy.java:100)\r\nat net.bytebuddy.dynamic.DynamicType$Default$Unloaded.load(DynamicType.java:6292)\r\nat org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:208)\r\nat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.a(TypeCachingBytecodeGenerator.java:47)\r\nat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.b(Unknown Source:0)\r\nat a.a.i.c.a.h.call(Unknown Source:4)\r\nat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\nat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\nat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\nat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\nat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:40)\r\nat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:77)\r\nat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:43)\r\nat org.mockito.android.internal.creation.AndroidByteBuddyMockMaker.createMock(AndroidByteBuddyMockMaker.java:39)\r\nat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:53)\r\nat org.mockito.internal.MockitoCore.mock(MockitoCore.java:84)\r\nat org.mockito.Mockito.mock(Mockito.java:1954)\r\n... 24 more\r\nCaused by: java.lang.SecurityException: Can't exempt class, process is not debuggable.\r\nat dalvik.system.DexFile.setTrusted(Native Method)\r\nat dalvik.system.DexFile.setTrusted(DexFile.java:385)\r\nat dalvik.system.DexPathList.makeDexElements(DexPathList.java:373)\r\nat dalvik.system.DexPathList.addDexPath(DexPathList.java:226)\r\nat dalvik.system.BaseDexClassLoader.addDexPath(BaseDexClassLoader.java:155)\r\nat java.lang.reflect.Method.invoke(Native Method)\r\nat net.bytebuddy.android.AndroidClassLoadingStrategy$Injecting$Dispatcher$ForAndroidPVm.loadDex(AndroidClassLoadingStrategy.java:770)\r\n... 44 more\r\n```\r\n\r\nThe `ConversationsRepository` interface which is cannot be mocked anymore:\r\n```\r\ninterface ConversationsRepository {\r\n    fun getUserConversations(): Flow<RepositoryResult<List<ConversationDataItem>>>\r\n    fun getConversation(conversationSid: String): Flow<RepositoryResult<ConversationDataItem?>>\r\n    fun getSelfUser(): Flow<User>\r\n    fun getMessageByUuid(messageUuid: String): MessageDataItem?\r\n    // Interim solution till paging v3.0 is available as an alpha version.\r\n    // It has support for converting PagedList types\r\n    fun getMessages(conversationSid: String, pageSize: Int): Flow<RepositoryResult<PagedList<MessageListViewItem>>>\r\n    fun insertMessage(message: MessageDataItem)\r\n    fun updateMessageByUuid(message: MessageDataItem)\r\n    fun updateMessageStatus(messageUuid: String, sendStatus: Int)\r\n    fun getTypingParticipants(conversationSid: String): Flow<List<ParticipantDataItem>>\r\n    fun getConversationParticipants(conversationSid: String): Flow<RepositoryResult<List<ParticipantDataItem>>>\r\n    fun updateMessageMediaDownloadStatus(\r\n        messageSid: String,\r\n        downloadId: Long? = null,\r\n        downloadLocation: String? = null,\r\n        downloading: Boolean? = null,\r\n        downloadedBytes: Long? = null\r\n    )\r\n    fun updateMessageMediaUploadStatus(\r\n        messageUuid: String,\r\n        uploading: Boolean? = null,\r\n        uploadedBytes: Long? = null\r\n    )\r\n    fun simulateCrash(where: CrashIn)\r\n    fun clear()\r\n    fun subscribeToConversationsClientEvents()\r\n    fun unsubscribeFromConversationsClientEvents()\r\n}\r\n```\r\n\r\nFull code of the removed test case:\r\n```\r\n@RunWith(AndroidJUnit4::class)\r\nclass ConversationsClientWrapperTest {\r\n\r\n    private lateinit var context: Context\r\n    private lateinit var conversationsClientWrapper: ConversationsClientWrapper\r\n\r\n    @Before\r\n    fun setUp() {\r\n        context = InstrumentationRegistry.getInstrumentation().targetContext\r\n\r\n        ConversationsClientWrapper.recreateInstance(context)\r\n        conversationsClientWrapper = ConversationsClientWrapper.INSTANCE\r\n    }\r\n\r\n    @Test(expected = ConversationsException::class)\r\n    fun create_withInvalidCredentials_returnsError() = runBlocking {\r\n        conversationsClientWrapper.create(INVALID_IDENTITY, INVALID_PASSWORD)\r\n    }\r\n}\r\n```\r\n\r\nThe full code of the project where issue reproduces in the `mockito-issue-after` branch:\r\nhttps://github.com/twilio/twilio-conversations-demo-kotlin/tree/bugfix/mockito-issue-after\r\n\r\nTo reproduce add any signingConfig into `app/build.gradle` for `release` build and run:\r\n```\r\n./gradlew app:connectedAndroidTest -DtestBuildType=release\r\n```\r\n\r\nfailed build from the `mockito-issue-after` branch (commit `5255a58`):\r\nhttps://app.circleci.com/pipelines/github/twilio/twilio-conversations-demo-kotlin/50/workflows/b56dd1b2-8df2-4617-9a0a-392484001b44\r\n\r\nsuccess build from the previous commit (`2a5a7f3`):\r\nhttps://app.circleci.com/pipelines/github/twilio/twilio-conversations-demo-kotlin/49/workflows/a7de3fe9-fbe7-420c-af13-25a17fbfbcce\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2302/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2289","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2289/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2289/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2289/events","html_url":"https://github.com/mockito/mockito/issues/2289","id":882492149,"node_id":"MDU6SXNzdWU4ODI0OTIxNDk=","number":2289,"title":"InvocationContainerImpl.addAnswer(...) thread problem with this.invocationForStubbing","user":{"login":"sregger","id":5473486,"node_id":"MDQ6VXNlcjU0NzM0ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5473486?v=4","gravatar_id":"","url":"https://api.github.com/users/sregger","html_url":"https://github.com/sregger","followers_url":"https://api.github.com/users/sregger/followers","following_url":"https://api.github.com/users/sregger/following{/other_user}","gists_url":"https://api.github.com/users/sregger/gists{/gist_id}","starred_url":"https://api.github.com/users/sregger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sregger/subscriptions","organizations_url":"https://api.github.com/users/sregger/orgs","repos_url":"https://api.github.com/users/sregger/repos","events_url":"https://api.github.com/users/sregger/events{/privacy}","received_events_url":"https://api.github.com/users/sregger/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-09T16:09:08Z","updated_at":"2021-05-09T16:09:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"check that\r\n\r\n - [ ] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [ ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\nI'm trying to diagnose a problem with threads and Mockito. I noticed that, in some scenarios, after stubbing a spy I noticed the stub was being called by other methods on the spy. e.g. If I stub the `add(..)` method on a list I sometimes see the stub being called by `isEmpty()`. I posted a question about this on stackOverflow at \r\n\r\nhttps://stackoverflow.com/questions/67407396/mockito-doanswer-when-is-being-called-for-methods-other-than-those-in-the-when\r\n\r\nLooking deeper into Mockito's code I came across this section\r\n\r\nhttps://github.com/mockito/mockito/blob/80374488162380d006b8ae6da915d940cbf68c7c/src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java#L76\r\n\r\nOr in my older `2.28.2` version of `mockito-core` \r\n\r\n    public StubbedInvocationMatcher addAnswer(Answer answer, boolean isConsecutive, Strictness stubbingStrictness) {\r\n        Invocation invocation = this.invocationForStubbing.getInvocation();\r\n        ThreadSafeMockingProgress.mockingProgress().stubbingCompleted();\r\n        if (answer instanceof ValidableAnswer) {\r\n            ((ValidableAnswer)answer).validateFor(invocation);\r\n        }\r\n\r\n        synchronized(this.stubbed) {\r\n            if (isConsecutive) {\r\n                ((StubbedInvocationMatcher)this.stubbed.getFirst()).addAnswer(answer);\r\n            } else {\r\n                Strictness effectiveStrictness = stubbingStrictness != null ? stubbingStrictness : this.mockStrictness;\r\n                this.stubbed.addFirst(new StubbedInvocationMatcher(answer, this.invocationForStubbing, effectiveStrictness));\r\n            }\r\n\r\n            return (StubbedInvocationMatcher)this.stubbed.getFirst();\r\n        }\r\n    }\r\n\r\nIn the debugger I noticed\r\n\r\n![image](https://user-images.githubusercontent.com/5473486/117578819-1d92e700-b0e8-11eb-923d-eede577a3157.png)\r\n\r\ni.e. Where the local variable `invocation` is against `localConsumerTaskList.add(null)` while the class variable `this. invocationForStubbing` is against `localConsumerTaskList.isEmpty()`. \r\n\r\nI'm not experienced enough with Mockito to be certain. But it looks like `this. invocationForStubbing` is not thread safe and should not be used here. Am I reading this correct? Or is there another explanation I'm missing?","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2289/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2285","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2285/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2285/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2285/events","html_url":"https://github.com/mockito/mockito/issues/2285","id":877681560,"node_id":"MDU6SXNzdWU4Nzc2ODE1NjA=","number":2285,"title":"Assertions on parameters during verification","user":{"login":"Saberos","id":2879186,"node_id":"MDQ6VXNlcjI4NzkxODY=","avatar_url":"https://avatars.githubusercontent.com/u/2879186?v=4","gravatar_id":"","url":"https://api.github.com/users/Saberos","html_url":"https://github.com/Saberos","followers_url":"https://api.github.com/users/Saberos/followers","following_url":"https://api.github.com/users/Saberos/following{/other_user}","gists_url":"https://api.github.com/users/Saberos/gists{/gist_id}","starred_url":"https://api.github.com/users/Saberos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Saberos/subscriptions","organizations_url":"https://api.github.com/users/Saberos/orgs","repos_url":"https://api.github.com/users/Saberos/repos","events_url":"https://api.github.com/users/Saberos/events{/privacy}","received_events_url":"https://api.github.com/users/Saberos/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-06T16:15:22Z","updated_at":"2021-05-06T16:15:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Suggestion\r\nI would like to suggest adding an API allowing for assertions during parameter verification without argument captors in simple cases.\r\n\r\n### Motivation\r\nIn my projects I generally use Mockito and AssertJ for testing. For non trivial method parameters, I often encounter the following ArgumentCaptor pattern:\r\n```java\r\nClassUnderTest classUnderTest = new ClassUnderTest(otherServiceMock);\r\n\r\nclassUnderTest.method();\r\n\r\nArgumentCaptor<Param> paramArgumentCaptor = ArgumentCaptor.forClass(Param.class);\r\nverify(otherServiceMock).doStuff(paramArgumentCaptor.capture());\r\nParam paramFromCaptor = paramArgumentCaptor.getValue();\r\nassertThat(paramFromCaptor.getField1()).isEqualTo(\"value1\");\r\nassertThat(paramFromCaptor.getField2()).isEqualTo(\"value2\");\r\n```\r\n\r\nThis is fine, but a little bit verbose.\r\n\r\nAn alternative pattern I find myself using lately is using the `argThat` argument matcher to eliminate the captor, resulting in the verify statement looking something like this:\r\n```java\r\nverify(otherServiceMock).doStuff(argThat(param -> {\r\n    assertThat(param.getField1()).isEqualTo(\"value1\");\r\n    assertThat(param.getField2()).isEqualTo(\"value2\");\r\n    return true;\r\n}));\r\n```\r\nIn my opinion, at least in simple cases where only assertions on a single parameter are desired, this looks a little cleaner. Just the return statement is a bit pointless.\r\n\r\nMy suggestion is adding an API that would allow eliminating the return statement in this pattern, for example:\r\n\r\n```java\r\nverify(otherServiceMock).doStuff(assertArg(param -> {\r\n    assertThat(param.getField1()).isEqualTo(\"value1\");\r\n    assertThat(param.getField2()).isEqualTo(\"value2\");\r\n}));\r\n```\r\n\r\nOr is there already an API that would allow a similar pattern that I've missed? ","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2285/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2285/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2278","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2278/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2278/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2278/events","html_url":"https://github.com/mockito/mockito/issues/2278","id":869340193,"node_id":"MDU6SXNzdWU4NjkzNDAxOTM=","number":2278,"title":"MockitoException: Could not modify all classes [interface java.util.concurrent.Future, class org.apache.kafka.common.KafkaFuture, class java.lang.Object]","user":{"login":"barryzhounb","id":50025499,"node_id":"MDQ6VXNlcjUwMDI1NDk5","avatar_url":"https://avatars.githubusercontent.com/u/50025499?v=4","gravatar_id":"","url":"https://api.github.com/users/barryzhounb","html_url":"https://github.com/barryzhounb","followers_url":"https://api.github.com/users/barryzhounb/followers","following_url":"https://api.github.com/users/barryzhounb/following{/other_user}","gists_url":"https://api.github.com/users/barryzhounb/gists{/gist_id}","starred_url":"https://api.github.com/users/barryzhounb/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/barryzhounb/subscriptions","organizations_url":"https://api.github.com/users/barryzhounb/orgs","repos_url":"https://api.github.com/users/barryzhounb/repos","events_url":"https://api.github.com/users/barryzhounb/events{/privacy}","received_events_url":"https://api.github.com/users/barryzhounb/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-27T23:18:00Z","updated_at":"2021-07-02T03:25:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"> Hey,\r\n> \r\n> First thanks for reporting, in order to help us to classify issue can you make sure the following check boxes are checked ?\r\n> \r\n> If this is about mockito usage, the better way is to reach out to\r\n> \r\n>  - stackoverflow : https://stackoverflow.com/questions/tagged/mockito\r\n>  - the mailing-list  : https://groups.google.com/forum/#!forum/mockito / mockito@googlegroups.com\r\n>    (Note mailing-list is moderated to avoid spam)\r\n>\r\n> _This block can be removed_\r\n> _Something wrong in the template fix it here `.github/ISSUE_TEMPLATE.md`\r\n\r\n\r\ncheck that\r\n\r\n - [ ] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [ ] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [ x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - \r\n - [ ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\n\r\nLinux\r\nJava 8\r\nmockito:   'org.mockito:mockito-core:3.9.0'  and   'org.mockito:mockito-inline:3.9.0',\r\n\r\n\r\nError info:\r\n```\r\ncom.ibm.si.dlc.common.cp4s.KafkaProcessorTest > Unit test init() method given Kafka unavailable or Topic not exist in Kafka cluster FAILED\r\n    org.mockito.exceptions.base.MockitoException: \r\n    Mockito cannot mock this class: class org.apache.kafka.common.KafkaFuture.\r\n    If you're not sure why you're getting this error, please report to the mailing list.\r\n    Early IBM virtual machine are known to have issues with Mockito, please upgrade to an up-to-date version.\r\n    Java               : 1.8\r\n    JVM vendor name    : IBM Corporation\r\n    JVM vendor version : 2.9\r\n    JVM name           : IBM J9 VM\r\n    JVM version        : 8.0.5.27 - pxa6480sr5fp27-20190104_01(SR5 FP27)\r\n    JVM info           : JRE 1.8.0 Linux amd64-64-Bit Compressed References 20181219_405297 (JIT enabled, AOT enabled)\r\n    OpenJ9   - 3f2d574\r\n    OMR      - 109ba5b\r\n    IBM      - e2996d1\r\n    OS name            : Linux\r\n    OS version         : 3.10.0-1160.15.2.el7.x86_64\r\n    You are seeing this disclaimer because Mockito is configured to create inlined mocks.\r\n    You can learn about inline mocks and their limitations under item #39 of the Mockito class javadoc.\r\n    Underlying exception : org.mockito.exceptions.base.MockitoException: Could not modify all classes [interface java.util.concurrent.Future, class org.apache.kafka.common.KafkaFuture, class java.lang.Object]\r\n        at com.ibm.si.dlc.common.cp4s.KafkaProcessorTest.init_KafkaUnavailableOrTopicNotExistInKafkaCluster_ThrowException(KafkaProcessorTest.java:52)\r\n        Caused by:\r\n        org.mockito.exceptions.base.MockitoException: Could not modify all classes [interface java.util.concurrent.Future, class org.apache.kafka.common.KafkaFuture, class java.lang.Object]\r\n            at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n            at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n            at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n            at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n            ... 1 more\r\n            Caused by:\r\n            java.lang.instrument.UnmodifiableClassException\r\n                at sun.instrument.InstrumentationImpl.retransformClasses0(Native Method)\r\n                at sun.instrument.InstrumentationImpl.retransformClasses(InstrumentationImpl.java:163)\r\n                at org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.triggerRetransformation(InlineBytecodeGenerator.java:276)\r\n                at org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.mockClass(InlineBytecodeGenerator.java:213)\r\n                at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:51)\r\n                at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:48)\r\n                at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n                at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n                at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n                at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n                at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:41)\r\n                at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMockType(InlineByteBuddyMockMaker.java:379)\r\n                at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.doCreateMock(InlineByteBuddyMockMaker.java:339)\r\n                at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMock(InlineByteBuddyMockMaker.java:318)\r\n                at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:53)\r\n                at org.mockito.internal.MockitoCore.mock(MockitoCore.java:62)\r\n                at org.mockito.Mockito.mock(Mockito.java:1951)\r\n                at org.mockito.Mockito.mock(Mockito.java:1862)\r\n                ... 1 more\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2278/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2272","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2272/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2272/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2272/events","html_url":"https://github.com/mockito/mockito/issues/2272","id":864065341,"node_id":"MDU6SXNzdWU4NjQwNjUzNDE=","number":2272,"title":"mockito-inline failed to mock","user":{"login":"cdalexndr","id":22418250,"node_id":"MDQ6VXNlcjIyNDE4MjUw","avatar_url":"https://avatars.githubusercontent.com/u/22418250?v=4","gravatar_id":"","url":"https://api.github.com/users/cdalexndr","html_url":"https://github.com/cdalexndr","followers_url":"https://api.github.com/users/cdalexndr/followers","following_url":"https://api.github.com/users/cdalexndr/following{/other_user}","gists_url":"https://api.github.com/users/cdalexndr/gists{/gist_id}","starred_url":"https://api.github.com/users/cdalexndr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cdalexndr/subscriptions","organizations_url":"https://api.github.com/users/cdalexndr/orgs","repos_url":"https://api.github.com/users/cdalexndr/repos","events_url":"https://api.github.com/users/cdalexndr/events{/privacy}","received_events_url":"https://api.github.com/users/cdalexndr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-04-21T16:27:51Z","updated_at":"2021-10-11T08:17:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**org.mockito:mockito-core:3.9.0\r\norg.mockito:mockito-inline:3.9.0**\r\n\r\nRunning a test suite.\r\nWithout using `mockito-inline`, the failing test works. \r\nI need `mockito-inline` for a test that mocks static class, but this ruins other tests.\r\n\r\n```\r\nMockito cannot mock this class: class pse.shop.product.description.DescriptionElement.\r\n\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 11\r\nJVM vendor name    : Azul Systems, Inc.\r\nJVM vendor version : 11.0.10+9-LTS\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 11.0.10+9-LTS\r\nJVM info           : mixed mode\r\nOS name            : Windows 10\r\nOS version         : 10.0\r\n\r\n\r\nYou are seeing this disclaimer because Mockito is configured to create inlined mocks.\r\nYou can learn about inline mocks and their limitations under item #39 of the Mockito class javadoc.\r\n\r\nUnderlying exception : org.mockito.exceptions.base.MockitoException: Could not modify all classes [class pse.shop.product.category.mixer.tree.JpaNode, class pse.shop.product.description.DescriptionElement, interface pse.parsers.description.element.DescriptionNodeValue, interface pse.shop.product.category.mixer.tree.TypedNode, interface org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport, interface org.springframework.beans.factory.aspectj.ConfigurableObject]\r\n\tat pse.shop.product.ProductTest.testLazyCopy(ProductTest.java:225)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:764)\r\n\tat org.testng.TestRunner.run(TestRunner.java:585)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:384)\r\n\tat org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)\r\n\tat org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)\r\n\tat org.testng.SuiteRunner.run(SuiteRunner.java:286)\r\n\tat org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)\r\n\tat org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)\r\n\tat org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)\r\n\tat org.testng.TestNG.runSuitesLocally(TestNG.java:1140)\r\n\tat org.testng.TestNG.runSuites(TestNG.java:1069)\r\n\tat org.testng.TestNG.run(TestNG.java:1037)\r\n\tat org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141)\r\n\tat org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\n\tat com.sun.proxy.$Proxy2.stop(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:133)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:414)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: org.mockito.exceptions.base.MockitoException: Could not modify all classes [class pse.shop.product.category.mixer.tree.JpaNode, class pse.shop.product.description.DescriptionElement, interface pse.parsers.description.element.DescriptionNodeValue, interface pse.shop.product.category.mixer.tree.TypedNode, interface org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport, interface org.springframework.beans.factory.aspectj.ConfigurableObject]\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n\t... 54 more\r\nCaused by: java.lang.UnsupportedOperationException: class redefinition failed: attempted to change superclass or interfaces\r\n\tat java.instrument/sun.instrument.InstrumentationImpl.retransformClasses0(Native Method)\r\n\tat java.instrument/sun.instrument.InstrumentationImpl.retransformClasses(InstrumentationImpl.java:167)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.triggerRetransformation(InlineBytecodeGenerator.java:276)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.mockClass(InlineBytecodeGenerator.java:213)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:51)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:48)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:41)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMockType(InlineByteBuddyMockMaker.java:379)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.doCreateMock(InlineByteBuddyMockMaker.java:339)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMock(InlineByteBuddyMockMaker.java:318)\r\n\tat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:53)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:62)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1951)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1862)\r\n\t... 54 more\r\n\r\n```\r\n\r\n\r\ncheck that\r\n\r\n - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [ ] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [ ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2272/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2264","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2264/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2264/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2264/events","html_url":"https://github.com/mockito/mockito/issues/2264","id":855996710,"node_id":"MDU6SXNzdWU4NTU5OTY3MTA=","number":2264,"title":"Mocking MavenProject - Cannot mock this class","user":{"login":"mstelzer-288","id":58810436,"node_id":"MDQ6VXNlcjU4ODEwNDM2","avatar_url":"https://avatars.githubusercontent.com/u/58810436?v=4","gravatar_id":"","url":"https://api.github.com/users/mstelzer-288","html_url":"https://github.com/mstelzer-288","followers_url":"https://api.github.com/users/mstelzer-288/followers","following_url":"https://api.github.com/users/mstelzer-288/following{/other_user}","gists_url":"https://api.github.com/users/mstelzer-288/gists{/gist_id}","starred_url":"https://api.github.com/users/mstelzer-288/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mstelzer-288/subscriptions","organizations_url":"https://api.github.com/users/mstelzer-288/orgs","repos_url":"https://api.github.com/users/mstelzer-288/repos","events_url":"https://api.github.com/users/mstelzer-288/events{/privacy}","received_events_url":"https://api.github.com/users/mstelzer-288/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-04-12T13:47:24Z","updated_at":"2021-05-18T19:44:39Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Issue mocking MavenProject.\r\n\r\nI need to mock a MavenProject like in the added ExampleProject, but it can't be compiled cause i get the following error:\r\n\r\n```\r\norg.mockito.exceptions.base.MockitoException: \r\nMockito cannot mock this class: class org.apache.maven.project.MavenProject.\r\n\r\nMockito can only mock non-private & non-final classes.\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 1.8\r\nJVM vendor name    : Oracle Corporation\r\nJVM vendor version : 25.262-b10\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 1.8.0_262-b10\r\nJVM info           : mixed mode\r\nOS name            : Linux\r\nOS version         : 3.10.0-1160.15.2.el7.x86_64\r\n\r\n\r\nUnderlying exception : java.lang.IllegalArgumentException: Could not create type\r\n\r\n\tat TestClass.beforeClass(TestClass.java:15)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\r\nCaused by: java.lang.IllegalArgumentException: Could not create type\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:155)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:36)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:77)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:43)\r\n\tat org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:29)\r\n\tat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:52)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:61)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1949)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1860)\r\n\t... 15 more\r\nCaused by: java.lang.NoClassDefFoundError: org/apache/maven/artifact/DependencyResolutionRequiredException\r\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\r\n\tat java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)\r\n\tat java.lang.Class.getDeclaredConstructors(Class.java:2020)\r\n\tat net.bytebuddy.description.method.MethodList$ForLoadedMethods.<init>(MethodList.java:109)\r\n\tat net.bytebuddy.description.type.TypeDescription$ForLoadedType.getDeclaredMethods(TypeDescription.java:8715)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType.getDeclaredMethods(TypeDescription.java:3750)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection.getDeclaredMethods(TypeDescription.java:6217)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategy$Default$5.doExtractConstructors(ConstructorStrategy.java:175)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategy$Default.extractConstructors(ConstructorStrategy.java:196)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.applyConstructorStrategy(SubclassDynamicTypeBuilder.java:243)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:213)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:204)\r\n\tat net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:3659)\r\n\tat net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$Delegator.make(DynamicType.java:3897)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:199)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:46)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:43)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n\t... 26 more\r\nCaused by: java.lang.ClassNotFoundException: org.apache.maven.artifact.DependencyResolutionRequiredException\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:418)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:351)\r\n\t... 44 more\r\n\r\n\r\nProcess finished with exit code 255\r\n```\r\n\r\nhopefully u can help me fixing this problem!\r\n[MockitoTetsProject.zip](https://github.com/mockito/mockito/files/6297144/MockitoTetsProject.zip)\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2264/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2264/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2256","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2256/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2256/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2256/events","html_url":"https://github.com/mockito/mockito/issues/2256","id":851227447,"node_id":"MDU6SXNzdWU4NTEyMjc0NDc=","number":2256,"title":"BaseStubbing thenReturn function overload with only list of answers","user":{"login":"naorsol","id":20565497,"node_id":"MDQ6VXNlcjIwNTY1NDk3","avatar_url":"https://avatars.githubusercontent.com/u/20565497?v=4","gravatar_id":"","url":"https://api.github.com/users/naorsol","html_url":"https://github.com/naorsol","followers_url":"https://api.github.com/users/naorsol/followers","following_url":"https://api.github.com/users/naorsol/following{/other_user}","gists_url":"https://api.github.com/users/naorsol/gists{/gist_id}","starred_url":"https://api.github.com/users/naorsol/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/naorsol/subscriptions","organizations_url":"https://api.github.com/users/naorsol/orgs","repos_url":"https://api.github.com/users/naorsol/repos","events_url":"https://api.github.com/users/naorsol/events{/privacy}","received_events_url":"https://api.github.com/users/naorsol/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-04-06T09:16:50Z","updated_at":"2021-04-06T10:34:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"There are cases when developers want to use thenReturn with a T... answers.\r\ncurrently there are only 2 overloads for this function:\r\nthenReturn(T value)\r\nthenReturn(T value, T... values)\r\n\r\nAs a developer, when I want to mock a list of answers I need to split between the first answer to the rest, which is very uncomfortable.\r\nf.e\r\n\r\nwhen(mock.something()).thenReturn(answers[0], answers[1 -> end])\r\n\r\nI think it worth to use it as \r\nwhen(mock.something()).thenReturn(answers); (in case of empty answers throw Test Failure)\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2256/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2256/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2231","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2231/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2231/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2231/events","html_url":"https://github.com/mockito/mockito/issues/2231","id":834663264,"node_id":"MDU6SXNzdWU4MzQ2NjMyNjQ=","number":2231,"title":"Mockito.spy works incorrectly with java 16","user":{"login":"nedis-ua","id":3287489,"node_id":"MDQ6VXNlcjMyODc0ODk=","avatar_url":"https://avatars.githubusercontent.com/u/3287489?v=4","gravatar_id":"","url":"https://api.github.com/users/nedis-ua","html_url":"https://github.com/nedis-ua","followers_url":"https://api.github.com/users/nedis-ua/followers","following_url":"https://api.github.com/users/nedis-ua/following{/other_user}","gists_url":"https://api.github.com/users/nedis-ua/gists{/gist_id}","starred_url":"https://api.github.com/users/nedis-ua/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nedis-ua/subscriptions","organizations_url":"https://api.github.com/users/nedis-ua/orgs","repos_url":"https://api.github.com/users/nedis-ua/repos","events_url":"https://api.github.com/users/nedis-ua/events{/privacy}","received_events_url":"https://api.github.com/users/nedis-ua/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-18T11:03:49Z","updated_at":"2021-05-07T07:20:32Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using JDK 16 the following test:\r\n```\r\npublic class UnitTest {\r\n\r\n    private final java.util.logging.Logger realLogger = java.util.logging.Logger.getLogger(\"test\");\r\n\r\n    private final java.util.logging.Logger loggerSpy = Mockito.spy(realLogger);\r\n\r\n    @Test\r\n    void test() {\r\n        loggerSpy.isLoggable(Level.INFO);\r\n    }\r\n}\r\n```\r\nthrows the exception:\r\n\r\n```\r\njava.lang.NullPointerException: Cannot read field \"levelValue\" because \"this.config\" is null\r\n\tat java.logging/java.util.logging.Logger.isLoggable(Logger.java:2032)\r\n\tat rxmicro.logger@0.10-SNAPSHOT/io.rxmicro.logger.jul.UnitTest.test(UnitTest.java:36)\r\n```\r\n\r\nThe cause of this exception is that the spy (`loggerSpy`) created by the Mockito does not contain field values from the original object, i.e. `realLogger`:\r\n![image](https://user-images.githubusercontent.com/3287489/111614421-41246a00-87e8-11eb-8a34-6246dad6d34a.png)\r\n\r\nEnvironment:\r\n\r\nOperating System: `Ubuntu 18.04.5 LTS`\r\nKernel: `Linux 5.4.0-56-generic`\r\nArchitecture: `x86-64`\r\n**JDK: openjdk version \"16\" 2021-03-16\r\nOpenJDK Runtime Environment Zulu16.28+11-CA (build 16+36)\r\nOpenJDK 64-Bit Server VM Zulu16.28+11-CA (build 16+36, mixed mode, sharing)**\r\nJunit version: `5.7.1`\r\nMockito version: `3.7.7`\r\n\r\n**It seems that this problem is actual only for JDK 16, because if I use `JDK 15`, `JDK 14`, `JDK 13`, `JDK 12` and `JDK 11`, this code does not throw any exceptions and during debug I see that the spy instance contains initialized fields from the original object:**\r\n\r\n![image](https://user-images.githubusercontent.com/3287489/111616017-0fac9e00-87ea-11eb-9fa3-749b3570a75a.png)\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2231/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2231/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2226","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2226/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2226/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2226/events","html_url":"https://github.com/mockito/mockito/issues/2226","id":830820067,"node_id":"MDU6SXNzdWU4MzA4MjAwNjc=","number":2226,"title":"org.mockito.exceptions.misusing.WrongTypeOfReturnValue while stubbing a function from a \"spy\" object with mockito in groovy","user":{"login":"mahmoud-ashi","id":7239605,"node_id":"MDQ6VXNlcjcyMzk2MDU=","avatar_url":"https://avatars.githubusercontent.com/u/7239605?v=4","gravatar_id":"","url":"https://api.github.com/users/mahmoud-ashi","html_url":"https://github.com/mahmoud-ashi","followers_url":"https://api.github.com/users/mahmoud-ashi/followers","following_url":"https://api.github.com/users/mahmoud-ashi/following{/other_user}","gists_url":"https://api.github.com/users/mahmoud-ashi/gists{/gist_id}","starred_url":"https://api.github.com/users/mahmoud-ashi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mahmoud-ashi/subscriptions","organizations_url":"https://api.github.com/users/mahmoud-ashi/orgs","repos_url":"https://api.github.com/users/mahmoud-ashi/repos","events_url":"https://api.github.com/users/mahmoud-ashi/events{/privacy}","received_events_url":"https://api.github.com/users/mahmoud-ashi/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-13T06:00:52Z","updated_at":"2021-03-13T06:00:52Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm having this issue which has taken enough time from me so I decided to ask the experts here.\r\nSome context.. I have a Jenkins shared library which with some groovy classes and I'm writing some unit tests using the [JenkinsPipelineUnit][1] framework. I'm using normal junit for testing so nothing special there.\r\nBasically I have a groovy class as following:\r\n\r\n    class MyClass {\r\n        // In reality, `run` is object from the final class WorkflowRun but in the tests, I pass here a dummy map with the important fields\r\n        def run\r\n    \r\n        MyClass(def run) {\r\n            this.run = run\r\n        }\r\n    \r\n        boolean somethingExists() {\r\n            // some code here that does some stuff on `run` and return a boolean\r\n        }\r\n    \r\n        String doSomething() {\r\n            if(somethingExists()) {\r\n                // do something with it.\r\n                return \"foo\"\r\n            } else {\r\n                // do something else\r\n                return \"bar\"\r\n            }\r\n        }\r\n    }\r\n\r\nThe code above is simple enough and I am writing the following test for the `doSomething()` function without having to mock all the internals of `somethingExists()`.\r\n\r\n    @Test\r\n    void testDoSomething() {\r\n        Map run = [number: 1]\r\n        MyClass mc = spy(new MyClass(run))\r\n        // The problem is with the next line.\r\n        doReturn(true).when(mc).somethingExists()\r\n    \r\n        assertTrue(mc.somethingExists())\r\n        assertEquals(\"foo\", mc.doSomething())\r\n    }\r\n\r\nNote that I cannot mock the `WorkflowRun` class since it is a final class and honestly I don't care about it since I need to test the logic inside `doSomething()` rather than what `somethingExists()` does which is checking some Jenkins internals on the `run` object. Therefore, I decided to \"spy\" on the object under test `mc` and make it return a simple `true` or `false` when I call `somethingExists()` to avoid too much mocking of the run object.\r\nAccording to Mockito's documentation, when I use the spy function, I should use the stubbing format like I did `doReturn(true).when(mc).somethingExists()` unlike the other format of `when(mc.somethingExists()).thenReturn(true)` since this will actually call the real function on the class while attempting to stub it.\r\n\r\n**Error message:**\r\nWhen I call the `doReturn(true).when(mc).somethingExists()` I get the following error\r\n\r\n    org.mockito.exceptions.misusing.WrongTypeOfReturnValue: \r\n    Boolean cannot be returned by getMetaClass()\r\n    getMetaClass() should return MetaClass\r\n    ***\r\n    If you're unsure why you're getting above error read on.\r\n    Due to the nature of the syntax above problem might occur because:\r\n    1. This exception *might* occur in wrongly written multi-threaded tests.\r\n       Please refer to Mockito FAQ on limitations of concurrency testing.\r\n    2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - \r\n       - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.\r\n    \r\n    \tat org.codehaus.groovy.runtime.callsite.CallSiteArray.createPogoSite(CallSiteArray.java:140)\r\n    \tat org.codehaus.groovy.runtime.callsite.CallSiteArray.createCallSite(CallSiteArray.java:158)\r\n    \tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)\r\n    \tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\r\n    \tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:130)\r\n    \tat MyClassTest.testDoSomething(MyClassTest.groovy:37)\r\n    ...\r\n\r\nNote that I'm not running tests in parallel (actually while reproducing the issue, I was running only this test) and I'm following the stubbing rule suggested.\r\nAt first I thought it is because of the `doReturn(true)` which is returning a primitive type instead of an object so I replaced it with `doReturn(Boolean.FALSE)` but I still got the same error.\r\nWhen I replace the line `doReturn(true).when(mc).somethingExists()` with `when(mc.somethingExists()).thenReturn(true)` then it fails because it is calling the real function `mc.somethingExists()` which is expected in my opinion. On the other hand, when I replace the entire content of the `somethingExists()` function with a simple `return false`, surprisingly, the format `doReturn(true).when(mc).somethingExists()` still failed however the other format `when(mc.somethingExists()).thenReturn(true)` worked which I'm surprised because this format should not work for spy objects.\r\n\r\nAny clues what I might be doing wrong? I have spent a lot of time trying to find the problem.\r\nThanks in advance.\r\n\r\n\r\n  [1]: https://github.com/jenkinsci/JenkinsPipelineUnit","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2226/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2226/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2224","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2224/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2224/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2224/events","html_url":"https://github.com/mockito/mockito/issues/2224","id":825838210,"node_id":"MDU6SXNzdWU4MjU4MzgyMTA=","number":2224,"title":"Snapshot and Restore of Mocked Stubs/State","user":{"login":"knocknarea","id":12442390,"node_id":"MDQ6VXNlcjEyNDQyMzkw","avatar_url":"https://avatars.githubusercontent.com/u/12442390?v=4","gravatar_id":"","url":"https://api.github.com/users/knocknarea","html_url":"https://github.com/knocknarea","followers_url":"https://api.github.com/users/knocknarea/followers","following_url":"https://api.github.com/users/knocknarea/following{/other_user}","gists_url":"https://api.github.com/users/knocknarea/gists{/gist_id}","starred_url":"https://api.github.com/users/knocknarea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/knocknarea/subscriptions","organizations_url":"https://api.github.com/users/knocknarea/orgs","repos_url":"https://api.github.com/users/knocknarea/repos","events_url":"https://api.github.com/users/knocknarea/events{/privacy}","received_events_url":"https://api.github.com/users/knocknarea/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-09T12:19:17Z","updated_at":"2021-03-09T12:22:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Not an issue as such, more a feature request.\r\n\r\nImagine that you have a test case, where you are mocking a logged in user, in my case I have created a Closable class that configures all the required subbing to fully mock a user in terms of security. This allows me to do integration testing around the interaction between users, like so:\r\n\r\n```\r\n//\r\n// some standard stubbing around the Auth system not for any particular user\r\n//\r\ngiven(securityService).someMethod(eq(someArg)).willReturn(false);\r\n\r\n//\r\n// Entering a block within a test method that portrays the actions of userX\r\n//\r\ntry(MockAuth auth = MockAuth.forUser(userX, permissions, etc...)) {\r\n   // Tests as mocked user\r\n}\r\n\r\n// Ideally at this point I would like the mocked state of the security system to \r\n// reflect how it was configured before entering the block above?\r\n\r\n//\r\n// Continue testing with another user\r\n//\r\ntry(MockAuth auth = MockAuth.forUser(userY, permissions, etc...)) {\r\n\r\n}\r\n\r\n```\r\n\r\nThe close() method of the MockAuth should ideally remove any trace of the mocked user. At the moment, I just do a reset on the securityService interfaces that are mocked, i.e. Mockito.reset(this.securityService);\r\n\r\nThis is not ideal, as it wipes any of the stubs coming into that block (the standard test subbing as mentioned above)\r\n\r\nWhat would be ideal, is that in the constructor of MockAuth I could call:\r\n\r\n```\r\n//\r\n// Take a snapshot of all the currently configured stubs, etc. for the mocked SecurityService\r\n// .. would include the mocks that are included in the snapshot\r\nthis.mockState = Mockito.snapshot(this.securityService);\r\n```\r\n\r\nThen in the close() method of MockAuth I could restore the mocking state to what it was before entering the try-with-resources block, i.e\r\n\r\n```\r\npublic void close() {\r\n   // Would know that this is a snapshot of just securityService\r\n   Mockito.restore(this.mockState);\r\n}\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2224/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2223","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2223/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2223/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2223/events","html_url":"https://github.com/mockito/mockito/issues/2223","id":825681516,"node_id":"MDU6SXNzdWU4MjU2ODE1MTY=","number":2223,"title":"Flickering tests if static mocking is used","user":{"login":"bluepixbe","id":7486524,"node_id":"MDQ6VXNlcjc0ODY1MjQ=","avatar_url":"https://avatars.githubusercontent.com/u/7486524?v=4","gravatar_id":"","url":"https://api.github.com/users/bluepixbe","html_url":"https://github.com/bluepixbe","followers_url":"https://api.github.com/users/bluepixbe/followers","following_url":"https://api.github.com/users/bluepixbe/following{/other_user}","gists_url":"https://api.github.com/users/bluepixbe/gists{/gist_id}","starred_url":"https://api.github.com/users/bluepixbe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bluepixbe/subscriptions","organizations_url":"https://api.github.com/users/bluepixbe/orgs","repos_url":"https://api.github.com/users/bluepixbe/repos","events_url":"https://api.github.com/users/bluepixbe/events{/privacy}","received_events_url":"https://api.github.com/users/bluepixbe/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-09T10:23:14Z","updated_at":"2021-03-09T10:23:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi all,\r\n\r\nI'm using mockito inline for mocking the UUID class (java.util.UUID). Currently I'm mocking the UUID.randomUUID static method.\r\n\r\nImagine I have two test classes. One is called ATest.java and the other one BTest.java\r\n\r\nATest.java\r\n```\r\n@Test\r\npublic void testA_1()  {\r\n    try (MockedStatic mocked = mockStatic(UUID.class)) {\r\n        mocked.when(UUID::randomUUID).thenReturn(new UUID(0,0));\r\n        // this works for the the business logic uses UUID.randomUUID()\r\n        // if the business logic uses UUID.fromString as well to me the test is flickering as well (see below)\r\n    }\r\n}\r\n```\r\n\r\nBTest.java\r\n```\r\n// in this class I'm NOT using mocking at all. \r\n@Test\r\npublic void testB_1()  {\r\n    // The business logic is using the UUID class as well but not the randomUUID. It's using            \r\n    // the fromString method e.g. UUID variable = UUID.fromString(\"6ba7b812-9dad-11d1-80b4-00c04fd430c8\");\r\n   // The test in this class are now really flickering. Sometimes the variable is null sometimes it has the correct UUID.\r\n   // If i put an Ignore annotation to the tests were I'm using the static mock of the UUID class (see ATest above) it's working fine.\r\n}\r\n```\r\n\r\nIn my opinion this behavior is pretty strange. I could understand if the mocking has impact for the testA_1 method (fromString method) but not for the BTest class. \r\nIt this really the expected behavior? If yes are there ways to mitigate this issue?\r\n\r\nThank you very much for your help!\r\n\r\nVersions:\r\nOS: Windows 10\r\nJDK: 11\r\njunit:junit: 4.13.2\r\norg.mockito:mockito-inline: 3.8.0\r\nGradle: 6.8.3\r\n\r\n - [] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n - [] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2223/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2223/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2215","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2215/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2215/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2215/events","html_url":"https://github.com/mockito/mockito/issues/2215","id":815060311,"node_id":"MDU6SXNzdWU4MTUwNjAzMTE=","number":2215,"title":"PotentialStubbingProblem wrongly reported with spy and overload","user":{"login":"henri-tremblay","id":1216819,"node_id":"MDQ6VXNlcjEyMTY4MTk=","avatar_url":"https://avatars.githubusercontent.com/u/1216819?v=4","gravatar_id":"","url":"https://api.github.com/users/henri-tremblay","html_url":"https://github.com/henri-tremblay","followers_url":"https://api.github.com/users/henri-tremblay/followers","following_url":"https://api.github.com/users/henri-tremblay/following{/other_user}","gists_url":"https://api.github.com/users/henri-tremblay/gists{/gist_id}","starred_url":"https://api.github.com/users/henri-tremblay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henri-tremblay/subscriptions","organizations_url":"https://api.github.com/users/henri-tremblay/orgs","repos_url":"https://api.github.com/users/henri-tremblay/repos","events_url":"https://api.github.com/users/henri-tremblay/events{/privacy}","received_events_url":"https://api.github.com/users/henri-tremblay/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-02-24T03:52:57Z","updated_at":"2021-04-05T10:08:40Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This is related to #769 and #1496. I give a full test case below. There are numerous problems with it. If you run it, you get this error:\r\n\r\n```\r\norg.mockito.exceptions.misusing.PotentialStubbingProblem: \r\nStrict stubbing argument mismatch. Please check:\r\n - this invocation of 'isTrustedPrincipal' method:\r\n    accessControl.isTrustedPrincipal(\r\n    pro.tremblay.Principal@2b4bac49\r\n);\r\n    -> at pro.tremblay.AccessControl.allowAccess(AccessControl.java:12)\r\n - has following stubbing(s) with different arguments:\r\n    1. accessControl.isTrustedPrincipal(\"\");\r\n      -> at pro.tremblay.StrictnessTest.test(StrictnessTest.java:22)\r\nTypically, stubbing argument mismatch indicates user mistake when writing tests.\r\nMockito fails early so that you can debug potential problem easily.\r\nHowever, there are legit scenarios when this exception generates false negative signal:\r\n  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\r\n    Please use 'will().given()' or 'doReturn().when()' API for stubbing.\r\n  - stubbed method is intentionally invoked with different arguments by code under test\r\n    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\r\nFor more information see javadoc for PotentialStubbingProblem class.\r\n\r\n\tat pro.tremblay.AccessControl.allowAccess(AccessControl.java:12)\r\n\tat pro.tremblay.StrictnessTest.test(StrictnessTest.java:23)\r\n```\r\n\r\n1. It reports a wrong bad stubbing. I think it's caused by the overloaded method on the spy\r\n2. The message is wrong because is talks about stubbing of isTrustedPrincipal(\"\") because anyString returns \"\"\r\n3. PotentialStubbingProblem is an exception. I don't think it should be. It should probably extend AssertionError.\r\n\r\nAbout this last point, the problem is that my original code was doing something like this:\r\n\r\n```\r\n    public boolean allowAccess() {\r\n        try {\r\n            return isTrustedPrincipal(principal);\r\n        } catch(Exception e) {\r\n            return true;\r\n        }\r\n    }\r\n```\r\n\r\nSo the `PotentialStubbingProblem` is just eaten. Throwing the AssertionError will make this much less likely to happen.\r\n\r\nHere is the full test case:\r\n\r\n```\r\npublic class Principal {\r\n\r\n    private final String principal;\r\n\r\n    public Principal(String principal) {\r\n        this.principal = principal;\r\n    }\r\n\r\n    public String principal() {\r\n        return principal;\r\n    }\r\n}\r\n\r\npublic class AccessControl {\r\n\r\n    private final Principal principal;\r\n\r\n    public AccessControl(Principal principal) {\r\n        this.principal = principal;\r\n    }\r\n\r\n    public boolean allowAccess() {\r\n        return isTrustedPrincipal(principal);\r\n    }\r\n\r\n    boolean isTrustedPrincipal(Principal principal) {\r\n        return isTrustedPrincipal(principal.principal());\r\n    }\r\n\r\n    boolean isTrustedPrincipal(String principal) {\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\npublic class StrictnessTest {\r\n\r\n    @Rule\r\n    public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);\r\n\r\n    @Test\r\n    public void test() {\r\n        Principal principal = new Principal(\"user\");\r\n        AccessControl accessControl = spy(new AccessControl(principal));\r\n        doReturn(false).when(accessControl).isTrustedPrincipal(anyString());\r\n        accessControl.allowAccess();\r\n    }\r\n\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2215/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2215/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2209","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2209/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2209/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2209/events","html_url":"https://github.com/mockito/mockito/issues/2209","id":812576805,"node_id":"MDU6SXNzdWU4MTI1NzY4MDU=","number":2209,"title":"Toggling tests with MockitoExtension or private static final mock variable for Parallel Tests with @ParameterizedTest","user":{"login":"marciovmartins","id":6377735,"node_id":"MDQ6VXNlcjYzNzc3MzU=","avatar_url":"https://avatars.githubusercontent.com/u/6377735?v=4","gravatar_id":"","url":"https://api.github.com/users/marciovmartins","html_url":"https://github.com/marciovmartins","followers_url":"https://api.github.com/users/marciovmartins/followers","following_url":"https://api.github.com/users/marciovmartins/following{/other_user}","gists_url":"https://api.github.com/users/marciovmartins/gists{/gist_id}","starred_url":"https://api.github.com/users/marciovmartins/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marciovmartins/subscriptions","organizations_url":"https://api.github.com/users/marciovmartins/orgs","repos_url":"https://api.github.com/users/marciovmartins/repos","events_url":"https://api.github.com/users/marciovmartins/events{/privacy}","received_events_url":"https://api.github.com/users/marciovmartins/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-20T10:40:45Z","updated_at":"2021-02-20T10:40:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"The tests fail for parallel tests but not for single threaded tests. Also tests fails for different reasons for each run. Seems like one test is affecting other even with different parameter values.\r\n\r\n - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\nThere are different messages every time the tests are run.\r\n```\r\njava.lang.AssertionError: \r\nExpected: is \"d4-bar\"\r\n     but: was null\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)\r\n\tat com.github.marciovmartins.mockito.core.parallel.tests.Helper.test(Helper.java:21)\r\n\tat com.github.marciovmartins.mockito.core.parallel.tests.AllTest.testWithBeforeAllStaticMock(AllTest.java:53)\r\n\t...\r\n```\r\n```\r\njava.lang.AssertionError: \r\nExpected: is \"d3-bar\"\r\n     but: was \"e3-bar\"\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n\tat org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)\r\n\tat com.github.marciovmartins.mockito.core.parallel.tests.Helper.test(Helper.java:21)\r\n\tat com.github.marciovmartins.mockito.core.parallel.tests.AllTest.testWithStaticFinalMock(AllTest.java:47)\r\n\t...\r\n```\r\n\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n```java\r\npackage com.github.marciovmartins.mockito.core.parallel.tests;\r\n\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.ValueSource;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.boot.test.mock.mockito.MockReset;\r\n\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.Matchers.equalTo;\r\nimport static org.hamcrest.Matchers.is;\r\nimport static org.mockito.ArgumentMatchers.eq;\r\nimport static org.mockito.Mockito.verify;\r\nimport static org.mockito.Mockito.when;\r\n\r\n@AutoConfigureMockMvc\r\n@ExtendWith(MockitoExtension.class)\r\n@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\npublic class MockBeanTest {\r\n    @MockBean(reset = MockReset.NONE)\r\n    private Service serviceMockBean;\r\n\r\n    @ParameterizedTest\r\n    @ValueSource(strings = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"})\r\n    void testWithMockBean(String value) {\r\n        // setup\r\n        var expectedValue = value + \"-bar\";\r\n        when(serviceMockBean.doSomething(eq(value))).thenReturn(expectedValue);\r\n\r\n        // execution\r\n        var result = serviceMockBean.doSomething(value);\r\n\r\n        // assertions\r\n        verify(serviceMockBean).doSomething(eq(value));\r\n        assertThat(result, is(equalTo(expectedValue)));\r\n    }\r\n}\r\n```\r\n```java\r\npackage com.github.marciovmartins.mockito.core.parallel.tests;\r\n\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.ValueSource;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.Matchers.equalTo;\r\nimport static org.hamcrest.Matchers.is;\r\nimport static org.mockito.ArgumentMatchers.eq;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.verify;\r\nimport static org.mockito.Mockito.when;\r\n\r\n@AutoConfigureMockMvc\r\n@ExtendWith(MockitoExtension.class)\r\n@SpringBootTest(classes = Application.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\npublic class StaticFinalMockTest {\r\n    private static final Service staticFinalServiceMock = mock(Service.class);\r\n\r\n    @ParameterizedTest\r\n    @ValueSource(strings = {\"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\"})\r\n    void testStaticFinalMock(String value) {\r\n        // setup\r\n        var expectedValue = value + \"-bar\";\r\n        when(staticFinalServiceMock.doSomething(eq(value))).thenReturn(expectedValue);\r\n\r\n        // execution\r\n        var result = staticFinalServiceMock.doSomething(value);\r\n\r\n        // assertions\r\n        verify(staticFinalServiceMock).doSomething(eq(value));\r\n        assertThat(result, is(equalTo(expectedValue)));\r\n    }\r\n}\r\n```\r\n\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\nMockito version: 3.7.7\r\nJDK: openjdk-15.0.2\r\nOS Name: Ubuntu 20.10\r\nOS Type: 64-bit\r\nSpring boot version: 2.4.2\r\n\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\nI created a github project where it's possible to reproduce the problem with different approaches:\r\nhttps://github.com/marciovmartins/mockito-parallel-bug\r\n\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2209/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2203","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2203/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2203/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2203/events","html_url":"https://github.com/mockito/mockito/issues/2203","id":807362695,"node_id":"MDU6SXNzdWU4MDczNjI2OTU=","number":2203,"title":"3.7.7 inline can not find MockMethodDispatcher - has worked in 3.2.4","user":{"login":"smiklosovic","id":588603,"node_id":"MDQ6VXNlcjU4ODYwMw==","avatar_url":"https://avatars.githubusercontent.com/u/588603?v=4","gravatar_id":"","url":"https://api.github.com/users/smiklosovic","html_url":"https://github.com/smiklosovic","followers_url":"https://api.github.com/users/smiklosovic/followers","following_url":"https://api.github.com/users/smiklosovic/following{/other_user}","gists_url":"https://api.github.com/users/smiklosovic/gists{/gist_id}","starred_url":"https://api.github.com/users/smiklosovic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/smiklosovic/subscriptions","organizations_url":"https://api.github.com/users/smiklosovic/orgs","repos_url":"https://api.github.com/users/smiklosovic/repos","events_url":"https://api.github.com/users/smiklosovic/events{/privacy}","received_events_url":"https://api.github.com/users/smiklosovic/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-02-12T16:19:32Z","updated_at":"2021-09-24T06:44:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi @raphw ,\r\n\r\nI am from Apache Cassandra project where we want to use Mockito to mock static methods, I know this feature was introduced in Mockito 3.4.0, we had version 3.2.4 so I had to update it.\r\n\r\nMy test where I was mocking statics works fine but update to that version broke other tests and I am not sure why. The exception I am getting all over again is this:\r\n\r\nDependency versions are:\r\n\r\nmockito-inline:3.7.7\r\nbytebuddy and bytebuddy-agent: 1.10.20\r\njunit 4.12\r\n\r\nI do not have any extension files etc, I just merely bumped versions, we had `mockito-core` but as I understand it mockito-inline already includes it so we do not depend on it explicitly.\r\n\r\nAny suggestions how to resolve this would be appreciated.\r\n\r\n```\r\njava.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)\r\n\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:84)\r\n\tat com.sun.proxy.$Proxy26.isTypeMockable(Unknown Source)\r\n\tat org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:33)\r\n\tat org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:250)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:232)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:60)\r\n\tat org.mockito.Mockito.spy(Mockito.java:2035)\r\n\tat org.apache.cassandra.distributed.mock.nodetool.InternalNodeProbe.connect(InternalNodeProbe.java:76)\r\n\tat org.apache.cassandra.distributed.mock.nodetool.InternalNodeProbe.<init>(InternalNodeProbe.java:60)\r\n\tat org.apache.cassandra.distributed.impl.Instance$DTestNodeTool.<init>(Instance.java:818)\r\n\tat org.apache.cassandra.distributed.impl.Instance.lambda$nodetoolResult$39(Instance.java:726)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalStateException: Failed to load interface org.mockito.plugins.MockMaker implementation declared in sun.misc.CompoundEnumeration@1a352001\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:57)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:65)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:50)\r\n\tat org.mockito.internal.configuration.plugins.PluginRegistry.<init>(PluginRegistry.java:19)\r\n\tat org.mockito.internal.configuration.plugins.Plugins.<clinit>(Plugins.java:16)\r\n\tat org.mockito.internal.util.MockUtil.<clinit>(MockUtil.java:28)\r\n\t... 14 more\r\nCaused by: java.lang.reflect.InvocationTargetException\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:52)\r\n\t... 19 more\r\nCaused by: java.lang.NoClassDefFoundError: org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.<init>(InlineByteBuddyMockMaker.java:305)\r\n\t... 24 more\r\nCaused by: java.lang.ClassNotFoundException: org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)\r\n\tat org.apache.cassandra.distributed.shared.InstanceClassLoader.loadClassInternal(InstanceClassLoader.java:101)\r\n\tat org.apache.cassandra.distributed.shared.InstanceClassLoader.loadClass(InstanceClassLoader.java:87)\r\n\t... 25 more\r\n```\r\n\r\nIt particularly fails on doing this spy\r\n\r\n`StorageServiceMBean mock = Mockito.spy(StorageService.instance);`\r\n\r\nWhat is interesting is that some code in MockMethodDispatcher is red like this, invalidating caches and restart of IDEA does not seem to help either.\r\n\r\nWhat has happened between Mockito core 3.2.4 and inline 3.7.7 that it stopped to work? 3.4.0 does not work either ...\r\n\r\nhttps://ibb.co/rQ4Pkrg\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2203/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2203/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2201","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2201/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2201/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2201/events","html_url":"https://github.com/mockito/mockito/issues/2201","id":806617205,"node_id":"MDU6SXNzdWU4MDY2MTcyMDU=","number":2201,"title":"Calling getExceptionTypes() on concrete object that is used as interface doesn't return exception types from interface","user":{"login":"henrykuijpers","id":6546957,"node_id":"MDQ6VXNlcjY1NDY5NTc=","avatar_url":"https://avatars.githubusercontent.com/u/6546957?v=4","gravatar_id":"","url":"https://api.github.com/users/henrykuijpers","html_url":"https://github.com/henrykuijpers","followers_url":"https://api.github.com/users/henrykuijpers/followers","following_url":"https://api.github.com/users/henrykuijpers/following{/other_user}","gists_url":"https://api.github.com/users/henrykuijpers/gists{/gist_id}","starred_url":"https://api.github.com/users/henrykuijpers/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/henrykuijpers/subscriptions","organizations_url":"https://api.github.com/users/henrykuijpers/orgs","repos_url":"https://api.github.com/users/henrykuijpers/repos","events_url":"https://api.github.com/users/henrykuijpers/events{/privacy}","received_events_url":"https://api.github.com/users/henrykuijpers/received_events","type":"User","site_admin":false},"labels":[{"id":532126464,"node_id":"MDU6TGFiZWw1MzIxMjY0NjQ=","url":"https://api.github.com/repos/mockito/mockito/labels/please%20contribute","name":"please contribute","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-11T17:59:10Z","updated_at":"2021-08-29T17:43:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"org.mockito.internal.stubbing.answers.InvocationInfo#isValidException is doing validation on the exception types that can be thrown from this method.\r\n\r\nIn my codebase, I'm programming against an interface, but in fact, a spy is created from an instance that is implementing the interface, that drops the exception types that that implementation does not throw. However, the code that is calling the interface is of course unaware of that fact. Also, that implementation is a mock implementation (a real mock implementation, not a Mockito mock()/spy() instance). \r\n\r\nA testcase here:\r\n```\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.exceptions.base.MockitoException;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\nimport java.io.IOException;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertThrows;\r\nimport static org.mockito.Mockito.doThrow;\r\nimport static org.mockito.Mockito.spy;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\npublic class MockitoExceptionTypesIssue {\r\n    @Test\r\n    void exceptionTypeIoExceptionShouldBeMockableForObjectBeingSpyedOn() {\r\n        final I x = spy(new C());\r\n        final IOException ioException = new IOException(\"Oh my god!\");\r\n        final MockitoException e = assertThrows(\r\n                MockitoException.class,\r\n                () -> doThrow(ioException)\r\n                        .when(x)\r\n                        .m());\r\n        assertEquals(\"\\n\" +\r\n                \"Checked exception is invalid for this method!\\n\" +\r\n                \"Invalid: \" + ioException,\r\n                e.getMessage()\r\n        );\r\n    }\r\n\r\n    interface I {\r\n        void m() throws IOException;\r\n    }\r\n\r\n    static class C implements I {\r\n        public void m() {\r\n            // no-op\r\n        }\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2201/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2191","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2191/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2191/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2191/events","html_url":"https://github.com/mockito/mockito/issues/2191","id":798193179,"node_id":"MDU6SXNzdWU3OTgxOTMxNzk=","number":2191,"title":"Failed to mock interface in Debian but succeeded in Mac OS","user":{"login":"pancerZH","id":26613976,"node_id":"MDQ6VXNlcjI2NjEzOTc2","avatar_url":"https://avatars.githubusercontent.com/u/26613976?v=4","gravatar_id":"","url":"https://api.github.com/users/pancerZH","html_url":"https://github.com/pancerZH","followers_url":"https://api.github.com/users/pancerZH/followers","following_url":"https://api.github.com/users/pancerZH/following{/other_user}","gists_url":"https://api.github.com/users/pancerZH/gists{/gist_id}","starred_url":"https://api.github.com/users/pancerZH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pancerZH/subscriptions","organizations_url":"https://api.github.com/users/pancerZH/orgs","repos_url":"https://api.github.com/users/pancerZH/repos","events_url":"https://api.github.com/users/pancerZH/events{/privacy}","received_events_url":"https://api.github.com/users/pancerZH/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-01T10:09:10Z","updated_at":"2021-07-19T02:49:28Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"JDK: JDK11\r\nMockito Version: 3.5.11\r\n\r\nHi Mockito Team:\r\n\r\nI am using Mockito as my unit test framework, but currently I am experiencing a really wired issue:\r\n1. Some unit tests, which include mocks for interfaces or abstract classes, failed in our CI/CD process, which was a Linux. But these tests passed on my MacBook Pro.\r\n2. I built a docker container to reproduce these issues, and it did do it.\r\n3. Some details:\r\n    - The first time I ran unit tests in the container, some tests failed; But if I ran unit tests the second time, all the failed tests passed.\r\n    - If I ran the unit tests individually, or package by package, these tests passed; But they failed when run as a whole.\r\n    - After I replaced all the mock for interfaces with mock for implemented classes, all the tests passed.\r\n    - Addition: when the unit tests containing mock for interfaces failed, a NullPointerException would be thrown, but some other unit tests were also influenced, though they did not contain mock for interfaces: Exceptions like InValidUseOfMock appeared.\r\n\r\nI have to say this is really wired and it costed me a lot of time to fix it, but still could not find the root cause. Even a simple code like:\r\n```java\r\nMap<String, String> map = mock(Map.class);\r\nmap.add(\"test\", \"test\");\r\n```\r\nwould also fail with a NullPointerException of the second line.\r\n\r\nCould you have look on it? Thank you for your help!","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2191/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2191/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2187","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2187/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2187/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2187/events","html_url":"https://github.com/mockito/mockito/issues/2187","id":792154194,"node_id":"MDU6SXNzdWU3OTIxNTQxOTQ=","number":2187,"title":"@InjectMocks does not inject the correct mock when constructor has super ","user":{"login":"gabrielRosa","id":19877645,"node_id":"MDQ6VXNlcjE5ODc3NjQ1","avatar_url":"https://avatars.githubusercontent.com/u/19877645?v=4","gravatar_id":"","url":"https://api.github.com/users/gabrielRosa","html_url":"https://github.com/gabrielRosa","followers_url":"https://api.github.com/users/gabrielRosa/followers","following_url":"https://api.github.com/users/gabrielRosa/following{/other_user}","gists_url":"https://api.github.com/users/gabrielRosa/gists{/gist_id}","starred_url":"https://api.github.com/users/gabrielRosa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gabrielRosa/subscriptions","organizations_url":"https://api.github.com/users/gabrielRosa/orgs","repos_url":"https://api.github.com/users/gabrielRosa/repos","events_url":"https://api.github.com/users/gabrielRosa/events{/privacy}","received_events_url":"https://api.github.com/users/gabrielRosa/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-01-22T16:48:08Z","updated_at":"2021-02-09T10:58:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello Mockito team,\r\n\r\nJava OpenJDK Runtime Environment SapMachine (build 11.0.8+10-LTS-sapmachine)\r\nMockito 3.6.28\r\n\r\nThe mock injected in the isn't the same as that used in `when`, so the `verify` doesn't work as expected. The situation happens when there are an abstract class and a `super`.\r\n\r\nThe following is a simplified version of the test code.\r\n\r\n``` \r\n@Service\r\npublic class ImportedService\r\n    extends AbstractService<UUID, Car> {\r\n\r\n  private final CarRepository carRepository;\r\n  private final PlatformService platformService;\r\n  private final Mapper<Segment, SegmentId> segmentIdMapper;\r\n  private final Mapper<Pair<UUID, List<Segment>>, SegmentDTO> segmentMapper;\r\n\r\n  public ImportedNonAbapSegmentsService(\r\n      ProductService productService ,\r\n      CarRepository  carRepository,\r\n      PlatformService  platformService ,\r\n      Mapper<Segment, SegmentId> segmentIdMapper,\r\n      Mapper<Pair<UUID, List<Segment>>, SegmentDTO> segmentMapper) {\r\n    super(productService);\r\n    this.carRepository= carRepository;\r\n    this.platformService = platformService;\r\n    this.segmentIdMapper= segmentIdMapper;\r\n    this.segmentMapper= segmentMapper;\r\n  }\r\n....\r\n\r\n@RunWith(SpringRunner.class)\r\npublic class ImportedServiceTest {\r\n\r\n  @Mock private ProductService productService;\r\n  @Mock private CarRepository  carRepository;\r\n  @Mock private PlatformService platformService ;\r\n  @Mock private Mapper<Segment, SegmentId> segmentIdMapper;\r\n  @Mock private Mapper<Pair<UUID, List<Segment>>, SegmentDTO> segmentMapper;\r\n\r\n  @InjectMocks private ImportedServiceTest importedServiceTest ;\r\n\r\n  @Test\r\n  public void importedSegments() {\r\n  .....\r\n\r\n    when(productService.findDistinctByDeliveredFalse()).thenReturn(product);\r\n    when(segmentIdMapper.map(segmet)).thenReturn(segmentId);\r\n    when(carRepository.findAllById(car)).thenReturn(carList);\r\n    when(segmentMapper.map(any())).thenReturn(segments);\r\n\r\n    importedServiceTest .import();\r\n\r\n    verify(productService, times(1)).findDistinctByDeliveredFalse();\r\n    verify(segmentIdMapper, times(1)).map(segmentId);\r\n    verify(carRepository, times(1)).findAllById(carList);\r\n    verify(productService, times(1)) .setSegmentsDelivered(product);\r\n    verify(platformService , times(1)).sendToPlatform(any());\r\n  }\r\n}\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2187/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2187/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2184","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2184/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2184/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2184/events","html_url":"https://github.com/mockito/mockito/issues/2184","id":791307511,"node_id":"MDU6SXNzdWU3OTEzMDc1MTE=","number":2184,"title":"verifyNoMoreInteractions does not work as expected when used with MockitoSession","user":{"login":"devstdout","id":10732633,"node_id":"MDQ6VXNlcjEwNzMyNjMz","avatar_url":"https://avatars.githubusercontent.com/u/10732633?v=4","gravatar_id":"","url":"https://api.github.com/users/devstdout","html_url":"https://github.com/devstdout","followers_url":"https://api.github.com/users/devstdout/followers","following_url":"https://api.github.com/users/devstdout/following{/other_user}","gists_url":"https://api.github.com/users/devstdout/gists{/gist_id}","starred_url":"https://api.github.com/users/devstdout/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devstdout/subscriptions","organizations_url":"https://api.github.com/users/devstdout/orgs","repos_url":"https://api.github.com/users/devstdout/repos","events_url":"https://api.github.com/users/devstdout/events{/privacy}","received_events_url":"https://api.github.com/users/devstdout/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-01-21T16:35:05Z","updated_at":"2021-01-21T16:35:05Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm seeing an issue with `Mockito.verifyNoMoreInteractions` when used with `MockitoSession`.\r\n\r\nIn the example below, all tests should fail as we have an interaction with `supplier1` that is not taken into account (`verify(supplier1).getAsInt()` is commented).\r\n\r\nHowever `testWithMockitoSession` passes. It only exhibit this behaviour when a method on the mocked object is stubbed (`when(supplier1.getAsInt()).thenReturn(100)`).\r\n\r\n```java\r\npublic class BuggyMockito {\r\n\r\n    @Mock\r\n    private IntSupplier supplier1;\r\n    @Mock\r\n    private IntSupplier supplier2;\r\n\r\n    @Test\r\n    public void testNormalMock() {\r\n        testTheThing(mock(IntSupplier.class), mock(IntSupplier.class));\r\n    }\r\n\r\n    @Test\r\n    public void testInitMocks() {\r\n        MockitoAnnotations.initMocks(this);\r\n        testTheThing(supplier1, supplier2);\r\n    }\r\n\r\n    @Test\r\n    public void testWithMockitoSession() {\r\n        final MockitoSession mockitoSession = Mockito.mockitoSession().initMocks(this).startMocking();\r\n        testTheThing(supplier1, supplier2);\r\n        mockitoSession.finishMocking();\r\n    }\r\n\r\n    private static void testTheThing(final IntSupplier supplier1, final IntSupplier supplier2) {\r\n        when(supplier1.getAsInt()).thenReturn(100);\r\n\r\n        supplier1.getAsInt();\r\n        supplier2.getAsInt();\r\n\r\n        //verify(supplier1).getAsInt();\r\n        verify(supplier2).getAsInt();\r\n\r\n        verifyNoMoreInteractions(supplier1, supplier2);\r\n    }\r\n}\r\n```\r\n\r\nThis test was done on `openjdk version \"11.0.9.1\" 2020-11-04` with Mockito 3.7.7.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2184/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2184/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2183","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2183/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2183/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2183/events","html_url":"https://github.com/mockito/mockito/issues/2183","id":791087202,"node_id":"MDU6SXNzdWU3OTEwODcyMDI=","number":2183,"title":"mockStatic of enum class is unstable - impacted by earlier use of the class (unrelated to mockStatic)","user":{"login":"arivaldh","id":35653152,"node_id":"MDQ6VXNlcjM1NjUzMTUy","avatar_url":"https://avatars.githubusercontent.com/u/35653152?v=4","gravatar_id":"","url":"https://api.github.com/users/arivaldh","html_url":"https://github.com/arivaldh","followers_url":"https://api.github.com/users/arivaldh/followers","following_url":"https://api.github.com/users/arivaldh/following{/other_user}","gists_url":"https://api.github.com/users/arivaldh/gists{/gist_id}","starred_url":"https://api.github.com/users/arivaldh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arivaldh/subscriptions","organizations_url":"https://api.github.com/users/arivaldh/orgs","repos_url":"https://api.github.com/users/arivaldh/repos","events_url":"https://api.github.com/users/arivaldh/events{/privacy}","received_events_url":"https://api.github.com/users/arivaldh/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-01-21T13:26:39Z","updated_at":"2021-01-21T13:27:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"OS: Windows 10\r\nMockito: 3.7.0\r\nJUnit5: 5.7.0\r\nJava: 8 (8u202)\r\n\r\nWe have two tests. A and B. When run in the order [B, A] they pass. When run in the order [A, B] B fails.\r\nFailure is related to \"switch\" java statement with enum usage.\r\n\r\n```java\r\npackage com;\r\n\r\nimport org.junit.jupiter.api.MethodOrderer;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestMethodOrder;\r\nimport org.mockito.MockedStatic;\r\nimport org.springframework.test.util.ReflectionTestUtils;\r\n\r\nimport static com.MyEnum.A_VALUE;\r\nimport static com.MyEnum.B_VALUE;\r\nimport static com.MyEnum.C_VALUE;\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.mockStatic;\r\nimport static org.mockito.Mockito.when;\r\n\r\n@TestMethodOrder(MethodOrderer.MethodName.class)\r\nclass MyFactoryClassWithEnumTest {\r\n    @Test\r\n    void aTest() {\r\n        MyFactoryClass factory = MyFactoryClass.create();\r\n\r\n        assertThat(factory.valuesVisible()).isEqualTo(new MyEnum[] {\r\n                A_VALUE,\r\n                B_VALUE,\r\n                C_VALUE\r\n        });\r\n        factory.switchEval(A_VALUE);\r\n    }\r\n\r\n    @Test\r\n    void bTest() {\r\n        MyEnum mockInstance = mock(MyEnum.class);\r\n        when(mockInstance.ordinal()).thenReturn(MyEnum.values().length);\r\n        ReflectionTestUtils.setField(mockInstance, \"ordinal\", MyEnum.values().length);\r\n\r\n        try (MockedStatic<MyEnum> mockedDropType = mockStatic(MyEnum.class)) {\r\n            mockedDropType.when(MyEnum::values).thenReturn(new MyEnum[]{\r\n                    A_VALUE,\r\n                    B_VALUE,\r\n                    C_VALUE,\r\n                    mockInstance\r\n            });\r\n\r\n            MyFactoryClass factory = MyFactoryClass.create();\r\n            assertThat(factory.valuesVisible()).isEqualTo(new MyEnum[] {\r\n                    A_VALUE,\r\n                    B_VALUE,\r\n                    C_VALUE,\r\n                    mockInstance});\r\n            factory.switchEval(mockInstance);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWhile classes are as simple as possible:\r\n```java\r\npackage com;\r\n\r\npublic enum MyEnum {\r\n    A_VALUE,\r\n    B_VALUE,\r\n    C_VALUE\r\n}\r\n```\r\n\r\n```java\r\npackage com;\r\n\r\nimport lombok.AllArgsConstructor;\r\n\r\n@AllArgsConstructor(staticName = \"create\")\r\npublic class MyFactoryClass {\r\n    public void switchEval(MyEnum myEnum) {\r\n        switch (myEnum) {\r\n            default:\r\n                System.out.println(\"DONE!\");\r\n        }\r\n    }\r\n\r\n    public MyEnum[] valuesVisible() {\r\n        return MyEnum.values();\r\n    }\r\n}\r\n```\r\n\r\nMyFactoryClass is the class that should return in (here absent) method \"of\" appropriate object related to enum value.\r\nWe want to test \"default\" scenario (if someone would be so nice to \"override\" our enum by his own enum by injecting it \"earlier\" in the classpath, or just when there's an incompatibility somewhere along the line).\r\n\r\nObviously if there's a better way to test such a scenario, we could change our approach accordingly.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2183/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2166","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2166/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2166/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2166/events","html_url":"https://github.com/mockito/mockito/issues/2166","id":778204577,"node_id":"MDU6SXNzdWU3NzgyMDQ1Nzc=","number":2166,"title":"Have Mockito.once to simplify Mockito.times(1)","user":{"login":"divinedragon","id":91791,"node_id":"MDQ6VXNlcjkxNzkx","avatar_url":"https://avatars.githubusercontent.com/u/91791?v=4","gravatar_id":"","url":"https://api.github.com/users/divinedragon","html_url":"https://github.com/divinedragon","followers_url":"https://api.github.com/users/divinedragon/followers","following_url":"https://api.github.com/users/divinedragon/following{/other_user}","gists_url":"https://api.github.com/users/divinedragon/gists{/gist_id}","starred_url":"https://api.github.com/users/divinedragon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/divinedragon/subscriptions","organizations_url":"https://api.github.com/users/divinedragon/orgs","repos_url":"https://api.github.com/users/divinedragon/repos","events_url":"https://api.github.com/users/divinedragon/events{/privacy}","received_events_url":"https://api.github.com/users/divinedragon/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-01-04T16:17:32Z","updated_at":"2021-02-04T04:29:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Most verification counts in Tests are `Mockito.times(1)`. Having a handly `Mockito.once()` would simplify the test and make them more readable.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2166/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2166/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2162","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2162/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2162/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2162/events","html_url":"https://github.com/mockito/mockito/issues/2162","id":776646620,"node_id":"MDU6SXNzdWU3NzY2NDY2MjA=","number":2162,"title":"Flaky test StubbingLookupListenerCallbackTest > add_listeners_concurrently_sanity_check","user":{"login":"mockitoguy","id":24743,"node_id":"MDQ6VXNlcjI0NzQz","avatar_url":"https://avatars.githubusercontent.com/u/24743?v=4","gravatar_id":"","url":"https://api.github.com/users/mockitoguy","html_url":"https://github.com/mockitoguy","followers_url":"https://api.github.com/users/mockitoguy/followers","following_url":"https://api.github.com/users/mockitoguy/following{/other_user}","gists_url":"https://api.github.com/users/mockitoguy/gists{/gist_id}","starred_url":"https://api.github.com/users/mockitoguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockitoguy/subscriptions","organizations_url":"https://api.github.com/users/mockitoguy/orgs","repos_url":"https://api.github.com/users/mockitoguy/repos","events_url":"https://api.github.com/users/mockitoguy/events{/privacy}","received_events_url":"https://api.github.com/users/mockitoguy/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-30T21:37:16Z","updated_at":"2020-12-30T21:37:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Flaky test StubbingLookupListenerCallbackTest > add_listeners_concurrently_sanity_check\r\n\r\n```\r\n> Task :test\r\norg.mockitousage.debugging.StubbingLookupListenerCallbackTest > add_listeners_concurrently_sanity_check FAILED\r\n    java.lang.AssertionError: expected:<50> but was:<51>\r\n```\r\n\r\nBuild failure: https://github.com/mockito/mockito/pull/2161/checks?check_run_id=1627545742#step:7:423","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2162/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2153","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2153/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2153/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2153/events","html_url":"https://github.com/mockito/mockito/issues/2153","id":773081465,"node_id":"MDU6SXNzdWU3NzMwODE0NjU=","number":2153,"title":"staticMock() and singletons","user":{"login":"ThexXTURBOXx","id":12763829,"node_id":"MDQ6VXNlcjEyNzYzODI5","avatar_url":"https://avatars.githubusercontent.com/u/12763829?v=4","gravatar_id":"","url":"https://api.github.com/users/ThexXTURBOXx","html_url":"https://github.com/ThexXTURBOXx","followers_url":"https://api.github.com/users/ThexXTURBOXx/followers","following_url":"https://api.github.com/users/ThexXTURBOXx/following{/other_user}","gists_url":"https://api.github.com/users/ThexXTURBOXx/gists{/gist_id}","starred_url":"https://api.github.com/users/ThexXTURBOXx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ThexXTURBOXx/subscriptions","organizations_url":"https://api.github.com/users/ThexXTURBOXx/orgs","repos_url":"https://api.github.com/users/ThexXTURBOXx/repos","events_url":"https://api.github.com/users/ThexXTURBOXx/events{/privacy}","received_events_url":"https://api.github.com/users/ThexXTURBOXx/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-12-22T16:33:38Z","updated_at":"2020-12-23T09:25:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"# Environment\r\n\r\nWindows 10 64-bit, Java 14.0.2 x64, mockito-inline 3.6.28, JUnit 5.7.0\r\n\r\n# Short, Self Contained, Correct (Compilable), Example\r\n\r\nhttp://femtopedia.de/SSCCE.zip\r\n\r\n# Issue\r\n\r\nWhen we run the given tests, one of them will fail, which shouldn't. I am not entirely sure, what the actual issue is here, but I assume, it has to do with the use of singletons.\r\n\r\nWhen we change the order of the tests or don't use mocking on the objects/classes, the tests pass without issues.\r\n\r\nAlso, if we \"initialize\" the singleton before all tests run, the tests also pass.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2153/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2151","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2151/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2151/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2151/events","html_url":"https://github.com/mockito/mockito/issues/2151","id":771642039,"node_id":"MDU6SXNzdWU3NzE2NDIwMzk=","number":2151,"title":"Cannot Mock public and non-abstract class","user":{"login":"Mikhail-Polivakha","id":59521488,"node_id":"MDQ6VXNlcjU5NTIxNDg4","avatar_url":"https://avatars.githubusercontent.com/u/59521488?v=4","gravatar_id":"","url":"https://api.github.com/users/Mikhail-Polivakha","html_url":"https://github.com/Mikhail-Polivakha","followers_url":"https://api.github.com/users/Mikhail-Polivakha/followers","following_url":"https://api.github.com/users/Mikhail-Polivakha/following{/other_user}","gists_url":"https://api.github.com/users/Mikhail-Polivakha/gists{/gist_id}","starred_url":"https://api.github.com/users/Mikhail-Polivakha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mikhail-Polivakha/subscriptions","organizations_url":"https://api.github.com/users/Mikhail-Polivakha/orgs","repos_url":"https://api.github.com/users/Mikhail-Polivakha/repos","events_url":"https://api.github.com/users/Mikhail-Polivakha/events{/privacy}","received_events_url":"https://api.github.com/users/Mikhail-Polivakha/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-12-20T17:30:35Z","updated_at":"2021-08-11T17:16:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It seems to be a bug or something really goes wrong with mocking a public non-abstract class.\r\n\r\nMy test case:\r\n\r\n ```\r\nclass ConsumerTest {\r\n\r\n    @Test\r\n    void test() {\r\n        SomeNonFinalAndPrivateClass c = Mockito.mock(SomeNonFinalAndPrivateClass.class);\r\n        c.doSomeWork(null);\r\n        Mockito.verify(c, Mockito.never()).doSomeWork(ArgumentMatchers.argThat(arg -> arg == null));\r\n    }\r\n}\r\n```\r\n\r\n\r\nAnd here is how my class looks like:\r\n\r\n\r\n```\r\npublic class SomeNonFinalAndPrivateClass {\r\n    public String doSomeWork(String someParameter) {\r\n        return someParameter;\r\n    }\r\n}\r\n\r\n```\r\n\r\nAs you can see, it is not private and also it is not abstract. I got an exception like this:\r\n\r\n\r\n```\r\norg.mockito.exceptions.base.MockitoException:\r\nMockito cannot mock this class: class SomeNonFinalAndPrivateClass.\r\n\r\nMockito can only mock non-private & non-final classes.\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 11\r\nJVM vendor name    : Oracle Corporation\r\nJVM vendor version : 11+28\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 11+28\r\nJVM info           : mixed mode\r\nOS name            : Linux\r\nOS version         : 5.4.0-58-generic\r\n\r\n\r\nUnderlying exception : java.lang.UnsupportedOperationException: Cannot define class using reflection\r\n\r\n\tat ConsumerTest.test(ConsumerTest.java:9)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\r\nCaused by: java.lang.UnsupportedOperationException: Cannot define class using reflection\r\n\tat net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$Dispatcher$Unavailable.defineClass(ClassInjector.java:821)\r\n\tat net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection.inject(ClassInjector.java:185)\r\n\tat net.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$InjectionDispatcher.load(ClassLoadingStrategy.java:187)\r\n\tat net.bytebuddy.dynamic.TypeResolutionStrategy$Passive.initialize(TypeResolutionStrategy.java:79)\r\n\tat net.bytebuddy.dynamic.DynamicType$Default$Unloaded.load(DynamicType.java:4456)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:115)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:37)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:34)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:138)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:346)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:161)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:355)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:32)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:71)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:42)\r\n\tat org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:25)\r\n\tat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:35)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:51)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1798)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1711)\r\n\t... 64 more\r\n\r\n```\r\n\r\nI thing I am doing something wrong. But it seems not so obvious. Just in case - my maven dependency:\r\n\r\n\r\n```\r\n<dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-core</artifactId>\r\n            <version>2.10.0</version>\r\n            <scope>test</scope>\r\n</dependency>\r\n\r\n```\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2151/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2143","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2143/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2143/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2143/events","html_url":"https://github.com/mockito/mockito/issues/2143","id":766349105,"node_id":"MDU6SXNzdWU3NjYzNDkxMDU=","number":2143,"title":"adding Bearer auth header field to request causes a connection to my external auth server keycloak","user":{"login":"MrMedTech","id":41990590,"node_id":"MDQ6VXNlcjQxOTkwNTkw","avatar_url":"https://avatars.githubusercontent.com/u/41990590?v=4","gravatar_id":"","url":"https://api.github.com/users/MrMedTech","html_url":"https://github.com/MrMedTech","followers_url":"https://api.github.com/users/MrMedTech/followers","following_url":"https://api.github.com/users/MrMedTech/following{/other_user}","gists_url":"https://api.github.com/users/MrMedTech/gists{/gist_id}","starred_url":"https://api.github.com/users/MrMedTech/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MrMedTech/subscriptions","organizations_url":"https://api.github.com/users/MrMedTech/orgs","repos_url":"https://api.github.com/users/MrMedTech/repos","events_url":"https://api.github.com/users/MrMedTech/events{/privacy}","received_events_url":"https://api.github.com/users/MrMedTech/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-14T11:57:02Z","updated_at":"2020-12-14T11:57:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Setup:\r\nSpringBoot 2.4.0\r\nJunit 5\r\nMockito: 3.6.0\r\n\r\nHi,\r\nI use Mockito in combination with spring rest docs. I am testing a Microservice that is OpenID connect secured by keycloak.\r\nThe tests work fine and now I want to document the request header with the Bearer auth field.\r\n\r\nHere comes the problem:\r\nWhen I add\r\n```\r\n mockMvc.perform(get(\"/users\")\r\n             .header(\"Authorization\",\"Bearer accessToken\" )\r\n```\r\n\r\nI get\r\n```\r\n2020-12-14 12:41:19.153  INFO 13708 --- [           main] o.a.http.impl.client.DefaultHttpClient   : Retrying request to {}->http://localhost:8080\r\n2020-12-14 12:41:19.159  WARN 13708 --- [           main] o.keycloak.adapters.KeycloakDeployment   : Failed to load URLs from http://localhost:8080/auth/realms/demo/.well-known/openid-configuration\r\n```\r\n\r\nIf I leave the header field, the test runs with no problem.\r\nIn order to document the header field it has to occur in the request.\r\n\r\nWhy does Mockito initate this connection when I add this header field?\r\nIs there a way to mock this behaviour?","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2143/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2143/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2142","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2142/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2142/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2142/events","html_url":"https://github.com/mockito/mockito/issues/2142","id":765507574,"node_id":"MDU6SXNzdWU3NjU1MDc1NzQ=","number":2142,"title":"Mocked static methods are not available in other threads","user":{"login":"mhtocs","id":16911901,"node_id":"MDQ6VXNlcjE2OTExOTAx","avatar_url":"https://avatars.githubusercontent.com/u/16911901?v=4","gravatar_id":"","url":"https://api.github.com/users/mhtocs","html_url":"https://github.com/mhtocs","followers_url":"https://api.github.com/users/mhtocs/followers","following_url":"https://api.github.com/users/mhtocs/following{/other_user}","gists_url":"https://api.github.com/users/mhtocs/gists{/gist_id}","starred_url":"https://api.github.com/users/mhtocs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mhtocs/subscriptions","organizations_url":"https://api.github.com/users/mhtocs/orgs","repos_url":"https://api.github.com/users/mhtocs/repos","events_url":"https://api.github.com/users/mhtocs/events{/privacy}","received_events_url":"https://api.github.com/users/mhtocs/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2020-12-13T16:23:21Z","updated_at":"2021-10-15T03:56:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":" - [ ] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [ ] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\nMockito v3.4.0\r\n\r\n`Mockito.mockStatic()` mocks method seems to be working in the current thread only. I need the static mock to be available globally in multiple threads. \r\n\r\nfor e.g:\r\n```java\r\ntry ( MockedStatic<LegacyTextUtils> utilMock = Mockito.mockStatic(LegacyTextUtils.class)){\r\n    utilMock.when(LegacyTextUtils::getReqText).thenReturn(\"test-123\");\r\n}\r\n```\r\n\r\nThe above mock is only available in the current thread. Is there any way to make it available globally?","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2142/reactions","total_count":30,"+1":30,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2142/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2141","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2141/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2141/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2141/events","html_url":"https://github.com/mockito/mockito/issues/2141","id":764876025,"node_id":"MDU6SXNzdWU3NjQ4NzYwMjU=","number":2141,"title":"Final methods Error-Handling Bug","user":{"login":"Hecoz","id":20398560,"node_id":"MDQ6VXNlcjIwMzk4NTYw","avatar_url":"https://avatars.githubusercontent.com/u/20398560?v=4","gravatar_id":"","url":"https://api.github.com/users/Hecoz","html_url":"https://github.com/Hecoz","followers_url":"https://api.github.com/users/Hecoz/followers","following_url":"https://api.github.com/users/Hecoz/following{/other_user}","gists_url":"https://api.github.com/users/Hecoz/gists{/gist_id}","starred_url":"https://api.github.com/users/Hecoz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hecoz/subscriptions","organizations_url":"https://api.github.com/users/Hecoz/orgs","repos_url":"https://api.github.com/users/Hecoz/repos","events_url":"https://api.github.com/users/Hecoz/events{/privacy}","received_events_url":"https://api.github.com/users/Hecoz/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-13T03:46:18Z","updated_at":"2020-12-15T14:19:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Mockito Version:  release/3.x or mockito-core:2.7.21\r\nJava Version: JDK1.8\r\nOS: macOS Catalina 10.15.6\r\n\r\nHi, I’m using Mockito to test an open source project.  However, when I mock a class contains a final method or a class extends an abstract class containing a final method, which I didn’t know before,  different exceptions are thrown for different method codes. \r\nThe following is a simplified version of the test code. \r\n```\r\npublic class TestClassWithFinalMethod {\r\n\r\n    public class ClassWithFinalMethod{\r\n        private String null_text = null;\r\n        public final String finalMethodWithCheck(){\r\n            if (null_text.equals(\"null\")){ return \"null\"; }\r\n            return null_text;\r\n        }\r\n        public final String finalMethodWithoutCheck(){\r\n            return null_text;\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void unexpectedOutput(){\r\n        ClassWithFinalMethod mock = mock(ClassWithFinalMethod.class);\r\n        when(mock.finalMethodWithCheck()).thenReturn(\"any string\");\r\n    }\r\n\r\n    @Test\r\n    public void expectedOutput(){\r\n        ClassWithFinalMethod mock = mock(ClassWithFinalMethod.class);\r\n        when(mock.finalMethodWithoutCheck()).thenReturn(\"any string\");\r\n    }\r\n}\r\n\r\n```\r\nIn the **unexpectedOutput** method, if the stub method contains a call to an unassigned variables, it will throw a **NullPointerException**. However, in **expectedOutput**, if the stub method does not contain complex code, it will give a nice error report. \r\n\r\n<img width=\"859\" alt=\"WeChat97fb7a53de643882e70c6f5c945bac49\" src=\"https://user-images.githubusercontent.com/20398560/102002498-1255ae00-3d38-11eb-89a2-b6a1b16f1063.png\">\r\n\r\nTherefore, if  Mockito throw an exception directly in the project source code, it will take a lot time that should not be spent to locate the cause of the error. I think this may be an Error-Handling Bug. What I want is something like the output in the expectedOutput method, which tells me that this may be a final method, and I can set mock-maker-inline or other attempts to solve this problem.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2141/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2141/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2104","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2104/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2104/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2104/events","html_url":"https://github.com/mockito/mockito/issues/2104","id":747404061,"node_id":"MDU6SXNzdWU3NDc0MDQwNjE=","number":2104,"title":"Add new static Answers RETURNS_DEFAULT_VALUE","user":{"login":"rymsha","id":2891483,"node_id":"MDQ6VXNlcjI4OTE0ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2891483?v=4","gravatar_id":"","url":"https://api.github.com/users/rymsha","html_url":"https://github.com/rymsha","followers_url":"https://api.github.com/users/rymsha/followers","following_url":"https://api.github.com/users/rymsha/following{/other_user}","gists_url":"https://api.github.com/users/rymsha/gists{/gist_id}","starred_url":"https://api.github.com/users/rymsha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rymsha/subscriptions","organizations_url":"https://api.github.com/users/rymsha/orgs","repos_url":"https://api.github.com/users/rymsha/repos","events_url":"https://api.github.com/users/rymsha/events{/privacy}","received_events_url":"https://api.github.com/users/rymsha/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-11-20T11:12:37Z","updated_at":"2020-12-01T19:19:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":" - [ ] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [ ] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\nMockito v3.6.0\r\n\r\nAdd new static `Answer` to `Answers`: `Answers.RETURNS_DEFAULT_VALUE` that calls method's `getDefaultValue`\r\nThis would be useful for annotation mocking, especially with `MockitoExtension` `@Mock(answer = Answers.RETURNS_DEFAULT_VALUE)`\r\n\r\nBackground:\r\nIn OSGi Annotations are used as \"Component Property Type\":\r\n```\r\npublic @interface MyConfig { String timeout() default \"1s\";}\r\n\r\n...\r\n\r\n@Activate\r\npublic void activate(MyConfig config) {timeout = config.timeout();}\r\n```\r\nverifying the method `activate` and configuration property default values is problematic.\r\n\r\n\r\nCurrent workaround:\r\n`mock(MyConfig.class, invocation -> invocation.getMethod().getDefaultValue());`\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2104/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2102","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2102/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2102/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2102/events","html_url":"https://github.com/mockito/mockito/issues/2102","id":742049204,"node_id":"MDU6SXNzdWU3NDIwNDkyMDQ=","number":2102,"title":"UnnecessaryStubbingException not thrown when stubbing is in a helper method","user":{"login":"ushatil","id":7603480,"node_id":"MDQ6VXNlcjc2MDM0ODA=","avatar_url":"https://avatars.githubusercontent.com/u/7603480?v=4","gravatar_id":"","url":"https://api.github.com/users/ushatil","html_url":"https://github.com/ushatil","followers_url":"https://api.github.com/users/ushatil/followers","following_url":"https://api.github.com/users/ushatil/following{/other_user}","gists_url":"https://api.github.com/users/ushatil/gists{/gist_id}","starred_url":"https://api.github.com/users/ushatil/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ushatil/subscriptions","organizations_url":"https://api.github.com/users/ushatil/orgs","repos_url":"https://api.github.com/users/ushatil/repos","events_url":"https://api.github.com/users/ushatil/events{/privacy}","received_events_url":"https://api.github.com/users/ushatil/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-11-13T01:20:17Z","updated_at":"2020-12-01T10:25:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using MockitoJUnitRunner, If you use a helper method to set up your stubbings, then a testcase can stub a method without ever calling it, and UnnecessaryStubbingException is not thrown.\r\n\r\nThere full, compilable example can be found here: https://github.com/ushatil/mockito-stubbing-bug-example\r\n\r\nThe abridged version is here:\r\n```\r\n// Foo.java, in src/main\r\npublic class Foo {\r\n  private int id;\r\n  private Optional<Long> barId;\r\n\r\n  // POJO constructor, getters and setters\r\n}\r\n\r\n// FooClient.java, in src/main\r\npublic class FooClient {\r\n  public Foo getFoo(int id) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// FooClientTest.java, in src/test\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class FooClientTest {\r\n\r\n  @Mock\r\n  private FooClient fooClient;\r\n\r\n  @Test\r\n  public void testPassesUsingInlineStubbing() {\r\n    when(fooClient.getFoo(3)).thenReturn(new Foo(3, Optional.empty()));\r\n    fooClient.getFoo(3);\r\n  }\r\n\r\n  @Test\r\n  public void testFailsUsingInlineStubbing() {\r\n    when(fooClient.getFoo(4)).thenReturn(new Foo(4, Optional.empty()));\r\n    // This test fails as expected with UneccesaryStubbingException\r\n  }\r\n\r\n  @Test\r\n  public void testPassesUsingHelper() {\r\n    expectFoo(5, new Foo(5, Optional.empty()));\r\n    fooClient.getFoo(5);\r\n  }\r\n\r\n  @Test\r\n  public void testPassesUsingUneccesaryHelper() {\r\n    expectFoo(6, new Foo(6, Optional.empty()));\r\n    // BUG: This test passes, even though we set up a stubbing we never called\r\n  }\r\n\r\n  private void expectFoo(int id, Foo foo) {\r\n    when(fooClient.getFoo(eq(id))).thenReturn(foo);\r\n  }\r\n}\r\n```\r\n\r\nIs this expected behavior? Or is this a real bug?\r\n\r\nVersions:\r\nopenjdk 11.0.7\r\nJUnit 4.12\r\nMockito 2.23.4, also verified with Mockito 3.6.0","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2102/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2099","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2099/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2099/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2099/events","html_url":"https://github.com/mockito/mockito/issues/2099","id":740725702,"node_id":"MDU6SXNzdWU3NDA3MjU3MDI=","number":2099,"title":"verifyNoInteractions doesn't respect ignoreStubs","user":{"login":"nathanmcdonaldtr","id":61045074,"node_id":"MDQ6VXNlcjYxMDQ1MDc0","avatar_url":"https://avatars.githubusercontent.com/u/61045074?v=4","gravatar_id":"","url":"https://api.github.com/users/nathanmcdonaldtr","html_url":"https://github.com/nathanmcdonaldtr","followers_url":"https://api.github.com/users/nathanmcdonaldtr/followers","following_url":"https://api.github.com/users/nathanmcdonaldtr/following{/other_user}","gists_url":"https://api.github.com/users/nathanmcdonaldtr/gists{/gist_id}","starred_url":"https://api.github.com/users/nathanmcdonaldtr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nathanmcdonaldtr/subscriptions","organizations_url":"https://api.github.com/users/nathanmcdonaldtr/orgs","repos_url":"https://api.github.com/users/nathanmcdonaldtr/repos","events_url":"https://api.github.com/users/nathanmcdonaldtr/events{/privacy}","received_events_url":"https://api.github.com/users/nathanmcdonaldtr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-11-11T12:22:47Z","updated_at":"2020-12-01T19:03:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This test works:\r\n````java\r\nwhen(domainClient.isDeletable(\"domain4\")).thenReturn(true);\r\n\r\ndeleteService.deleteDomain(\"domain4\");\r\n\r\nverify(documentClient).deleteAllDocumentsForDomain(\"domain4\");\r\nverify(domainClient).delete(\"domain4\");\r\nverifyNoMoreInteractions(ignoreStubs(documentClient, domainClient));\r\n````\r\n\r\nbut complimentary test doesn't work:\r\n\r\n````java\r\nwhen(domainClient.isDeletable(\"domain4\")).thenReturn(false);\r\n\r\nExeption thrown = catchThrowable(() -> deleteService.deleteDomain(\"domain4\"));\r\n...\r\nverifyNoInteractions(ignoreStubs(documentClient, domainClient));\r\n````\r\nget warning:\r\n\r\norg.mockito.exceptions.verification.NoInteractionsWanted: \r\nNo interactions wanted here:\r\n-> at DomainServiceTests.testDeleteNonDeletableDomain\r\nBut found these interactions on mock 'domainClient bean':\r\n\r\nfound can fix this by changing to verifyNoMoreInteractions, but this seems to not meet expectations.  I really am wanting to say:\r\n\r\nverify there were no interactions ignoring stubs.\r\n\r\nWould assume either verifyNoMoreInteractions should respect ignoreStubs, or should return a warning/error to user saying that ignoreStubs is not compatible/should not be used and to use verifyNoMoreInteractions instead.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2099/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2099/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2093","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2093/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2093/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2093/events","html_url":"https://github.com/mockito/mockito/issues/2093","id":738577432,"node_id":"MDU6SXNzdWU3Mzg1Nzc0MzI=","number":2093,"title":"Update CI/CD documentation","user":{"login":"mockitoguy","id":24743,"node_id":"MDQ6VXNlcjI0NzQz","avatar_url":"https://avatars.githubusercontent.com/u/24743?v=4","gravatar_id":"","url":"https://api.github.com/users/mockitoguy","html_url":"https://github.com/mockitoguy","followers_url":"https://api.github.com/users/mockitoguy/followers","following_url":"https://api.github.com/users/mockitoguy/following{/other_user}","gists_url":"https://api.github.com/users/mockitoguy/gists{/gist_id}","starred_url":"https://api.github.com/users/mockitoguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockitoguy/subscriptions","organizations_url":"https://api.github.com/users/mockitoguy/orgs","repos_url":"https://api.github.com/users/mockitoguy/repos","events_url":"https://api.github.com/users/mockitoguy/events{/privacy}","received_events_url":"https://api.github.com/users/mockitoguy/received_events","type":"User","site_admin":false},"labels":[{"id":140917422,"node_id":"MDU6TGFiZWwxNDA5MTc0MjI=","url":"https://api.github.com/repos/mockito/mockito/labels/docs","name":"docs","color":"bfdadc","default":false,"description":null}],"state":"open","locked":false,"assignee":{"login":"mockitoguy","id":24743,"node_id":"MDQ6VXNlcjI0NzQz","avatar_url":"https://avatars.githubusercontent.com/u/24743?v=4","gravatar_id":"","url":"https://api.github.com/users/mockitoguy","html_url":"https://github.com/mockitoguy","followers_url":"https://api.github.com/users/mockitoguy/followers","following_url":"https://api.github.com/users/mockitoguy/following{/other_user}","gists_url":"https://api.github.com/users/mockitoguy/gists{/gist_id}","starred_url":"https://api.github.com/users/mockitoguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockitoguy/subscriptions","organizations_url":"https://api.github.com/users/mockitoguy/orgs","repos_url":"https://api.github.com/users/mockitoguy/repos","events_url":"https://api.github.com/users/mockitoguy/events{/privacy}","received_events_url":"https://api.github.com/users/mockitoguy/received_events","type":"User","site_admin":false},"assignees":[{"login":"mockitoguy","id":24743,"node_id":"MDQ6VXNlcjI0NzQz","avatar_url":"https://avatars.githubusercontent.com/u/24743?v=4","gravatar_id":"","url":"https://api.github.com/users/mockitoguy","html_url":"https://github.com/mockitoguy","followers_url":"https://api.github.com/users/mockitoguy/followers","following_url":"https://api.github.com/users/mockitoguy/following{/other_user}","gists_url":"https://api.github.com/users/mockitoguy/gists{/gist_id}","starred_url":"https://api.github.com/users/mockitoguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockitoguy/subscriptions","organizations_url":"https://api.github.com/users/mockitoguy/orgs","repos_url":"https://api.github.com/users/mockitoguy/repos","events_url":"https://api.github.com/users/mockitoguy/events{/privacy}","received_events_url":"https://api.github.com/users/mockitoguy/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2020-11-08T23:18:43Z","updated_at":"2021-04-01T18:10:38Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Update CI/CD documentation:\r\n - release notes location\r\n - existing release notes file\r\n - wiki pages\r\n - README.md\r\n - CONTRIBUTING.md","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2093/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2093/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2075","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2075/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2075/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2075/events","html_url":"https://github.com/mockito/mockito/issues/2075","id":728382963,"node_id":"MDU6SXNzdWU3MjgzODI5NjM=","number":2075,"title":"Andriod API < 24 -> NoClassDefFoundError: Failed resolution of: Ljava/util/Optional;","user":{"login":"yogurtearl","id":1195562,"node_id":"MDQ6VXNlcjExOTU1NjI=","avatar_url":"https://avatars.githubusercontent.com/u/1195562?v=4","gravatar_id":"","url":"https://api.github.com/users/yogurtearl","html_url":"https://github.com/yogurtearl","followers_url":"https://api.github.com/users/yogurtearl/followers","following_url":"https://api.github.com/users/yogurtearl/following{/other_user}","gists_url":"https://api.github.com/users/yogurtearl/gists{/gist_id}","starred_url":"https://api.github.com/users/yogurtearl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yogurtearl/subscriptions","organizations_url":"https://api.github.com/users/yogurtearl/orgs","repos_url":"https://api.github.com/users/yogurtearl/repos","events_url":"https://api.github.com/users/yogurtearl/events{/privacy}","received_events_url":"https://api.github.com/users/yogurtearl/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-10-23T17:12:36Z","updated_at":"2020-11-07T23:13:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"With `mockito-android` `3.5.15` on Android API 23 we are getting this error below, it works fine with `3.4.6`\r\n\r\nTurning on `coreLibraryDesugaring` would likely fix this for API 23, but that might not be a viable option for all builds. \r\nhttps://developer.android.com/studio/releases/gradle-plugin#j8-library-desugaring\r\n\r\n`java.util.Optional` wasn't added to Android until API 24 (see the Android docs for which API level a given class or method was added in): \r\nhttps://developer.android.com/reference/java/util/Optional\r\n\r\nStacktrack.\r\n```java.lang.NoClassDefFoundError: Failed resolution of: Ljava/util/Optional;\r\nat org.mockito.plugins.MockMaker$-CC.$default$createSpy(MockMaker.java:93)\r\nat com.android.dx.mockito.DexmakerMockMaker.createSpy(DexmakerMockMaker.java)\r\nat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:45)\r\nat org.mockito.internal.MockitoCore.mock(MockitoCore.java:61)\r\nat org.mockito.Mockito.spy(Mockito.java:2033)\r\nat com.nhaarman.mockitokotlin2.SpyingKt.spy(Spying.kt:52)\r\n\r\n...\r\n\r\nCaused by: java.lang.ClassNotFoundException: Didn't find class \"java.util.Optional\" on path: DexPathList[[zip file \"/system/framework/android.test.runner.jar\", zip file \"/data/app/com.example.test-1/base.apk\", 6, /vendor/lib, /system/lib]]\r\nat dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)\r\nat java.lang.ClassLoader.loadClass(ClassLoader.java:511)\r\nat java.lang.ClassLoader.loadClass(ClassLoader.java:469)\r\n... 46 more\r\nSuppressed: java.lang.ClassNotFoundException: java.util.Optional\r\nat java.lang.Class.classForName(Native Method)\r\nat java.lang.BootClassLoader.findClass(ClassLoader.java:781)\r\nat java.lang.BootClassLoader.loadClass(ClassLoader.java:841)\r\nat java.lang.ClassLoader.loadClass(ClassLoader.java:504)\r\n... 47 more\r\nCaused by: java.lang.NoClassDefFoundError: Class not found using the boot class loader; no stack trace available\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2075/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2075/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2074","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2074/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2074/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2074/events","html_url":"https://github.com/mockito/mockito/issues/2074","id":727476977,"node_id":"MDU6SXNzdWU3Mjc0NzY5Nzc=","number":2074,"title":"Stubbing in nested test classes in combination with @ParameterizedTest does not work","user":{"login":"DanielWagner87","id":57258198,"node_id":"MDQ6VXNlcjU3MjU4MTk4","avatar_url":"https://avatars.githubusercontent.com/u/57258198?v=4","gravatar_id":"","url":"https://api.github.com/users/DanielWagner87","html_url":"https://github.com/DanielWagner87","followers_url":"https://api.github.com/users/DanielWagner87/followers","following_url":"https://api.github.com/users/DanielWagner87/following{/other_user}","gists_url":"https://api.github.com/users/DanielWagner87/gists{/gist_id}","starred_url":"https://api.github.com/users/DanielWagner87/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanielWagner87/subscriptions","organizations_url":"https://api.github.com/users/DanielWagner87/orgs","repos_url":"https://api.github.com/users/DanielWagner87/repos","events_url":"https://api.github.com/users/DanielWagner87/events{/privacy}","received_events_url":"https://api.github.com/users/DanielWagner87/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-10-22T15:07:30Z","updated_at":"2020-10-22T16:29:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Info\r\n\r\nMockito Version: `mockito-junit-jupiter:3.5.15`\r\nJava Version: `openjdk 14.0.2 2020-07-14`\r\nOS: `macOS Catalina 10.15.6`\r\n\r\n## Description\r\n\r\nIf you use method stubbing in a nested test class in conjunction with `@ParameterizedTest`, the mocked interface always returns `null` starting with the second parameter. \r\n\r\nThis worked correctly last in the version `mockito-junit-jupiter:3.1.0`.\r\n\r\n## Example\r\n\r\nPlease use this example to reproduce. The two tests are identical in content. The Test within the `@Nested` class does not work as it should.\r\n\r\n```java\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.Nested;\r\nimport org.junit.jupiter.api.TestInstance;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.Mockito;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\nimport java.util.stream.Stream;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS;\r\nimport static org.mockito.ArgumentMatchers.anyInt;\r\nimport static org.mockito.Mockito.reset;\r\n\r\npublic class MyService {\r\n\r\n  private final MyOtherService myOtherService;\r\n\r\n  public MyService(MyOtherService myOtherService) {\r\n    this.myOtherService = myOtherService;\r\n  }\r\n\r\n  String execute(int numValue) {\r\n    return myOtherService.someValue(numValue);\r\n  }\r\n}\r\n\r\ninterface MyOtherService {\r\n\r\n  String someValue(int numValue);\r\n}\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass MyTest {\r\n\r\n  @InjectMocks\r\n  private MyService underTest;\r\n\r\n  @Mock\r\n  private MyOtherService myOtherService;\r\n\r\n  @AfterEach\r\n  void tearDown() {\r\n    reset(myOtherService);\r\n  }\r\n\r\n  @ParameterizedTest\r\n  @MethodSource(\"testDataProvider\")\r\n  void test(int numValue) {\r\n    Mockito.doReturn(\"some value\").when(myOtherService).someValue(anyInt());\r\n    var result = underTest.execute(numValue);\r\n    assertEquals(\"some value\", result);\r\n  }\r\n\r\n  private static Stream<Arguments> testDataProvider() {\r\n    return Stream.of(\r\n        Arguments.of(1),\r\n        Arguments.of(2),\r\n        Arguments.of(3)\r\n    );\r\n  }\r\n\r\n  @Nested\r\n  @TestInstance(PER_CLASS)\r\n  class NestedTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"nestedTestDataProvider\")\r\n    void test(int numValue) {\r\n      Mockito.doReturn(\"some value\").when(myOtherService).someValue(anyInt());\r\n      var result = underTest.execute(numValue);\r\n      assertEquals(\"some value\", result);\r\n    }\r\n\r\n    private Stream<Arguments> nestedTestDataProvider() {\r\n      return Stream.of(\r\n          Arguments.of(1),\r\n          Arguments.of(2),\r\n          Arguments.of(3)\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2074/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2072","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2072/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2072/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2072/events","html_url":"https://github.com/mockito/mockito/issues/2072","id":724402285,"node_id":"MDU6SXNzdWU3MjQ0MDIyODU=","number":2072,"title":"RETURNS_MOCKS causes WrongTypeOfReturnValue occasionally. ","user":{"login":"neworld","id":38703,"node_id":"MDQ6VXNlcjM4NzAz","avatar_url":"https://avatars.githubusercontent.com/u/38703?v=4","gravatar_id":"","url":"https://api.github.com/users/neworld","html_url":"https://github.com/neworld","followers_url":"https://api.github.com/users/neworld/followers","following_url":"https://api.github.com/users/neworld/following{/other_user}","gists_url":"https://api.github.com/users/neworld/gists{/gist_id}","starred_url":"https://api.github.com/users/neworld/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neworld/subscriptions","organizations_url":"https://api.github.com/users/neworld/orgs","repos_url":"https://api.github.com/users/neworld/repos","events_url":"https://api.github.com/users/neworld/events{/privacy}","received_events_url":"https://api.github.com/users/neworld/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-10-19T08:37:17Z","updated_at":"2020-10-22T08:40:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Info:\r\n\r\n- mockito: 3.5.13 _(The same was with 3.1.x)_\r\n- openJDK: 11.0.8 _(the same was with latest JDK1.8)_\r\n- kotlin: 1.4.10 _(The same was with 1.3.70)_\r\n- Robolectric 4.4 _(The same was with 4.3)_\r\n- with `mockito-inline` _(The same was with mockito 3.1.x, which has not been worked with robolectric)_\r\n- with mockito-kotlin\r\n\r\nThe problem is:\r\n```\r\norg.mockito.exceptions.misusing.WrongTypeOfReturnValue: \r\nDefault answer returned a result with the wrong type:\r\nAppGlideModule$MockitoMock$2134684204 cannot be returned by getGlide()\r\ngetGlide() should return AppGlideModule\r\n\r\nThe default answer of appPerformance that was configured on the mock is probably incorrectly implemented.\r\n```\r\n\r\nThe class itself is:\r\n```kotlin\r\nclass AppPerformance(application: Application) {\r\n    val tracker: Tracker by lazy { ... }\r\n\r\n    val glide: AppGlideModule by lazy {  // <-- This fails\r\n        DatadogGlideModule(listOf(\".*\"))\r\n    }\r\n}\r\n```\r\n\r\nCreating mock:\r\n```\r\nmock(defaultAnswer = Answers.RETURNS_MOCKS)\r\n```\r\n\r\nThe error happens if someone calls `appPerformance.getGlide()`. This method is called always, for each test run, but the crash happens only ~15% of the time. \r\n\r\nI believe the class `AppGlideModule$MockitoMock$2134684204` was created by Mockito classloader, but for some reason, it is not recognized as a child of `AppGlideModule`. `AppGlideModule` itself is a:\r\n```java\r\npublic abstract class AppGlideModule extends LibraryGlideModule implements AppliesOptions\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2072/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2072/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2066","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2066/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2066/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2066/events","html_url":"https://github.com/mockito/mockito/issues/2066","id":721730154,"node_id":"MDU6SXNzdWU3MjE3MzAxNTQ=","number":2066,"title":"Android - Mockito cannot mock this class: class android.content.Context, android.location.Location and other interfaces","user":{"login":"gurappa","id":10382715,"node_id":"MDQ6VXNlcjEwMzgyNzE1","avatar_url":"https://avatars.githubusercontent.com/u/10382715?v=4","gravatar_id":"","url":"https://api.github.com/users/gurappa","html_url":"https://github.com/gurappa","followers_url":"https://api.github.com/users/gurappa/followers","following_url":"https://api.github.com/users/gurappa/following{/other_user}","gists_url":"https://api.github.com/users/gurappa/gists{/gist_id}","starred_url":"https://api.github.com/users/gurappa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gurappa/subscriptions","organizations_url":"https://api.github.com/users/gurappa/orgs","repos_url":"https://api.github.com/users/gurappa/repos","events_url":"https://api.github.com/users/gurappa/events{/privacy}","received_events_url":"https://api.github.com/users/gurappa/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-10-14T19:42:09Z","updated_at":"2021-07-14T12:36:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Had discussion in mailing list, I am asked to create an issue here.\r\nhttps://groups.google.com/g/mockito/c/yUtrG93BSx4\r\n\r\n**Issue:**\r\nWe had Mockito version 2.18.3. Now I upgraded to 3.5.13.\r\nAlso Robolectric version is upgraded from 3.8 to 4.4.\r\n\r\nSo half of 700 tests started failing on different reasons. One of them is as below that mockito can't create Context class.\r\n\r\nOther classes it could not mock now, for ex, are many interfaces of our codebase, classes, android.app.Activity, android.location.Location.\r\n\r\n**Stacktrace:**\r\n[net.abc.def.MyTest > FirstTest FAILED\r\norg.mockito.exceptions.base.MockitoException: \r\nMockito cannot mock this class: class android.content.Context.\r\n\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 1.8\r\nJVM vendor name    : Private Build\r\nJVM vendor version : 25.265-b01\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 1.8.0_265-8u265-b01-0ubuntu2~16.04-b01\r\nJVM info           : mixed mode\r\nOS name            : Linux\r\nOS version         : 4.4.0-57-generic\r\n\r\n\r\nYou are seeing this disclaimer because Mockito is configured to create inlined mocks.\r\nYou can learn about inline mocks and their limitations under item #39 of the Mockito class javadoc.\r\n\r\nUnderlying exception : org.mockito.exceptions.base.MockitoException: Could not modify all classes [class android.content.Context]\r\n    at net.abc.def.MyTest.onSetUp(FirstTest.java:51)\r\n\r\n    Caused by:\r\n    org.mockito.exceptions.base.MockitoException: Could not modify all classes [class android.content.Context]\r\n        at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n        at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n        at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n        at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n        ... 1 more\r\n\r\n        Caused by:\r\n        java.lang.IllegalStateException: \r\n        Byte Buddy could not instrument all classes within the mock's type hierarchy\r\n\r\n        This problem should never occur for javac-compiled classes. This problem has been observed for classes that are:\r\n         - Compiled by older versions of scalac\r\n         - Classes that are part of the Android distribution\r\n            at org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.triggerRetransformation(InlineBytecodeGenerator.java:265)\r\n            at org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.mockClass(InlineBytecodeGenerator.java:212)\r\n            at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:46)\r\n            at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:43)\r\n            at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:153)\r\n            at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:366)\r\n            at net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:175)\r\n            at net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:377)\r\n            at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:36)\r\n            at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMockType(InlineByteBuddyMockMaker.java:379)\r\n            at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.doCreateMock(InlineByteBuddyMockMaker.java:339)\r\n            at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMock(InlineByteBuddyMockMaker.java:318)\r\n            at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:52)\r\n            at org.mockito.internal.MockitoCore.mock(MockitoCore.java:61)\r\n            at org.mockito.Mockito.mock(Mockito.java:1949)\r\n            at org.mockito.Mockito.mock(Mockito.java:1860)\r\n            ... 1 more\r\n\r\n            Caused by:\r\n            java.lang.UnsupportedClassVersionError: android/os/Bundle has been compiled by a more recent version of the Java Runtime (class file version 53.0), this version of the Java Runtime only recognizes class file versions up to 52.0\r\n                at java.lang.ClassLoader.defineClass1(Native Method)\r\n                at java.lang.ClassLoader.defineClass(ClassLoader.java:756)\r\n                at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\r\n                at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)\r\n                at java.net.URLClassLoader.access$100(URLClassLoader.java:74)\r\n                at java.net.URLClassLoader$1.run(URLClassLoader.java:369)\r\n                at java.net.URLClassLoader$1.run(URLClassLoader.java:363)\r\n                at java.security.AccessController.doPrivileged(Native Method)\r\n                at java.net.URLClassLoader.findClass(URLClassLoader.java:362)\r\n                at java.lang.ClassLoader.loadClass(ClassLoader.java:418)\r\n                at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)\r\n                at java.lang.ClassLoader.loadClass(ClassLoader.java:351)\r\n                at java.lang.Class.getDeclaredMethods0(Native Method)\r\n                at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\r\n                at java.lang.Class.getDeclaredMethods(Class.java:1975)\r\n                at net.bytebuddy.description.method.MethodList$ForLoadedMethods.<init>(MethodList.java:109)\r\n                at net.bytebuddy.description.type.TypeDescription$ForLoadedType.getDeclaredMethods(TypeDescription.java:8715)\r\n                at net.bytebuddy.dynamic.scaffold.InstrumentedType$Factory$Default$1.represent(InstrumentedType.java:416)\r\n                at net.bytebuddy.ByteBuddy.redefine(ByteBuddy.java:782)\r\n                at net.bytebuddy.ByteBuddy.redefine(ByteBuddy.java:757)\r\n                at org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.transform(InlineBytecodeGenerator.java:364)\r\n                at sun.instrument.TransformerManager.transform(TransformerManager.java:188)\r\n                at sun.instrument.InstrumentationImpl.transform(InstrumentationImpl.java:428)\r\n                at sun.instrument.InstrumentationImpl.retransformClasses0(Native Method)\r\n                at sun.instrument.InstrumentationImpl.retransformClasses(InstrumentationImpl.java:144)\r\n                at org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.triggerRetransformation(InlineBytecodeGenerator.java:261)\r\n                ... 16 more ] The mockito message in the stacktrace have useful information, but it didn't help\r\n\r\n**Versions:**\r\nJava               : 1.8\r\nJVM vendor name    : Private Build\r\nJVM vendor version : 25.265-b01\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 1.8.0_265-8u265-b01-0ubuntu2~16.04-b01\r\nJVM info           : mixed mode\r\nOS name            : Linux\r\nOS version         : 4.4.0-57-generic\r\n\r\n**Question in Stackoverflow:**\r\nhttps://stackoverflow.com/questions/64355256/android-mockito-cannot-mock-this-class-class-android-content-context\r\n\r\n**My build.gradle has these mockito deps:**\r\ntestImplementation ‘org.mockito:mockito-inline:3.5.13\r\nandroidTestImplementation org.mockito:mockito-core:3.5.13\r\nandroidTestImplementation org.mockito:mockito-android:3.5.13\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2066/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2066/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2060","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2060/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2060/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2060/events","html_url":"https://github.com/mockito/mockito/issues/2060","id":716902584,"node_id":"MDU6SXNzdWU3MTY5MDI1ODQ=","number":2060,"title":"Misleading error message for failed InOrder argument matcher","user":{"login":"Marcono1234","id":11685886,"node_id":"MDQ6VXNlcjExNjg1ODg2","avatar_url":"https://avatars.githubusercontent.com/u/11685886?v=4","gravatar_id":"","url":"https://api.github.com/users/Marcono1234","html_url":"https://github.com/Marcono1234","followers_url":"https://api.github.com/users/Marcono1234/followers","following_url":"https://api.github.com/users/Marcono1234/following{/other_user}","gists_url":"https://api.github.com/users/Marcono1234/gists{/gist_id}","starred_url":"https://api.github.com/users/Marcono1234/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Marcono1234/subscriptions","organizations_url":"https://api.github.com/users/Marcono1234/orgs","repos_url":"https://api.github.com/users/Marcono1234/repos","events_url":"https://api.github.com/users/Marcono1234/events{/privacy}","received_events_url":"https://api.github.com/users/Marcono1234/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-10-07T22:54:18Z","updated_at":"2020-10-17T13:33:34Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Version\r\nMockito version: 3.5.13\r\n\r\n### Description\r\nWhen using `org.mockito.InOrder` and the argument matcher fails for the second or any subsequent verification call (but not the first one), the error is reported as:\r\n> Verification in order failure\r\nWanted but not invoked:\r\n\r\nThis is misleading because the method is actually invoked, but the arguments did not match. Normally, when not using `InOrder` or when verifying the first `InOrder` call, the error is, as expected, reported as:\r\n> Argument(s) are different! Wanted:\r\n\r\n### Test case\r\n```java\r\ninterface MyInterface {\r\n    void doSomething(String s);\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    MyInterface mock = mock(MyInterface.class);\r\n    mock.doSomething(\"something\");\r\n    mock.doSomething(\"this\");\r\n    InOrder inOrder = inOrder(mock);\r\n    inOrder.verify(mock).doSomething(\"something\");\r\n    // Using custom ArgumentMatcher here to demonstrate that error is even\r\n    // more confusing then\r\n    inOrder.verify(mock).doSomething(argThat(arg -> arg.equals(\"that\")));\r\n}\r\n```\r\n\r\nException:\r\n```\r\nException in thread \"main\" org.mockito.exceptions.verification.VerificationInOrderFailure: \r\nVerification in order failure\r\nWanted but not invoked:\r\nmyInterface.doSomething(\r\n    <Mockito test$$ lambda$ 4 6/ 0x 0 0 0 0 0 0 0 8 0 0c 8fc 4 0>\r\n);\r\n-> at MockitoTest.main(MockitoTest.java:18)\r\nWanted anywhere AFTER following interaction:\r\nmyInterface.doSomething(\"something\");\r\n-> at MockitoTest.main(MockitoTest.java:12)\r\n\r\n\tat MockitoTest.main(MockitoTest.java:18)\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2060/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2060/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2055","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2055/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2055/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2055/events","html_url":"https://github.com/mockito/mockito/issues/2055","id":708323062,"node_id":"MDU6SXNzdWU3MDgzMjMwNjI=","number":2055,"title":"Adding @ExtendWith(MockitoExtension.class) makes ArgumentCaptor broken","user":{"login":"rpost","id":1088047,"node_id":"MDQ6VXNlcjEwODgwNDc=","avatar_url":"https://avatars.githubusercontent.com/u/1088047?v=4","gravatar_id":"","url":"https://api.github.com/users/rpost","html_url":"https://github.com/rpost","followers_url":"https://api.github.com/users/rpost/followers","following_url":"https://api.github.com/users/rpost/following{/other_user}","gists_url":"https://api.github.com/users/rpost/gists{/gist_id}","starred_url":"https://api.github.com/users/rpost/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rpost/subscriptions","organizations_url":"https://api.github.com/users/rpost/orgs","repos_url":"https://api.github.com/users/rpost/repos","events_url":"https://api.github.com/users/rpost/events{/privacy}","received_events_url":"https://api.github.com/users/rpost/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-09-24T16:46:05Z","updated_at":"2020-10-09T15:13:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"SSCCE:\r\n\r\nStarting point: this works:\r\n\r\n```java\r\nimport java.util.List;\r\n\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.Mockito;\r\n\r\nclass MockitoCaptorTest {\r\n\r\n\t@Test\r\n\tvoid test() {\r\n\t\tSpyClass spy = Mockito.spy(new SpyClass());\r\n\t\tMockito.doNothing().when(spy).doSmth(Mockito.any());\r\n\r\n\t\tString dummyValue = \"dummy value\";\r\n\t\tspy.doSmth(dummyValue);\r\n\r\n\t\tArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\r\n\t\tMockito.verify(spy, Mockito.atMostOnce()).doSmth(captor.capture());\r\n\t\tList<String> capturedValues = captor.getAllValues();\r\n\t\tAssertions.assertEquals(capturedValues.size(), 1);\r\n\t\tAssertions.assertEquals(capturedValues.get(0), dummyValue);\r\n\t}\r\n\r\n\tpublic static class SpyClass {\r\n\r\n\t\tpublic void doSmth(String s) {\r\n\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAnnotating test with `@ExtendWith(MockitoExtension.class)` makes `capturedValues` empty:\r\n```java\r\nimport java.util.List;\r\n\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.ArgumentCaptor;\r\nimport org.mockito.Mockito;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass MockitoCaptorTest {\r\n\r\n\t@Test\r\n\tvoid test() {\r\n\t\tSpyClass spy = Mockito.spy(new SpyClass());\r\n\t\tMockito.doNothing().when(spy).doSmth(Mockito.any());\r\n\r\n\t\tString dummyValue = \"dummy value\";\r\n\t\tspy.doSmth(dummyValue);\r\n\r\n\t\tArgumentCaptor<String> captor = ArgumentCaptor.forClass(String.class);\r\n\t\tMockito.verify(spy, Mockito.atMostOnce()).doSmth(captor.capture());\r\n\t\tList<String> capturedValues = captor.getAllValues();\r\n\t\tAssertions.assertEquals(capturedValues.size(), 1);\r\n\t\tAssertions.assertEquals(capturedValues.get(0), dummyValue);\r\n\t}\r\n\r\n\tpublic static class SpyClass {\r\n\r\n\t\tpublic void doSmth(String s) {\r\n\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nMockito version: 3.5.11\r\nJUnit version: 5.6.2","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2055/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2044","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2044/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2044/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2044/events","html_url":"https://github.com/mockito/mockito/issues/2044","id":702617402,"node_id":"MDU6SXNzdWU3MDI2MTc0MDI=","number":2044,"title":"InlineByteBuddyMockMaker doesn't mock parent's methods","user":{"login":"NikolayKul","id":9342388,"node_id":"MDQ6VXNlcjkzNDIzODg=","avatar_url":"https://avatars.githubusercontent.com/u/9342388?v=4","gravatar_id":"","url":"https://api.github.com/users/NikolayKul","html_url":"https://github.com/NikolayKul","followers_url":"https://api.github.com/users/NikolayKul/followers","following_url":"https://api.github.com/users/NikolayKul/following{/other_user}","gists_url":"https://api.github.com/users/NikolayKul/gists{/gist_id}","starred_url":"https://api.github.com/users/NikolayKul/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NikolayKul/subscriptions","organizations_url":"https://api.github.com/users/NikolayKul/orgs","repos_url":"https://api.github.com/users/NikolayKul/repos","events_url":"https://api.github.com/users/NikolayKul/events{/privacy}","received_events_url":"https://api.github.com/users/NikolayKul/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false},"assignees":[{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2020-09-16T09:44:27Z","updated_at":"2020-09-28T23:27:04Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello there!\r\nIt looks like `org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker` doesn't mock parent's methods if the parent is written in Java. Can be reproduced in 3 steps:\r\n1. Create 2 classes:\r\n```\r\n// java\r\npublic class Parent {\r\n    public CharSequence getName() {\r\n        return \"parent name\";\r\n    }\r\n}\r\n\r\n// kotlin\r\nclass Child : Parent() {\r\n    val name : String = \"child name\"\r\n}\r\n```\r\n2. Enable `mock-maker-inline`.\r\n3. Test classes as follows:\r\n```kotlin\r\n@Test\r\nfun `check child name`() {\r\n    val mocked = Mockito.mock(Child::class.java)\r\n    Mockito.`when`(mocked.name).thenReturn(\"mocked name\")\r\n\r\n    // ok\r\n    assertEquals(\"mocked name\", mocked.name)\r\n\r\n    // fails because \"(mocked as Parent).name\" returns \"parent name\"\r\n    assertEquals(\"mocked name\", (mocked as Parent).name)\r\n}\r\n```\r\n\r\nInteresting details:\r\n1. The test passes if I convert `Parent` from Java to Kotlin though on the byte code level they call the same getter function:\r\n```\r\nINVOKEVIRTUAL com/.../Parent.getName ()Ljava/lang/CharSequence\r\n```\r\n2. The test doesn't pass if I use \"open\" modifier for `Child`.\r\n3. The test passes if I use \"open\" modifier for `Child` and disable `mock-maker-inline`.\r\n\r\nEnvironment:\r\n- Mockito version is '3.5.9'\r\n- Kotlin version is '1.3.70'","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2044/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2044/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2038","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2038/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2038/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2038/events","html_url":"https://github.com/mockito/mockito/issues/2038","id":695051331,"node_id":"MDU6SXNzdWU2OTUwNTEzMzE=","number":2038,"title":"Gradle run unitTest throws exception, while right click on test execution runs well","user":{"login":"fqyuan","id":24801529,"node_id":"MDQ6VXNlcjI0ODAxNTI5","avatar_url":"https://avatars.githubusercontent.com/u/24801529?v=4","gravatar_id":"","url":"https://api.github.com/users/fqyuan","html_url":"https://github.com/fqyuan","followers_url":"https://api.github.com/users/fqyuan/followers","following_url":"https://api.github.com/users/fqyuan/following{/other_user}","gists_url":"https://api.github.com/users/fqyuan/gists{/gist_id}","starred_url":"https://api.github.com/users/fqyuan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fqyuan/subscriptions","organizations_url":"https://api.github.com/users/fqyuan/orgs","repos_url":"https://api.github.com/users/fqyuan/repos","events_url":"https://api.github.com/users/fqyuan/events{/privacy}","received_events_url":"https://api.github.com/users/fqyuan/received_events","type":"User","site_admin":false},"labels":[{"id":477008387,"node_id":"MDU6TGFiZWw0NzcwMDgzODc=","url":"https://api.github.com/repos/mockito/mockito/labels/awaiting%20response","name":"awaiting response","color":"fad8c7","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-09-07T12:28:54Z","updated_at":"2020-09-17T07:40:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\r\nI'm using gradle 3.4.0 with jdk 1.8.232 and android studio 4.0.1\r\n```\r\nclasspath 'com.android.tools.build:gradle:3.4.0'\r\n```\r\nbuild.gradle with dependencies below\r\n```\r\n    testImplementation \"org.mockito:mockito-core:3.5.7\"\r\n    testImplementation 'org.mockito:mockito-inline:3.5.7'\r\n    testImplementation \"org.robolectric:robolectric:4.3.1\"\r\n\r\n```\r\nError messages go as follows, any advice is welcome,  thanks in advance.\r\n```\r\n[Robolectric] com.xxx.SettingPresenterTest.deleteValidAddrTest: sdk=28; resources=BINARY\r\nCalled loadFromPath(/system/framework/framework-res.apk, true); mode=binary sdk=28\r\n\r\n\r\nMockito cannot mock this class: class com.xxx.SettingActivity.\r\n\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 1.8\r\nJVM vendor name    : Oracle Corporation\r\nJVM vendor version : 25.261-b12\r\nJVM name           : Java HotSpot(TM) 64-Bit Server VM\r\nJVM version        : 1.8.0_261-b12\r\nJVM info           : mixed mode\r\nOS name            : Windows 10\r\nOS version         : 10.0\r\n\r\n\r\nYou are seeing this disclaimer because Mockito is configured to create inlined mocks.\r\nYou can learn about inline mocks and their limitations under item #39 of the Mockito class javadoc.\r\n\r\nUnderlying exception : java.lang.IllegalArgumentException: Could not create type\r\norg.mockito.exceptions.base.MockitoException: \r\nMockito cannot mock this class: class com.xxx.SettingActivity.\r\n\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\nJava               : 1.8\r\nJVM vendor name    : Oracle Corporation\r\nJVM vendor version : 25.261-b12\r\nJVM name           : Java HotSpot(TM) 64-Bit Server VM\r\nJVM version        : 1.8.0_261-b12\r\nJVM info           : mixed mode\r\nOS name            : Windows 10\r\nOS version         : 10.0\r\n\r\n\r\nYou are seeing this disclaimer because Mockito is configured to create inlined mocks.\r\nYou can learn about inline mocks and their limitations under item #39 of the Mockito class javadoc.\r\n\r\nUnderlying exception : java.lang.IllegalArgumentException: Could not create type\r\n\tat org.robolectric.RobolectricTestRunner$HelperTestRunner$1.evaluate(RobolectricTestRunner.java:546)\r\n\tat org.robolectric.internal.SandboxTestRunner$2.lambda$evaluate$0(SandboxTestRunner.java:252)\r\n\tat org.robolectric.internal.bytecode.Sandbox.lambda$runOnMainThread$0(Sandbox.java:89)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalArgumentException: Could not create type\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:154)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:365)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:174)\r\n\tat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:376)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:36)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMockType(InlineByteBuddyMockMaker.java:379)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.doCreateMock(InlineByteBuddyMockMaker.java:339)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.createMock(InlineByteBuddyMockMaker.java:318)\r\n\tat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:52)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:61)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1949)\r\n\tat org.mockito.internal.configuration.MockAnnotationProcessor.processAnnotationForMock(MockAnnotationProcessor.java:66)\r\n\tat org.mockito.internal.configuration.MockAnnotationProcessor.process(MockAnnotationProcessor.java:27)\r\n\tat org.mockito.internal.configuration.MockAnnotationProcessor.process(MockAnnotationProcessor.java:24)\r\n\tat org.mockito.internal.configuration.IndependentAnnotationEngine.createMockFor(IndependentAnnotationEngine.java:46)\r\n\tat org.mockito.internal.configuration.IndependentAnnotationEngine.process(IndependentAnnotationEngine.java:73)\r\n\tat org.mockito.internal.configuration.InjectingAnnotationEngine.processIndependentAnnotations(InjectingAnnotationEngine.java:73)\r\n\tat org.mockito.internal.configuration.InjectingAnnotationEngine.process(InjectingAnnotationEngine.java:47)\r\n\tat org.mockito.MockitoAnnotations.openMocks(MockitoAnnotations.java:82)\r\n\tat org.mockito.internal.framework.DefaultMockitoSession.<init>(DefaultMockitoSession.java:43)\r\n\tat org.mockito.internal.session.DefaultMockitoSessionBuilder.startMocking(DefaultMockitoSessionBuilder.java:83)\r\n\tat org.mockito.internal.junit.JUnitSessionStore$1.evaluate(JUnitSessionStore.java:37)\r\n\t... 7 more\r\nCaused by: java.lang.InternalError\r\n\tat sun.instrument.InstrumentationImpl.retransformClasses0(Native Method)\r\n\tat sun.instrument.InstrumentationImpl.retransformClasses(InstrumentationImpl.java:144)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.triggerRetransformation(InlineBytecodeGenerator.java:260)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.mockClass(InlineBytecodeGenerator.java:211)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:46)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:43)\r\n\tat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:152)\r\n\t... 28 more\r\n\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2038/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2035","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2035/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2035/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2035/events","html_url":"https://github.com/mockito/mockito/issues/2035","id":694508285,"node_id":"MDU6SXNzdWU2OTQ1MDgyODU=","number":2035,"title":"AnswersWithDelay does not restore interrupt flag","user":{"login":"theangrydev","id":6877541,"node_id":"MDQ6VXNlcjY4Nzc1NDE=","avatar_url":"https://avatars.githubusercontent.com/u/6877541?v=4","gravatar_id":"","url":"https://api.github.com/users/theangrydev","html_url":"https://github.com/theangrydev","followers_url":"https://api.github.com/users/theangrydev/followers","following_url":"https://api.github.com/users/theangrydev/following{/other_user}","gists_url":"https://api.github.com/users/theangrydev/gists{/gist_id}","starred_url":"https://api.github.com/users/theangrydev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theangrydev/subscriptions","organizations_url":"https://api.github.com/users/theangrydev/orgs","repos_url":"https://api.github.com/users/theangrydev/repos","events_url":"https://api.github.com/users/theangrydev/events{/privacy}","received_events_url":"https://api.github.com/users/theangrydev/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-09-06T20:00:12Z","updated_at":"2020-10-09T01:47:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This can be a problem if a thread is reused.\r\n\r\nThe correct implementation should do this at a minimum:\r\n\r\n```\r\ntry {\r\n    TimeUnit.MILLISECONDS.sleep(this.sleepyTime);\r\n} catch (InterruptedException e) {\r\n    Thread.currentThread().interrupt();\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2035/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2033","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2033/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2033/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2033/events","html_url":"https://github.com/mockito/mockito/issues/2033","id":690217428,"node_id":"MDU6SXNzdWU2OTAyMTc0Mjg=","number":2033,"title":"scala mockito error `value thenReturn is not a member of Nothing`","user":{"login":"true-eye","id":46362478,"node_id":"MDQ6VXNlcjQ2MzYyNDc4","avatar_url":"https://avatars.githubusercontent.com/u/46362478?v=4","gravatar_id":"","url":"https://api.github.com/users/true-eye","html_url":"https://github.com/true-eye","followers_url":"https://api.github.com/users/true-eye/followers","following_url":"https://api.github.com/users/true-eye/following{/other_user}","gists_url":"https://api.github.com/users/true-eye/gists{/gist_id}","starred_url":"https://api.github.com/users/true-eye/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/true-eye/subscriptions","organizations_url":"https://api.github.com/users/true-eye/orgs","repos_url":"https://api.github.com/users/true-eye/repos","events_url":"https://api.github.com/users/true-eye/events{/privacy}","received_events_url":"https://api.github.com/users/true-eye/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-09-01T15:00:03Z","updated_at":"2020-09-01T15:39:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":" - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)\r\n\r\nI am new to Mockito so this may be a simple issue but I couldn't find a solution\r\n\r\n```\r\n  val users = List(User(name = \"A\"))\r\n  val userRepoMock = mock[UserRepo]\r\n\r\n  \"GET /users\" should {\r\n    \"return the users\" in {\r\n      when(userRepoMock.get()).thenReturn(Future.successful(Good(users)))\r\n```\r\n\r\nWhen I run the test, it fails as follows\r\n\r\n```\r\n   value thenReturn is not a member of Nothing\r\n   [error]      L55:      \r\n   when(userRepoMock.get()).thenReturn(Future.successful(Good(users)))\r\n   [error]      L55:   \r\n```\r\n\r\nHere is the definition of UserRepo\r\n```\r\ntrait UserRepo {\r\n  def get(): Future[List[User]]\r\n}\r\n\r\nobject UserRepo {\r\n\r\n  class ActorImpl @Inject()(actor: UserSyncActor.Ref) extends UserRepo {\r\n    override def get(): Future[List[User]] = {\r\n      implicit val timeout: Timeout = 10.seconds\r\n      actor.ref.ask(UserSyncActor.GetUsers).mapTo[List[User]]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nversions:\r\nMockito ( mockito-core: 3.3.3, mockito-scala_2.12 )\r\nos ( MacOS )\r\n\r\nCould anyone can help me to fix this issue, please?\r\nThanks in advance","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2033/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2033/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2027","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2027/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2027/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2027/events","html_url":"https://github.com/mockito/mockito/issues/2027","id":687022009,"node_id":"MDU6SXNzdWU2ODcwMjIwMDk=","number":2027,"title":"how to mock a static method with parameters and void return type?","user":{"login":"dgqypl","id":25171658,"node_id":"MDQ6VXNlcjI1MTcxNjU4","avatar_url":"https://avatars.githubusercontent.com/u/25171658?v=4","gravatar_id":"","url":"https://api.github.com/users/dgqypl","html_url":"https://github.com/dgqypl","followers_url":"https://api.github.com/users/dgqypl/followers","following_url":"https://api.github.com/users/dgqypl/following{/other_user}","gists_url":"https://api.github.com/users/dgqypl/gists{/gist_id}","starred_url":"https://api.github.com/users/dgqypl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dgqypl/subscriptions","organizations_url":"https://api.github.com/users/dgqypl/orgs","repos_url":"https://api.github.com/users/dgqypl/repos","events_url":"https://api.github.com/users/dgqypl/events{/privacy}","received_events_url":"https://api.github.com/users/dgqypl/received_events","type":"User","site_admin":false},"labels":[{"id":532126464,"node_id":"MDU6TGFiZWw1MzIxMjY0NjQ=","url":"https://api.github.com/repos/mockito/mockito/labels/please%20contribute","name":"please contribute","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2020-08-27T07:43:33Z","updated_at":"2020-10-16T20:55:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"public static void method(String param1,String param2){...}\r\n\r\nI want to know how to use mockito 3.5.5 to mock the said situation? Can anyone help?\r\n\r\n> the [Online Documentation](https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#48) just show how to mock static method with no parameter and string return type.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2027/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2027/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2026","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2026/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2026/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2026/events","html_url":"https://github.com/mockito/mockito/issues/2026","id":687013469,"node_id":"MDU6SXNzdWU2ODcwMTM0Njk=","number":2026,"title":"NullPointerException in java.lang.reflect.Method.getParameterTypes","user":{"login":"andrei-ivanov","id":6377070,"node_id":"MDQ6VXNlcjYzNzcwNzA=","avatar_url":"https://avatars.githubusercontent.com/u/6377070?v=4","gravatar_id":"","url":"https://api.github.com/users/andrei-ivanov","html_url":"https://github.com/andrei-ivanov","followers_url":"https://api.github.com/users/andrei-ivanov/followers","following_url":"https://api.github.com/users/andrei-ivanov/following{/other_user}","gists_url":"https://api.github.com/users/andrei-ivanov/gists{/gist_id}","starred_url":"https://api.github.com/users/andrei-ivanov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrei-ivanov/subscriptions","organizations_url":"https://api.github.com/users/andrei-ivanov/orgs","repos_url":"https://api.github.com/users/andrei-ivanov/repos","events_url":"https://api.github.com/users/andrei-ivanov/events{/privacy}","received_events_url":"https://api.github.com/users/andrei-ivanov/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":26,"created_at":"2020-08-27T07:29:13Z","updated_at":"2021-06-10T09:51:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Trying to upgrade Mockito from `3.4.6` (`3.4.8` wasn't published to Maven central) to anything `3.5.x` (`3.5.7` included) and I get some weird NPEs, which don't happen if I run each test on its own:\r\n```\r\n[INFO] Running core.rest.exception.mapper.NotFoundExceptionMapperTest\r\n07:22:56.767 [main] WARN  core.rest.exception.mapper.NotFoundExceptionMapper - Endpoint not found for path: http://host:8080/404\r\n[ERROR] Tests run: 3, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 0.019 s <<< FAILURE! - in core.rest.exception.mapper.NotFoundExceptionMapperTest\r\n[ERROR] testExceptionCreatesServerErrorResponseWhenEndpointWasNotMatchedAndIsServiceRequest  Time elapsed: 0.012 s  <<< ERROR!\r\njava.lang.NullPointerException\r\n        at java.base/java.lang.reflect.Method.getParameterTypes(Method.java:311)\r\n        at org.mockito.internal.creation.DelegatingMethod.<init>(DelegatingMethod.java:20)\r\n        at org.mockito.internal.invocation.DefaultInvocationFactory.createMockitoMethod(DefaultInvocationFactory.java:80)\r\n        at org.mockito.internal.invocation.DefaultInvocationFactory.createInvocation(DefaultInvocationFactory.java:59)\r\n        at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:58)\r\n        at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:47)\r\n        at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod.interceptAbstract(MockMethodInterceptor.java:129)\r\n        at org.mockito.codegen.HttpHeaders$MockitoMock$2122467463.getHeaderString(Unknown Source)\r\n        at core.rest.exception.mapper.NotFoundExceptionMapper.isServiceRequest(NotFoundExceptionMapper.java:56)\r\n        at core.rest.exception.mapper.NotFoundExceptionMapper.getResponseBuilder(NotFoundExceptionMapper.java:48)\r\n        at core.rest.exception.mapper.NotFoundExceptionMapper.getResponseBuilder(NotFoundExceptionMapper.java:13)\r\n        at core.rest.exception.mapper.BaseExceptionMapper.getResponse(BaseExceptionMapper.java:33)\r\n        at core.rest.exception.mapper.BaseExceptionMapper.toResponse(BaseExceptionMapper.java:28)\r\n        at core.rest.exception.mapper.NotFoundExceptionMapperTest.testExceptionCreatesServerErrorResponseWhenEndpointWasNotMatchedAndIsServiceRequest(NotFoundExceptionMapperTest.java:43)\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n```\r\n\r\nInitially I thought it might be caused by the new `MockedStatic` usage, but I've marked those classes with `@Disable` and the exceptions happen anyway and the test classes that are affected weren't using `MockedStatic` anyway, so I'm not exactly sure how to investigate this further.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2026/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2026/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2019","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2019/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2019/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2019/events","html_url":"https://github.com/mockito/mockito/issues/2019","id":683677788,"node_id":"MDU6SXNzdWU2ODM2Nzc3ODg=","number":2019,"title":"mockito-inline fails to initialize nonstatic class members with explicit initialization","user":{"login":"dpcollins-google","id":40498610,"node_id":"MDQ6VXNlcjQwNDk4NjEw","avatar_url":"https://avatars.githubusercontent.com/u/40498610?v=4","gravatar_id":"","url":"https://api.github.com/users/dpcollins-google","html_url":"https://github.com/dpcollins-google","followers_url":"https://api.github.com/users/dpcollins-google/followers","following_url":"https://api.github.com/users/dpcollins-google/following{/other_user}","gists_url":"https://api.github.com/users/dpcollins-google/gists{/gist_id}","starred_url":"https://api.github.com/users/dpcollins-google/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dpcollins-google/subscriptions","organizations_url":"https://api.github.com/users/dpcollins-google/orgs","repos_url":"https://api.github.com/users/dpcollins-google/repos","events_url":"https://api.github.com/users/dpcollins-google/events{/privacy}","received_events_url":"https://api.github.com/users/dpcollins-google/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false},"assignees":[{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2020-08-21T16:31:06Z","updated_at":"2020-09-04T16:35:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Mockito 3.5.2, java 8.\r\n\r\nWhen using `@Spy` or spy(Abstract.class), nonstatic members with initializers are not initialized.\r\n\r\n[This](https://github.com/googleapis/java-pubsublite/blob/30a276bc600662066839c9e8027856673fc2f1d9/google-cloud-pubsublite/src/test/java/com/google/cloud/pubsublite/cloudpubsub/internal/SinglePartitionSubscriberTest.java#L70) test works with mockito-core but fails with mockito-inline, due to [This](https://github.com/googleapis/api-common-java/blob/aac14eb00691e75e425df50bf6f6ab98811818f4/src/main/java/com/google/api/core/AbstractApiService.java#L55) base class member not being initialized (it is null by stepping through the debugger).\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2019/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2019/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2016","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2016/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2016/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2016/events","html_url":"https://github.com/mockito/mockito/issues/2016","id":683314222,"node_id":"MDU6SXNzdWU2ODMzMTQyMjI=","number":2016,"title":"Mockito gives wrong exception message when calling mock A while verifying mock B","user":{"login":"EdGue42","id":53468311,"node_id":"MDQ6VXNlcjUzNDY4MzEx","avatar_url":"https://avatars.githubusercontent.com/u/53468311?v=4","gravatar_id":"","url":"https://api.github.com/users/EdGue42","html_url":"https://github.com/EdGue42","followers_url":"https://api.github.com/users/EdGue42/followers","following_url":"https://api.github.com/users/EdGue42/following{/other_user}","gists_url":"https://api.github.com/users/EdGue42/gists{/gist_id}","starred_url":"https://api.github.com/users/EdGue42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/EdGue42/subscriptions","organizations_url":"https://api.github.com/users/EdGue42/orgs","repos_url":"https://api.github.com/users/EdGue42/repos","events_url":"https://api.github.com/users/EdGue42/events{/privacy}","received_events_url":"https://api.github.com/users/EdGue42/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-21T06:00:30Z","updated_at":"2020-08-21T06:07:14Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Please see this example:\r\n\r\n```\r\nclass Foo { }\r\n\r\nclass Bar {\r\n    void takeIt(int i, String arg) {         System.out.println(arg + i);     }\r\n}\r\n\r\npublic class Mcve {\r\n    @Test\r\n    public void passes() {\r\n        Foo foo = Mockito.mock(Foo.class);\r\n        Bar bar = Mockito.mock(Bar.class);\r\n        bar.takeIt(42, \"surprise: \" + foo);\r\n        String substring = \"surprise: \" + foo;\r\n        Mockito.verify(bar).takeIt(ArgumentMatchers.eq(42),\r\n                ArgumentMatchers.contains(substring));\r\n    }\r\n    @Test\r\n    public void fails() {\r\n        Foo foo = Mockito.mock(Foo.class);\r\n        Bar bar = Mockito.mock(Bar.class);\r\n        bar.takeIt(42, \"surprise: \" + foo);\r\n        Mockito.verify(bar).takeIt(ArgumentMatchers.eq(42),\r\n                ArgumentMatchers.contains(\"surprise: \" + foo));\r\n    }\r\n}\r\n```\r\n\r\nThe failing test only does one thing differently: the expression to match the string argument against is computed **inline**. \r\nThe test throws: \r\n\r\n> org.mockito.exceptions.misusing.InvalidUseOfMatchersException: \r\nInvalid use of argument matchers!\r\n0 matchers expected, 1 recorded:\r\n-> at com.ibm.hwmca.z.svm.zhyp.managed.Mcve.fails(Mcve.java:43)\r\n\r\n> This exception may occur if matchers are combined with raw values:\r\n    //incorrect:\r\n    someMethod(anyObject(), \"raw String\");\r\nWhen using matchers, all arguments have to be provided by matchers.\r\nFor example:\r\n    //correct:\r\n    someMethod(anyObject(), eq(\"String by matcher\"));\r\n\r\n> For more info see javadoc for Matchers class.\r\n\r\n\tat java.lang.String.valueOf(String.java:2994)\r\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\r\n\tat Mcve.fails(Mcve.java:43)\r\n\r\nThis is really a dumbed down example. In our real environment, the Bar class is a mocked logging facility.\r\nAnd the Foo object represents some \"data entity\" that gets created by some fake persistence layer (so that our production code can \"talk\" to the \"database\" as normal, not noticing that all data objects are faked). \r\n\r\nIn my actual unit test, the production code fetches such fake data objects, and does various things with it. And in the end, I want to verify that specific data were logged, does I need to really use `contains(\"some string\" + somethingFromAMock)`\r\n\r\nAlso note: the above only fails when `takeIt()` takes more than one argument. If the method signature is change to only use a string, things work fine. \r\n\r\nThe issues I think that are worth looking at:\r\n\r\n- if talking to a mock while verifying another mock is invalid, then that should explicitly stated somewhere and\r\n- then your error message should clearly say so (obviously: the current error message is bogus, as the verified call is using argument matchers for all arguments)\r\n\r\nUsed Versions:\r\n\r\n- mockito-core-2.25.1\r\n- IBM java 8 for macos (macosxx6480sr6fp10hybrid-20200409_01) (but I really think this isnt a JVM issue)\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2016/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2005","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2005/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2005/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2005/events","html_url":"https://github.com/mockito/mockito/issues/2005","id":679912345,"node_id":"MDU6SXNzdWU2Nzk5MTIzNDU=","number":2005,"title":"Kotlin methods with default arguments requires argument matchers on all parameters","user":{"login":"chao2zhang","id":1175468,"node_id":"MDQ6VXNlcjExNzU0Njg=","avatar_url":"https://avatars.githubusercontent.com/u/1175468?v=4","gravatar_id":"","url":"https://api.github.com/users/chao2zhang","html_url":"https://github.com/chao2zhang","followers_url":"https://api.github.com/users/chao2zhang/followers","following_url":"https://api.github.com/users/chao2zhang/following{/other_user}","gists_url":"https://api.github.com/users/chao2zhang/gists{/gist_id}","starred_url":"https://api.github.com/users/chao2zhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chao2zhang/subscriptions","organizations_url":"https://api.github.com/users/chao2zhang/orgs","repos_url":"https://api.github.com/users/chao2zhang/repos","events_url":"https://api.github.com/users/chao2zhang/events{/privacy}","received_events_url":"https://api.github.com/users/chao2zhang/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-17T03:49:22Z","updated_at":"2020-08-17T03:49:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello folks, please allow me for a lengthy bug report.\r\n\r\n- Suppose we have a function `foo` with default arguments like following:\r\n\r\n```\r\n// Foo.kt\r\nopen class Foo {\r\n    @JvmOverloads\r\n    open fun foo(a: Int, b: Int = 0, c: Int = 0): Int {\r\n        return a + b + c\r\n    }\r\n}\r\n```\r\n\r\n- And we would like to test the behavior of function `bar`:\r\n\r\n```\r\n// Bar.java\r\npublic class Bar {\r\n    private Foo foo;\r\n    public Bar(@NotNull Foo foo) {\r\n        this.foo = foo;\r\n    }\r\n    public int bar(int command){\r\n        if (command > 0) {\r\n            return foo.foo(command);\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n- So we write our test code like:\r\n\r\n```\r\npublic class BarJavaTest {\r\n    @Test\r\n    public void worksInKotlin1_3_72ButNotKotlin1_4_0() {\r\n        Foo foo = Mockito.mock(Foo.class);\r\n        new BarJava(foo).bar(42);\r\n        Mockito.verify(foo).foo(42);\r\n        Mockito.verify(foo).foo(eq(42));\r\n    }\r\n}\r\n```\r\n\r\nMy understanding is that `Mockito.verify(foo).foo(42)` and `Mockito.verify(foo).foo(eq(42))` are equivalent semantically. However, `Mockito.verify(foo).foo(eq(42))` throws an exception in Kotlin 1.4.0.\r\n```\r\n  // org.mockito.exceptions.misusing.InvalidUseOfMatchersException:\r\n        // Invalid use of argument matchers!\r\n        // 3 matchers expected, 1 recorded:\r\n        // -> at com.chaozhang.BarJavaTest.worksInKotlin1_3_72ButNotKotlin1_4_0(BarJavaTest.java:17)\r\n```\r\n\r\nThe expectation is that `Mockito.verify(foo).foo(eq(42))` should succeed. I checked mockito 3.5.0(latest) and 2.28.2(used by my projects), and the behavior is consistent between those two versions.\r\n\r\nNote: When I substitute `Mockito.verify(foo).foo(eq(42), eq(0), eq(0))`, the test is passed. \r\nSource code of the above example can be found in https://github.com/chao2zhang/mockito-kotlin-arg-matcher-exception","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2005/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2005/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2001","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2001/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2001/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2001/events","html_url":"https://github.com/mockito/mockito/issues/2001","id":677595179,"node_id":"MDU6SXNzdWU2Nzc1OTUxNzk=","number":2001,"title":"Verification with timeout on synchronized method fails","user":{"login":"Peter-bytes","id":69582011,"node_id":"MDQ6VXNlcjY5NTgyMDEx","avatar_url":"https://avatars.githubusercontent.com/u/69582011?v=4","gravatar_id":"","url":"https://api.github.com/users/Peter-bytes","html_url":"https://github.com/Peter-bytes","followers_url":"https://api.github.com/users/Peter-bytes/followers","following_url":"https://api.github.com/users/Peter-bytes/following{/other_user}","gists_url":"https://api.github.com/users/Peter-bytes/gists{/gist_id}","starred_url":"https://api.github.com/users/Peter-bytes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Peter-bytes/subscriptions","organizations_url":"https://api.github.com/users/Peter-bytes/orgs","repos_url":"https://api.github.com/users/Peter-bytes/repos","events_url":"https://api.github.com/users/Peter-bytes/events{/privacy}","received_events_url":"https://api.github.com/users/Peter-bytes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-12T10:55:51Z","updated_at":"2020-08-12T10:55:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When using Mockito verify with a timeout to wait for an asynchronous method call, it sometimes fails if the method is synchronized.\r\n\r\nI have observed the effect with multiple versions of Eclipse, including 2020-06 (4.16.0), and both Mockito 3.1.0 and 3.4.6. The example below illustrates the problem (both the test and the subject under test are in the same class for simplicity). \r\n\r\n```\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.Mock;\r\nimport org.mockito.Mockito;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass A {\r\n  @Mock\r\n  private A a;\r\n\r\n  public synchronized void f() {\r\n    // Do stuff\r\n  }\r\n\r\n  @Test\r\n  void test() {\r\n    // Call a.f() asynchronously and with a small delay \r\n    // (to make the test thread yield).\r\n    new Thread(() -> {\r\n      try {\r\n        Thread.sleep(100);\r\n      } catch (final InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n      }\r\n      a.f();\r\n    }).start();\r\n\r\n    // This verification fails, but it should pass.\r\n    Mockito.verify(a, Mockito.timeout(2000)).f();\r\n  }\r\n}\r\n```\r\n\r\nNoteworthy points:\r\n\r\n- The effect is not perfectly reproducible. In fact, my real-life examples never fail on some computers while they always fail on others, suggesting a race condition.\r\n- Removing the synchronized keyword solves the issue, even when replacing it with a synchronized(this) block in the method body.\r\n- If the class containing the synchronized method implements an interface, mocking the interface instead of the concrete class solves the issue.\r\n- Removing the sleep in the example above, hence increasing the chance that the call to f is finished before verify is called, solves the issue.\r\n- The behavior is suspiciously similar to the issue described (and presumably solved) here: https://github.com/mockito/mockito/issues/253.\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2001/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2001/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/2000","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/2000/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/2000/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/2000/events","html_url":"https://github.com/mockito/mockito/issues/2000","id":676914729,"node_id":"MDU6SXNzdWU2NzY5MTQ3Mjk=","number":2000,"title":"Verify method bug with Maps","user":{"login":"catch441","id":46790932,"node_id":"MDQ6VXNlcjQ2NzkwOTMy","avatar_url":"https://avatars.githubusercontent.com/u/46790932?v=4","gravatar_id":"","url":"https://api.github.com/users/catch441","html_url":"https://github.com/catch441","followers_url":"https://api.github.com/users/catch441/followers","following_url":"https://api.github.com/users/catch441/following{/other_user}","gists_url":"https://api.github.com/users/catch441/gists{/gist_id}","starred_url":"https://api.github.com/users/catch441/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/catch441/subscriptions","organizations_url":"https://api.github.com/users/catch441/orgs","repos_url":"https://api.github.com/users/catch441/repos","events_url":"https://api.github.com/users/catch441/events{/privacy}","received_events_url":"https://api.github.com/users/catch441/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-08-11T14:16:04Z","updated_at":"2020-08-13T06:12:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey,\r\n\r\nI think I found a bug with the verify method. It seems that there is some async action behind the method. Here is a sample code with the main problem:\r\n\r\n```\r\nimport static org.mockito.Mockito.verify;\r\n\r\nimport java.util.HashMap;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.Mock;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\npublic class TestClass {\r\n\r\n\t@Mock\r\n\tValidator validator;\r\n\r\n\t@Test\r\n\tpublic void validateTest() {\r\n\t\tnew SomeClass().myMethod(validator);\r\n\t\tverify(validator).validate(new HashMap<String, String>(), \"potatoe\");\r\n\t}\r\n}\r\n```\r\n```\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class SomeClass {\r\n\r\n\tpublic void myMethod (Validator validator) {\r\n\t\tMap<String, String> map = new HashMap<>();\r\n\t\tvalidator.validate(map, \"potatoe\");\r\n\t\tmap.put(\"tomatoe\", \"ketchup\");\r\n\t}\r\n}\r\n```\r\n```\r\nimport java.util.Map;\r\n\r\npublic interface Validator {\r\n\r\n\tpublic void validate(Map<String, String> map, String value);\r\n}\r\n```\r\nEvery time I execute the test I get the following message:\r\n\r\n> Argument(s) are different! Wanted:\r\n> validator.validate(\r\n>     {},\r\n>     \"potatoe\"\r\n> );\r\n> -> at com.ue.economyplayer.logic.impl.TestClass.validateTest(TestClass.java:21)\r\n> Actual invocations have different arguments:\r\n> validator.validate(\r\n>     {\"tomatoe\" = \"ketchup\"},\r\n>     \"potatoe\"\r\n> );\r\n> -> at com.ue.economyplayer.logic.impl.SomeClass.myMethod(SomeClass.java:10)\r\n> \r\n> \tat com.ue.economyplayer.logic.impl.TestClass.validateTest(TestClass.java:21)\r\n> \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n> \tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\r\nThe arguments are not matching, but the map is filled after the method invocation and should be empty at the invocation time.\r\n\r\nMy Environment:\r\n\r\nJDK 1.8\r\nJUnit 5\r\nMockito-Core 3.4.6\r\nMockito-JUnit-Jupiter 3.4.6","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/2000/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/2000/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1987","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1987/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1987/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1987/events","html_url":"https://github.com/mockito/mockito/issues/1987","id":665291414,"node_id":"MDU6SXNzdWU2NjUyOTE0MTQ=","number":1987,"title":"Removal of getters in InterceptedInvocation breaks Mockito-Scala","user":{"login":"bbonanno","id":241804,"node_id":"MDQ6VXNlcjI0MTgwNA==","avatar_url":"https://avatars.githubusercontent.com/u/241804?v=4","gravatar_id":"","url":"https://api.github.com/users/bbonanno","html_url":"https://github.com/bbonanno","followers_url":"https://api.github.com/users/bbonanno/followers","following_url":"https://api.github.com/users/bbonanno/following{/other_user}","gists_url":"https://api.github.com/users/bbonanno/gists{/gist_id}","starred_url":"https://api.github.com/users/bbonanno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bbonanno/subscriptions","organizations_url":"https://api.github.com/users/bbonanno/orgs","repos_url":"https://api.github.com/users/bbonanno/repos","events_url":"https://api.github.com/users/bbonanno/events{/privacy}","received_events_url":"https://api.github.com/users/bbonanno/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2020-07-24T16:49:39Z","updated_at":"2020-08-02T16:15:43Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Hi there,\r\n\r\nI was upgrading to mockito-core 3.4.x and noticed my build breaks, after looking at the commit history I can see the commit b3fc349e8e525e41f34ff04aca8c3140ff2b335a removed 3 getters from `InterceptedInvocation` that I rely on to work out some of the Scala magic, is there any specific reason why they were removed? if so, is there any alternative way to obtain access to that info? if not, can we re-instate them?\r\n\r\nThanks!\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1987/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1970","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1970/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1970/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1970/events","html_url":"https://github.com/mockito/mockito/issues/1970","id":656093562,"node_id":"MDU6SXNzdWU2NTYwOTM1NjI=","number":1970,"title":"InvalidUseOfMatchersException for When...Return","user":{"login":"tomkalafut","id":16907983,"node_id":"MDQ6VXNlcjE2OTA3OTgz","avatar_url":"https://avatars.githubusercontent.com/u/16907983?v=4","gravatar_id":"","url":"https://api.github.com/users/tomkalafut","html_url":"https://github.com/tomkalafut","followers_url":"https://api.github.com/users/tomkalafut/followers","following_url":"https://api.github.com/users/tomkalafut/following{/other_user}","gists_url":"https://api.github.com/users/tomkalafut/gists{/gist_id}","starred_url":"https://api.github.com/users/tomkalafut/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tomkalafut/subscriptions","organizations_url":"https://api.github.com/users/tomkalafut/orgs","repos_url":"https://api.github.com/users/tomkalafut/repos","events_url":"https://api.github.com/users/tomkalafut/events{/privacy}","received_events_url":"https://api.github.com/users/tomkalafut/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-07-13T19:44:53Z","updated_at":"2020-07-18T16:38:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Very frustrated by this.  I have tried several versions of Mockito.  This is with org.mockito:mockito-core:2.15.0.\r\n\r\nI have re-created my problem with a simple class like so:\r\n\r\n```java\r\nclass OrgHierarchyCacheServiceTest {\r\n  public List<String> getAncestors(String orgCode) {\r\n    List<String> ancestors = [\"a\", \"b\", \"c\"]\r\n    return ancestors\r\n  }\r\n}\r\n```\r\n\r\nIn my TestClass:\r\n\r\n```java\r\nimport static org.mockito.Mockito.anyString\r\nimport static org.mockito.Mockito.mock\r\nimport static org.mockito.Mockito.when\r\n\r\n@RunWith(SpringJUnit4ClassRunner)\r\nclass TestClass {\r\n\r\n  protected OrgHierarchyCacheServiceTest orgHierarchyCacheService\r\n\r\n @Before\r\n  void setUp() {\r\n    ...\r\n    orgHierarchyCacheService = mock(OrgHierarchyCacheServiceTest)\r\n    when(orgHierarchyCacheService.getAncestors(anyString())).thenReturn(new ArrayList<String>())\r\n    ...\r\n    }\r\n}\r\n```\r\nThis **when** statement throws the exception. I have also tried ...thenReturn(anyList()).\r\n=====\r\norg.mockito.exceptions.misusing.InvalidUseOfMatchersException: \r\nInvalid use of argument matchers!\r\n0 matchers expected, 1 recorded:\r\n-> at com....TestClass.setUp(TestClass.groovy:154)\r\n\r\nThis exception may occur if matchers are combined with raw values:\r\n    //incorrect:\r\n    someMethod(anyObject(), \"raw String\");\r\nWhen using matchers, all arguments have to be provided by matchers.\r\nFor example:\r\n    //correct:\r\n    someMethod(anyObject(), eq(\"String by matcher\"));\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1970/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1970/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1943","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1943/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1943/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1943/events","html_url":"https://github.com/mockito/mockito/issues/1943","id":629980797,"node_id":"MDU6SXNzdWU2Mjk5ODA3OTc=","number":1943,"title":"Mockito-inline fails to choose correct method to mock for Kotlin classes with \"reified\" methods in Java tests","user":{"login":"juv","id":8269353,"node_id":"MDQ6VXNlcjgyNjkzNTM=","avatar_url":"https://avatars.githubusercontent.com/u/8269353?v=4","gravatar_id":"","url":"https://api.github.com/users/juv","html_url":"https://github.com/juv","followers_url":"https://api.github.com/users/juv/followers","following_url":"https://api.github.com/users/juv/following{/other_user}","gists_url":"https://api.github.com/users/juv/gists{/gist_id}","starred_url":"https://api.github.com/users/juv/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/juv/subscriptions","organizations_url":"https://api.github.com/users/juv/orgs","repos_url":"https://api.github.com/users/juv/repos","events_url":"https://api.github.com/users/juv/events{/privacy}","received_events_url":"https://api.github.com/users/juv/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-06-03T13:09:06Z","updated_at":"2020-08-13T19:46:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nI am running into a Mockito (mockito-inline) problem when mocking a final Kotlin class in Java.\r\nThe method that I want to mock: [`fun header(header: String): String? = req.getHeader(header)`](https://github.com/tipsy/javalin/blob/master/javalin/src/main/java/io/javalin/http/Context.kt#L248)\r\nThe method that Mockito is choosing in a random way on execution of the test... which is causing an exception: [`inline fun <reified T : Any> header(header: String) = header(header, T::class.java)`](https://github.com/tipsy/javalin/blob/master/javalin/src/main/java/io/javalin/http/Context.kt#L251-L255)\r\n\r\nMy way to mock the method is like this, see entire test method below: \r\n`when(context.header(\"Authorization\")).thenReturn(test1);`  \r\n\r\nBecause Mockito is choosing the method with return type `Validator` instead of the method with return type `String`, my tests throw an exception.\r\n\r\nThe exception that occur in my tests in a **random amount** of the test runs, i.e. **sometimes my test works and sometimes the wrong method is chosen**:\r\n```\r\norg.mockito.exceptions.misusing.WrongTypeOfReturnValue: \r\n\r\nString cannot be returned by header()\r\nheader() should return Validator\r\n***\r\nIf you're unsure why you're getting above error read on.\r\nDue to the nature of the syntax above problem might occur because:\r\n1. This exception *might* occur in wrongly written multi-threaded tests.\r\n   Please refer to Mockito FAQ on limitations of concurrency testing.\r\n2. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies - \r\n   - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.\r\n\r\n    at my.package.stupidTest1(JavalinTest.java:28)\r\n```\r\nCan someone explain why Mockito is choosing different methods in each test run? As far as I know, `reified` Kotlin methods should be hidden for Java applications and thus Mockito is not working correctly in this manner? \r\n\r\n------------\r\n\r\nThere have been several people that reproduced this issue, please see https://github.com/tipsy/javalin/issues/979 \r\n\r\nTo reproduce:\r\n1. Create a Java maven project with JDK compiler source/target value 1.8 in the maven `<properties>` element\r\n```    \r\n<maven.compiler.source>1.8</maven.compiler.source>\r\n<maven.compiler.target>1.8</maven.compiler.target>\r\n```\r\n2. Add mockito dependency\r\n```\r\n<dependency>\r\n  <groupId>org.mockito</groupId>\r\n  <artifactId>mockito-core</artifactId>\r\n  <version>3.2.0</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```\r\n3. Add Javalin dependency\r\n```\r\n<dependency>\r\n  <groupId>io.javalin</groupId>\r\n  <artifactId>javalin</artifactId>\r\n  <version>3.8.0</version>\r\n</dependency>\r\n```\r\n4. Create the file `resources/mockito-extensions/org.mockito.plugins.MockMaker` with content `mock-maker-inline` [so that final Kotlin classes can be mocked](https://github.com/mockito/mockito/wiki/What%27s-new-in-Mockito-2#mock-the-unmockable-opt-in-mocking-of-final-classesmethods)\r\n5. Create a test class that contains only a single method\r\n```\r\n @Test\r\n  void stupidTest1() {\r\n    Context context = mock(Context.class);\r\n\r\n    String test1 = \"hello123\";\r\n    when(context.header(\"Authorization\")).thenReturn(test1);\r\n  }\r\n```\r\n6. Run the test","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1943/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1943/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1935","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1935/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1935/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1935/events","html_url":"https://github.com/mockito/mockito/issues/1935","id":621484533,"node_id":"MDU6SXNzdWU2MjE0ODQ1MzM=","number":1935,"title":"InjectMocks have naive approach in choosing the multiple constructors with same size ","user":{"login":"xinyi9","id":15124443,"node_id":"MDQ6VXNlcjE1MTI0NDQz","avatar_url":"https://avatars.githubusercontent.com/u/15124443?v=4","gravatar_id":"","url":"https://api.github.com/users/xinyi9","html_url":"https://github.com/xinyi9","followers_url":"https://api.github.com/users/xinyi9/followers","following_url":"https://api.github.com/users/xinyi9/following{/other_user}","gists_url":"https://api.github.com/users/xinyi9/gists{/gist_id}","starred_url":"https://api.github.com/users/xinyi9/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xinyi9/subscriptions","organizations_url":"https://api.github.com/users/xinyi9/orgs","repos_url":"https://api.github.com/users/xinyi9/repos","events_url":"https://api.github.com/users/xinyi9/events{/privacy}","received_events_url":"https://api.github.com/users/xinyi9/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-05-20T06:02:26Z","updated_at":"2020-05-20T06:04:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey Mockito Team,\r\n \r\nApologies if similar problem has been reported somewhere. \r\n\r\nIn our test, we have \r\n`@RunWith(MockitoJUnitRunner.class)\r\npublic class TestCachingBarDao { \r\n    @Mock\r\n    BarIdCache mockBarIdCache;\r\n    @Mock\r\n    BarDaoInternal mockDelegateDao;\r\n    @InjectMocks\r\n    private CachingBarDao cachingBarDao;\r\n \r\n    //some other Mock...\r\n    @Mock\r\n    Foo foo;\r\n\r\n    @Mock\r\n    FooById fooById; \r\n \r\n \r\n    @Before\r\n    public void setUp() throws Exception {\r\n        ....\r\n    }\r\n \r\n    @Test\r\n    ...\r\n \r\n     \r\n    @Test\r\n    ...\r\n}`\r\n\r\nWhereby the testing class is\r\n\r\n`\r\npublic class CachingBarDao extends DelegatingBarDao {\r\n    private final BarIdCache barIdCache;`\r\n \r\n    public CachingBarDao(BarDaoInternal delegateDao, BarIdCache barIdCache) {\r\n        super(delegateDao);\r\n        this.barIdCache = barIdCache;\r\n    }\r\n \r\n    public CachingBarDao(BarDaoInternal delegateDao, VCacheFactory cacheFactory) {\r\n        this(delegateDao, new BarIdCache(Lazy.supplier(() -> createCache(cacheFactory))));\r\n    }\r\n` \r\n}\r\n` \r\n\r\nRecently we've discovered the tests have been failing intermittently, after some head scratching investigation, we found out it arose from the approach that InjectMocks chose the biggest constructor for Injection. \r\nAfter debugging into the problem, I found the implementation of the biggestConstructor is pretty naive.  https://github.com/mockito/mockito/blob/release/3.x/src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java \r\nGetting declared constructors, sort constructors by parameters number and get the biggest constructor, whereby in our case, the mockableParam count are same for both constructors. It ties up to the order of what returned from  clazz.getDeclaredConstructors(), and it has caused us problem in different CI pipeline. \r\n\r\nWondering could your team \r\n1. improve the biggestConstructor approach to take constructor signature into account? \r\n2. Update on the Javadoc on the potential caveat on same size constructors using InjectMocks \r\n\r\nThank you and look forward to hear from you. ","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1935/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1932","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1932/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1932/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1932/events","html_url":"https://github.com/mockito/mockito/issues/1932","id":616770746,"node_id":"MDU6SXNzdWU2MTY3NzA3NDY=","number":1932,"title":"Add name parameter to argThat","user":{"login":"ST-DDT","id":1579362,"node_id":"MDQ6VXNlcjE1NzkzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/1579362?v=4","gravatar_id":"","url":"https://api.github.com/users/ST-DDT","html_url":"https://github.com/ST-DDT","followers_url":"https://api.github.com/users/ST-DDT/followers","following_url":"https://api.github.com/users/ST-DDT/following{/other_user}","gists_url":"https://api.github.com/users/ST-DDT/gists{/gist_id}","starred_url":"https://api.github.com/users/ST-DDT/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ST-DDT/subscriptions","organizations_url":"https://api.github.com/users/ST-DDT/orgs","repos_url":"https://api.github.com/users/ST-DDT/repos","events_url":"https://api.github.com/users/ST-DDT/events{/privacy}","received_events_url":"https://api.github.com/users/ST-DDT/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-05-12T15:56:20Z","updated_at":"2020-05-12T16:02:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Argument matchers that are created with `argThat` using lambdas create an unreadable output, that does not really help:\r\n\r\n````java\r\n    @Test\r\n    void test() {\r\n        Consumer c = mock(Consumer.class);\r\n        c.accept(null);\r\n        verify(c, never()).accept(argThat(arg -> arg == null)); // <-- complex check here\r\n    }\r\n````\r\n\r\n````txt\r\norg.mockito.exceptions.verification.NeverWantedButInvoked: \r\nconsumer.accept(\r\n    <Test$$ lambda$ 5 4 4/ 0x 0 0 0 0 0 0 0 8 0 0 5eb 8 4 0>\r\n);\r\nNever wanted here:\r\n-> at com.example.Test.test(Test.java:1077)\r\nBut invoked here:\r\n-> at com.example.Test.test(Test.java:1076)\r\n\r\n\tat com.example.Test.test(Test.java:1077)\r\n````\r\n\r\nI searched a bit in the internet whether it is possible to somehow get a useful name for lambdas, but that doesn't seem to be possible. So instead, I would like to have an `argThat` method with an additional `name` (or `description` or `message`) parameter.\r\n\r\nExample:\r\n````java\r\n    @Test\r\n    void test() {\r\n        Consumer c = mock(Consumer.class);\r\n        c.accept(null);\r\n        verify(c, never()).accept(argThat(\"is null\", arg -> arg == null));\r\n    }\r\n````\r\n\r\n````txt\r\norg.mockito.exceptions.verification.NeverWantedButInvoked: \r\nconsumer.accept(\r\n    \"is null\"\r\n);\r\nNever wanted here:\r\n-> at com.example.Test.test(Test.java:1077)\r\nBut invoked here:\r\n-> at com.example.Test.test(Test.java:1076)\r\n\r\n\tat com.example.Test.test(Test.java:1077)\r\n````\r\n\r\nThis is already possible right now, but needs to be copied for every project:\r\n\r\n````java\r\npublic static <T> T namedArgThat(final String name, final ArgumentMatcher<T> matcher) {\r\n        return argThat(new ArgumentMatcher<>() {\r\n            @Override\r\n            public boolean matches(final T argument) {\r\n                return matcher.matches(argument);\r\n            }\r\n\r\n            @Override\r\n            public String toString() {\r\n                return name;\r\n            }\r\n        });\r\n    }\r\n````\r\nIt would be nice if such a method could be added to the library itself.\r\nThe method is intended to be used with lambda expressions only.\r\n\r\nAs an alternative a static `ArgumentMatcher#named(String, ArgumentMatcher)` would work as well. Maybe this is even more useful, as it can be used for nested matchers as well.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1932/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1932/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1930","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1930/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1930/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1930/events","html_url":"https://github.com/mockito/mockito/issues/1930","id":615502494,"node_id":"MDU6SXNzdWU2MTU1MDI0OTQ=","number":1930,"title":"Kotlin Result seems to behave weirdly when trying to be returned with Mockito","user":{"login":"adrianhescalante","id":5901726,"node_id":"MDQ6VXNlcjU5MDE3MjY=","avatar_url":"https://avatars.githubusercontent.com/u/5901726?v=4","gravatar_id":"","url":"https://api.github.com/users/adrianhescalante","html_url":"https://github.com/adrianhescalante","followers_url":"https://api.github.com/users/adrianhescalante/followers","following_url":"https://api.github.com/users/adrianhescalante/following{/other_user}","gists_url":"https://api.github.com/users/adrianhescalante/gists{/gist_id}","starred_url":"https://api.github.com/users/adrianhescalante/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adrianhescalante/subscriptions","organizations_url":"https://api.github.com/users/adrianhescalante/orgs","repos_url":"https://api.github.com/users/adrianhescalante/repos","events_url":"https://api.github.com/users/adrianhescalante/events{/privacy}","received_events_url":"https://api.github.com/users/adrianhescalante/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-05-10T23:42:16Z","updated_at":"2020-06-25T14:37:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am facing an issue when trying to use the Kotlin Result in my project. I am trying to mock the return value as shown here:\r\n```kotlin\r\n`when`(useCase.getA()).thenReturn(Result.success(ObjectA(\"testName\")))\r\n```\r\nThe exception when trying to use that returned Result is this one: `java.lang.ClassCastException: kotlin.Result cannot be cast to ObjectA`\r\n\r\nAn interesting thing I found when debugging is that if I check the returned value of that `useCase.getA()` function, it returns an object with description `Success(Success(ObjectA(name=testName)))`. A regular Result returns this description `Success(ObjectA(name=name))`. I guess that's the reason it's failing, it seems there is like a nested Result object, so I am assuming there is something wrong with Mockito when handling the Kotlin Result class.\r\n\r\nThis is a [gist](https://gist.github.com/adrianhescalante/30449c876608fb7283e52c4d6acc5ad6)  I created to test it. There are two tests, one with the Kotlin Result and another one with a quick Result implementation (OwnResult) to check there is not something wrong I am doing myself.\r\n\r\nI am using Mockito 3.3.3 on an Android project with Java 8.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1930/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1930/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1925","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1925/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1925/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1925/events","html_url":"https://github.com/mockito/mockito/issues/1925","id":612770853,"node_id":"MDU6SXNzdWU2MTI3NzA4NTM=","number":1925,"title":"@Mock does not work with Maven and Java 13","user":{"login":"schuettec","id":14310082,"node_id":"MDQ6VXNlcjE0MzEwMDgy","avatar_url":"https://avatars.githubusercontent.com/u/14310082?v=4","gravatar_id":"","url":"https://api.github.com/users/schuettec","html_url":"https://github.com/schuettec","followers_url":"https://api.github.com/users/schuettec/followers","following_url":"https://api.github.com/users/schuettec/following{/other_user}","gists_url":"https://api.github.com/users/schuettec/gists{/gist_id}","starred_url":"https://api.github.com/users/schuettec/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/schuettec/subscriptions","organizations_url":"https://api.github.com/users/schuettec/orgs","repos_url":"https://api.github.com/users/schuettec/repos","events_url":"https://api.github.com/users/schuettec/events{/privacy}","received_events_url":"https://api.github.com/users/schuettec/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false},"assignees":[{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2020-05-05T17:27:03Z","updated_at":"2020-06-18T20:40:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, I tried to setup a minimum example project to get Mockito working with JUnit 5, Maven and Java Open JDK 13 but the mock injection `@Mock` does not work.\r\n\r\nThe test case is simple:\r\n```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class MockitoTest {\r\n    @Mock\r\n    protected MyInterface myMock;\r\n    @Test\r\n    public void shouldMock() {\r\n      // Do something\r\n    }\r\n}\r\n```\r\nBut I get the following error when I run Maven Surefire for testing:\r\n```\r\n[INFO] Running com.github.schuettec.mocktest.MockitoTest\r\n[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.571 s <<< FAILURE! - in com.github.schuettec.mocktest.MockitoTest\r\n[ERROR] com.github.schuettec.mocktest.MockitoTest.shouldMockBothWithoutOpens  Time elapsed: 0.546 s  <<< ERROR!\r\norg.mockito.exceptions.base.MockitoException: Problems setting field myMock annotated with @org.mockito.Mock(name=\"\", stubOnly=false, extraInterfaces={}, answer=RETURNS_DEFAULTS, serializable=false, lenient=false)\r\nCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected com.github.schuettec.mocktest.MyInterface com.github.schuettec.mocktest.MockitoTest.myMock accessible: module mocktest does not \"opens com.github.schuettec.mocktest\" to unnamed module @57fd91c9\r\n```\r\n\r\nMy module seems not to be available for Mockito's reflective access.  Since the documentation does not say anything about `--add-opens` to be required (that also applies to Surefire Docs and so on) I expected the tests to be successfull.\r\n\r\nThe involved version are the following\r\n- maven-surefire-plugin 3.0.0-M4\r\n- junit-jupiter 5.7.0-M1\r\n- mockito-core 3.3.3\r\n- mockito-junit-jupiter 3.3.3\r\n\r\nI uploaded an example project.\r\n- Example Project: https://github.com/schuettec/junit5-java13-test\r\n- Build-Logs: https://travis-ci.org/github/schuettec/junit5-java13-test/builds/683407777\r\n\r\nBtw: If I use `Mockito.mock()` everything works fine, although Mockito does a lot more reflection stuff and the same access problems should occur, I thought.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1925/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1925/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1924","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1924/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1924/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1924/events","html_url":"https://github.com/mockito/mockito/issues/1924","id":611508606,"node_id":"MDU6SXNzdWU2MTE1MDg2MDY=","number":1924,"title":"discussion: strict mockito inconsistencies ","user":{"login":"grimreaper","id":433817,"node_id":"MDQ6VXNlcjQzMzgxNw==","avatar_url":"https://avatars.githubusercontent.com/u/433817?v=4","gravatar_id":"","url":"https://api.github.com/users/grimreaper","html_url":"https://github.com/grimreaper","followers_url":"https://api.github.com/users/grimreaper/followers","following_url":"https://api.github.com/users/grimreaper/following{/other_user}","gists_url":"https://api.github.com/users/grimreaper/gists{/gist_id}","starred_url":"https://api.github.com/users/grimreaper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/grimreaper/subscriptions","organizations_url":"https://api.github.com/users/grimreaper/orgs","repos_url":"https://api.github.com/users/grimreaper/repos","events_url":"https://api.github.com/users/grimreaper/events{/privacy}","received_events_url":"https://api.github.com/users/grimreaper/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"mockitoguy","id":24743,"node_id":"MDQ6VXNlcjI0NzQz","avatar_url":"https://avatars.githubusercontent.com/u/24743?v=4","gravatar_id":"","url":"https://api.github.com/users/mockitoguy","html_url":"https://github.com/mockitoguy","followers_url":"https://api.github.com/users/mockitoguy/followers","following_url":"https://api.github.com/users/mockitoguy/following{/other_user}","gists_url":"https://api.github.com/users/mockitoguy/gists{/gist_id}","starred_url":"https://api.github.com/users/mockitoguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockitoguy/subscriptions","organizations_url":"https://api.github.com/users/mockitoguy/orgs","repos_url":"https://api.github.com/users/mockitoguy/repos","events_url":"https://api.github.com/users/mockitoguy/events{/privacy}","received_events_url":"https://api.github.com/users/mockitoguy/received_events","type":"User","site_admin":false},"assignees":[{"login":"mockitoguy","id":24743,"node_id":"MDQ6VXNlcjI0NzQz","avatar_url":"https://avatars.githubusercontent.com/u/24743?v=4","gravatar_id":"","url":"https://api.github.com/users/mockitoguy","html_url":"https://github.com/mockitoguy","followers_url":"https://api.github.com/users/mockitoguy/followers","following_url":"https://api.github.com/users/mockitoguy/following{/other_user}","gists_url":"https://api.github.com/users/mockitoguy/gists{/gist_id}","starred_url":"https://api.github.com/users/mockitoguy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mockitoguy/subscriptions","organizations_url":"https://api.github.com/users/mockitoguy/orgs","repos_url":"https://api.github.com/users/mockitoguy/repos","events_url":"https://api.github.com/users/mockitoguy/events{/privacy}","received_events_url":"https://api.github.com/users/mockitoguy/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2020-05-03T21:11:41Z","updated_at":"2020-05-04T04:11:17Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I started a similar thread on the mailing list but got no replies. I believe some of these issues are actual bugs so filing this ticket so it doesn't get lost.\r\n\r\nBackground:\r\nThere are 4 levels of strictness in mockito:\r\n\r\n1. Silent / Lenient - no additional checking is done\r\n2. Warn - this level is like 4, but only shows in the console and does not error\r\n3. Strict - no unused stubs are permitted\r\n4. Strict Stubs - like Strict plus additional safety checks.\r\n\r\nThere are two variants of the \"Strict\" level (and implicitly the \"Strict Stubs\" level). This\r\nis not documented but the result of non-obvious implicit behavior.\r\n\r\na. check-after-class: if a stub is used anywhere in the class, it is not considered\r\nunused.\r\nb. check-after-test: if a stub is used in one test, but not unused in another, it must\r\nnot be stubbed in a common method (e.g., setUp).\r\n\r\nThe strictest type is \"Strict Deps check-after-test\".\r\n\r\nThere are three ways to configure mockito strictness level:\r\n\r\ni. MockitoSession - this option is configured using `@Before` and `@After` and allows to use the\r\nStrictness API (see later). It is likely to work in Junit 5.\r\nii. TestRule - this option is configured using junit 4 only TestRule. It is allows to use the\r\nStrictness API (see later). It is not likely to work in Junit 5.\r\niii. MockitoJunitRunner. This option is configured using `@RunWith` and requires that we use the mockito runner.\r\n\r\nThere are two APIs to configure strictness in mockito:\r\nA. Strictness enum: Used by i and ii above.\r\nB. MockitoJunitRunner class choice: Used by iii above.\r\n\r\nThe strictness API exposes three options silent/lenient, warning, strict stubs\r\nthe MockitoJunitRunner exposes three option: silent/lenient, strict, strict stubs.\r\n\r\nThe TestRule implementation uses check-after-test while MockitoJunitRunner\r\nuses check-after-class. MockitoSession uses check-after-test since it runs validation each test (assuming `@After` is implemented).\r\n\r\nIt is possible for subclasses of a test base to use their own `@RunWith` annotation.  Some of these runners (most notably PowerMockRunner) install a mockito listener of a specific type that MockitoJunitRunner also tries to install. This is an error in mockito 3 and results an in exception. \r\n\r\n---\r\n\r\nWhat's the ask here?\r\n\r\n1. We should unify the Strictness enum and MockitoJunitRunner offerings. This probably means adding a fourth option to the Strictness enum (STRICT as opposed to STRICT_STUBS))  as well as a fourth subclass of MockitoJunitRunner (WARN)\r\n2. It should be an explicit choice if you want to use check-after-test or check-after-class. To that end, MockitoSession needs to be modified such that it can be used from `@BeforeClass` and `@AfterClass`. This will allow it to retain check-after-class semantics. The TestRule and JUnitRunner probably also need to grow configuration variations for the same choice.\r\n\r\ndoing both of these makes the various configurations orthogonal and thus reduces the confusion. \r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1924/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1924/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1919","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1919/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1919/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1919/events","html_url":"https://github.com/mockito/mockito/issues/1919","id":606771462,"node_id":"MDU6SXNzdWU2MDY3NzE0NjI=","number":1919,"title":"Kotlin + MockIto + Android Instrumentation Test","user":{"login":"theapache64","id":9678279,"node_id":"MDQ6VXNlcjk2NzgyNzk=","avatar_url":"https://avatars.githubusercontent.com/u/9678279?v=4","gravatar_id":"","url":"https://api.github.com/users/theapache64","html_url":"https://github.com/theapache64","followers_url":"https://api.github.com/users/theapache64/followers","following_url":"https://api.github.com/users/theapache64/following{/other_user}","gists_url":"https://api.github.com/users/theapache64/gists{/gist_id}","starred_url":"https://api.github.com/users/theapache64/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/theapache64/subscriptions","organizations_url":"https://api.github.com/users/theapache64/orgs","repos_url":"https://api.github.com/users/theapache64/repos","events_url":"https://api.github.com/users/theapache64/events{/privacy}","received_events_url":"https://api.github.com/users/theapache64/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2020-04-25T13:37:50Z","updated_at":"2021-08-26T07:28:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am trying to run an `Instrumentation` test `(androidTest)` using `Mockito` in Android with `Kotlin`.\r\n\r\n- I've the core library in my dependencies. `'org.mockito:mockito-core:3.3.3'` \r\n- My project is written in `Kotlin` so I've `org.mockito:mockito-inline:3.3.3` to fix the final class issue.\r\n- As I want to run the mocks in `Android`, I've `org.mockito:mockito-android:3.3.3` also in my dependencies.\r\n\r\nbut am getting below error while compiling the code\r\n\r\n\r\n> More than one file was found with OS independent path\r\n> 'mockito-extensions/org.mockito.plugins.MockMaker'\r\n\r\nHere's a sample test code to reproduce the issue. Run this test as an Instrumentation test. `(androidTest)`. \r\n\r\n**MainActivityTest**\r\n\r\n```kotlin\r\nimport androidx.test.ext.junit.runners.AndroidJUnit4\r\nimport org.junit.Assert.assertEquals\r\nimport org.junit.Before\r\nimport org.junit.Test\r\nimport org.junit.runner.RunWith\r\nimport org.mockito.Mock\r\nimport org.mockito.Mockito.`when`\r\nimport org.mockito.MockitoAnnotations\r\n\r\nclass Calculator {\r\n    fun add(x: Int, y: Int): Int {\r\n        return x + y\r\n    }\r\n}\r\n\r\n@RunWith(AndroidJUnit4::class)\r\nclass MainActivityTest {\r\n\r\n    @Mock\r\n    lateinit var calculator: Calculator\r\n\r\n    @Before\r\n    fun before() {\r\n        MockitoAnnotations.initMocks(this)\r\n    }\r\n\r\n    @Test\r\n    fun test() {\r\n        `when`(calculator.add(10, 10)).thenReturn(20)\r\n        assertEquals(calculator.add(10, 10), 20)\r\n    }\r\n}\r\n```\r\n\r\n**app/build.gradle**\r\n\r\n```groovy\r\nplugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-android-extensions'\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n\r\n    defaultConfig {\r\n        applicationId \"com.theapache64.mockitosample\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n\r\n    testOptions {\r\n        unitTests.returnDefaultValues = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.2.0'\r\n    implementation 'androidx.appcompat:appcompat:1.1.0'\r\n    implementation 'com.google.android.material:material:1.1.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n    \r\n    testImplementation 'junit:junit:4.13'\r\n    androidTestImplementation 'junit:junit:4.13'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n    androidTestImplementation 'org.mockito:mockito-core:3.3.3'\r\n    androidTestImplementation 'org.mockito:mockito-android:3.3.3'\r\n    androidTestImplementation 'org.mockito:mockito-inline:3.3.3'\r\n}\r\n```\r\n\r\nIsn't it possible to run `Android instrumentation test` using `Kotlin` with `Mockito` ?\r\n\r\n*NOTE: If you think this is a duplicate question, I've searched all over the internet. There are other issues with similar stack-trace, but my case is different.*\r\n\r\nAny help would be highly appreciated  \r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1919/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1917","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1917/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1917/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1917/events","html_url":"https://github.com/mockito/mockito/issues/1917","id":605343453,"node_id":"MDU6SXNzdWU2MDUzNDM0NTM=","number":1917,"title":"MockitoExtension cannot handle multiple generic mocks with different parameterized type","user":{"login":"david0","id":1685610,"node_id":"MDQ6VXNlcjE2ODU2MTA=","avatar_url":"https://avatars.githubusercontent.com/u/1685610?v=4","gravatar_id":"","url":"https://api.github.com/users/david0","html_url":"https://github.com/david0","followers_url":"https://api.github.com/users/david0/followers","following_url":"https://api.github.com/users/david0/following{/other_user}","gists_url":"https://api.github.com/users/david0/gists{/gist_id}","starred_url":"https://api.github.com/users/david0/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/david0/subscriptions","organizations_url":"https://api.github.com/users/david0/orgs","repos_url":"https://api.github.com/users/david0/repos","events_url":"https://api.github.com/users/david0/events{/privacy}","received_events_url":"https://api.github.com/users/david0/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-04-23T08:31:04Z","updated_at":"2020-07-13T11:17:45Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"It looks to me as if `MockitoExtension` just checks the base type and does not respect the parameterized type of mocks.\r\n\r\nThis test will fail:\r\n```java\r\ntestCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.17.1'\r\n@ExtendWith(MockitoExtension.class)\r\npublic class MockitoTwoGenericMocksTest {\r\n\tpublic static class ProductionClass {\r\n\t\tprivate final List<Integer> integerList;\r\n\t\tprivate final List<String> stringList;\r\n\r\n\t\tProductionClass(List<Integer> integerList, List<String>  stringList) {\r\n\t\t\tthis.integerList = integerList;\r\n\t\t\tthis.stringList = stringList;\r\n\t\t\tSystem.out.println(integerList);\r\n\t\t\tSystem.out.println(stringList);\r\n\t\t}\r\n\r\n\t\tvoid perform() {\r\n\t\t\tint i = integerList.get(0);\r\n\t\t\tString s = stringList.get(0);\r\n\t\t}\r\n\t}\r\n\r\n\t@Mock\r\n\tList<Integer> integerList;\r\n\r\n\t@Mock\r\n\tList<String> stringList;\r\n\r\n\t@InjectMocks\r\n\tProductionClass productionClass;\r\n\r\n\t@Test\r\n\tvoid test() {\r\n\t\twhen(integerList.get(0)).thenReturn(0);\r\n\t\twhen(stringList.get(0)).thenReturn(\"a\");\r\n\t\tproductionClass.perform();\r\n\t}\r\n}\r\n```\r\n\r\nIt shows on stdout that the same instance is used for both parameters:\r\n```\r\nstringList\r\nstringList\r\n```\r\n\r\nThe test then fails with the following error:\r\n```\r\njava.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer\r\n\tat MockitoTwoGenericMocksTest$ProductionClass.perform(MockitoTwoGenericMocksTest.java:28)\r\n\tat MockitoTwoGenericMocksTest.test(MockitoTwoGenericMocksTest.java:46)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)\r\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\r\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\r\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:212)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:208)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1257)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1257)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:99)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:79)\r\n\tat org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:75)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\n\tat com.sun.proxy.$Proxy2.stop(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:132)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:412)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nAny chance to add support for this?\r\n\r\nI am using the following versions:\r\n```groovy\r\ntestCompile \"org.mockito:mockito-core:3.3.3\" \r\ntestCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'\r\ntestImplementation('org.junit.jupiter:junit-jupiter:5.6.2')\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1917/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1917/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1916","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1916/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1916/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1916/events","html_url":"https://github.com/mockito/mockito/issues/1916","id":604528949,"node_id":"MDU6SXNzdWU2MDQ1Mjg5NDk=","number":1916,"title":"Mockito failed to run on Windows 10 with OpenJDK v11","user":{"login":"rayintuit","id":3663147,"node_id":"MDQ6VXNlcjM2NjMxNDc=","avatar_url":"https://avatars.githubusercontent.com/u/3663147?v=4","gravatar_id":"","url":"https://api.github.com/users/rayintuit","html_url":"https://github.com/rayintuit","followers_url":"https://api.github.com/users/rayintuit/followers","following_url":"https://api.github.com/users/rayintuit/following{/other_user}","gists_url":"https://api.github.com/users/rayintuit/gists{/gist_id}","starred_url":"https://api.github.com/users/rayintuit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rayintuit/subscriptions","organizations_url":"https://api.github.com/users/rayintuit/orgs","repos_url":"https://api.github.com/users/rayintuit/repos","events_url":"https://api.github.com/users/rayintuit/events{/privacy}","received_events_url":"https://api.github.com/users/rayintuit/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-04-22T07:39:10Z","updated_at":"2020-05-08T20:40:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Here is the error we run into.  Any suggestion to fix the issue would be greatly appreciated:\r\n\r\nCaused by: org.mockito.exceptions.base.MockitoInitializationException: \r\nCould not initialize inline Byte Buddy mock maker. (This mock maker is not supported on Android.)\r\nJava               : 11\r\nJVM vendor name    : Amazon.com Inc.\r\nJVM vendor version : 11.0.6+10-LTS\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 11.0.6+10-LTS\r\nJVM info           : mixed mode\r\nOS name            : Windows 10\r\nOS version         : 10.0\r\n\r\n-----------------------------------Exception Stack--------------------------------------------------\r\n```\r\njava.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:74)\r\n\tat com.sun.proxy.$Proxy44.isTypeMockable(Unknown Source)\r\n\tat org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:29)\r\n\tat org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:238)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:226)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:68)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1896)\r\n\tat org.springframework.boot.test.mock.mockito.MockDefinition.createMock(MockDefinition.java:153)\r\n\tat org.springframework.boot.test.mock.mockito.MockitoPostProcessor.registerMock(MockitoPostProcessor.java:186)\r\n\tat org.springframework.boot.test.mock.mockito.MockitoPostProcessor.register(MockitoPostProcessor.java:168)\r\n\tat org.springframework.boot.test.mock.mockito.MockitoPostProcessor.postProcessBeanFactory(MockitoPostProcessor.java:142)\r\n\tat org.springframework.boot.test.mock.mockito.MockitoPostProcessor.postProcessBeanFactory(MockitoPostProcessor.java:130)\r\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:286)\r\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:174)\r\n\tat org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:705)\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:531)\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:744)\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:391)\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:312)\r\n\tat org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:120)\r\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)\r\n\tat org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)\r\n\tat org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)\r\n\tat org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)\r\n\tat org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)\r\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)\r\n\tat org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:352)\r\n\tat org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:204)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$7(ClassTestDescriptor.java:352)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)\r\n\tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:351)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstancesProvider$2(ClassTestDescriptor.java:259)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstancesProvider$3(ClassTestDescriptor.java:263)\r\n\tat java.base/java.util.Optional.orElseGet(Optional.java:369)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstancesProvider$4(ClassTestDescriptor.java:262)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:97)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$0(NodeTestTask.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:69)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)\r\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)\r\nCaused by: java.lang.IllegalStateException: Failed to load interface org.mockito.plugins.MockMaker implementation declared in java.lang.CompoundEnumeration@3fe5ad73\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:54)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:57)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:44)\r\n\tat org.mockito.internal.configuration.plugins.PluginRegistry.<init>(PluginRegistry.java:21)\r\n\tat org.mockito.internal.configuration.plugins.Plugins.<clinit>(Plugins.java:18)\r\n\tat org.mockito.internal.configuration.GlobalConfiguration.tryGetPluginAnnotationEngine(GlobalConfiguration.java:55)\r\n\tat org.mockito.MockitoAnnotations.initMocks(MockitoAnnotations.java:68)\r\n\tat org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.initMocks(MockitoTestExecutionListener.java:68)\r\n\tat org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:53)\r\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)\r\n\tat org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:352)\r\n\tat org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:204)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$7(ClassTestDescriptor.java:352)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)\r\n\tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:351)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstancesProvider$2(ClassTestDescriptor.java:259)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstancesProvider$3(ClassTestDescriptor.java:263)\r\n\tat java.base/java.util.Optional.orElseGet(Optional.java:369)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstancesProvider$4(ClassTestDescriptor.java:262)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:97)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$0(NodeTestTask.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:69)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask$DefaultDynamicTestExecutor.execute(NodeTestTask.java:157)\r\n\tat org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:136)\r\n\tat org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.lambda$execute$2(TestTemplateTestDescriptor.java:104)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\r\n\tat java.base/java.util.stream.ReferencePipeline$11$1.accept(ReferencePipeline.java:442)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n\tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\r\n\tat org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:104)\r\n\tat org.junit.jupiter.engine.descriptor.TestTemplateTestDescriptor.execute(TestTemplateTestDescriptor.java:40)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:108)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)\r\n\t... 26 common frames omitted\r\nCaused by: org.mockito.exceptions.base.MockitoInitializationException: \r\nCould not initialize inline Byte Buddy mock maker. (This mock maker is not supported on Android.)\r\nJava               : 11\r\nJVM vendor name    : Amazon.com Inc.\r\nJVM vendor version : 11.0.6+10-LTS\r\nJVM name           : OpenJDK 64-Bit Server VM\r\nJVM version        : 11.0.6+10-LTS\r\nJVM info           : mixed mode\r\nOS name            : Windows 10\r\nOS version         : 10.0\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.<init>(InlineByteBuddyMockMaker.java:171)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat java.base/java.lang.Class.newInstance(Class.java:584)\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:49)\r\n\t... 115 common frames omitted\r\nCaused by: java.lang.IllegalStateException: Could not self-attach to current VM using external process\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.installExternal(ByteBuddyAgent.java:670)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:601)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:581)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:533)\r\n\tat net.bytebuddy.agent.ByteBuddyAgent.install(ByteBuddyAgent.java:510)\r\n\tat org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.<clinit>(InlineByteBuddyMockMaker.java:101)\r\n\t... 121 common frames omitted\r\n```","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1916/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1916/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1915","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1915/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1915/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1915/events","html_url":"https://github.com/mockito/mockito/issues/1915","id":603599615,"node_id":"MDU6SXNzdWU2MDM1OTk2MTU=","number":1915,"title":"@ExtendWith(MockitoExtension.class) does not support @Spy constructor injection.","user":{"login":"noel-yap","id":1414385,"node_id":"MDQ6VXNlcjE0MTQzODU=","avatar_url":"https://avatars.githubusercontent.com/u/1414385?v=4","gravatar_id":"","url":"https://api.github.com/users/noel-yap","html_url":"https://github.com/noel-yap","followers_url":"https://api.github.com/users/noel-yap/followers","following_url":"https://api.github.com/users/noel-yap/following{/other_user}","gists_url":"https://api.github.com/users/noel-yap/gists{/gist_id}","starred_url":"https://api.github.com/users/noel-yap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/noel-yap/subscriptions","organizations_url":"https://api.github.com/users/noel-yap/orgs","repos_url":"https://api.github.com/users/noel-yap/repos","events_url":"https://api.github.com/users/noel-yap/events{/privacy}","received_events_url":"https://api.github.com/users/noel-yap/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-04-20T23:26:27Z","updated_at":"2020-04-20T23:27:06Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":" - [ ] The problematic code (if that's possible) is copied here;\r\n\r\n```java\r\n    public class ExampleTest {\r\n      private final List listSpy;\r\n\r\n      public ExampleTest(@Spy final List listSpy) {\r\n        this.listSpy = listSpy;\r\n      }\r\n    }\r\n```\r\n\r\n - [ ] Provide versions (mockito / jdk / os / any other relevant information)\r\n\r\nmockito-3.3.3\r\nopenjdk version \"1.8.0_232\"\r\nOpenJDK Runtime Environment (Zulu 8.42.0.23-CA-linux64) (build 1.8.0_232-b18)\r\nOpenJDK 64-Bit Server VM (Zulu 8.42.0.23-CA-linux64) (build 25.232-b18, mixed mode)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1915/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1915/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1912","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1912/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1912/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1912/events","html_url":"https://github.com/mockito/mockito/issues/1912","id":602514814,"node_id":"MDU6SXNzdWU2MDI1MTQ4MTQ=","number":1912,"title":"Different mocks are used for @Mock and @InjectMock in the same test class with JUnit 5 extension when using `SpringExtension.class` along with `MockitoExtension.class`","user":{"login":"karthikairam","id":10527779,"node_id":"MDQ6VXNlcjEwNTI3Nzc5","avatar_url":"https://avatars.githubusercontent.com/u/10527779?v=4","gravatar_id":"","url":"https://api.github.com/users/karthikairam","html_url":"https://github.com/karthikairam","followers_url":"https://api.github.com/users/karthikairam/followers","following_url":"https://api.github.com/users/karthikairam/following{/other_user}","gists_url":"https://api.github.com/users/karthikairam/gists{/gist_id}","starred_url":"https://api.github.com/users/karthikairam/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/karthikairam/subscriptions","organizations_url":"https://api.github.com/users/karthikairam/orgs","repos_url":"https://api.github.com/users/karthikairam/repos","events_url":"https://api.github.com/users/karthikairam/events{/privacy}","received_events_url":"https://api.github.com/users/karthikairam/received_events","type":"User","site_admin":false},"labels":[{"id":532126464,"node_id":"MDU6TGFiZWw1MzIxMjY0NjQ=","url":"https://api.github.com/repos/mockito/mockito/labels/please%20contribute","name":"please contribute","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-04-18T17:54:36Z","updated_at":"2020-05-20T13:43:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"> I'm seeing this same bug when using `SpringExtension.class` along with `MockitoExtension.class`:\r\n> \r\n> ```\r\n> @ExtendWith({MockitoExtension.class, SpringExtension.class})\r\n> public class InjectMocksTest {\r\n>   static class TacticalStation {}\r\n> \r\n>   static class SpaceShip {\r\n>     private final TacticalStation tacticalStation;\r\n> \r\n>     public SpaceShip(final TacticalStation tacticalStation) {\r\n>       this.tacticalStation = tacticalStation;\r\n>     }\r\n> \r\n>     public TacticalStation getTacticalStation() {\r\n>       return tacticalStation;\r\n>     }\r\n>   }\r\n> \r\n>   @InjectMocks\r\n>   private SpaceShip spaceShip;\r\n> \r\n>   @Mock\r\n>   private TacticalStation tacticalStation;\r\n> \r\n>   @Test\r\n>   public void shouldInjectMocks() {\r\n>     assertThat(tacticalStation).isNotNull();\r\n>     assertThat(spaceShip.getTacticalStation()).isEqualTo(tacticalStation);\r\n>     //Bug ↑ - different mocks are use in @Mock and @InjectMock\r\n>   }\r\n> }\r\n> ```\r\n> \r\n> This is using Mockito 3.1.0, JUnit 5.6.0, and Spring Boot 5.3.0.RELEASE.\r\n\r\nYes I am also facing this issue. Mine is also exactly the same scenario. Below are my dependencies,\r\norg.junit.jupiter:junit-jupiter-engine:5.6.0\r\norg.springframework.boot:spring-boot-starter:2.2.6.RELEASE\r\norg.springframework.boot:spring-boot-starter-test:2.2.6.RELEASE\r\norg.mockito:mockito-junit-jupiter:3.1.0\r\n\r\n_Originally posted by @karthikaiselvan in https://github.com/mockito/mockito/issues/1346#issuecomment-615879855_","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1912/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1912/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1904","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1904/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1904/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1904/events","html_url":"https://github.com/mockito/mockito/issues/1904","id":598150434,"node_id":"MDU6SXNzdWU1OTgxNTA0MzQ=","number":1904,"title":"Flexible ordering between some calls, strict ordering relative to others","user":{"login":"mjustin","id":1580571,"node_id":"MDQ6VXNlcjE1ODA1NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1580571?v=4","gravatar_id":"","url":"https://api.github.com/users/mjustin","html_url":"https://github.com/mjustin","followers_url":"https://api.github.com/users/mjustin/followers","following_url":"https://api.github.com/users/mjustin/following{/other_user}","gists_url":"https://api.github.com/users/mjustin/gists{/gist_id}","starred_url":"https://api.github.com/users/mjustin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjustin/subscriptions","organizations_url":"https://api.github.com/users/mjustin/orgs","repos_url":"https://api.github.com/users/mjustin/repos","events_url":"https://api.github.com/users/mjustin/events{/privacy}","received_events_url":"https://api.github.com/users/mjustin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-04-11T00:17:14Z","updated_at":"2020-10-09T17:19:58Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have some code that performs some work in sequence, then performs several additional operations, and then performs some more work in sequence.  I want the additional operations to happen in the middle, but I don't care how they are ordered relative to each other.  I wouldn't want parallelizing or refactoring the code to break the test.\r\n\r\n[This Stack Overflow post](https://stackoverflow.com/q/61149975/1108305) explains the problem further, though it has additional requirements which are outside the scope of this feature request.\r\n\r\nI can use [`InOrder`](https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/InOrder.html) to verify a strict order of work among all the calls.  What a single `InOrder` does not buy me is the ability to ignore the ordering between the nonsequential work.\r\n\r\n```java\r\npublic interface MockedClass {\r\n    void initialMethodOne();\r\n    void initialMethodTwo();\r\n    void unorderedMethodOne();\r\n    void unorderedMethodTwo();\r\n    void finalMethodOne();\r\n    void finalMethodTwo();\r\n}\r\n```\r\n\r\n```java\r\npublic class InOrderExample {\r\n    private MockedClass mockedClass;\r\n\r\n    public InOrderExample(MockedClass mockedClass) {\r\n        this.mockedClass = mockedClass;\r\n    }\r\n\r\n    public void doOrderedAndUnorderedWork() {\r\n        mockedClass.initialMethodOne();\r\n        mockedClass.initialMethodTwo();\r\n\r\n        // Test should fail if either of these two methods are called out of order relative to the initial two or final two methods\r\n        // I don't want my test to fail if these two methods are called in reverse order\r\n        mockedClass.unorderedMethodOne();\r\n        mockedClass.unorderedMethodTwo();\r\n\r\n        mockedClass.finalMethodOne();\r\n        mockedClass.finalMethodTwo();\r\n    }\r\n}\r\n```\r\n\r\n```java\r\nimport org.junit.Test;\r\nimport org.mockito.InOrder;\r\n\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class InOrderExampleTest {\r\n    @Test\r\n    public void verifyOrderedAndUnordered() {\r\n        MockedClass mockedClass = mock(MockedClass.class);\r\n\r\n        new InOrderExample(mockedClass).doOrderedAndUnorderedWork();\r\n\r\n        InOrder inOrder = inOrder(mockedClass);\r\n        inOrder.verify(mockedClass).initialMethodOne();\r\n        inOrder.verify(mockedClass).initialMethodTwo();\r\n        inOrder1.verify(mockedClass).unorderedMethodOne();\r\n        inOrder2.verify(mockedClass).unorderedMethodTwo();\r\n        inOrder.verify(mockedClass).finalMethodOne();\r\n        inOrder.verify(mockedClass).finalMethodTwo();\r\n    }\r\n}\r\n```\r\n\r\nOne thing I have discovered that I don't see documented anywhere is that I can use multiple `InOrder` objects to verify different orderings on the same calls.  So if I don't mind enumerating every possible valid relative ordering relative to the sequential work, I can achieve this using multiple `InOrder` objects:\r\n\r\n```java\r\nimport org.junit.Test;\r\nimport org.mockito.InOrder;\r\n\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class InOrderExampleTest {\r\n    @Test\r\n    public void verifyOrderedAndUnordered() {\r\n        MockedClass mockedClass = mock(MockedClass.class);\r\n\r\n        new InOrderExample(mockedClass).doOrderedAndUnorderedWork();\r\n\r\n        // Verify the strictly sequential portion\r\n        InOrder inOrder = inOrder(mockedClass);\r\n        inOrder.verify(mockedClass).initialMethodOne();\r\n        inOrder.verify(mockedClass).initialMethodTwo();\r\n        inOrder.verify(mockedClass).finalMethodOne();\r\n        inOrder.verify(mockedClass).finalMethodTwo();\r\n\r\n        // Verify the first call is executed in the right order relative to the sequential portion\r\n        InOrder inOrder1 = inOrder(mockedClass);\r\n        inOrder1.verify(mockedClass).initialMethodTwo();\r\n        inOrder1.verify(mockedClass).unorderedMethodOne();\r\n        inOrder1.verify(mockedClass).finalMethodOne();\r\n\r\n        // Verify the second call is executed in the right order relative to the sequential portion\r\n        InOrder inOrder2 = inOrder(mockedClass);\r\n        inOrder2.verify(mockedClass).initialMethodTwo();\r\n        inOrder2.verify(mockedClass).unorderedMethodTwo();\r\n        inOrder2.verify(mockedClass).finalMethodOne();\r\n    }\r\n}\r\n```\r\n\r\nThis request is for a way of verifying an ordering where part of the ordering is less strict.  i.e. A -> B -> (C, D, E) in any order -> F -> G.\r\n\r\nAdditionally, it is unclear to me if `InOrder` is intended to be used in the manner I'm using it in my workaround, with multiple `InOrder` objects on the same checks, or whether it just happens to work currently.  It probably wouldn't be a bad idea to document this behavior if it's intentional, regardless of whether it is decided that enhancing the ordering is desirable.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1904/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1903","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1903/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1903/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1903/events","html_url":"https://github.com/mockito/mockito/issues/1903","id":598138153,"node_id":"MDU6SXNzdWU1OTgxMzgxNTM=","number":1903,"title":"Verify that a call happened after the completion of a concurrent call","user":{"login":"mjustin","id":1580571,"node_id":"MDQ6VXNlcjE1ODA1NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1580571?v=4","gravatar_id":"","url":"https://api.github.com/users/mjustin","html_url":"https://github.com/mjustin","followers_url":"https://api.github.com/users/mjustin/followers","following_url":"https://api.github.com/users/mjustin/following{/other_user}","gists_url":"https://api.github.com/users/mjustin/gists{/gist_id}","starred_url":"https://api.github.com/users/mjustin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjustin/subscriptions","organizations_url":"https://api.github.com/users/mjustin/orgs","repos_url":"https://api.github.com/users/mjustin/repos","events_url":"https://api.github.com/users/mjustin/events{/privacy}","received_events_url":"https://api.github.com/users/mjustin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-04-10T23:24:50Z","updated_at":"2020-10-09T17:13:41Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I have some code that performs some work in sequence, performs an operation in a separate thread, and then performs some more work in sequence once the parallel work is complete.  I would like to be able to verify that the final bit of work happened after the threaded work completed.\r\n\r\n[This Stack Overflow post](https://stackoverflow.com/q/61149975/1108305) explains the problem further, though it has the additional requirement of not caring about the relative order of the parallel work which is outside the scope of this feature request.\r\n\r\n```java\r\npublic interface MockedClass {\r\n    void initialMethod();\r\n    void threadedMethod();\r\n    void finalMethod();\r\n}\r\n```\r\n\r\n```java\r\npublic class InOrderExample {\r\n    private MockedClass mockedClass;\r\n\r\n    public InOrderExample(MockedClass mockedClass) {\r\n        this.mockedClass = mockedClass;\r\n    }\r\n\r\n    public void doOrderedAndThreadedWork() {\r\n        mockedClass.initialMethod();\r\n        CompletableFuture.runAsync(mockedClass::threadedMethod).join();\r\n        mockedClass.finalMethod();\r\n    }\r\n}\r\n```\r\n\r\n```java\r\nimport org.junit.Test;\r\nimport org.mockito.InOrder;\r\n\r\nimport static org.mockito.AdditionalAnswers.answersWithDelay;\r\nimport static org.mockito.Mockito.*;\r\n\r\npublic class InOrderExampleTest {\r\n    @Test\r\n    public void doOrderedAndThreadedWork() {\r\n        MockedClass mockedClass = mock(MockedClass.class);\r\n\r\n        doAnswer(answersWithDelay(200, invocation -> null)).when(mockedClass).threadedMethod();\r\n\r\n        new InOrderExample(mockedClass).doOrderedAndThreadedWork();\r\n\r\n        InOrder inOrder = inOrder(mockedClass);\r\n\r\n        inOrder.verify(mockedClass).initialMethod();\r\n        inOrder.verify(mockedClass).threadedMethod();\r\n        inOrder.verify(mockedClass).finalMethod(); // Want to pass only if this is called after threadedMethod completes\r\n    }\r\n}\r\n```\r\n\r\nThis example should fail if the `.join()` call were removed, since the 200 ms delay on completing `CompletableFuture.runAsync(mockedClass::threadedMethod)` should take long enough to run that `mockedClass.finalMethod()` will be called before it completes.\r\n\r\nI have the following workaround for now:\r\n\r\n```java\r\n@Test\r\npublic void doOrderedAndThreadedWork() {\r\n    MockedClass mockedClass = mock(MockedClass.class);\r\n    CheckComplete methodComplete = mock(CheckComplete.class);\r\n\r\n    doAnswer(answersWithDelay(200, invocation -> {methodComplete.complete(); return null;}))\r\n            .when(mockedClass).threadedMethod();\r\n\r\n    new InOrderExample(mockedClass).doOrderedAndThreadedWork();\r\n\r\n    InOrder inOrder = inOrder(mockedClass);\r\n\r\n    inOrder.verify(mockedClass).initialMethod();\r\n    inOrder.verify(methodComplete).complete();\r\n    inOrder.verify(mockedClass).finalMethod();\r\n}\r\n\r\nprivate interface CheckComplete {\r\n    void complete();\r\n}\r\n```\r\n\r\nThis request is for a first-class way of verifying that a method happened after another method completes, rather than merely after the method was called.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1903/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1902","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1902/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1902/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1902/events","html_url":"https://github.com/mockito/mockito/issues/1902","id":597148441,"node_id":"MDU6SXNzdWU1OTcxNDg0NDE=","number":1902,"title":"`clearInlineMocks` not working with `MockitoJUnit.rule()`","user":{"login":"melihaksoy","id":7406737,"node_id":"MDQ6VXNlcjc0MDY3Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/7406737?v=4","gravatar_id":"","url":"https://api.github.com/users/melihaksoy","html_url":"https://github.com/melihaksoy","followers_url":"https://api.github.com/users/melihaksoy/followers","following_url":"https://api.github.com/users/melihaksoy/following{/other_user}","gists_url":"https://api.github.com/users/melihaksoy/gists{/gist_id}","starred_url":"https://api.github.com/users/melihaksoy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/melihaksoy/subscriptions","organizations_url":"https://api.github.com/users/melihaksoy/orgs","repos_url":"https://api.github.com/users/melihaksoy/repos","events_url":"https://api.github.com/users/melihaksoy/events{/privacy}","received_events_url":"https://api.github.com/users/melihaksoy/received_events","type":"User","site_admin":false},"labels":[{"id":532126464,"node_id":"MDU6TGFiZWw1MzIxMjY0NjQ=","url":"https://api.github.com/repos/mockito/mockito/labels/please%20contribute","name":"please contribute","color":"0e8a16","default":false,"description":null}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-04-09T09:27:26Z","updated_at":"2020-11-18T08:31:34Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi !\r\n\r\nI recenlty updated to `2.25.0` to make use of `clearInlineMocks` but I end up with `NotAMockException` when I use it in combination with `MockitoJUnit.rule()`.\r\n\r\nEg\r\n\r\n```\r\nclass ExampleUnitTest {\r\n\r\n    @get:Rule\r\n    val mockitoRule: MockitoRule = MockitoJUnit.rule()\r\n\r\n    @Mock\r\n    lateinit var state: MainState\r\n\r\n    @After\r\n    fun clearMocks() {\r\n        Mockito.framework().clearInlineMocks()\r\n    }\r\n\r\n    @Test\r\n    fun randomTest() {\r\n\t\tstate.something\r\n\t\tMockito.verify(state).something\r\n    }\r\n}\r\n```\r\n\r\nends up with\r\n\r\n```\r\norg.mockito.exceptions.misusing.NotAMockException: Argument passed to Mockito.mockingDetails() should be a mock, but is an instance of class com.melih.playground.ui.main.state.MainState!\r\n\r\n\tat org.mockito.internal.junit.JUnitRule$1.evaluate(JUnitRule.java:49)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\r\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\r\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\r\n```\r\n\r\nand tests fail.\r\n\r\nIf I use `@RunWith(MockitoJUnitRunner::class)` tests pass, but I still get same exception at end of run.\r\n\r\nIf I remove rule & use `MockitoAnnotations.initMocks(this)` everything works fine.","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1902/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1902/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1900","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1900/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1900/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1900/events","html_url":"https://github.com/mockito/mockito/issues/1900","id":595503796,"node_id":"MDU6SXNzdWU1OTU1MDM3OTY=","number":1900,"title":"Configure mocks for annotation interfaces with default values from annotation","user":{"login":"ghenzler","id":2581491,"node_id":"MDQ6VXNlcjI1ODE0OTE=","avatar_url":"https://avatars.githubusercontent.com/u/2581491?v=4","gravatar_id":"","url":"https://api.github.com/users/ghenzler","html_url":"https://github.com/ghenzler","followers_url":"https://api.github.com/users/ghenzler/followers","following_url":"https://api.github.com/users/ghenzler/following{/other_user}","gists_url":"https://api.github.com/users/ghenzler/gists{/gist_id}","starred_url":"https://api.github.com/users/ghenzler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ghenzler/subscriptions","organizations_url":"https://api.github.com/users/ghenzler/orgs","repos_url":"https://api.github.com/users/ghenzler/repos","events_url":"https://api.github.com/users/ghenzler/events{/privacy}","received_events_url":"https://api.github.com/users/ghenzler/received_events","type":"User","site_admin":false},"labels":[{"id":16375485,"node_id":"MDU6TGFiZWwxNjM3NTQ4NQ==","url":"https://api.github.com/repos/mockito/mockito/labels/enhancement","name":"enhancement","color":"207de5","default":true,"description":null},{"id":707576530,"node_id":"MDU6TGFiZWw3MDc1NzY1MzA=","url":"https://api.github.com/repos/mockito/mockito/labels/framework%20integrations","name":"framework integrations","color":"f9d0c4","default":false,"description":null},{"id":1091618604,"node_id":"MDU6TGFiZWwxMDkxNjE4NjA0","url":"https://api.github.com/repos/mockito/mockito/labels/injection","name":"injection","color":"a02031","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-04-07T00:10:42Z","updated_at":"2021-05-20T16:49:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"`Mockito.mock()` can quite conveniently be used to not only create instances of interfaces, but also to create instances of [annotation interfaces](https://docs.oracle.com/javase/tutorial/java/annotations/declaring.html). Although normally those instances are created by using the annotations in source code (and subsequently using `class.getAnnotations()`, often in framework code) there are some use cases where the annotation instances are created by a framework - in particular this is the case for the OSGi Metatype Service (see https://osgi.org/specification/osgi.cmpn/7.0.0/service.metatype.html#d0e17824 for details). For this use case,  a mock for an annotation interface should be automatically set up to return the annotation-defined default values.\r\n\r\nThe following JUnit Tests illustrates what is needed:\r\n\r\n```\r\npublic @interface AnnotationInterface {\r\n    String strAttWithDefault() default \"default\";\r\n    String strAttWithoutDefault();\r\n    String[] strArrAtt() default { \"default1\", \"default2\" };\r\n    int intAtt() default 1;\r\n    long longAtt() default 2L;\r\n}\r\n\r\n@Mock\r\nAnnotationInterface mockedAnnotationInterface;\r\n\r\n@Test\r\npublic void shouldMockDefaultValuesFromAnnoationInterface() throws Exception {\r\n    // no further action should be needed to have the default values returned\r\n    assertEquals(\"default\", mockedAnnotationInterface.strAttWithDefault());\r\n    assertNull(mockedAnnotationInterface.strAttWithoutDefault());\r\n    assertArrayEquals(new String[] { \"default1\", \"default2\" }, mockedAnnotationInterface.strArrAtt());\r\n    assertArrayEquals(new String[] { \"default1\", \"default2\" }, mockedAnnotationInterface.strArrAtt());\r\n    assertEquals(1, mockedAnnotationInterface.intAtt());\r\n    assertEquals(2L, mockedAnnotationInterface.longAtt());\r\n}\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1900/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1900/timeline","performed_via_github_app":null},{"url":"https://api.github.com/repos/mockito/mockito/issues/1899","repository_url":"https://api.github.com/repos/mockito/mockito","labels_url":"https://api.github.com/repos/mockito/mockito/issues/1899/labels{/name}","comments_url":"https://api.github.com/repos/mockito/mockito/issues/1899/comments","events_url":"https://api.github.com/repos/mockito/mockito/issues/1899/events","html_url":"https://github.com/mockito/mockito/issues/1899","id":592642428,"node_id":"MDU6SXNzdWU1OTI2NDI0Mjg=","number":1899,"title":"Issue with initializing inline Byte Buddy mock maker on IBM java","user":{"login":"RadoslavGavrailov","id":63056031,"node_id":"MDQ6VXNlcjYzMDU2MDMx","avatar_url":"https://avatars.githubusercontent.com/u/63056031?v=4","gravatar_id":"","url":"https://api.github.com/users/RadoslavGavrailov","html_url":"https://github.com/RadoslavGavrailov","followers_url":"https://api.github.com/users/RadoslavGavrailov/followers","following_url":"https://api.github.com/users/RadoslavGavrailov/following{/other_user}","gists_url":"https://api.github.com/users/RadoslavGavrailov/gists{/gist_id}","starred_url":"https://api.github.com/users/RadoslavGavrailov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RadoslavGavrailov/subscriptions","organizations_url":"https://api.github.com/users/RadoslavGavrailov/orgs","repos_url":"https://api.github.com/users/RadoslavGavrailov/repos","events_url":"https://api.github.com/users/RadoslavGavrailov/events{/privacy}","received_events_url":"https://api.github.com/users/RadoslavGavrailov/received_events","type":"User","site_admin":false},"labels":[{"id":477008387,"node_id":"MDU6TGFiZWw0NzcwMDgzODc=","url":"https://api.github.com/repos/mockito/mockito/labels/awaiting%20response","name":"awaiting response","color":"fad8c7","default":false,"description":null}],"state":"open","locked":false,"assignee":{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false},"assignees":[{"login":"raphw","id":4489328,"node_id":"MDQ6VXNlcjQ0ODkzMjg=","avatar_url":"https://avatars.githubusercontent.com/u/4489328?v=4","gravatar_id":"","url":"https://api.github.com/users/raphw","html_url":"https://github.com/raphw","followers_url":"https://api.github.com/users/raphw/followers","following_url":"https://api.github.com/users/raphw/following{/other_user}","gists_url":"https://api.github.com/users/raphw/gists{/gist_id}","starred_url":"https://api.github.com/users/raphw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raphw/subscriptions","organizations_url":"https://api.github.com/users/raphw/orgs","repos_url":"https://api.github.com/users/raphw/repos","events_url":"https://api.github.com/users/raphw/events{/privacy}","received_events_url":"https://api.github.com/users/raphw/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2020-04-02T13:42:10Z","updated_at":"2020-06-19T20:41:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hey,\r\n\r\nwe've recently encountered an issue in one of our tests using mocks when executed with IBM java.\r\n\r\nJava               : 1.8\r\nJVM vendor name    : IBM Corporation\r\nJVM vendor version : 2.9\r\nJVM name           : IBM J9 VM\r\nJVM version        : 8.0.6.6 - pxz6480sr6fp6-20200303_01(SR6 FP6)\r\nJVM info           : JRE 1.8.0 Linux s390x-64-Bit Compressed References 20200124_438197 (JIT enabled, AOT enabled)\r\nOpenJ9   - 6754bf2\r\nOMR      - dca2cde\r\nIBM      - 5cc5f54\r\nOS name            : Linux\r\nOS version         : 3.10.0-1062.18.1.el7.s390x\r\n\r\nThe issue we faced is : \r\n\r\n> java.lang.RuntimeException: Invoking the beforeTestMethod method on PowerMock test listener org.powermock.api.extension.listener.AnnotationEnabler@2f6ccf22 failed.\r\n\tat org.powermock.tests.utils.impl.PowerMockTestNotifierImpl.notifyBeforeTestMethod(PowerMockTestNotifierImpl.java:84)\r\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:308)\r\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.executeTestInSuper(PowerMockJUnit47RunnerDelegateImpl.java:131)\r\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner.access$100(PowerMockJUnit47RunnerDelegateImpl.java:59)\r\n\tat org.powermock.modules.junit4.internal.impl.PowerMockJUnit47RunnerDelegateImpl$PowerMockJUnit47MethodRunner$TestExecutorStatement.evaluate(PowerMockJUnit47RunnerDelegateImpl.java:147)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:277)\r\n\tat java.lang.Thread.run(Thread.java:820)\r\nCaused by: java.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:74)\r\n\tat com.sun.proxy.$Proxy20.isTypeMockable(Unknown Source)\r\n\tat org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:29)\r\n\tat org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:238)\r\n\tat org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:226)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:68)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1895)\r\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMethodInvocationControl(DefaultMockCreator.java:108)\r\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.doCreateMock(DefaultMockCreator.java:61)\r\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.createMock(DefaultMockCreator.java:53)\r\n\tat org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator.mock(DefaultMockCreator.java:40)\r\n\tat org.powermock.api.mockito.PowerMockito.mock(PowerMockito.java:181)\r\n\tat org.powermock.api.extension.listener.AnnotationEnabler.standardInject(AnnotationEnabler.java:98)\r\n\tat org.powermock.api.extension.listener.AnnotationEnabler.beforeTestMethod(AnnotationEnabler.java:55)\r\n\tat org.powermock.tests.utils.impl.PowerMockTestNotifierImpl.notifyBeforeTestMethod(PowerMockTestNotifierImpl.java:82)\r\nCaused by: java.lang.IllegalStateException: Failed to load interface org.mockito.plugins.MockMaker implementation declared in java.lang.ClassLoader$CompoundEnumeration@81276057\r\n\tat org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:54)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:57)\r\n\tat org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:44)\r\n\tat org.mockito.internal.configuration.plugins.PluginRegistry.<init>(PluginRegistry.java:21)\r\n\tat org.mockito.internal.configuration.plugins.Plugins.<clinit>(Plugins.java:18)\r\n\tat org.mockito.internal.util.MockUtil.<clinit>(MockUtil.java:24)\r\nCaused by: org.mockito.exceptions.base.MockitoInitializationException: \r\nCould not initialize inline Byte Buddy mock maker. (This mock maker is not supported on Android.)\r\n\r\nVersion of the jars used : \r\n\r\nbyte-buddy-1.10.8.jar\r\nbyte-buddy-agent-1.10.8.jar\r\ncglib-nodep-3.2.9.jar\r\nmockito-core-2.23.0.jar\r\nobjenesis-3.0.1.jar\r\npowermock-mockito2-2.0.2-full.jar\r\n\r\nStrange is that the exception message says : This mock maker is not supported on Android.\r\n\r\nAny hints are welcomed. \r\n","reactions":{"url":"https://api.github.com/repos/mockito/mockito/issues/1899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mockito/mockito/issues/1899/timeline","performed_via_github_app":null}],"issuesCount":92,"contributors":259,"pullRequests":12,"projectUrl":"https://github.com/mockito/mockito","issuesUrl":"https://github.com/mockito/mockito/issues","stars":12286,"watchers":12286,"forks":2177,"githubLicenseName":"MIT","openIssues":320,"createdAt":"2012-10-13T20:27:12Z","updatedAt":"2021-10-15T12:09:45Z","monthsSinceUpdated":0},{"id":"java-dotenv@5.2.1","groupId":"io.github.cdimascio","artifactId":"java-dotenv","version":"5.2.1","name":"java-dotenv","description":"Use dotenv-java or dotenv-kotlin https://github.com/cdimascio/dotenv-java or https://github.com/cdimascio/dotenv-kotlin instead","licenses":{"license":{"name":"Apache License, Version 2.0","url":"https://www.apache.org/licenses/LICENSE-2.0.txt","distribution":"repo","comments":"A business-friendly OSS license"}},"github":"https://github.com/cdimascio/java-dotenv","latestVersion":"5.2.2","issues":[{"url":"https://api.github.com/repos/cdimascio/java-dotenv/issues/1","repository_url":"https://api.github.com/repos/cdimascio/java-dotenv","labels_url":"https://api.github.com/repos/cdimascio/java-dotenv/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/cdimascio/java-dotenv/issues/1/comments","events_url":"https://api.github.com/repos/cdimascio/java-dotenv/issues/1/events","html_url":"https://github.com/cdimascio/java-dotenv/issues/1","id":921902770,"node_id":"MDU6SXNzdWU5MjE5MDI3NzA=","number":1,"title":"I don't know what's happening","user":{"login":"anilovr","id":85253467,"node_id":"MDQ6VXNlcjg1MjUzNDY3","avatar_url":"https://avatars.githubusercontent.com/u/85253467?v=4","gravatar_id":"","url":"https://api.github.com/users/anilovr","html_url":"https://github.com/anilovr","followers_url":"https://api.github.com/users/anilovr/followers","following_url":"https://api.github.com/users/anilovr/following{/other_user}","gists_url":"https://api.github.com/users/anilovr/gists{/gist_id}","starred_url":"https://api.github.com/users/anilovr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anilovr/subscriptions","organizations_url":"https://api.github.com/users/anilovr/orgs","repos_url":"https://api.github.com/users/anilovr/repos","events_url":"https://api.github.com/users/anilovr/events{/privacy}","received_events_url":"https://api.github.com/users/anilovr/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-15T23:36:57Z","updated_at":"2021-06-15T23:36:57Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I've this issue with dotenv java when I try to run my code. Used to work correctly. I'm using a jar file to import the lib and I can't use gradle or maven for school reasons.\r\n\r\nException in thread \"main\" java.lang.NoClassDefFoundError: kotlin/jvm/internal/Intrinsics\r\n\tat io.github.cdimascio.dotenv.internal.DotenvReader.<init>(DotenvReader.kt)\r\n\tat io.github.cdimascio.dotenv.DotenvBuilder.load(Dotenv.kt:121)\r\n\tat io.github.cdimascio.dotenv.Dotenv$Instance.load(Dotenv.kt:32)\r\n\tat io.github.cdimascio.dotenv.Dotenv.load(Dotenv.kt)","reactions":{"url":"https://api.github.com/repos/cdimascio/java-dotenv/issues/1/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/cdimascio/java-dotenv/issues/1/timeline","performed_via_github_app":null}],"issuesCount":1,"contributors":0,"pullRequests":0,"projectUrl":"https://github.com/cdimascio/java-dotenv","issuesUrl":"https://github.com/cdimascio/java-dotenv/issues","stars":10,"watchers":10,"forks":1,"openIssues":2,"createdAt":"2020-09-19T20:50:58Z","updatedAt":"2021-10-05T03:30:24Z","monthsSinceUpdated":0}],"licenses":["Apache-2.0","NOASSERTION","EPL-1.0","MIT"]},"date":"2021-10-15T17:53:29.765Z"}